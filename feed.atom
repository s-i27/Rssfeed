<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://s-i27.github.io/Rssfeed/index.html</id>
    <title>osmos::feed</title>
    <updated>2023-12-02T01:14:43.660Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="https://s-i27.github.io/Rssfeed/index.html"/>
    <link rel="self" href="https://s-i27.github.io/Rssfeed/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[FastAPI ①]]></title>
        <id>https://zenn.dev/kentakudo/articles/a6080fa9d10086</id>
        <link href="https://zenn.dev/kentakudo/articles/a6080fa9d10086"/>
        <updated>2023-12-02T00:41:40.000Z</updated>
        <summary type="html"><![CDATA[PythonのWebフレームワークといえばDjangoやflaskが有名だが、最近FastAPIというフレームワークをよく聞くので少し触ってみようと思う。

 Fast API とは
名前にもある通り、パフォーマンスの良さを売りにした、Python3.7以上をターゲットにしたWeb APIを開発するためのフレームワーク。
元々PythonにはWSGI(ウィスキー) という、WebサーバーとWebアプリケーションの間のインターフェイスを定義した仕様が存在したが、非同期処理にも対応したASGIという仕様が2019年ごろに策定され、その仕様に従ったWebサーバー実装であるUvicornと、AS...]]></summary>
        <author>
            <name>Kenta Kudo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[LangChain の新記法「LangChain Expression Language (LCEL)」入門]]></title>
        <id>https://zenn.dev/os1ma/articles/acd3472c3a6755</id>
        <link href="https://zenn.dev/os1ma/articles/acd3472c3a6755"/>
        <updated>2023-12-02T00:01:11.000Z</updated>
        <summary type="html"><![CDATA[LangChain Advent Calendar 2023 の 2 日目の記事です。

 LangChain Expression Language (LCEL) とは
LangChain Expression Language (LCEL) は、LangChain でのコードの新しい記述方法です。
公式ドキュメント: https://python.langchain.com/docs/expression_language/
LCEL ではプロンプトや LLM を | で繋げて書き、処理の連鎖 (Chain) を実装します。
2023 年 10 月後半頃から、LangChain では...]]></summary>
        <author>
            <name>oshima_123</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pyxelで入力を簡単に検知したい]]></title>
        <id>https://zenn.dev/slm/articles/2c0ff60bd7841f</id>
        <link href="https://zenn.dev/slm/articles/2c0ff60bd7841f"/>
        <updated>2023-12-01T14:38:32.000Z</updated>
        <summary type="html"><![CDATA[この記事の内容
Pythonでレトロゲーム制作ができるゲームエンジン、Pyxelで、入力検知用のクラスを作り、キー入力を簡単に管理・検出できるようにしてみたいと思います。

 サンプルプログラムではどうなっているか
Pyxelはサンプルプログラムが充実していて、コードの基本的な実例として参考になります[1]。まずは、サンプルプログラムではどのように入力を検知しているかをみてみましょう。

 入力の検知はpyxel.btnやpyxel.btnrを使う
キー入力とプレイヤーの移動については、サンプルプログラムの09_shooter.pyがすごくわかりやすいです。以下に抜粋してみます。

...]]></summary>
        <author>
            <name>SLMNLL</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[0からアプリケーション開発するならこうしたいというメモ]]></title>
        <id>https://zenn.dev/titabash/articles/48b4378fa257da</id>
        <link href="https://zenn.dev/titabash/articles/48b4378fa257da"/>
        <updated>2023-12-01T09:08:28.000Z</updated>
        <summary type="html"><![CDATA[はじめに
最近モバイルアプリケーション開発を行い、インフラからバックエンド、フロントエンドまで全て開発して色々な学びがあったため、それを踏まえて次新規サービスつくるならどうするかを整理したいと思ったので整理してみた。
個人的なメモになりますが、ぜひアドバイス等あればコメントください！

 基本方針

可能な限りコード量は節約して自社内で管理するスコープを最小限にする。

特にバックエンドのコードは必要最低限になるようにしたい
基本フロントを改修すれば良い状態にしたい


利用するコードの種類を絞ることで学習コストを減らす
ベンダーロックインされないような仕組みを目指す

外部サービス...]]></summary>
        <author>
            <name>TKNR</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kotoba-Recipes ライブラリ: 5分ではじめる Llama-2 継続学習]]></title>
        <id>https://zenn.dev/kotoba_tech/articles/202d2ff862a1db</id>
        <link href="https://zenn.dev/kotoba_tech/articles/202d2ff862a1db"/>
        <updated>2023-12-01T08:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Kotoba Technologiesでインターンをしている東京工業大学 B4 横田研究室の藤井(@okoge_kaz)です。
Kotoba Technologiesは2023年7月に米国の博士号・教授職を持った創業者2人によって日米クロスボーダー体制で創業され、最先端NLP技術を用いて、日本及び非英語圏における実運用に向けた研究開発を行っています。今回は、社内で利用されているライブラリの一部を公開したため、使用方法等について解説を行います。
Llama 2を筆頭に数多くのモデルがリリースされていますが、推論(inference)してモデルの挙動を確かめることはできても、自...]]></summary>
        <author>
            <name>Kazuki Fujii</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[みんなのKaggle 〜Everybody's Kaggle〜 #1]]></title>
        <id>https://zenn.dev/takaha4k/articles/08689347ee84c9</id>
        <link href="https://zenn.dev/takaha4k/articles/08689347ee84c9"/>
        <updated>2023-12-01T06:14:03.000Z</updated>
        <summary type="html"><![CDATA[はじめに
みんなのGOLF というゲームをご存知でしょうか。
世界中のゴルフコースを旅しながら、仲間と盛り上がる素晴らしいゲームです。
Kaggle と呼ばれるゲーム（WEBプラットフォーム）をご存知でしょうか。
世界中のデータサイエンティストたちがしのぎを削る素晴らしいゲームです。
なんとIT大手のDeNAでは、Kaggleで成果を上げた人の採用もあります。
本稿は、 「Kaggleの世界に足を踏み入れてみる。」 をテーマに書きます。
Kaggleを通して、Let's スキルアップ＆キャリアップ!

 まずはKaggleのアカウント登録
以下から、まずはKaggleのアカウントを作...]]></summary>
        <author>
            <name>takaha4k</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【データ分析】現場で活用しやすい様々な手法まとめ]]></title>
        <id>https://zenn.dev/doshirote/articles/476749a8eacfc2</id>
        <link href="https://zenn.dev/doshirote/articles/476749a8eacfc2"/>
        <updated>2023-12-01T04:43:32.000Z</updated>
        <summary type="html"><![CDATA[こんにちは投資ロウトです。

 背景
データ分析をするにあたって、粗いデータを綺麗にし、それを機械学習エンジニアの方に依頼することがあると思います。
そんな中で、何か作業依頼を受けた時に作業しやすいようにためのまとめ記事となります。

 データ分析

 データ取得
# csvにてデータを取得する
import pandas as pd

csv_data = pd.read_csv('ファイル名.csv')
# excelデータを取得する
excel_data = pd.read_excel('ファイル名.xlsx')

 データの表示
# 先頭5件の表示
df.head()
# 後ろ5...]]></summary>
        <author>
            <name>投資ロウトの技術ブログ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python100本ノック#10 クラスメソッド(classmethod)とスタティックメソッド(staticmethod)の利用例]]></title>
        <id>https://zenn.dev/willyang/articles/878bcb57222d7d</id>
        <link href="https://zenn.dev/willyang/articles/878bcb57222d7d"/>
        <updated>2023-12-01T04:12:17.000Z</updated>
        <summary type="html"><![CDATA[クラスメソッド(classmethod)とスタティックメソッド(staticmethod)の利用例

 設計
Gameクラス:
属性1：ゲーム内のトップスコア
属性2:プレイヤーの名前
メソッド1:トップスコア表示
メソッド2:ヘルプ情報表示
メソッド3:ゲームスタート

分析：
属性1はゲーム内の共通属性であるため、クラス属性``にすべき。 属性2はプレイヤーごとの属性になるため、インスタンス属性にすべき。 メソッド1:属性1を呼び出すためのものであり、classmethodにすべき。 メソッド2:インスタンス変数やクラス変数にアクセスする必要がない、独立したメソッドのため、sta...]]></summary>
        <author>
            <name>willyang</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pytorch+Polarsで高速で動作するDatasetを作る]]></title>
        <id>https://zenn.dev/wotb_pythonista/articles/c5453b6e3d4625</id>
        <link href="https://zenn.dev/wotb_pythonista/articles/c5453b6e3d4625"/>
        <updated>2023-12-01T02:19:04.000Z</updated>
        <summary type="html"><![CDATA[この記事はPolars Adbent Calendar 2023 2日目の記事です!!

 要約
Polarsにおいて行指定したイテレーション操作は非推奨なのだが、それでも圧倒的にPolarsが速いので、全人類はさっさとPolarsを使うこと。Pytorchのデータセットに使うと、pandasどころかnumpy製のものより高速で動作した。

 初めに
Polars、みなさん使っていますか？筆者はPandasから乗り換えて四苦八苦して、ドキュメントとchatGPTにおんぶだっこでヒィヒィ言いながら使っています。
現状だと例えばraw dataの前処理や、EDAで使っています。ただ普段のML...]]></summary>
        <author>
            <name>Nista( @ingenista130537 )</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[有限要素法による非時間依存2次元シュレディンガー方程式]]></title>
        <id>https://zenn.dev/lao/articles/93310d1328252e</id>
        <link href="https://zenn.dev/lao/articles/93310d1328252e"/>
        <updated>2023-12-01T01:02:07.000Z</updated>
        <summary type="html"><![CDATA[以前, 有限要素法による非時間依存1次元シュレディンガー方程式で1次元の場合を解いたので, 今回は2次元の場合を解きます.
2次元の時間に依存しないシュレディンガー方程式は

\left(-\frac{\hbar^2}{2m}\nabla^2+V(x,\,y)\right)\phi(x,\,y)=E\phi(x,\,y)

と表せます. ただし, \displaystyle\nabla^2=\frac{\partial^2}{\partial x^2}+\frac{\partial^2}{\partial y^2}です.

 計算編

 1.弱形式を求める
1次元のときと同様に弱形式を求...]]></summary>
        <author>
            <name>らお</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[これだけ押さえればいい！dask_cudfの実装方法まとめ]]></title>
        <id>https://zenn.dev/okun/articles/a08dce02a2c9b2</id>
        <link href="https://zenn.dev/okun/articles/a08dce02a2c9b2"/>
        <updated>2023-11-30T23:39:26.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは、
株式会社オークンでデータサイエンティストをやっています、nobuです。
pandasでは計算が遅すぎるので、GPU計算ライブラリのcudfを使っていました。
cudfはpandasと同じような感覚で使えて手軽にGPU計算ができるという非常に優れたライブラリなのですが、少々問題があります。
cudfでは、GPU1枚に乗るまでのデータ容量でしか計算できないのです。
そこで、dask_cudfを使ったマルチGPUでの計算を導入したところ、大容量データの計算が可能になりました！
dask_cudfは実装に少し癖があり、導入にかなり苦労したのですが、
今回はこれだけ押さ...]]></summary>
        <author>
            <name>t_nobu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScriptの代入をちゃんと理解する]]></title>
        <id>https://zenn.dev/activecore/articles/b33b00061665de</id>
        <link href="https://zenn.dev/activecore/articles/b33b00061665de"/>
        <updated>2023-11-30T22:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは。新卒エンジニアのwinnieです🐥
株式会社アクティブコア 初代アドベントカレンダーの記念すべき1日目を飾るこの記事ですが、前日の11月30日23時現在、絶賛執筆中でございます。
https://qiita.com/advent-calendar/2023/activecore
今日で11月が終わり、明日からはもう12月ですね。2023年もあっという間でした。
記事の作成が絶望的に間に合わないので、過去の下書きを掘り起こし中です。分かる人にとっては当たり前の内容ですが、Python使いだった自分が当時混乱した内容を記事にしました！

 結論
いきなりですが、この...]]></summary>
        <author>
            <name>winnie279</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python 3.8以降の型ヒント革命：DataclassとPydanticの徹底比較]]></title>
        <id>https://zenn.dev/nyanchu/articles/python_typing</id>
        <link href="https://zenn.dev/nyanchu/articles/python_typing"/>
        <updated>2023-11-30T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに　📘
この記事は ラクスパートナーズ Advent Calendar 2023 の1日目の記事になります！！
本社の ラクス Advent Calendar 2023 の7日目にも参加予定なのでそちらもよろしくお願い致します🥳
長い間 Python3.7 環境のプロジェクトに携わっていましたが、この度 Python3.10~ 環境のプロジェクトに携わることになりました。
そこでこの機会に python3.8 以降の最新の型ヒントやコード品質向上のテクニックについて、改めて情報をキャッチアップしながらまとめていきたいと思います。

 この記事の対象者　🎯

Python の型ヒ...]]></summary>
        <author>
            <name>nyanchu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[強化学習における学習安定化の工夫を試してみた]]></title>
        <id>https://zenn.dev/yner/articles/reinforcement_beginner</id>
        <link href="https://zenn.dev/yner/articles/reinforcement_beginner"/>
        <updated>2023-11-30T14:42:33.000Z</updated>
        <summary type="html"><![CDATA[機械学習スタートアップシリーズから出ている「Pythonで学ぶ強化学習」という本を読んで強化学習に入門してみました。実際に自分で手を動かして学んだことなどを書いていきたいと思います。

 実験環境

MacBook Pro (M1 Max)
Python 3.11


 題材
この記事では、OpenAI Gymで提供されている倒立振子問題(CartPole)を題材として実験を行いました。このタスクに対してどのようにAgentを訓練することでより高い報酬、そして学習の安定性を達成できるのかという視点から実験をしてみました。

 実験準備

 コードの構成
実装の登場人物は以下の3つです。
...]]></summary>
        <author>
            <name>yudai</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Redash】権限付与の方法について]]></title>
        <id>https://zenn.dev/take_tech/articles/3d152ec5d9c33c</id>
        <link href="https://zenn.dev/take_tech/articles/3d152ec5d9c33c"/>
        <updated>2023-11-30T14:00:12.000Z</updated>
        <summary type="html"><![CDATA[概要
Redashでは、特定のユーザーまたはグループに対して
クエリやダッシュボードの閲覧・編集権限を付与することができます。
これにより、チーム内での情報共有や作業の効率化が可能となります。

 手順


権限を付与したいクエリまたはダッシュボードを開きます。



右上の「Manage Permissions」ボタンをクリックします。



必要に応じてユーザーまたはグループを選択し、「閲覧のみ」または「編集可能」の権限を付与します。


これで、選択したユーザーまたはグループに対してクエリまたはダッシュボードの権限が付与されます。

 補足
権限を付与したユーザーまたはグループ...]]></summary>
        <author>
            <name>Take</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Redash】アーカイブ手引き]]></title>
        <id>https://zenn.dev/take_tech/articles/d3916d70f9c4b9</id>
        <link href="https://zenn.dev/take_tech/articles/d3916d70f9c4b9"/>
        <updated>2023-11-30T13:53:45.000Z</updated>
        <summary type="html"><![CDATA[概要
Redashでは、使用しなくなったクエリやダッシュボードをアーカイブすることができます。アーカイブすると、それらは一覧から非表示になりますが、必要に応じて再度表示することも可能です。

 手順

アーカイブしたいクエリまたはダッシュボードを開きます。
右上の「...」メニューをクリックします。



ドロップダウンメニューから「アーカイブ」を選択します。



これで、選択したクエリまたはダッシュボードはアーカイブされ、一覧から非表示になります。

 補足
アーカイブしたクエリまたはダッシュボードを再表示するには、左側のメニューから「アーカイブ」を選択し、アーカイブしたクエリま...]]></summary>
        <author>
            <name>Take</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Redash】シート複製の手引き]]></title>
        <id>https://zenn.dev/take_tech/articles/e23b30d1f45ddb</id>
        <link href="https://zenn.dev/take_tech/articles/e23b30d1f45ddb"/>
        <updated>2023-11-30T13:42:35.000Z</updated>
        <summary type="html"><![CDATA[概要
Redashはデータビジュアライゼーションツールで、データベースからの情報を視覚的に表示するために使用されます。この記事では、Redashの既存のクエリを複製（Fork）する方法について説明します。

 手順


まず、複製したいクエリのページを開きます。


ページの右上にある「...」メニューをクリックします。



ドロップダウンメニューから「Fork」を選択します。



これで、新しいクエリが作成され、元のクエリの内容がそのままコピーされます。

 補足
Forkしたクエリは元のクエリとは独立しています。つまり、Forkしたクエリを変更しても元のクエリには影響を与えま...]]></summary>
        <author>
            <name>Take</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python100本ノック#9 クラス属性とクラスメソッド(@classmethod)]]></title>
        <id>https://zenn.dev/willyang/articles/b3844c363bf027</id>
        <link href="https://zenn.dev/willyang/articles/b3844c363bf027"/>
        <updated>2023-11-30T13:31:00.000Z</updated>
        <summary type="html"><![CDATA[クラス属性(Class Attributes）
属性はインスタンス属性とクラス属性の2種類が存在する。
クラス属性はクラス内で定義された属性のことであり、同じクラスの全インスタンスに共用される。
class Person(object):
    # クラス属性count
    count = 0

    # 初期化
    def __init__(self, name):
        self.name = name
        # インスタンス数をカウントするための処理
        Person.count += 1

# 1、インスタンス化
p1 = Pers...]]></summary>
        <author>
            <name>willyang</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[glueで様々な文字コードのファイルを取り込む]]></title>
        <id>https://zenn.dev/johndoe/articles/5a680f0aad7384</id>
        <link href="https://zenn.dev/johndoe/articles/5a680f0aad7384"/>
        <updated>2023-11-30T12:00:07.000Z</updated>
        <summary type="html"><![CDATA[概要

awsのサービスであるglueで様々なエンコードのファイル取り込み(etlプロセス)を行う機会があったのでどの様な方法で行ったかをまとめる。

 前提

glueとは
　以下にある通り、複数のソースからデータを検出し、アプリケーションなどで使用することを容易にするETLパイプラインの開発を簡素化してくれたりする様なツールです。

AWS Glue は、サーバーレスなデータ統合サービスで、分析、機械学習 (ML)、アプリケーション開発用に、複数のソースからデータを検出、準備、移動、統合することをより容易にします。

https://aws.amazon.com/jp/glue/...]]></summary>
        <author>
            <name>John</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで書けるレトロゲームエンジンPyxelに入門する]]></title>
        <id>https://zenn.dev/slm/articles/1c9cb4cd0af808</id>
        <link href="https://zenn.dev/slm/articles/1c9cb4cd0af808"/>
        <updated>2023-11-30T10:59:10.000Z</updated>
        <summary type="html"><![CDATA[シンプルなレトロゲームを作ってみたい
2023年現在、ゲーム開発のお供であるゲームエンジンは数え切れないほど存在します。今年話題に上がったものに絞っても、UnityやUnreal Engine、Godot Engineなどがあり、いずれも充実した機能で、快適なゲーム制作環境を提供してくれています[1]。
逆に、敢えて機能に制限を設けた、レトロゲームの制作に特化したゲームエンジンというものもあります。この記事では、その中でもPythonでコーディングが可能な、Pyxelというゲームエンジンに入門してみたいと思います。

 Pyxelとは
Pyxelはファンタジーコンソールと呼ばれる、8...]]></summary>
        <author>
            <name>SLMNLL</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AbstractBaseUserを使用したアカウント認証機能の実装]]></title>
        <id>https://zenn.dev/iccyan/articles/006ed7fa260862</id>
        <link href="https://zenn.dev/iccyan/articles/006ed7fa260862"/>
        <updated>2023-11-30T10:53:43.000Z</updated>
        <summary type="html"><![CDATA[この記事は何？？🧐
この記事ではDjangoについているAbstractBaseUserを使用しアカウント機能を実装する手順を詳しく解説します。ユーザー登録やログイン、ユーザー情報の取得や更新、そしてアカウントの削除といった機能をカバーし、セキュアなアカウント管理システムを簡単に構築できるようになります。

 目次

はじめに


AbstractBaseUserとは？

2.プロジェクトのセットアップ

Djangoプロジェクトとアプリの作成方法の説明
DRFのインストールとDjangoプロジェクトへの組み込み方
データベースの設定とマイグレーションの実行方法

3.アカウント認証...]]></summary>
        <author>
            <name>いっちゃん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのクラスとオブジェクトの基本]]></title>
        <id>https://zenn.dev/park_udp/articles/pythonclassbasic</id>
        <link href="https://zenn.dev/park_udp/articles/pythonclassbasic"/>
        <updated>2023-11-30T05:00:45.000Z</updated>
        <summary type="html"><![CDATA[背景
今回でも同じくPythonのクラスに関しての資料を作成するために、書くことになりました。

 クラスの定義と概念

 クラスとは
オブジェクト指向プログラミングにおいて、データとそれを操作するメソッドをまとめたものです。クラスはオブジェクトの設計図と考えることができ、実際のオブジェクトはこの設計図に基づいて作成されます。例えば、人というクラスを設計する時に、変数は名前、性別、年齢、趣味で、メソッド(機能)としては、挨拶することや自己紹介する機能を作ることができます。また、人というクラスを作成することで、名前、性別、年齢、趣味、挨拶する機能や自己紹介する機能をもつインスタンスを作...]]></summary>
        <author>
            <name>PARUDP</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python100本ノック#8 ポリモーフィズム(Polymorphism)]]></title>
        <id>https://zenn.dev/willyang/articles/b74a5e931d8586</id>
        <link href="https://zenn.dev/willyang/articles/b74a5e931d8586"/>
        <updated>2023-11-29T22:28:00.000Z</updated>
        <summary type="html"><![CDATA[ポリモーフィズム(Polymorphism)とは
Polymorphism ：「多様性、多相性、多態性」という意味。
オブジェクト指向プログラミング(object-oriented programming, OOP）においてポリモフィズムとは同じ操作の呼び出しで、呼び出されたオブジェクトごとに異なる適切な動作を行うことを表す。この状態をプログラムで実現するために、クラスの継承関係やインタフェースとクラスの実装関係が使用される。

 duck typing（ダックタイピング）とは
Pythonでは、厳密なポリモーフィズムにこだわらず、ダックタイピングという手法を用いられている。ダックタ...]]></summary>
        <author>
            <name>willyang</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-327｜B - A^A]]></title>
        <id>https://zenn.dev/hyperdb/articles/f9dff584846cc4</id>
        <link href="https://zenn.dev/hyperdb/articles/f9dff584846cc4"/>
        <updated>2023-11-29T08:56:23.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-327 B - A^A



 提出結果
def getInt():
    return int(input())


def main():
    b = getInt()
    a = 0

    while True:
        a += 1
        aa = a ** a
        if aa == b:
            print(a)
            break
        elif aa > b:
            print(-1)
            break


if __n...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-327｜A - ab]]></title>
        <id>https://zenn.dev/hyperdb/articles/8fd3370285fa9f</id>
        <link href="https://zenn.dev/hyperdb/articles/8fd3370285fa9f"/>
        <updated>2023-11-29T08:56:22.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-327 A - ab



 提出結果
def getInt():
    return int(input())


def getString():
    return input()


def main():
    n = getInt()
    s = getString()

    print('Yes' if 'ab' in s or 'ba' in s else 'No')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Redshift Serverless の Data API を使用して、S3 にある CSVファイルのデータを取り込む]]></title>
        <id>https://zenn.dev/nkmrkz/articles/aws-redshift-serverless-data-api</id>
        <link href="https://zenn.dev/nkmrkz/articles/aws-redshift-serverless-data-api"/>
        <updated>2023-11-29T06:00:04.000Z</updated>
        <summary type="html"><![CDATA[Redshift Serverless の Data API を使用して、S3 にある CSVファイルのデータを取り込むためのメモ

 やったこと

 Redshift Serverless の NameSpace に S3 アクセス用のIAMポリシーをアタッチする

S3 に保存されている CSV にアクセスするため、S3 バケットへの LIST アクセスとバケットオブジェクトへの GET アクセスを許可するポリシーを持つロールをアタッチする

https://docs.aws.amazon.com/ja_jp/redshift/latest/dg/loading-data-acces...]]></summary>
        <author>
            <name>nakamurakzz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2023年版：boto3のDynamoDB client構文(書き足し中)]]></title>
        <id>https://zenn.dev/zakinko/articles/e5b401ff399b24</id>
        <link href="https://zenn.dev/zakinko/articles/e5b401ff399b24"/>
        <updated>2023-11-29T05:47:26.000Z</updated>
        <summary type="html"><![CDATA[scan
ret = client.scan(
            TableName='hoge_table',
            FilterExpression='begins_with(aa , :a)',
            ExpressionAttributeValues={
                ':a': {'S': "hogehoge"},
            },
        )        
print(ret['Items'])]]></summary>
        <author>
            <name>dada</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python100本ノック#7 メソッド解決順序(MRO:Method Resolution Order)]]></title>
        <id>https://zenn.dev/willyang/articles/d570387c8793a9</id>
        <link href="https://zenn.dev/willyang/articles/d570387c8793a9"/>
        <updated>2023-11-29T03:37:35.000Z</updated>
        <summary type="html"><![CDATA[メソッド解決順序(MRO:Method Resolution Order)とは
クラスのメソッド実行時に、どのクラスからどういう順番から呼び出されるかを解析するためのメソッドである。メソッドを解析する時に利用されることが多い。

 基本文法
クラス名.__mro__
クラス名.mro()

 具体例
class Car(object):
    def __init__(self, brand, model, color):
        self.brand = brand
        self.model = model
        self.color = color...]]></summary>
        <author>
            <name>willyang</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python100本ノック#6 オーバーライド(Override)]]></title>
        <id>https://zenn.dev/willyang/articles/7d8bb85af4f86d</id>
        <link href="https://zenn.dev/willyang/articles/7d8bb85af4f86d"/>
        <updated>2023-11-29T03:07:56.000Z</updated>
        <summary type="html"><![CDATA[オーバーライドとは
単に親クラスを継承するだけでは、子クラスの存在意義はなく親クラスを使えばよい。
継承してさらに独自の特徴を持たせるべきである。
オーバーライドは、親クラスから継承した属性とメソッドを独自のものに作り直すことである。

 例
class Animal(object):
    def eat(self):
        print('i can eat')
    
    def call(self):
        print('i can call')
        
class Dog(Animal):
    pass

class Cat(Anim...]]></summary>
        <author>
            <name>willyang</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python100本ノック#5 Pythonの継承(inheritance)]]></title>
        <id>https://zenn.dev/willyang/articles/507462a3b0c5d9</id>
        <link href="https://zenn.dev/willyang/articles/507462a3b0c5d9"/>
        <updated>2023-11-29T01:26:27.000Z</updated>
        <summary type="html"><![CDATA[継承とは
既存のクラスをもとに、新しいクラスを作成することを「継承」と言う。
既存クラスを継承して作成したクラスを「派生クラス」と言う。
継承元となるクラスを「親クラス」や「スーパークラス」、「基底クラス」などと呼ぶ。
継承先のクラスは「子クラス」「サブクラス」、「派生クラス」と呼ぶ。

 継承の基本文法
class B(object):
    pass

clss A(B):
    pass
    
a = A()

 具体例
Personクラスを継承するTeacherとStudentクラス
class Person(object):
    def eat(self):
 ...]]></summary>
        <author>
            <name>willyang</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[JijModeling-Transpiler-QuantumでQuantum Alternating Operator Ansatz]]></title>
        <id>https://zenn.dev/jij_inc/articles/jtq_graph_coloring</id>
        <link href="https://zenn.dev/jij_inc/articles/jtq_graph_coloring"/>
        <updated>2023-11-28T23:54:28.000Z</updated>
        <summary type="html"><![CDATA[JijModeling-Transpiler-Quantum(JTQ)は、数理最適化問題をqiskitやquri_partsのイジングハミルトニアンやQAOA[1]のansatzなどへ変換するためのライブラリーです。QAOAのような典型的なencodingの他に、Quantum Random Access Optimziation(QRAO)[2]なども一部サポートしています。
この記事では、Graph Coloring ProblemをQuantum Approximate Optimization AlgorithmとQuantum Alternating Operator Ansa...]]></summary>
        <author>
            <name>Kapiyva</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WindowsにPython+CUDA+PyTorch+TransformersでLLM実行環境を構築したら色々大変だった]]></title>
        <id>https://zenn.dev/kumachii/articles/851bbd08703651</id>
        <link href="https://zenn.dev/kumachii/articles/851bbd08703651"/>
        <updated>2023-11-28T15:06:15.000Z</updated>
        <summary type="html"><![CDATA[会社にGPU搭載ノートがあったので、DL用マシンにすべく、素人が環境構築を試みました。
たくさん躓いたので後学の為に記録しておきます。

 はじめに

 目指す姿

Pytorch + GPU実行環境を構築
TransformersライブラリでLLMを実行
低スペックGPUでも動く環境（LLMモデル量子化）


 マシンスペック

Windows 10 Pro
RAM 32GB
GPU NVIDIA Quadro P3200 (VRAM 6GB)


 環境構築つまづきポイント

GPUスペック、CUDAとPytorchのバージョン問題
CUDA環境変数の設定
Pythonバージョン問題...]]></summary>
        <author>
            <name>Kuma-chang</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AITuberのためのvenv仮想環境構築]]></title>
        <id>https://zenn.dev/yasuna/articles/a02113a90e2b39</id>
        <link href="https://zenn.dev/yasuna/articles/a02113a90e2b39"/>
        <updated>2023-11-28T12:51:42.000Z</updated>
        <summary type="html"><![CDATA[はじめに
最近発売された「AITuberを作ってみたら生成AIプログラミングがよくわかった件」という本を買いました！
https://bookplus.nikkei.com/atcl/catalog/23/10/31/01079/
早速AITuberを作ってみたいと思って読み進めていきましたが、WSL2環境でのvenvの設定が書かれていなかったので自分で調べて整えてみました。AITuberの仮想環境づくりに少しでもお役に立てれば幸いです！
前回はPyenvでPythonの環境構築をしました。
https://zenn.dev/yasuna/articles/b3eae0ed00e66...]]></summary>
        <author>
            <name>yasun_ai</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ゼロから実装するProphet(Python)]]></title>
        <id>https://zenn.dev/10shimizu10/articles/649447c559be96</id>
        <link href="https://zenn.dev/10shimizu10/articles/649447c559be96"/>
        <updated>2023-11-28T05:26:24.000Z</updated>
        <summary type="html"><![CDATA[この記事では、下記の論文と実装を参考にPrphetをゼロから実装していきたい。
https://www.tandfonline.com/doi/abs/10.1080/00031305.2017.1380080
https://github.com/facebook/prophet
使用するライブラリとしては、下記のものがある。
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()
from scipy.optimize import m...]]></summary>
        <author>
            <name>しみず</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AITuberのためのPyenvでPython環境構築]]></title>
        <id>https://zenn.dev/yasuna/articles/b3eae0ed00e665</id>
        <link href="https://zenn.dev/yasuna/articles/b3eae0ed00e665"/>
        <updated>2023-11-27T14:59:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
最近発売された「AITuberを作ってみたら生成AIプログラミングがよくわかった件」という本を買いました！
https://bookplus.nikkei.com/atcl/catalog/23/10/31/01079/
早速AITuberを作ってみたいと思って読み進めていきましたが、Python環境の準備がごっそり省略されていたため、自分で調べて整えてみました。思わぬところでつまづいてしまったので、みなさんにもシェアしていきたいと思います。

 Pythonの環境構築
「AItuber開発の環境を準備」の章でpyenvを使ってpythonのバージョンを管理する方法が推奨さ...]]></summary>
        <author>
            <name>yasun_ai</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonエンジニア認定データ分析試験と実践試験に合格したので勉強方法を紹介します]]></title>
        <id>https://zenn.dev/sonoda_m/articles/4eee2078d8f7b2</id>
        <link href="https://zenn.dev/sonoda_m/articles/4eee2078d8f7b2"/>
        <updated>2023-11-27T13:46:32.000Z</updated>
        <summary type="html"><![CDATA[挨拶
初めまして。この度pythonエンジニア認定データ分析試験と実践試験に合格したので、今回はその勉強方法を紹介します。

 データ分析試験
書籍として、公式から紹介されている本を紙で購入しました。
https://www.amazon.co.jp/Pythonによるあたらしいデータ分析の教科書-第2版-寺田-学/dp/4798176613/ref=tmm_pap_swatch_0?_encoding=UTF8&qid=1701090621&sr=1-3
データ分析の試験には以下のディープロというサイトを利用しました。
https://diver.diveintoc...]]></summary>
        <author>
            <name>園田圓</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[(ほぼほぼ)typed (わりかし)fuctional python]]></title>
        <id>https://zenn.dev/kei1104/articles/b6a909a60e0138</id>
        <link href="https://zenn.dev/kei1104/articles/b6a909a60e0138"/>
        <updated>2023-11-27T10:15:17.000Z</updated>
        <summary type="html"><![CDATA[動機


Domain Modeling Made Functional の内容にインスパイヤされ、型->関数->型的なアプローチの素振りをしたい。

あとはこの辺の内容をつまんでまとめることを目指しました。ロバストpython、なっとく！関数型プログラミング




webバックエンドにおいても、型+関数ベースでモデリングしていく発想への言及をちょくちょく見かける気がするから【第5回】「型」はウェブシステム開発に「エンドゲーム」をもたらすか

もしかしかたら、純粋関数、イミュータブル、継承より委譲などの(一般的に合意が得られていると思われる)プラクティスを行うと、cla...]]></summary>
        <author>
            <name>yoda keisuke</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのパッケージ管理ツールのコマンド比較表]]></title>
        <id>https://zenn.dev/tanny/articles/041f46c06f76f5</id>
        <link href="https://zenn.dev/tanny/articles/041f46c06f76f5"/>
        <updated>2023-11-27T10:13:39.000Z</updated>
        <summary type="html"><![CDATA[この記事は何？
Pythonのパッケージ管理・仮想環境管理ツールが色々ありすぎて、それぞれのツールのコマンドがよく分からなくなってしまったので、コマンドの比較表を作成したものです。
各ツールの利用方法や詳細な挙動は紹介しません。詳しい情報は各ツールのドキュメント等を参照してください。
対象ツール



ツール
機能
特徴




pip
パッケージの管理
- Pythonの標準パッケージマネージャー- PyPIからパッケージをインストール


venv
仮想環境の管理
- プロジェクトごとに独立したPython環境を作成


pyenv
Pythonバージョンの管理
- 複数のPyt...]]></summary>
        <author>
            <name>Tanny</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python100本ノック#4 オブジェクト指向プログラミングの実行例]]></title>
        <id>https://zenn.dev/willyang/articles/5f18e2d6dd9756</id>
        <link href="https://zenn.dev/willyang/articles/5f18e2d6dd9756"/>
        <updated>2023-11-27T09:33:37.000Z</updated>
        <summary type="html"><![CDATA[OOPの実行例をやってみる
オブジェクト指向プログラミング (OOP: Object-Oriented Programming)

 実行例1（学生情報管理）

属例

名前
成績


メソッド

成績評価

90 < 点数 → 秀
80 < 点数 < 90 → 優
70 < 点数 < 80 → 良
60 < 点数 < 70 → 可
点数 < 60 → 不可





# 1、学生のクラスを定義
class Student():
    # 2、属性を定義
    def __init__(self, name, score):
   ...]]></summary>
        <author>
            <name>willyang</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[大規模小説データをOpenAI Embedding APIで特徴抽出してUMAPで可視化してみた]]></title>
        <id>https://zenn.dev/tellernovel_inc/articles/62d70afb097176</id>
        <link href="https://zenn.dev/tellernovel_inc/articles/62d70afb097176"/>
        <updated>2023-11-27T05:36:55.000Z</updated>
        <summary type="html"><![CDATA[テラーノベルで機械学習を中心に担当している川尻です。みなさんも大量のデータを特徴抽出してみたけど、どう使ったらいいかわからないなぁということありますよね。とりあえずどういうデータなのか雰囲気だけでもみるために、簡単な可視化から入るかと思います。以前にもグラフデータの可視化について記事を書きました。
https://zenn.dev/tellernovel_inc/articles/53507126aa77bf
テラーノベルでは小説投稿アプリを作っており、OpenAI Embedding APIを使って全作品の特徴量を出しているデータベースがあります。今回はこのデータを例にして、UMAPと...]]></summary>
        <author>
            <name>川尻亮真 (Ryoma Kawajiri)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Amazon ElastiCache for Redis のハンズオンをやってみた!]]></title>
        <id>https://zenn.dev/rescuenow/articles/41ad9d369a74ca</id>
        <link href="https://zenn.dev/rescuenow/articles/41ad9d369a74ca"/>
        <updated>2023-11-27T04:49:21.000Z</updated>
        <summary type="html"><![CDATA[私の所属するチームでは現在オンプレのシステムを AWS 上にリフト＆シフトしている最中で現在シフト作業の真っ最中です！
オンプレの構成から変更していくなかで Redis を使う必要が出てきましたがチームのメンバーには Redis を触ったことのない人もいたのでひとまずチームでモブハンズオンをすることになりました。
その下準備としてまずは自分が公式のハンズオンを試して情報をまとめてみようと思います。

 やってみるハンズオン
Boosting MySQL database performance with Amazon ElastiCache for Redis
ちなみにこちらの記事から見...]]></summary>
        <author>
            <name>takeuchi_kazuya</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python100本ノック#3 オブジェクトの属性(attribute)]]></title>
        <id>https://zenn.dev/willyang/articles/bd7a10c1e0472a</id>
        <link href="https://zenn.dev/willyang/articles/bd7a10c1e0472a"/>
        <updated>2023-11-27T03:51:17.000Z</updated>
        <summary type="html"><![CDATA[マジックメソッド(Magic Method)
__XXX___のメソッドはマジックメソッドといい、特殊機能を持つため特殊メソッド(Special method)と呼ぶことが多い。

 読み方
英語圏では、__XXX___を "dunder init" と略して発音するらしい。
Ref:https://qiita.com/little_hand_s/items/7273e0f07d2c76120942

 __init__() コンストラクタ (イニシャライザ)
オブジェクトをインスタンス化する際に、その中の属性は__init__()関数に自動的に渡され、実行される。__init__(...]]></summary>
        <author>
            <name>willyang</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python100本ノック#1 オブジェクトの属性(attribute)]]></title>
        <id>https://zenn.dev/willyang/articles/46f4bc1b493498</id>
        <link href="https://zenn.dev/willyang/articles/46f4bc1b493498"/>
        <updated>2023-11-26T23:55:54.000Z</updated>
        <summary type="html"><![CDATA[オブジェクトの属性(attribute)とは
Pythonにおいてすべてのオブジェクトは属性(attribute)とメソッド(method)を持っている。
属性は「特徴」であり、例えば人間の名前、身長、体重などがオブジェクトの属性である。
車の車両番号、色、メーカー、燃費などが属性になる。

 クラスの外部から属性を追加、取得

 属性の追加
オブジェクト名.属性名 = 値

 例
# 1、Personクラスを定義
class Person():
    pass

# 2、Person类のインスタンス化、p1を作成
p1 = Person()
# 3、p1の属性を追加
p1.nam...]]></summary>
        <author>
            <name>willyang</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChatGPTを使って通信ログからSwagger形式の仕様を生成する]]></title>
        <id>https://zenn.dev/tatsui/articles/swagger-chatgpt</id>
        <link href="https://zenn.dev/tatsui/articles/swagger-chatgpt"/>
        <updated>2023-11-26T14:37:58.000Z</updated>
        <summary type="html"><![CDATA[1. はじめに
この記事では、OpenAIのChatGPTを使って通信ログからSwagger(OpenAPI)の仕様を生成する方法について説明します。これにより、APIの仕様書作成の手間を大幅に削減することが可能となります。

 2. Swagger(OpenAPI)とは
Swagger(現在はOpenAPIとして知られています)は、RESTful APIの仕様を記述するためのフレームワークです。APIのエンドポイント、リクエスト、レスポンスの形式などを定義することができます。また、Swaggerを使ってテストやコード生成を行うツールも多数存在します。例えば、Swagger Code...]]></summary>
        <author>
            <name>tatsui</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python100本ノック#1 オブジェクトとクラス]]></title>
        <id>https://zenn.dev/willyang/articles/88b6ef30fcb586</id>
        <link href="https://zenn.dev/willyang/articles/88b6ef30fcb586"/>
        <updated>2023-11-26T11:28:36.000Z</updated>
        <summary type="html"><![CDATA[オブジェクト指向プログラミング (OOP: Object-Oriented Programming)
省略

 オブジェクト

オブジェクトは「現実のビジネスロジックのアクションエンティティは、1つのオブジェクトに対応しており、その射影」だと理解している。
属性（データ）とメソッド（手続き）という2つの要素を持ったすべてのモノをオブジェクトとする。




オブジェクトは属性（property）を使用してデータを保存する
オブジェクトはメソッド（method）を使用してデータを管理する。


 クラス (Class)
Pythonでは、クラスを使ってオブジェクトを定義する。
なぜクラ...]]></summary>
        <author>
            <name>willyang</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonでの競プロ私的備忘録・スニペットまとめ]]></title>
        <id>https://zenn.dev/k0kishima/articles/66f44d54818322</id>
        <link href="https://zenn.dev/k0kishima/articles/66f44d54818322"/>
        <updated>2023-11-26T09:12:35.000Z</updated>
        <summary type="html"><![CDATA[AtCoder を初めて3ヶ月ほど経ちました（色とかレートは聞かんでくれ^^;）
やってるうちに問題を横断してよく行うような定型的な操作が一定量あるように思えました。
例えば、二次元配列の転置や探索、配列の分割、ある文字列からのサブ文字列の生成などです。
ここでは個人的によく使った処理をまとめました。
長くなりそうなので記事を分けます。
https://zenn.dev/k0kishima/articles/7aa9c8d8ad046b
https://zenn.dev/k0kishima/articles/05f77806ba3119
https://zenn.dev/k0kishim...]]></summary>
        <author>
            <name>k0kishima</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[競プロ私的スニペット Python3 標準出力編]]></title>
        <id>https://zenn.dev/k0kishima/articles/cdde0c0681adf6</id>
        <link href="https://zenn.dev/k0kishima/articles/cdde0c0681adf6"/>
        <updated>2023-11-26T09:06:57.000Z</updated>
        <summary type="html"><![CDATA[リストをスペース区切りで出力する
回答をスペース区切りで出力するような形式の問題がある。
以下のように回答をリストで保持しているとする。
result = ['a', 'b', 'c']
print(result) のように出力すると "['a', 'b', 'c']" という結果になって意図したフォーマットにならないので、以下のようにアンパックする
print(*result)  # => "a b c" が出力される
print(' '.join(result)) でも同様の出力が行えるが、それよりシンプルに書ける。

 小出しに出力する
提出時は改行を出力することになるが...]]></summary>
        <author>
            <name>k0kishima</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[競プロ私的スニペット Python3 デバッグ編]]></title>
        <id>https://zenn.dev/k0kishima/articles/e8296409998275</id>
        <link href="https://zenn.dev/k0kishima/articles/e8296409998275"/>
        <updated>2023-11-26T09:06:10.000Z</updated>
        <summary type="html"><![CDATA[f-string tricks
例えば i という変数の値を調べたいときに print(i) と出すより、 print('i:', i) のように出したい場合がある。
理由は単に print(i) とすると、 print(j) のように別の変数も出力しているときに区別する負荷がかかるため。
以下のようにf文字列では同様のことができる。
i = 10
j = 20
print(f"{i= }")  # 'i= 10'
print(f"{j= }")  # 'j= 20']]></summary>
        <author>
            <name>k0kishima</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[競プロ私的スニペット Python3 変数編]]></title>
        <id>https://zenn.dev/k0kishima/articles/6113a2981997b1</id>
        <link href="https://zenn.dev/k0kishima/articles/6113a2981997b1"/>
        <updated>2023-11-26T09:04:41.000Z</updated>
        <summary type="html"><![CDATA[変数の命名には割と時間かかるので、よく利用する性質のデータを代入する変数名は予め決めておくといい
以下はその例

 リストのオブジェクトを入れる汎用的な変数の名前

lst
a_list

二次元配列の場合

grid


 ループ回数の変数名
例えば、 for i in range(len(a_list) - 1): のループ回数を変数に保持したい場合

loop_size


 ループ
[char for char in 'MCMXCIV'] 文字列をループする場合

char


 範囲
リストのnからmまでの要素みたいに範囲の情報を変数で持つとき、

先頭は first

終端は...]]></summary>
        <author>
            <name>k0kishima</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[競プロ私的スニペット Python3 二次元配列編]]></title>
        <id>https://zenn.dev/k0kishima/articles/29912b53812455</id>
        <link href="https://zenn.dev/k0kishima/articles/29912b53812455"/>
        <updated>2023-11-26T09:03:43.000Z</updated>
        <summary type="html"><![CDATA[任意のサイズの二次元配列を作る
num_rows = 3
num_columns = 4

DEFAULT_VALUE = None
lst = [[DEFAULT_VALUE for _ in range(num_columns)] for _ in range(num_rows)]
# => [[None, None, None, None], [None, None, None, None], [None, None, None, None]]

 ある要素を基準に周囲の要素（1つ隣の上下左右斜め）のインデックスを取得する


 ある要素を基準に隣接する要素（1つ隣の上下...]]></summary>
        <author>
            <name>k0kishima</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[競プロ私的スニペット Python3 配列編]]></title>
        <id>https://zenn.dev/k0kishima/articles/05f77806ba3119</id>
        <link href="https://zenn.dev/k0kishima/articles/05f77806ba3119"/>
        <updated>2023-11-26T09:02:38.000Z</updated>
        <summary type="html"><![CDATA[配列をn個区切りで分割する
例えば、スケジュールを模した以下にような配列がある場合(Trueが仕事の日でFalseが休日)、
days = [True, True, True, False, True, True, True, False, True, True, False]
1週間ごとに分割するみたいなことが必要になる場合がある。
その場合7個区切りで配列の配列が作れる。
[days[i:i + 7] for i in range(0, len(days), 7)]
# => [[True, True, True, False, True, True, True], [Fa...]]></summary>
        <author>
            <name>k0kishima</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[競プロ私的スニペット Python3  文字列編]]></title>
        <id>https://zenn.dev/k0kishima/articles/7aa9c8d8ad046b</id>
        <link href="https://zenn.dev/k0kishima/articles/7aa9c8d8ad046b"/>
        <updated>2023-11-26T09:00:00.000Z</updated>
        <summary type="html"><![CDATA[部分文字列の生成

>>> from pprint import pprint
>>> pprint(substrings)
['H',
 'He',
 'Hel',
 'Hell',
 'Hello',
 'e',
 'el',
 'ell',
 'ello',
 'l',
 'll',
 'llo',
 'l',
 'lo',
 'o']

重複を排除する場合はリストではなく集合(set)に追加することで実現できる


 文字列の反転
'Hello'[::-1]

回文かどうかの判定などで利用]]></summary>
        <author>
            <name>k0kishima</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AttributeError: 'ImageDraw' object has no attribute 'textsize'への対応]]></title>
        <id>https://zenn.dev/nakamura196/articles/ccea0bd6fb6c10</id>
        <link href="https://zenn.dev/nakamura196/articles/ccea0bd6fb6c10"/>
        <updated>2023-11-26T05:27:33.000Z</updated>
        <summary type="html"><![CDATA[PythonのPillowで以下を使用していた際、
textsize = 14
font = ImageFont.truetype("Arial Unicode.ttf", size=textsize)
txw, txh = draw.textlength(label, font=font)
以下のエラーが発生しました。
AttributeError: 'ImageDraw' object has no attribute 'textsize'
この対処法として、以下が参考になりました。
https://stackoverflow.com/questions/77038132/pytho...]]></summary>
        <author>
            <name>nakamura196</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sqids🦑でYouTubeっぽいIDを生成する]]></title>
        <id>https://zenn.dev/shibata/articles/f4f34f7f23ee7c</id>
        <link href="https://zenn.dev/shibata/articles/f4f34f7f23ee7c"/>
        <updated>2023-11-25T23:23:00.000Z</updated>
        <summary type="html"><![CDATA[概要
https://sqids.org/
数字を与えるとYoutubeのような短い一意なランダムIDを生成してくれるOSSです。
Hashidsというライブラリが生まれ変わりました👶
https://www.youtube.com/watch?v=WJzSBLCaKc8のWJzSBLCaKc8のようなもの。
https://www.youtube.com/watch?v=WJzSBLCaKc8
※動画のチョイス自体には特に意味はありません。

 言語サポート
主要なWeb系の言語はサポートされている x ライセンスはMITなので使いやすそうな印象です。
ソース自体も中身は1~数ファ...]]></summary>
        <author>
            <name>Shibata</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[時系列データ考察のための可視化手法実装例]]></title>
        <id>https://zenn.dev/shungo_a/articles/716021eba3042c</id>
        <link href="https://zenn.dev/shungo_a/articles/716021eba3042c"/>
        <updated>2023-11-25T12:34:22.000Z</updated>
        <summary type="html"><![CDATA[目次

本記事の目的
季節性の分解
類似時系列の可視化
変化点検出
相互相関の可視化
本記事のまとめ
参考文献


 本記事の目的
機械学習やAIを用いた予測において重要な項目の1つに、説明可能性があります。これは、学習結果に対してなぜその結果になったのかを説明可能かというものです(参考文献1)。例えば予測結果の誤差が小さかったとしても、予測結果を意思決定に用いる場合、過去データと予測結果の関係性を考察できなければ、正確な意思決定ができない可能性があります。
　前記事では、Transformerの改善モデルであるiTransformerを用いて複数の時系列データの需要予測を行いました...]]></summary>
        <author>
            <name>S.A</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Raspberry3 とCO2センサ（MH-Z19B）のセットアップ]]></title>
        <id>https://zenn.dev/r5437198/articles/51dd4527938b8b</id>
        <link href="https://zenn.dev/r5437198/articles/51dd4527938b8b"/>
        <updated>2023-11-25T11:46:53.000Z</updated>
        <summary type="html"><![CDATA[センサーとラズパイを接続する

下記を参考に接続する

https://github.com/UedaTakeyuki/mh-z19#cabling

ジャンパ線で接続した

 シリアル通信を有効化する

下記コマンドを実行する

sudo raspi-config;

「3 Interface Options」を選択する
「P6 Serial Port」を選択する
Would you like a login shell to be accessible over serial ? ->「No」を選択する
Would you like the serial port hard...]]></summary>
        <author>
            <name>ノート</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DockerでDjango環境を構築する]]></title>
        <id>https://zenn.dev/kyrice2525/articles/article_tech_017</id>
        <link href="https://zenn.dev/kyrice2525/articles/article_tech_017"/>
        <updated>2023-11-25T11:10:10.000Z</updated>
        <summary type="html"><![CDATA[はじめに
仕事でDjangoを使うことになりました。
勉強のために Docker で Django 環境を構築したので、備忘録としてその手順をまとめたいと思います。

 構築手順

 前提条件
すでにVisual Studio CodeとDockerはインストールされているものとします。
また、VSCode の拡張機能でDockerとDev Containersもインストールしておいてください。

 手順


Shift + Command + Pでコマンドパレットを開き、「新しい開発コンテナー」を選択します。



Python と入力してPython 3を選択します。



「D...]]></summary>
        <author>
            <name>yuta</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ntfsdump, ntfsfind を用いたイメージファイルからのアーティファクト抽出]]></title>
        <id>https://zenn.dev/sum3sh1/articles/file-extraction-from-ntfs-image-files</id>
        <link href="https://zenn.dev/sum3sh1/articles/file-extraction-from-ntfs-image-files"/>
        <updated>2023-11-25T10:04:57.000Z</updated>
        <summary type="html"><![CDATA[概要
保全した NTFS イメージファイルから、ファイル, ディレクトリ, 代替データストリーム(下記、アーティファクト)を抽出する手順を示します。
本ソフトウェアは dd(raw), e01, vmdk などの形式に対応しています。
!
vmdk などの仮想マシンで使われるイメージファイルの場合、
スナップショットの取得等で分割されたケースには対応していません。


 クイックスタート
下記はdd(raw)形式のイメージファイル ntfs.raw から
$MFT を抽出する際のコマンドです。
第一引数の 検索クエリ は Unix/Linux 形式のパスで指定してください。
この手順...]]></summary>
        <author>
            <name>sumeshi_kun</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenCVからPIL、PILからOpenCVのデータ変換]]></title>
        <id>https://zenn.dev/marimo83/articles/change_image_cv_to_pil</id>
        <link href="https://zenn.dev/marimo83/articles/change_image_cv_to_pil"/>
        <updated>2023-11-25T07:01:45.000Z</updated>
        <summary type="html"><![CDATA[OpenCVからPIL、PILからOpenCVのデータ変換
OpenCVで生成した画像をPILで読み込む、もしくは逆方向の操作をしたいと思った時に混乱したので整理してみることにした

 結論
COLOR_RGB2BGR, COLOR_BGR2RGBでRGB(赤緑青)の並びを相互変換すればよい

 PIL→OpenCV
import numpy as np
import cv2

def pil2cv(pil_image):
    cv_image = np.array(pil_image, dtype=np.unit8)
    if cv_image.ndim == 2: # モ...]]></summary>
        <author>
            <name>marimo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS Cloud9を使ったPython環境の構築]]></title>
        <id>https://zenn.dev/robes/articles/13d57a15c893b5</id>
        <link href="https://zenn.dev/robes/articles/13d57a15c893b5"/>
        <updated>2023-11-25T05:02:50.000Z</updated>
        <summary type="html"><![CDATA[AWS Cloud9を使ってPython環境を構築してみたので、
今後の備忘のために記事に残します。
思った以上に簡単でした。
いつもはVS-CODEをよく使うのですが、
Cloud9でも十分イケるなと思いました。
この記事では、
Cloud9でのPython環境のセットアップと、
GitHubとの連携方法について詳しく説明します。
!
AWSのアカウントをすでに持っている前提で話を進めます。

https://aws.amazon.com/jp/cloud9/

 Cloud9環境の設定
まずは、AWS Cloud9の環境を設定しましょう。


右上のリージョンは東京を選択し、環境を作...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Windows】Pythonでwikiextractorを使い、WikipediaのXMLファイルからテキストを取り出す]]></title>
        <id>https://zenn.dev/haru330/articles/503c217c3cda1e</id>
        <link href="https://zenn.dev/haru330/articles/503c217c3cda1e"/>
        <updated>2023-11-25T03:35:30.000Z</updated>
        <summary type="html"><![CDATA[確認済みの環境
!
Windows 10
python 3.9
pip 23.1.2

※コマンドプロンプトで、ダウンロードディレクトリで作業しました。

 Wikipediaから記事のXMLファイルをダウンロードする
今回は、いくつかのデータのみ利用したかったため、以下の方法でダウンロードしました。
このページで、Wikipediaの記事のXMLファイルをダウンロードすることができます。
https://ja.wikipedia.org/wiki/特別:データ書き出し
自然言語処理ですべてのファイルをダウンロードしたい場合は、以下などからダウンロードすると良いと思います。
http...]]></summary>
        <author>
            <name>はる</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PyCon APAC 2023のスプリントにテーマを持ち込んで参加した話]]></title>
        <id>https://zenn.dev/itch/articles/1e0869450ee3d2</id>
        <link href="https://zenn.dev/itch/articles/1e0869450ee3d2"/>
        <updated>2023-11-25T02:24:47.000Z</updated>
        <summary type="html"><![CDATA[はじめに
PyCon APAC 2023のスプリントに参加してきました！
スプリントに自作ライブラリをテーマとして持ち込んでスプリントリーダーとして参加した話をスプリント参加前と当日、後日談の3部構成で書きました。
PyCon APAC 2023について
https://2023-apac.pycon.jp/
公式サイトより引用
PyCon APACは、プログラミング言語「Python」を中心としたボランティアによる非営利の年次カンファレンスです。このカンファレンスの目的は、Pythonプログラミング言語とその周辺技術を探求し、議論・実践できる場を提供することです。運営チームは、アジ...]]></summary>
        <author>
            <name>itch</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TableauワークブックをExcelドキュメントに変換する]]></title>
        <id>https://zenn.dev/t_katsumoto/articles/2b89a6a0f78a04</id>
        <link href="https://zenn.dev/t_katsumoto/articles/2b89a6a0f78a04"/>
        <updated>2023-11-25T02:05:18.000Z</updated>
        <summary type="html"><![CDATA[Introduction
Tableauは素晴らしいツールですが、難解なワークブックだと計算式を解析するのが大変であったり、幾つか使いづらい点もあります。計算フィールドを複数ポップアップしたいだけであれば、それ用のツールは以前作ったので興味のある方は下記の記事をご参照ください。
https://zenn.dev/t_katsumoto/articles/2407ae38fa01cb#まずは使ってみよう**
今回はどういうツールを作ったかというと、ボタン一つでTableauワークブックをExcelファイル (.xlsm)に変換するというものです。その中では計算フィールドの複数ポップアッ...]]></summary>
        <author>
            <name>Katsumoto Takashi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[オブジェクト指向とは]]></title>
        <id>https://zenn.dev/park_udp/articles/pythonclassinfor</id>
        <link href="https://zenn.dev/park_udp/articles/pythonclassinfor"/>
        <updated>2023-11-24T10:06:25.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回では、プログラミング教室でのPythonの教材のクラスに関しての資料を作成する中で、プログラミングの歴史に関して書くことになり、ブログを書くことになりました。

 オブジェクト指向が生まれたきっかけ
オブジェクト指向は、構造化プログラミングの複雑さを軽減するために生まれました。つまり、ソフトウェア開発を楽にするためであると考えました。

 オブジェクト(Object)とは
オブジェクトは英語で書くと、Objectです。また、この英語の意味としては、物体になります。つまり、ものを意味します。例えば、

 オブジェクト指向とは
オブジェクト指向とは、単純にプログラムの文法や...]]></summary>
        <author>
            <name>PARUDP</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[3D Gaussian Splattingの環境構築]]></title>
        <id>https://zenn.dev/hki/articles/08b59e39e7a2ef</id>
        <link href="https://zenn.dev/hki/articles/08b59e39e7a2ef"/>
        <updated>2023-11-24T09:14:30.000Z</updated>
        <summary type="html"><![CDATA[概要

3D Gaussian Splatting for Real-Time Radiance Field Renderingの環境構築をした

GitHubに解説があり、解説通りに実施すれば問題ないのだが、自身がつまずいた部分を補足する
Microsoft Visual Studio、Anaconda、CUDA Toolkit、Gitの意味やインストール方法などを理解している方を対象とする

細かな手順、インストール方法などは言及しない




 環境

Windows 11
conda 23.5.2 (miniconda)
Microsoft Visual Studio 202...]]></summary>
        <author>
            <name>hki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Amazon SNSを用いたEC2上のVirtuosoの再起動]]></title>
        <id>https://zenn.dev/nakamura196/articles/74762d7727d29d</id>
        <link href="https://zenn.dev/nakamura196/articles/74762d7727d29d"/>
        <updated>2023-11-24T08:24:07.000Z</updated>
        <summary type="html"><![CDATA[概要
以下の記事で、ヘルスチェックを行う方法について記述しました。
https://zenn.dev/nakamura196/articles/28151132308b55
また、Virtuosoが停止した際の再起動のためのコマンドを以下に記述しました。
https://zenn.dev/nakamura196/articles/a9fd176d3ac9e8
今回は、Amazon SNSを用いた通知に合わせて、Virtuosoを再起動してみます。

 方法
EC2インスタンスにsudo rm -rf /usr/local/var/lib/virtuoso/db/virtuoso.lc...]]></summary>
        <author>
            <name>nakamura196</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[とっても軽いDistrolessコンテナでPythonとFlaskを動かす]]></title>
        <id>https://zenn.dev/tkithrta/articles/93dca23f0f93df</id>
        <link href="https://zenn.dev/tkithrta/articles/93dca23f0f93df"/>
        <updated>2023-11-23T19:08:07.000Z</updated>
        <summary type="html"><![CDATA[https://gitlab.com/tkithrta/psh
私はPSHというActivityPub実装サーバーをVercel上で動かしたりしているのですが、Vercelで動かすのに飽きたので最近はRaspberry Pi ZeroやCGIに飽き足らずDockerやらDocker Composeやらで動かそうとしています。
そしてとっても軽いDistrolessコンテナのPython用のイメージが前から実験的なもので公開されていたことを思い出し、見に行ったらgcr.io/distroless/python3-debian12が実験的なものではなかったため、本番環境で動かしてもよさそうだ...]]></summary>
        <author>
            <name>黒ヰ樹</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[パッケージのバイナリ内に組み込まれたpythonパスを直接書き換える]]></title>
        <id>https://zenn.dev/tsujino/articles/d82c5899cc7b54</id>
        <link href="https://zenn.dev/tsujino/articles/d82c5899cc7b54"/>
        <updated>2023-11-23T10:56:38.000Z</updated>
        <summary type="html"><![CDATA[はじめに
pip等でパッケージをインストールした際、パッケージのexeファイル等のバイナリ内にpythonインタープリタの絶対パスが組み込まれます。普段の運用では特段問題はないですが、特別な事情で別のpython環境などで使用したい場合などには、指定先のパスにpythonが見つからずエラーとなってしまいます。
そう言ったケースでは、バイナリ値を直接書き換えることでエラーを回避することができます。
非常に簡単な作業ですが、備忘もかねて手順を残します。
なお、実行ファイルの書き換えについてはライセンス等に十分ご注意の上実施してください。
使用環境

OS: Windows10
Binar...]]></summary>
        <author>
            <name>Tsujino</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[長さの違う配列を足し算する (python)]]></title>
        <id>https://zenn.dev/apo_zenn/articles/ce5a47ae5184ee</id>
        <link href="https://zenn.dev/apo_zenn/articles/ce5a47ae5184ee"/>
        <updated>2023-11-23T10:34:01.000Z</updated>
        <summary type="html"><![CDATA[計算のイメージ

長さが違う配列を用意
a = [1,2,3,4,5]
b = [1,2]



bの足りない部分を0で埋めて長さをそろえる
a = [1,2,3,4,5]
b = [1,2,0,0,0]



足し算する
a + b = [2,4,3,4,5]


 やり方
np.padを使って足りない長さを0埋めして計算します．

 example.py
import numpy as np

## 長さの違う配列を足し算する
a = np.array([1,2,3,4,5])
b = np.array([1,2])
b_pad = np.pad(b, (0, 3), "cons...]]></summary>
        <author>
            <name>apo_zenn</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[tox実行時にpyenvでインストールしたバージョンを使いたい]]></title>
        <id>https://zenn.dev/hhatto/articles/89f5abb10cc74c</id>
        <link href="https://zenn.dev/hhatto/articles/89f5abb10cc74c"/>
        <updated>2023-11-23T09:39:02.000Z</updated>
        <summary type="html"><![CDATA[はじめに
tox実行時に少し古めのPythonバージョンでもテストを実行したく、環境的にpyenvを使っているのでtox+pyenvな仕組みはないかを調べました。Webを検索してみるといくつかの記事があるのですが、2023年11月現在でうまく動かなかったので、別の方法を試してみました。そのメモです。

 前提
toxのバージョンは4.x系です。
$ tox --version
4.11.3 from /usr/local/lib/python3.10/site-packages/tox/__init__.py
toxの4系は色々ぶれいきんぐなちぇんじーずが入ったようで、プラグインの仕...]]></summary>
        <author>
            <name>hhatto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonスクリプト内で動的にライブラリをインストールする際に警告ログを一切出力させない]]></title>
        <id>https://zenn.dev/nondescript/articles/89fc1bac927b14</id>
        <link href="https://zenn.dev/nondescript/articles/89fc1bac927b14"/>
        <updated>2023-11-23T07:08:16.000Z</updated>
        <summary type="html"><![CDATA[確認環境

Docker(linux/amd64):3.12.0-slim-bookworm

Anaconda(Windows10):3.11.2


 コード
requestsの例

dynamic_install.py
import importlib
import pip._internal.cli.main as cli_main

name: str = "requests"
version: str = "2.29.0"
try:
    importlib.import_module(name)
except ImportError:
    cli_main(
  ...]]></summary>
        <author>
            <name>素人の戯言</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[lambda関数とは？]]></title>
        <id>https://zenn.dev/yuto_mo/articles/be0ea32468826c</id>
        <link href="https://zenn.dev/yuto_mo/articles/be0ea32468826c"/>
        <updated>2023-11-23T06:21:44.000Z</updated>
        <summary type="html"><![CDATA[今回はPythonのlambda関数について解説します。

 結論
引数 を受け取り、処理 の結果を返す関数
lambda 引数: 処理

例

add = lambda x, y: x + y
print(add(5, 3))
# 8

 嬉しいこと


簡潔さ
lambda関数のメリットは簡潔さです。関数処理を1行で実装できるため、可読性が向上します。


関数を引数として渡せる
lambda関数は他の関数の引数として渡すことができ、高階関数（他の関数を引数として受け取る関数）との相性が良いです。(例:sorted、map、filter)



 例

リストの要素を2倍(map)
...]]></summary>
        <author>
            <name>yuu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Slackへ定期的にデータベースの内容を通知するシステムを作成する]]></title>
        <id>https://zenn.dev/masamichi2004/articles/8623398542ba63</id>
        <link href="https://zenn.dev/masamichi2004/articles/8623398542ba63"/>
        <updated>2023-11-23T05:18:50.000Z</updated>
        <summary type="html"><![CDATA[概要
この記事ではSlack APIを使って定期的にデータベースの値を持ってきてslackに通知してくれるアプリを作成します. 実務経験がない方向けにこのシステムの有効性を説明すると, 実務では基本的にデベロッパー以外の人間がデータベースの中身を確認することは難しいです(権限的な問題). ですのでBizサイドの人間が定期的にデータベースの内容を確認するためにはデータが自動的に通知されるようにしておくことがとても有効だということになります. 今回は業務連携システムで一番使われているslackを利用しますが, Discord APIなどを利用して自分で実装することも可能ですので是非トライ...]]></summary>
        <author>
            <name>Masamichi Kanakubo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[相対パスが効かない場合の原因　python]]></title>
        <id>https://zenn.dev/apo_zenn/articles/c6f021a4c0cfb2</id>
        <link href="https://zenn.dev/apo_zenn/articles/c6f021a4c0cfb2"/>
        <updated>2023-11-23T03:10:52.000Z</updated>
        <summary type="html"><![CDATA[原因
実行場所が悪かった．
実行したいファイルの階層まで移動して，pythonを実行すれば動いた．
!
私の場合，VScodeで実行しており，実行場所がホームディレクトリになってしまっていたため動かなかった．


 実行プログラムと生じたエラー

 test.py
import os

#フォルダ内のファイルをすべて読み込み
dir_path = dir_path = "../img"
files = os.listdir(dir_path)
print(files)

FileNotFoundError: [WinError 3] 指定されたパスが見つかりません。
相対パスなのだか...]]></summary>
        <author>
            <name>apo_zenn</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[行列積状態について考える (2)]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-matrix-product02</id>
        <link href="https://zenn.dev/derwind/articles/dwd-matrix-product02"/>
        <updated>2023-11-22T17:50:06.000Z</updated>
        <summary type="html"><![CDATA[目的
行列積状態 (Matrix Product State; MPS) について以前 行列積について考える を書いたが、結局あまり理解できている気がしないし、そもそも具体的に計算できている気がしないので、論文を読んで考える。

 論文
The density-matrix renormalization group in the age of matrix product states が有名らしいので、


Matrix product states (MPS)


を眺めて、今回は量子状態 \ket{\psi} = \ket{000} を MPS に変換してみたい。
2 量子ビ...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[linebotを作るときに苦労したこと(備忘録)]]></title>
        <id>https://zenn.dev/taketooon/articles/e4342e44f80e3e</id>
        <link href="https://zenn.dev/taketooon/articles/e4342e44f80e3e"/>
        <updated>2023-11-22T10:14:05.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回はlineのchatbot作成について考えてみる。ゆくゆくはchatbotとchatgptを繋げて作れるようにやってみようと考えているが、まずは基本の構造が分からなければならないので、一旦はchatbotができるようになってみる。今回の記事では基本的な解説はせず、自分が以下の動画を見て、詰まったところのみを解説しておくという感じの備忘録である。
https://www.youtube.com/watch?v=jBsvdgFMZtg&t=0s
あとは、chatgptを導入する際に使ったこのサイトで使える技術も盗んで利用している。

 備忘録

 condaからpi...]]></summary>
        <author>
            <name>taketooon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【分かる！】Djangoのフォームフレームワークの基本についてまとめ]]></title>
        <id>https://zenn.dev/tigrebiz/articles/djang-form-framework</id>
        <link href="https://zenn.dev/tigrebiz/articles/djang-form-framework"/>
        <updated>2023-11-22T09:40:55.000Z</updated>
        <summary type="html"><![CDATA[この記事の目的

Djangoでフォームフレームワークを使うことになったため、基本的なことを体系的に理解して使えるようになること。
きっとフォームを使うことは多々あるので、今後の見返せるように。


 目次


この記事の目的
目次

Djangoフレームワークについて

Djangoフレームワークの基本
フォームの例



フィールドの定義

基本的なフィールドタイプ
高度なフィールドタイプ



各フィールドの属性

CharFieldの属性
IntegerFieldの属性
DecimalFieldの属性
BooleanFieldの属性
DateFieldの属性
DateTime...]]></summary>
        <author>
            <name>taiga</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[パイソンメルマガ「Python で、情報、数学再学習」 第２１号　回帰分析]]></title>
        <id>https://zenn.dev/suehiro3721p/articles/0acc8fd7dd468a</id>
        <link href="https://zenn.dev/suehiro3721p/articles/0acc8fd7dd468a"/>
        <updated>2023-11-22T09:04:01.000Z</updated>
        <summary type="html"><![CDATA[２０２３年１１月２０日 ２１号
https://www.mag2.com/m/0001685552
このメルマガ(パイマガ)では、Python を使って、数学の再学習、高校「情報」を勉強していきます。
今回は、回帰分析、重回帰分析を勉強します。
今回の内容は、
「NumPyで行列　回帰分析 その8 最小2乗法｜Pythonで数学を学ぼう！　第29回」
https://club.informatix.co.jp/?p=18419
を参考させてもらいました。
この記事のプログラムを実行するために、以下の初期プログラムを実行してください。
#今回のプログラムを動作させるための初期設定プログラム...]]></summary>
        <author>
            <name>JJ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[anyenvを用いてCleanなMac開発環境を構築する]]></title>
        <id>https://zenn.dev/duke13/articles/9c74dd595823cbd</id>
        <link href="https://zenn.dev/duke13/articles/9c74dd595823cbd"/>
        <updated>2023-11-22T03:16:37.000Z</updated>
        <summary type="html"><![CDATA[これから開発者として新品のMacを手に入れましたあなたに、なるべくCleanな開発環境の構築方法を説明します。
ここで言うCleanの定義とは、各種のプログラミング言語をインストールして、バージョンを切り替えられる構成の意味です。
今回は、Pyhton , Node.js , Java の環境構築の手順を詳しく解説していきます。
**環境のイメージ


 1. Homebrew のインストール
まずは、パッケージマネージャーの [Homebrew][1] をインストールしましょう。Macを使う以上、いずれインストールすることになると思います。
/bin/bash -c "$(curl -...]]></summary>
        <author>
            <name>duke13</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[「Python実践データ分析100本ノック」実践編②最適化問題をortoolpyを用いずに解く]]></title>
        <id>https://zenn.dev/pipipiz/articles/90323416c2caba</id>
        <link href="https://zenn.dev/pipipiz/articles/90323416c2caba"/>
        <updated>2023-11-22T02:49:39.000Z</updated>
        <summary type="html"><![CDATA[はじめに
書籍「Python実践データ分析100本ノック」の実践編②で最適化問題に取り組みました。サンプルコードではortoolpyというpythonライブラリを用いていたのですが、私はこれを使わずに問題を解いてみました。なぜならortoolpyを使うと、何をしてるかわからないけど結果が得られるのが個人的に気持ち悪かったためです。また、調べてみるとortoolpyは他書籍のためにその著者の方が作ったライブラリで、一般的なものではないことがわかりました。（なお、ortoolpyとともに用いられているPuLPというライブラリは最適化問題を解く一般的なライブラリのようなので、こちらは使うこ...]]></summary>
        <author>
            <name>piz3in</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[rosで、何ができるのかまとめてみた(初学者向け)]]></title>
        <id>https://zenn.dev/toky/articles/b979ff51ced48f</id>
        <link href="https://zenn.dev/toky/articles/b979ff51ced48f"/>
        <updated>2023-11-22T02:35:40.000Z</updated>
        <summary type="html"><![CDATA[今回、rosについて改めて振り返ることがあったのでまとめてみました。いきなり本題から入ろうと思います。

 一体、rosでは何ができるのか
rosは公式ページにもある通り、ロボットアプリケーションを構築するためのソフトウェアライブラリ、ツールセットです。ロボットを動かすと一言で表したとしても、その中身はとても複雑です。それでは、何が複雑なのかをまとめていきます。

 さまざまなSensing moduleを使用する
ロボットを動かすにも、基本的には周囲環境の把握が必要です。つまり、さまざまなセンサーを使用することになります。rosではそれらセンサーデータを扱うためのドライバーやライブラリ...]]></summary>
        <author>
            <name>toky</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[高次相互作用を持った全結合イジング模型の相転移]]></title>
        <id>https://zenn.dev/jij_inc/articles/384fa509d0d8fc</id>
        <link href="https://zenn.dev/jij_inc/articles/384fa509d0d8fc"/>
        <updated>2023-11-22T01:08:40.000Z</updated>
        <summary type="html"><![CDATA[概要
この記事では全結合イジング模型において、相互作用を一般の多体相互作用に拡張した模型の相転移について考えます。相互作用は一様で強磁性的なものを仮定します。このモデルについては検索してもあまりヒットしないのですが、モデルの性質自体はすでによく知られており[1]、相互作用の次数をpとしてp>2で一次転移を示すことが分かっています。この記事ではこのことを確認します。
ちなみにどうしてこのような模型に興味を持ったかというと、自分はJijに入社した当初、高次制約なし二値最適化問題[2]に対してシミュレーテッドアニーリングを行うソルバーを開発[3]していたのですが、その際にソルバーが正...]]></summary>
        <author>
            <name>pagliacci</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[有限要素法による非時間依存1次元シュレディンガー方程式]]></title>
        <id>https://zenn.dev/lao/articles/b079fc81e84af4</id>
        <link href="https://zenn.dev/lao/articles/b079fc81e84af4"/>
        <updated>2023-11-22T00:55:56.000Z</updated>
        <summary type="html"><![CDATA[n番煎じですがやってみたかったので

 理論編

 1.有限要素法とは？
対象とする領域を小領域（以降, 要素と呼ぶ）に分割し各領域ごとに適当な近似関数で解を近似する方法.

 2.シュレディンガー方程式
時間に依存しない1次元のシュレディンガー方程式は以下の式(2.1)で与えられる.

i\hbar\frac{\partial\psi(x, t)}{\partial t}=\left(-\frac{\hbar^2}{2m}\frac{\partial^2}{\partial x^2}+V(x)\right)\psi(x, t)\tag{2.1}

この記事では式(2.1)ではなく, 以...]]></summary>
        <author>
            <name>らお</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【初心者向け/ITスクール 85日】Coding Test, React]]></title>
        <id>https://zenn.dev/eldorado215/articles/91d6892d488ac3</id>
        <link href="https://zenn.dev/eldorado215/articles/91d6892d488ac3"/>
        <updated>2023-11-20T14:33:07.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今日は、ITスクールに通った85日目の日です。
今日は午前中には、Pythonでコーディングテストを練習し、
いよいよReactを勉強することになりました！
早めに何かを作ってみてSpringBootと連携する練習をしてみたいと思います！

 Python

 unpacking print(*list, sep)

listの要素を内部から巡回して、要素ことにプリントする高級文法です。

例えば、完全数を判別するアルゴリズムを組み、完全数の場合、その数を除外して約数のリストをプリントするとします。
6の場合、[1,2,3,6]が約のリストであり、6は1+2+3なので完全数...]]></summary>
        <author>
            <name>Hyon🇰🇷</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GradioをDockerで動かす]]></title>
        <id>https://zenn.dev/optimisuke/articles/ebf22f7449a1ca</id>
        <link href="https://zenn.dev/optimisuke/articles/ebf22f7449a1ca"/>
        <updated>2023-11-20T13:19:26.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Gradio っていう機械学習モデルとかをインタラクティブなアプリにするためのフレームワークを触り中です。ブラックボックスの塊みたいなフレームワークで、機械学習の成果をいい感じに共有するのに良さそうです。
https://www.gradio.app/
適当なところでデプロイしてみたくて、Docker で動かしてみたところ、少しつまずきました。今回、ChatGPT にも手伝ってもらって解決したので、そのプロセスも含めて共有です。

 Hello, World!
https://www.gradio.app/guides/quickstart
Getting Started ...]]></summary>
        <author>
            <name>Optimisuke</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitpodでSeleniumを動かしてみたお話]]></title>
        <id>https://zenn.dev/rie_amasato/articles/1ee3af1a885fdc</id>
        <link href="https://zenn.dev/rie_amasato/articles/1ee3af1a885fdc"/>
        <updated>2023-11-20T09:35:20.000Z</updated>
        <summary type="html"><![CDATA[Webサイトからデータをとってきて、（要はスクレイピングして）データベースに保存をしたいとき、ログイン画面という関門が立ち塞がることがあります
普段のわたしはでログイン情報を送るURLに POSTでアクセスして〜というゴリ押しでやるのですが、ふとした気まぐれでSeleniumを使ってスクレイピングすることにしました
GitPodにiPadからアクセスしてスクレイピングする方法を書き留めておく。そんなおはなし。
（Gitpodに限らず、CUI環境でSeleniumを動かすときのメモとしても使えそう。かも）

 Seleniumとは
Seleniumは、PythonでChrome（などのブラ...]]></summary>
        <author>
            <name>Amasato Rie(遍怜 悧叡)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[データ分析の前段階の基本作業を「Python実践データ分析100本ノック」で学ぶ]]></title>
        <id>https://zenn.dev/pipipiz/articles/77830a3ba07778</id>
        <link href="https://zenn.dev/pipipiz/articles/77830a3ba07778"/>
        <updated>2023-11-20T06:31:40.000Z</updated>
        <summary type="html"><![CDATA[はじめに
私は業務の一環としてPythonを使ったデータ分析をしているのですが、もっと実力をあげたいと思っています。そこで、書籍「Python実践データ分析100本ノック」に取り組んでみました。その結果、実際に仕事でデータ分析をする際にまず行うべきデータ加工と事前分析について、その手順と具体的な方法を学ぶことができました。
本記事では、これから本書に取り組んでみようとしている方に向けて、私が学んだことを共有したいと思います。
なお、本書は基礎編、実践編①②、発展編から構成されていますが、本記事で取り上げているのはこのうち基礎編、実践編①の内容です。実践編②以降で学んだことについては別...]]></summary>
        <author>
            <name>piz3in</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FastAPIでAPIを使ってみよう①]]></title>
        <id>https://zenn.dev/kou_kawa/articles/13-fastpi-api-hotpepper</id>
        <link href="https://zenn.dev/kou_kawa/articles/13-fastpi-api-hotpepper"/>
        <updated>2023-11-19T13:50:05.000Z</updated>
        <summary type="html"><![CDATA[🎯目的

公開されているAPIからデータを取得してみよう
今回はフリーでクライアントキーを取得して実行できる「hotpepper」を使用してみた


 ホットペッパーのAPIキーを取得
以下サイトで新規登録を行い、APIキーを取得します。
https://webservice.recruit.co.jp/index.html
Powered by ホットペッパーグルメ Webサービス

 API構成
今回のAPI構成は以下になります。
GET : /hotpepper (ホットペッパーのAPIを実行し、データを取得する)

 プロジェクトフォルダ構成
今回のプロジェクトフォルダ構成は...]]></summary>
        <author>
            <name>Kou</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【要注意】Azure OpenAIのopenaiパッケージのバージョンが上がったことによりPythonの書き方が大きく変わりました]]></title>
        <id>https://zenn.dev/pipon_tech_blog/articles/6fbc3cc6cb22be</id>
        <link href="https://zenn.dev/pipon_tech_blog/articles/6fbc3cc6cb22be"/>
        <updated>2023-11-19T10:11:30.000Z</updated>
        <summary type="html"><![CDATA[こちらの記事でもOpenAIのパッケージが変わったことに驚いたことを書いているのですが、
友人もコード書き直しだ〜と嘆いていたので、皆んな困ってると思い記事を書いています。
https://zenn.dev/pipon_tech_blog/articles/f84f4e11c085a9
OpenAI Pythonの1系が出まして、普通にinstallすると以前の書き方と変わります。
公式はこちらがわかりやすいです。
https://learn.microsoft.com/ja-jp/azure/ai-services/openai/quickstart?tabs=command-line...]]></summary>
        <author>
            <name>seiyakitazume</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ruff + pre-commitでコミット時にコード品質を保ちたい]]></title>
        <id>https://zenn.dev/nowa0402/articles/79aaeb8db5731c</id>
        <link href="https://zenn.dev/nowa0402/articles/79aaeb8db5731c"/>
        <updated>2023-11-19T02:30:00.000Z</updated>
        <summary type="html"><![CDATA[リモートブランチのコードの品質を保ちたい
最近、コードレビューする時にこんな悩みがありました。

戻り値のアノテーションが漏れているな…
docString書き忘れている…
あれ？そもそもこれ書いた人のフォーマッター・リンター効いていないかも…？

個人的な意見として
リモートブランチにプッシュされるコードはリンターやフォーマッターを正常に通過したものであってほしいと思っています。
正常に通過したものであれば、本来のコードレビューの目的である
コードの書きっぷりに注力できると思いました。
色々調べた結果、pre-commitを使えば解決できそうだとわかったので
検証含めて記事に残しま...]]></summary>
        <author>
            <name>nowa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ryeで作成したPythonカーネルにVS CodeのJupyterで接続する]]></title>
        <id>https://zenn.dev/takelushi/articles/ca8ed217a66593</id>
        <link href="https://zenn.dev/takelushi/articles/ca8ed217a66593"/>
        <updated>2023-11-18T17:01:46.000Z</updated>
        <summary type="html"><![CDATA[はじめに
rye で Python 環境を作成して VS Code の Jupyter で接続する際、同一ワークスペースに .venv がある場合は問題なくカーネルを選択できたのですが、 異なるワークスペースからカーネルの選択ができませんでした。poetry+pyenv ではこのようなことがなかっただけに困りました。
本記事では、対処方法を紹介します。

 筆者の実行環境

Windows 11
Visual Studio Code 1.84.2

使用する拡張機能: Python, Jupyter
表示言語は English


rye 0.15.2
PowerShell 5.1
...]]></summary>
        <author>
            <name>takelushi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[音楽をメルスペクトログラム+UMAP + G-meansでクラスタリングしてみた]]></title>
        <id>https://zenn.dev/koujimachi2023/articles/c16463ee94d8ae</id>
        <link href="https://zenn.dev/koujimachi2023/articles/c16463ee94d8ae"/>
        <updated>2023-11-18T14:43:40.000Z</updated>
        <summary type="html"><![CDATA[TL;DR

音楽をメルスペクトログラムで画像化
メルスペクトログラムをUMAPで次元削減 + G-meansによるクラスタリングし、似ている音楽ごとを教師なしでグループ分け


 動機
今回の検討の発端は、趣味でやっているDTMの悩み事です。DTMとはDesktop Top Musicの略で、パソコンを使った音楽制作のことです。正直下手の横好きなのですが、オリジナルの曲を自作できるのは魅力的です。
さて、DTMをやっていると「サンプルパック」というものをよく使います。サンプルパックとは、オーディオファイル(.wav等)がたくさん入っているパッケージのようなものです。例えば、以下のよ...]]></summary>
        <author>
            <name>おいしい</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ChatGPT]コラッツの問題をプログラムで書いてもらう(Python)]]></title>
        <id>https://zenn.dev/isi00141/articles/3eba2b23762cd9</id>
        <link href="https://zenn.dev/isi00141/articles/3eba2b23762cd9"/>
        <updated>2023-11-18T03:18:40.000Z</updated>
        <summary type="html"><![CDATA[はじめに
コラッツの問題とは、すべての自然数に対して、奇数ならば３倍して１を足す、偶数ならば２で割るという操作を繰り返すと、有限回の操作回数で１になるという数学的な問題です。
指定した整数を設定すると、上の規則に従って操作するプログラムをChatGPTで書いてもらいます。

 プログラム

質問
コラッツの問題をpythonで書いて。


ChatGPT
コラッツの問題（または3n+1問題）は、次のような規則に基づいて数列を生成する数学的な
問題です。与えられた整数nが偶数の場合、nを2で割る。奇数の場合は3をかけて1を足す。
この操作を繰り返すと、最終的には数列が1に到達します。コ...]]></summary>
        <author>
            <name>ISI</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【新NISAに備えよう!】Pythonで最適な投資信託ポートフォリオを調べてみた]]></title>
        <id>https://zenn.dev/omizunomitaro/articles/710c6015e5dac8</id>
        <link href="https://zenn.dev/omizunomitaro/articles/710c6015e5dac8"/>
        <updated>2023-11-18T02:57:18.000Z</updated>
        <summary type="html"><![CDATA[✅目的

Pythonを使って現代ポートフォリオ理論の計算をします。
現代ポートフォリオ理論を利用することでリスクを最小化し、リターンを最大化する投資比率を調べることができます。
今回は投資信託の過去の価格変動をもとに、リスクとリターンを計算し最適なポートフォリオ比率を求めます。
今回求めるのはあくまで数学的な将来予想の結果であり、収益を保証するものではありません。
最終的な投資判断は自己責任となりますのでよろしくお願いします。
最大限注意をして、この記事を作成していますが、誤りがありましたらご指摘いただけると幸いです。


 📃現代ポートフォリオ理論とは

1950年代にハリー・マ...]]></summary>
        <author>
            <name>おみずのみ太郎</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA['conda' は、コマンドレット、関数、スクリプト ファイル、または操作可能なプログラムの名前として認識されません。]]></title>
        <id>https://zenn.dev/hki/articles/959a11aa195666</id>
        <link href="https://zenn.dev/hki/articles/959a11aa195666"/>
        <updated>2023-11-18T02:13:26.000Z</updated>
        <summary type="html"><![CDATA[概要

「conda : 用語 'conda' は、コマンドレット、関数、スクリプト ファイル、または操作可能なプログラムの名前として認識されません。」の原因と対処方法
そのままでも使えるので、実害は少ないが、エラーメッセージが気持ち悪いので原因調査と対処方法をまとめる


 環境

Windows 11
Visual Studio Code Version: 1.84.2

Python extension for Visual Studio Code (Microsoft製)


miniconda (conda 23.5.2)


 原因

Visual Studio Code...]]></summary>
        <author>
            <name>hki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[NFCカードを使ったPayPayの簡易決算システム]]></title>
        <id>https://zenn.dev/kakera_lab/articles/59a067e3fc305f</id>
        <link href="https://zenn.dev/kakera_lab/articles/59a067e3fc305f"/>
        <updated>2023-11-17T09:33:06.000Z</updated>
        <summary type="html"><![CDATA[概要
イベントを企画した時、現金集金がめんどくさい！できれば全部電子決算したい！でも外部サービスを利用するにはコストがかかる。そんな時、PayPayで集金ができることを知り目からウロコでした。一方で、人によって金額が異なる場合に金額設定をしないと確認作業が増えるじゃないか！ etc...と微妙に不便さを感じました。この少しの不便さを埋めるためにPayPay＋NFCカード＋Python＋PHPを利用したシステムを作りました。限定的な使い方ですが、誰かのお役に立てば嬉しいです。
!
この記事はNFCカードを使ったプロフィール交換システム作るのシステムを作った際に一緒に実装したものです。そ...]]></summary>
        <author>
            <name>kakera lab</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pyenvとPoetryでPythonの開発環境を整える]]></title>
        <id>https://zenn.dev/ytksato/articles/0e4d035a30273a</id>
        <link href="https://zenn.dev/ytksato/articles/0e4d035a30273a"/>
        <updated>2023-11-17T09:29:17.000Z</updated>
        <summary type="html"><![CDATA[現状

pyenvを使ってPythonをインストール
virtualenvを使ってPythonの仮想環境を構築

今回は、pyenvはそのままで仮想環境にPoetryを採用して、既存のDjangoのプロジェクトを開発を進めるのが目的。

 Pythonのインストール方法

直接PCにインストールする方法
pyenvやasdfなどのPCに複数バージョンのPythonをインストールできるツールを使う方法

１でやっちゃうと複数プロジェクトを作る時に、バージョンの競合が起きて
めんどくさいことになるので２の方法を使う。
仮想環境内でPythonのバージョンを切り替えられると思いっきり勘違い...]]></summary>
        <author>
            <name>Yutaka Sato</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ラズパイ+OpenCV+Streamlitで顔認証アプリをつくってみた]]></title>
        <id>https://zenn.dev/ncdc/articles/665eeefb1205ac</id>
        <link href="https://zenn.dev/ncdc/articles/665eeefb1205ac"/>
        <updated>2023-11-17T07:46:38.000Z</updated>
        <summary type="html"><![CDATA[はじめに
会社のハッカソンイベントで、顔認証アプリをつくってみたのでその記録です。
具体的にやったこととしては以下になります。

RaspberryPi4+公式CameraModule3で撮影してみる
カメラで撮った映像をOpenCVで顔認証処理してみる
Streamlitで上記をWebアプリ化してみる

一緒につくったメンバー


@ibaraki さん

@tsukatsuka1783 さん


 開発環境

RaspberryPi4
Bullseye 64bit
Python 3.9.2
CameraModule3


 ラズパイとカメラで撮影
こちら非常に苦労しまして長くなっ...]]></summary>
        <author>
            <name>T-KND</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【python】OpenAI Chat APIでJson modeを試す]]></title>
        <id>https://zenn.dev/i_shinya/articles/d2551f76a21654</id>
        <link href="https://zenn.dev/i_shinya/articles/d2551f76a21654"/>
        <updated>2023-11-17T07:09:33.000Z</updated>
        <summary type="html"><![CDATA[OpenAI Chat APIでJson modeを試す
11/7のOpenAI devdaysにて新たに公開されたJson modeを使ってみたのでそのサンプルです。
いくつかサンプルを公開している方がいましたが、システムプロンプトが単純なものが多かったので自分が使いそうなケースで、GPTに入力内容を判別（分類？）してもらうようなサンプルを書いてみました。

 Json modeのちょこっと説明
Json modeではAPIからのレスポンスを常にjson形式にすることができ、APIのパラメータでresponse_format={"type": "json_object"}を付与する...]]></summary>
        <author>
            <name>デグー大好き丸</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-326｜B - 326-like Numbers]]></title>
        <id>https://zenn.dev/hyperdb/articles/bee5c588ee4781</id>
        <link href="https://zenn.dev/hyperdb/articles/bee5c588ee4781"/>
        <updated>2023-11-17T05:21:25.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-326 B - 326-like Numbers



 提出結果
def getInt():
    return int(input())


def checkNum(x):
    a, b, c = map(int, list(str(x)))

    return (True if a * b == c else False)


def main():
    n = getInt()

    for i in range(n, 920):
        if checkNum(i):
            print(i)
      ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-326｜A - 2UP3DOWN]]></title>
        <id>https://zenn.dev/hyperdb/articles/2d8e22b507130f</id>
        <link href="https://zenn.dev/hyperdb/articles/2d8e22b507130f"/>
        <updated>2023-11-17T05:21:24.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-326 A - 2UP3DOWN



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    x, y = getIntMap()

    d = y - x
    print('No' if d > 2 or d < -3 else 'Yes')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[部品表を作ってみました]]></title>
        <id>https://zenn.dev/32nori/books/c7686eb2704219</id>
        <link href="https://zenn.dev/32nori/books/c7686eb2704219"/>
        <updated>2023-11-17T01:00:52.000Z</updated>
        <summary type="html"><![CDATA[昔から部品表のサンプルをネット上で検索していましがた見かける事がなかったので
自分で作ってみようと思い立ちました。お役立ちになるか分かりませんが動くものをつくりましたのでよろしければお使い下さい。]]></summary>
        <author>
            <name>32nori</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[決定木アルゴリズムをIris-datasetに対してPythonで実行した!]]></title>
        <id>https://zenn.dev/park_udp/articles/python-kextutei</id>
        <link href="https://zenn.dev/park_udp/articles/python-kextutei"/>
        <updated>2023-11-17T00:17:42.000Z</updated>
        <summary type="html"><![CDATA[背景
今回では、大学での課題として、機械学習ライブラリを利用して、決定木アルゴリズムをIris-datasetに対して実行結果をレポートにすることになりました！

 ライブラリ準備

library.py
import japanize_matplotlib  #matplotlibで日本語を表示するためのライブラリ。
import matplotlib.pyplot as plt #データのグラフィック化（プロット）のために使用する
from sklearn.datasets import load_iris #irisデータを読み込むために使用する
from sklearn.tr...]]></summary>
        <author>
            <name>PARUDP</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[多変量ラプラス分布]]></title>
        <id>https://zenn.dev/totopironote/articles/eb5038182ea733</id>
        <link href="https://zenn.dev/totopironote/articles/eb5038182ea733"/>
        <updated>2023-11-16T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
論文に載っているシミュレーションのデータを生成しようと思ったら、多変量ラプラス分布がでてきて、scipyで実装しようと思ったら、まさかのなくて自分で関数作らないといけなくなったので、もし同じ状況になった方いたら参考にしてください。
内容は詳しくはこの論文を見てください。(参考文献にリンクあります)
The Laplace Distribution and Generalizations

 多変量ラプラス分布

 密度関数
平均0 、共分散行列が\Sigmaのラプラス分布の密度関数は次のようにかける。

g(\bm{y}) = \frac{2}{(2\pi)^{d/2}|\...]]></summary>
        <author>
            <name>ととぴろnote</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Docker]外部データの注入は都度で、コンテナ内で生成したデータは必要なときに引っ張ってきたい]]></title>
        <id>https://zenn.dev/jordan/articles/d3d1f328e76a44</id>
        <link href="https://zenn.dev/jordan/articles/d3d1f328e76a44"/>
        <updated>2023-11-16T16:03:56.000Z</updated>
        <summary type="html"><![CDATA[https://github.com/lll-lll-lll-lll/sample-docker-cp-cli
タイトルがやりたいことだが、背景も含めて改めて説明する。
PythonのFireを使ったCLIを作ろうとしていて、外部との共有もあったのでDockerを使おうとしていた。
外部データは都度変化するので、コンテナ生成時にbindマウントし、volumeにマウントされたデータはどうにかこうにかしてローカルに持ってきたい。GUIはやだ
コマンド一発よろ。って感じで任されたので、解決策をメモる。

 imageをビルドする
dockerのイメージ名をcli_imageで指定。
dock...]]></summary>
        <author>
            <name>ShunpeIII</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GCOM衛星画像の取得と変換]]></title>
        <id>https://zenn.dev/kentakudo/articles/d276466131b982</id>
        <link href="https://zenn.dev/kentakudo/articles/d276466131b982"/>
        <updated>2023-11-16T14:36:43.000Z</updated>
        <summary type="html"><![CDATA[JAXAが開発、打ち上げ、運用している人工衛星にGCOMシリーズという一連のプロジェクトがある。
GCOMはGlobal Change Observation Missionの略で、(環境という単語が抜けている気がするが、)地球環境の変動を観測するというミッションのもと2機の人工衛星を打ち上げている。
初号機は2012年に打ち上げられた「GCOM-W1」通称「しずく」と呼ばれる衛星で、水循環をターゲットに降水量や土壌に含まれる水分、海面水温などの観測を行っている。しずくは設計寿命の5年の2倍を超えて今も運用中だ。
二号機は2017年に打ち上げられた「GCOM-C」通称「しきさい」と呼ばれ...]]></summary>
        <author>
            <name>Kenta Kudo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS Lambda に deploy した lxml が動かなくなったお話]]></title>
        <id>https://zenn.dev/tututen/articles/262f4703155730</id>
        <link href="https://zenn.dev/tututen/articles/262f4703155730"/>
        <updated>2023-11-16T08:21:57.000Z</updated>
        <summary type="html"><![CDATA[発端
2023年11月上旬頃にアプリを修正してDeployしてエラー通知が届く

Couldn't find a tree builder with the features you requested: lxml. Do you need to install a parser library?

これは BeautifulSoup の parser で推奨されてる、lxml が使えない（もしくはインストールされていない） 場合に出るログである。

 調査
今回のアプリは serverless framework を利用し、github actions を利用して deploy し...]]></summary>
        <author>
            <name>tututen</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SQLAlchemy で MySQL の UPSERT を実装する]]></title>
        <id>https://zenn.dev/k0kishima/articles/6477007b5fb283</id>
        <link href="https://zenn.dev/k0kishima/articles/6477007b5fb283"/>
        <updated>2023-11-16T08:17:09.000Z</updated>
        <summary type="html"><![CDATA[概要
Rails だと以前から activerecord-import っていう gem で Upsert が実現できたり、6.x や 7.x からは ActiveRecord が upsert_all を実装している。
Python が採用されているあるプロジェクトでは ORM に SQLAlchemy を採用しているが、これが Rails の ActiveRecord のように抽象化された UPSERT は行えず、各RDB毎に用意されたインターフェースを用いて適当に実装する必要があった。
ここでは MySQL を利用した実装例を記載する。

 動作確認環境



ライブラリ
バー...]]></summary>
        <author>
            <name>k0kishima</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Tello】ドローン操縦をしてみる]]></title>
        <id>https://zenn.dev/watson_sei/articles/e11248e1686eb3</id>
        <link href="https://zenn.dev/watson_sei/articles/e11248e1686eb3"/>
        <updated>2023-11-16T08:06:20.000Z</updated>
        <summary type="html"><![CDATA[TelloをC++(Pythonもサブで）で操縦する方法についてまとめました。

 Telloとは
Telloドローンは、Ryze Tech社によって製造された小型のクワッドコプターで、重量はわずか80gと非常に軽量です。このドローンは、DJIのフライトテクノロジーを利用しており、Vision Positioning Systemという高度な飛行制御システムを搭載しています。このシステムにより、Telloは室内での飛行に適しており、特定の位置にホバリングすることができます。
Vision Positioning System
VPS(Visual Positioning System)は...]]></summary>
        <author>
            <name>Watson-Sei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Slackへの匿名投稿機能を Slack Bolt for Python + AWS SAM で作ってみる]]></title>
        <id>https://zenn.dev/d2c_mtech_blog/articles/293d8c641e3361</id>
        <link href="https://zenn.dev/d2c_mtech_blog/articles/293d8c641e3361"/>
        <updated>2023-11-16T04:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは、D2Cエンジニアの穐澤です。
Slackで気軽に雑談したいけど、名前を出して発言するのはちょっと気が引けると感じる方も世の中には多いのではないでしょうか？
その一解決策として、本記事では匿名投稿を実現するSlackアプリを作成してみたいと思います。
匿名投稿の実現という点のみで言えば、以下記事のようにSlackのワークフロービルダーから簡単に機能を作成でき、わざわざSlackアプリを作成する必要もありません。
https://chidakiyo.hatenablog.com/entry/slack-workflow-anonymous
https://logic...]]></summary>
        <author>
            <name>D2C エンジニア穐澤</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[float16, float32, float64の取れる範囲 (python)]]></title>
        <id>https://zenn.dev/apo_zenn/articles/57c9439265cea5</id>
        <link href="https://zenn.dev/apo_zenn/articles/57c9439265cea5"/>
        <updated>2023-11-16T02:10:13.000Z</updated>
        <summary type="html"><![CDATA[float16:　整数部分を含め，5桁まで保持　　(例: 123.44)
float32:　整数部分を含め，8桁まで保持　　(例: 123.45679)
float64:　整数部分を含め，17桁まで保持　 (例: 123.45678912345679)

 test.py
import numpy as np

### float16, 32, 64
a = np.array(123.45678912345678912)
b = np.array(123.45678912345678912)
c = np.array(123.45678912345678912)

a = a.asty...]]></summary>
        <author>
            <name>apo_zenn</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[中学英語レベルの純日本人理系大学生が、1ヶ月ちょいでAI駆使して卒論7割終わらせながらTOEIC 900超えた話]]></title>
        <id>https://zenn.dev/mohki7/articles/578fb1cf59c901</id>
        <link href="https://zenn.dev/mohki7/articles/578fb1cf59c901"/>
        <updated>2023-11-15T17:41:29.000Z</updated>
        <summary type="html"><![CDATA[はじめに
データサイエンティストを目指して日々勉強している、慶應大学理工学部4年生（2023.11.14時点）
取得資格、コンペ優勝経験など、リアルタイムの情報は👇👇👇をみてね
X: @A7_data←こういう者です。
プロフィールページ→こちら
※全て、個人の意見です。個人差もあります。

 TOEICとは
TOEICは、Test of English for International Communicationの略で、非英語圏の人々がビジネスシーンで英語を使う能力を測るためのテスト。
リスニングとリーディングの2つのセクションで構成されており、それぞれ495点満点、合計990点...]]></summary>
        <author>
            <name>A7@データサイエンティスト目指してる大学生</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[起動中のMayaでPytestを実行する]]></title>
        <id>https://zenn.dev/tack2/articles/d1eefbcf031da9</id>
        <link href="https://zenn.dev/tack2/articles/d1eefbcf031da9"/>
        <updated>2023-11-15T14:31:29.000Z</updated>
        <summary type="html"><![CDATA[目的
MayaでPytestを実行する時は通常下記の様にコマンドプロンプトで実行する。
mayapy -m pytest
しかし、この方法だと毎回standalone起動が必要となり、テストに時間がかかるため、起動中のMayaでPytestを実行したくなった。

 実行できない
普通にスクリプトエディターで実行しても下記エラーが発生し、できない。
import pytest
pytest.main(["テストフォルダ"])

# INTERNALERROR>     self.isatty = file.isatty()
# INTERNALERROR> Attribut...]]></summary>
        <author>
            <name>Tack2@TA</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PyGMTと気象庁のJSONを使って地震の分布を描いてみる]]></title>
        <id>https://zenn.dev/ssfuno/articles/29c092760e7bcb</id>
        <link href="https://zenn.dev/ssfuno/articles/29c092760e7bcb"/>
        <updated>2023-11-14T13:35:23.000Z</updated>
        <summary type="html"><![CDATA[イントロダクション
以前の記事では、USGSの提供する地震情報を使って地震の分布を描きましたが、今回は気象庁の地震情報を使って描いてみます。
無料で利用できる気象庁の地震情報には下記のようなものがあります。



情報
対象期間
特徴




震度データベース
1919年〜
リアルタイム性はないが、詳細な条件で情報を絞り込むことができる。CSV形式で出力可能


Atomフィード
過去数日間
リアルタイム性があり、詳細な仕様が公開されているので、自動処理に適している。XML形式


気象庁Webページ表示用JSON
過去30日間
リアルタイム性はあるが、APIとして提供されているわけ...]]></summary>
        <author>
            <name>すふー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】ファイル内でUTF8の日本語を扱う際に'cp932'のillegal multibyteがでる問題の対策]]></title>
        <id>https://zenn.dev/hama_matcha/articles/67b4935ac4a7fa</id>
        <link href="https://zenn.dev/hama_matcha/articles/67b4935ac4a7fa"/>
        <updated>2023-11-14T07:18:00.000Z</updated>
        <summary type="html"><![CDATA[概要
下記のようなエラーが発生する
UnicodeDecodeError: 'cp932' codec can't decode byte 0x93 in position 282: illegal multibyte sequence
これはWindowsでUTF8のエンコードファイル内に日本語がある場合、Win側がShift-JIS (CP932)としてファイルを取り扱うためエラーが起きる。
ここでは、大本のソースコードを編集せずに修正する方法を記載する。

 関連資料


Windows 上の Python で UTF-8 をデフォルトにする


Pythonでファイルを開く際...]]></summary>
        <author>
            <name>_hama</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[春闘における一時金の支給状況PDFの加工]]></title>
        <id>https://zenn.dev/argon/articles/91cf4e03f14dce</id>
        <link href="https://zenn.dev/argon/articles/91cf4e03f14dce"/>
        <updated>2023-11-14T05:30:45.000Z</updated>
        <summary type="html"><![CDATA[連合は春季に賃金交渉の結果を公表している。
しかし公表形式はPDFとなっており、時系列での評価をするためには手間がかかる。
このため、今回は特に一時金の支給状況に限定して、pdfの表をpythonを用いて加工する。
なお、今回の作業は環境構築を含め、githubにあるリポジトリから再現可能。
https://github.com/kigasudayooo/pdf_to_df
まず、今回の階層構造は以下の通り。
.
├── code
│   ├── pdf_list.json
│   └── test.ipynb
└── data
pdf_list.jsonは以下のように、pdfのリンクと...]]></summary>
        <author>
            <name>あるごん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】日付操作の基本]]></title>
        <id>https://zenn.dev/robes/articles/f288800b3a2eb5</id>
        <link href="https://zenn.dev/robes/articles/f288800b3a2eb5"/>
        <updated>2023-11-13T11:27:01.000Z</updated>
        <summary type="html"><![CDATA[この記事では、Pythonでの日付操作の基本をご紹介します。
具体的には、以下の日付型⇔文字列型・数値型の変換について、Pythonコードをご紹介します。

日付型（date型）データを文字列データ（YYYYMMDD形式）に変換
文字列データ（YYYYMMDD形式）を日付型データに変換
数値型データ（YYYYMMDD形式）を日付型データに変換
エポック秒（UNIX時間）を日付型データに変換


 日付型⇔文字列型・数値型の変換
!
各タスクを解くためのデータフレームを用意します。

import pandas as pd

df = pd.DataFrame({
    'date型':...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】OSモジュールについてまとめました]]></title>
        <id>https://zenn.dev/robes/articles/ae1f1dbcb0c5aa</id>
        <link href="https://zenn.dev/robes/articles/ae1f1dbcb0c5aa"/>
        <updated>2023-11-13T11:23:41.000Z</updated>
        <summary type="html"><![CDATA[Pythonコードを、さまざまOSで使えるようにするため、OSモジュールがあります。
OSモジュールを使えば、ファイルやディレクトリの操作が簡単になります。
そんな便利なOSモジュールについて、一覧形式でまとめました。



関数
内容




os.getcwd()
現在の作業フォルダのpathを取得する


os.chdir(path)
作業フォルダをpathに変更する


os.mkdir(path)
フォルダをpathに作成する


os.rmdir(path)
フォルダを削除する。フォルダの中身は空でないと削除できない


os.path.exists(path)
ファイルが存...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PyO3拡張にPythonの型ヒントを付ける]]></title>
        <id>https://zenn.dev/jij_inc/articles/pyo3-mannually-type-stub-file</id>
        <link href="https://zenn.dev/jij_inc/articles/pyo3-mannually-type-stub-file"/>
        <updated>2023-11-13T11:04:26.000Z</updated>
        <summary type="html"><![CDATA[Pythonの型ヒントとstub file
Python 3.5 (PEP 484) から型ヒントが導入され、Pythonのコードに型を付けることが出来るようになりました。これはPythonのコードを読むときに型を理解しやすくなるだけでなく、IDEなどのツールが型を利用して補完やリファクタリングを行うことが出来るようになります。また、型ヒントを付けることで静的解析を行うことが出来るようになり、実行時のエラーを減らすことが出来ます。
def greeting(name: str) -> str:
    return 'Hello ' + name
Pythonの型ヒントの歴史と...]]></summary>
        <author>
            <name>termoshtt</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[個人開発で会議中ランプを制作]]></title>
        <id>https://zenn.dev/x_point_1/articles/0d4e2c7fcaa885</id>
        <link href="https://zenn.dev/x_point_1/articles/0d4e2c7fcaa885"/>
        <updated>2023-11-13T05:45:25.000Z</updated>
        <summary type="html"><![CDATA[はじめに
初めまして、ryotaです。
エックスポイントワンで働き始めて半年が経過した、まだまだ駆け出しのエンジニアryotaです。
日々わからないことだらけの私ですが、今回は会議中ランプを自作してみることにしました。
何かと不慣れな為、歪なところもあるかと思いますが、超絶大目に見てやってください😋

 概要
まず今回使用するのがざっとこんな感じです。

ON AIR ランプ（よくみるやつ）
MaBeee（電池型ワイヤレス電源供給デバイス）

ぶっちゃけローカルアプリなのでそこまで難しくはありません。
というのも当初はAWSにデプロイすべくterraformを使用して作成していたので...]]></summary>
        <author>
            <name>ryota</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Lambdaチュートリアル: Amazon S3 トリガーを使用してサムネイル画像を作成するを試してみた]]></title>
        <id>https://zenn.dev/nenenemo/articles/56f78fd441e84e</id>
        <link href="https://zenn.dev/nenenemo/articles/56f78fd441e84e"/>
        <updated>2023-11-13T05:23:26.000Z</updated>
        <summary type="html"><![CDATA[はじめに
awsのLamdbaの以下のチュートリアルでかなりハマってしまいました...。調べてもよくわからず、M1 Macを使用しているからなのか?など色々難しく考えてしまっていたのですが、解決方法はシンプルでした。
https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/with-s3-tutorial.html#with-s3-tutorial-create-function-code
ちなみにどんなエラーだったのかというと
https://predora005.hatenablog.com/entry/2021/05/29/1900...]]></summary>
        <author>
            <name>ネモさん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[share]]></title>
        <id>https://zenn.dev/aoyagi816/articles/509eeacb59ea4e</id>
        <link href="https://zenn.dev/aoyagi816/articles/509eeacb59ea4e"/>
        <updated>2023-11-12T23:57:54.000Z</updated>
        <summary type="html"><![CDATA[https://drive.google.com/drive/folders/1qx0hKZcimE4eJptlufPyQGCeY0SY35ak?usp=sharing]]></summary>
        <author>
            <name>Aoyagi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[音声認識機能をつけてみた]]></title>
        <id>https://zenn.dev/pienthon/articles/3e0e96488f8779</id>
        <link href="https://zenn.dev/pienthon/articles/3e0e96488f8779"/>
        <updated>2023-11-12T15:37:39.000Z</updated>
        <summary type="html"><![CDATA[MVP機能の完成が見えてきた
大風邪をひきました。
ベッドで寝ながらPCいじってるのでギリギリレベル。
しかしながら音声を聞き取り、そのテキストをAPIに投げ、レスポンスを受け取るという部分までは完成しました。

「手を振って」と声をかけたらwaveというレスポンスが返ってきています。
ここまで来れば、あとはモデルのアニメーションを制御するだけです。
これからまだまだ機能はつけていくつもりですが、かなりミニマルなベータ版として完成したのではないでしょうか。

 画面のデザインも考えていきたい
ここまできたので、そろそろ画面構成も考えていきたいところです。
Figmaで画面作ってみよう...]]></summary>
        <author>
            <name>Rininmmmment</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VRAMが少ない環境でLLMを効率的にfine-tuneしてベクトル検索を実現する]]></title>
        <id>https://zenn.dev/yner/articles/llm_book_text_similarity</id>
        <link href="https://zenn.dev/yner/articles/llm_book_text_similarity"/>
        <updated>2023-11-12T10:26:46.000Z</updated>
        <summary type="html"><![CDATA[LLM周りの基本的な知識とTransformersをもっと扱えるようになりたくて、最近 大規模言語モデル入門を読んでいたのですが、その中で「メモリ効率の良いファインチューニング」という節が面白くて色々自分で試してみていたりしました。ここでは、自分の手元で文章の類似度を計算するモデルをファインチューンして作って見たので、それについて書きたいと思います。

 実験環境

Ubuntu 20.04
NVIDIA RTX2080 (VRAM: 8GB)
Python 3.11


 実験
文章の類似度を計算するモデルを作るために、JGLUEのJSTSというデータセットを利用しました。このデータセ...]]></summary>
        <author>
            <name>yudai</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[foliumでアメダス観測所を地図上にプロットする]]></title>
        <id>https://zenn.dev/whitecat_22/articles/d865980c2cf957</id>
        <link href="https://zenn.dev/whitecat_22/articles/d865980c2cf957"/>
        <updated>2023-11-12T08:34:07.000Z</updated>
        <summary type="html"><![CDATA[はじめに
建物や史跡などモノの場所を地図上にプロットしたいと思い、調べていたところ、GoogleMapAPI以外でも地図上にピンを立てたり、ヒートマップを描いたりすることができるfoliumというライブラリが各所に紹介されていました。
これを使って、オープンデータなどで所在地（住所）や地理情報をもつデータから地図上にプロットしてみました。
先人たちの知恵をお借りするなどして解決できたことを、この場をお借りして感謝するとともに、大変恐縮ですが自分のメモとして、こちらへまとめておきます。
!
今回使用する環境等のバージョン
Windows 11 Pro 23H2
Python 3.12....]]></summary>
        <author>
            <name>whitecat_22</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[python で ssh でコマンド送信 (pxssh で "su -" を実行する)]]></title>
        <id>https://zenn.dev/mtmatma/articles/19f4d455776723</id>
        <link href="https://zenn.dev/mtmatma/articles/19f4d455776723"/>
        <updated>2023-11-12T07:51:24.000Z</updated>
        <summary type="html"><![CDATA[概要
python で pexpect モジュールの pxssh を使うことで su - を含めたコマンド送信処理を自動化できる。その手順を説明する。

 最終コード
#!/usr/bin/python3
# pxssh を利用した "su -" のテスト
import sys
import re

from pexpect import pxssh

def login_ssh(server: str, username: str, password: str):
    # ログイン情報を設定しSSHサーバーにログイン
    ssh = pxssh.pxssh(options=...]]></summary>
        <author>
            <name>masaru tsuchiyama</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VS CodeでJupyterHubホストに接続する方法]]></title>
        <id>https://zenn.dev/shosampo/articles/01579c1e561a9e</id>
        <link href="https://zenn.dev/shosampo/articles/01579c1e561a9e"/>
        <updated>2023-11-12T07:19:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
VS Codeは非常に使い勝手の良いコードエディターであり、Jupyter Notebookを実行するための拡張機能などもサポートされている。
VS CodeでJupyter Notebookを使う方法を紹介している記事はたくさんあるが、この記事では、大学や組織が用意してくれているJupyterHubをVS Codeから接続して、最高に使い勝手の良い疑似ローカルPython環境を簡単に作る手順を紹介していく。


 対象読者

所属大学や組織から利用可能なJupyterHubホストを提供されている方
ローカルでAnacondaなどのPython環境を用意するのが面倒 or ...]]></summary>
        <author>
            <name>ShoSampo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenAIのAPI(GPT-4V・DALL-E3)を使って「絵しりとり」する]]></title>
        <id>https://zenn.dev/yufuji25/articles/db5d72e2ce279d</id>
        <link href="https://zenn.dev/yufuji25/articles/db5d72e2ce279d"/>
        <updated>2023-11-11T17:02:18.000Z</updated>
        <summary type="html"><![CDATA[A. OpenAI DevDay
OpenAI DevDay(2023/11/7)の発表で報告されたAPIの一部を使って、簡単なチュートリアルを作ってみたいな～と思い、一例として「絵しりとり」のシステムを構築してみました！
ソースコードはgithubにまとめてます

!
Dog → Goldfish → Hawk → Kangaroo → Okapi → ...


OpenAI DevDayの様子

https://www.youtube.com/live/U9mJuUkhUzk?si=NUifpYrcx6Wmk4On

 B. 準備

 APIのクレジット設定
APIを使用するに...]]></summary>
        <author>
            <name>Y. Fujimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tkinterでデスクトップアプリを作成しPyinstallerで実行ファイルにして配布する]]></title>
        <id>https://zenn.dev/tsujino/articles/e5d03fc637e8f2</id>
        <link href="https://zenn.dev/tsujino/articles/e5d03fc637e8f2"/>
        <updated>2023-11-11T13:53:58.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事ではPythonのTkinterで簡易的なデスクトップアプリを作成し、Pyinstallerで実行ファイルに変換して配布するまでの手順を解説します。
なお、Pyinstallerはクロスプラットフォームには対応していないため、アプリを起動したいOS上で実行ファイルに変換する必要があります。
開発環境

OS: Windows10
Python: 3.8.12
miniconda3: 4.14.0
Tkinter: 8.6
Pyinstaller: 5.6.2


 作業手順

 1. 事前準備
miniconda3やPyinstaller等の必要なツールをインストー...]]></summary>
        <author>
            <name>Tsujino</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PandasのDataFrameに対してastypeを使用した型変換をする場合の落とし穴]]></title>
        <id>https://zenn.dev/difromy/articles/eaed0c0ad2c862</id>
        <link href="https://zenn.dev/difromy/articles/eaed0c0ad2c862"/>
        <updated>2023-11-11T13:31:06.000Z</updated>
        <summary type="html"><![CDATA[DataFrameの型変換ですごく時間をかけてしまったので備考録として。
dataframeのfloat型列をint型に変換したかった。
列名が固定ではないため、列番号を指定して変換しようと試みたがうまくいかなかった。
以下単純化したイメージ。
import pandas as pd

data = {
    "column1":[1.1,2.2,3.3],
    "column2":[4.4,5.5,6.6]
    }
df = pd.DataFrame(data)

#ilocで列を指定
df_iloc = df.copy()
df_iloc.iloc[:,1] = df.il...]]></summary>
        <author>
            <name>サダイ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【個人開発 #1-4】レコメンドシステムを作ってみた vol.4　〜画面の実装〜]]></title>
        <id>https://zenn.dev/waka07/articles/development-diary_1-4</id>
        <link href="https://zenn.dev/waka07/articles/development-diary_1-4"/>
        <updated>2023-11-10T23:49:29.000Z</updated>
        <summary type="html"><![CDATA[作りたいシステム
忙しい人のためのギフト提案型AI「AiSAP!(エイサップ)」
忙しい社会人のために、AIが可能な限り素早く（ASAP: As Soon As Possible）、最適なギフトを提案してくれるWebサービス。
今回は画面の実装について説明していきます。

 Streamlitのインストール
まずはStreamlitをインストールしましょう。
ターミナルやコマンドプロンプトで下記コマンドを入力してください。
※pipのインストールは完了している前提で進めます。
pip install streamlit

 フォルダ構成
任意のフォルダを作って、その中に必要なフォルダ...]]></summary>
        <author>
            <name>Waka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[球面集中現象の可視化]]></title>
        <id>https://zenn.dev/totopironote/articles/550326db3c2e18</id>
        <link href="https://zenn.dev/totopironote/articles/550326db3c2e18"/>
        <updated>2023-11-10T21:32:13.000Z</updated>
        <summary type="html"><![CDATA[はじめに
高次元の統計学の2.1節、高次元データベクトルの幾何学的表現について説明します。
https://www.kyoritsu-pub.co.jp/book/b10003167.html
Peter Hall,J. S. Marron,Amnon Neeman (2005) の論文の2節の図2も作成します。
まず読む前に高次元データについて知りたい方はこちらをチェック
https://zenn.dev/totopironote/articles/f13fe705f52d42

 高次元データベクトルの幾何学的表現(球面集中現象)
\bm x \sim N_d(0, I_d)とす...]]></summary>
        <author>
            <name>ととぴろnote</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[yt-dlp オプション 一覧　(pythonから呼び出す場合)]]></title>
        <id>https://zenn.dev/apo_zenn/articles/b21667cc637361</id>
        <link href="https://zenn.dev/apo_zenn/articles/b21667cc637361"/>
        <updated>2023-11-10T19:00:35.000Z</updated>
        <summary type="html"><![CDATA[example.py
ydl_opts = {
      'outtmpl': file_path, file_name.mp4), # ダウンロード先, ファイル名
      'title': '%(title)s', # タイトル
      'format': 'bestaudio', # 音の品質
      'playlistreverse': True,  #プレイリストの古い順に取得
      'max_filesize': 700000000,  #最大ファイルサイズを指定(bytes), 例 700 MB
      'max_downloads' : '1'...]]></summary>
        <author>
            <name>apo_zenn</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【python】Assistant APIのcode interpreterサンプル]]></title>
        <id>https://zenn.dev/i_shinya/articles/b6e1647b8632b0</id>
        <link href="https://zenn.dev/i_shinya/articles/b6e1647b8632b0"/>
        <updated>2023-11-10T15:00:27.000Z</updated>
        <summary type="html"><![CDATA[Assistant APIのサンプル
11/8のOpenAI devdaysにて新たに公開されたAssistant APIを使ってみたのでそのサンプルです。
今回のサンプルでは一番さっと使えそうなcode interpreterのみ使用しています。
※ Assistant APIは現在ベータ版です

 ちょっと説明
Assistant APIに関して細かく説明をしませんが、コード上に出てくる以下３つだけ簡単に書きます

assistant
thread
run

詳しく知りたい場合はOpenAIのAssistant APIドキュメントを読んだ方が良いです。

 assistant
A...]]></summary>
        <author>
            <name>デグー大好き丸</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[複数時系列データ × Transformerの実装と評価]]></title>
        <id>https://zenn.dev/shungo_a/articles/1ae7e8c68b1cbb</id>
        <link href="https://zenn.dev/shungo_a/articles/1ae7e8c68b1cbb"/>
        <updated>2023-11-10T01:41:15.000Z</updated>
        <summary type="html"><![CDATA[目次

本記事の動機
時系列解析とTransformerに対する先行研究のまとめ
複数時系列データの解析に対する課題を解決した改善モデル iTransformer
iTransformerモデルの実装
実装環境と学習データ
データの前処理
iTransformerモデル実装と最適パラメータ探索
数値実験と考察
本記事のまとめ
参考文献


 本記事の動機
近年ではビックデータの利活用が活発になっており、データを蓄積・分析することが多くなっています。その際、機械学習やAIの実装をしてデータの分析を行う場合、データ数が鍵となっています。しかしながら、データの項目数が多いと、各項目のデータ...]]></summary>
        <author>
            <name>S.A</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-325｜B - World Meeting]]></title>
        <id>https://zenn.dev/hyperdb/articles/83b0e067dd99d0</id>
        <link href="https://zenn.dev/hyperdb/articles/83b0e067dd99d0"/>
        <updated>2023-11-09T08:24:53.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-325 B - World Meeting



 提出結果
def getInt():
    return int(input())


def getIntListRow(N):
    return [list(map(int, input().split())) for _ in range(N)]


def main():
    n = getInt()
    wx = getIntListRow(n)

    time_tbl = [[0 for _ in range(24)] for _ in range(n)]

    c = 0
...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-325｜A - Takahashi san]]></title>
        <id>https://zenn.dev/hyperdb/articles/546a97ab4506cc</id>
        <link href="https://zenn.dev/hyperdb/articles/546a97ab4506cc"/>
        <updated>2023-11-09T08:24:53.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-325 A - Takahashi san



 提出結果
def getStringMap():
    return input().split()


def main():
    s, t = getStringMap()

    print("%s san" % s)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【初心者向け/ITスクール 78日】Python文法復習(Coding Test)]]></title>
        <id>https://zenn.dev/eldorado215/articles/769efe5b316c1f</id>
        <link href="https://zenn.dev/eldorado215/articles/769efe5b316c1f"/>
        <updated>2023-11-09T07:03:12.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今日は、ITスクールに通った78日目の日です。
昨日からまたペースをゆっくり上げ、Pythonの基礎復習とDBについて少し勉強し、Excelでテーブルを1NFにする練習をしました。DBに関しては土曜日にアップロードし、
今日はPythonで練習した文法を紹介したいと思います。

 Data Structure

 List (index)

 List Comprehension 1次元配列
for文を配列の中で宣言し、割り当てることでコードを短くするテクニック
array = [i for i in range(10)]
print(array)

array_even ...]]></summary>
        <author>
            <name>Hyon🇰🇷</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenAI DevDayで色々発表されたからSlackアプリに機能追加した話]]></title>
        <id>https://zenn.dev/straydog/articles/c01bdbc0bbd8cc</id>
        <link href="https://zenn.dev/straydog/articles/c01bdbc0bbd8cc"/>
        <updated>2023-11-09T06:28:10.000Z</updated>
        <summary type="html"><![CDATA[内容
主な実装内容は以下のプレスに記載しているので、そちらを参照してください。

「Party on Slack」が OpenAI DevDay で発表された GPT-4-turbo、GPT-4-Vision、DALLE3、Text to speech に対応。無償利用可能で提供開始

実装していて、Web アプリに組み込む前提の作りを感じたので、比較的大変ではなかったように感じます。
比較的短期間のリリースですが、実装面では今まで考えてたこととそれほどずれていないような印象を受けます。基本的にチャットアプリに埋め込んでの配布なので、考えることが少なくて良いのかなと感じました。
アシ...]]></summary>
        <author>
            <name>stray dog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pypipe: コマンドの出力をPythonにパイプでつないで処理する]]></title>
        <id>https://zenn.dev/bugen/articles/82677e047891f9</id>
        <link href="https://zenn.dev/bugen/articles/82677e047891f9"/>
        <updated>2023-11-08T15:52:55.000Z</updated>
        <summary type="html"><![CDATA[コマンドの出力をpythonにパイプで渡して処理するためのツールを公開しました
https://github.com/bugen/pypipe
なぜこのようなツールを作ったのかを語って良いでしょうか。是非お願いします！（幻聴）

 awkなどの使い方が覚えらない
普通に生きていると、これまでにbashやzshなどで作業している時にコマンドの出力をパイプでPythonにつないで処理したいなと思ったことが一度はあるはずです。例えば以下のようなcsvを扱う場合を考えてみます(ChatGPTに作成してもらいました)。

 ghibli.csv
タイトル,監督,公開年,ジャンル
となりのトトロ...]]></summary>
        <author>
            <name>bugen</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【初心者向け/ITスクール 77日】Python文法復習(CodingTest)]]></title>
        <id>https://zenn.dev/eldorado215/articles/1204dd65df0c97</id>
        <link href="https://zenn.dev/eldorado215/articles/1204dd65df0c97"/>
        <updated>2023-11-08T14:41:02.000Z</updated>
        <summary type="html"><![CDATA[コーディングテスト（Python)

 データータイプ

 文字列
print(f'{input()}??!')
input -> name
output -> name??!

 Integer(整数）

 Float(実数）
a = 5.
b = .7
print(a)
print(b)
5.0
0.7
!
実数の場合、正確な計算ができません。
0.3 + 0.6 != 0.9
a = 0.3 + 0.6
そのため、この場合はround(a, 4)のように四捨五入をします。


 e
a = 1e9
b = int(1e9)
print(a)
print(b)
100...]]></summary>
        <author>
            <name>Hyon🇰🇷</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Assistants APIをVS codeから実行してみよう！]]></title>
        <id>https://zenn.dev/tsuzukia/articles/5ca0ca9108b113</id>
        <link href="https://zenn.dev/tsuzukia/articles/5ca0ca9108b113"/>
        <updated>2023-11-08T13:43:43.000Z</updated>
        <summary type="html"><![CDATA[注)Assistants APIは執筆時点(2023年11月)でbeta版です。今後、仕様が変わる可能性があります。
先日(11/7)にOpenAIの開発者会議がありましたね。
その中の目玉の1個として発表されていたのがAssistants APIです！
Assistants APIとは、RAG(文書を参照して答えてくれるAI)やAgent(拡張版ChatGPTみたいな?)といった事がこれ一つで出来るようになる、とにかくすごい機能になっています！！

 動画をチェックされていない方はぜひ！英語の字幕付いてあるので見やすいです
https://www.youtube.com/watch?v...]]></summary>
        <author>
            <name>TSUZUKIA</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[関数間の二項演算]]></title>
        <id>https://zenn.dev/polaristone/articles/87c4b60c35ffd0</id>
        <link href="https://zenn.dev/polaristone/articles/87c4b60c35ffd0"/>
        <updated>2023-11-08T08:27:35.000Z</updated>
        <summary type="html"><![CDATA[二項演算とは
プログラミングコードのa=1+1の+のようなもので、その両側を引数として予め定義された処理の結果を返すものです。+においては足し算の結果です。これ以外にも四則演算[+-*/]、論理演算[||&&^！]、集合演算[&|]、文字列結合[+(++)]などの種類が有ります。これらはintやfloat、string、tupleなどの値がその引数として使用されます。オーバーロード演算子を使用すればクラスも使用できます。

 関数の二項演算
値やクラスにおいては二項演算が定義できていますが、関数をその演算対象とできるでしょうか？即ち関数f(x)、g(x)に対し...]]></summary>
        <author>
            <name>合同会社PolariStone</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenCVからラズパイの公式カメラを使おうとしたら、思ったより大変だった]]></title>
        <id>https://zenn.dev/ncdc/articles/dcc8f28bf54279</id>
        <link href="https://zenn.dev/ncdc/articles/dcc8f28bf54279"/>
        <updated>2023-11-08T08:00:01.000Z</updated>
        <summary type="html"><![CDATA[はじめに
会社のハッカソンイベントで、IoTで画像AI系の処理をしようとしました。
とりあえず、RaspberryPi4に公式CameraModule3を挿して、OpenCVでcv2.VideoCapture(0)すれば動くだろ。と軽く思っていたのですが、環境構築でめちゃくちゃ苦戦したのでその記録です。
一緒にラズパイと戦ったメンバー


@tsukatsuka1783 さん

@t_knd さん


 動かなかった罠を羅列する

 ラズパイOSは最新(2023/11時点)のBookwormを使う:✗
最新OSでは動きませんでした。カメラを認識しませんでした。
1個前のBullsey...]]></summary>
        <author>
            <name>いばらき</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenAIライブラリのざっくりした使い方]]></title>
        <id>https://zenn.dev/zaruju_za/articles/de22727d94c8dd</id>
        <link href="https://zenn.dev/zaruju_za/articles/de22727d94c8dd"/>
        <updated>2023-11-08T05:03:18.000Z</updated>
        <summary type="html"><![CDATA[説明しないこと

OpenAI の APIKEY の取得方法
Python の環境構築
JupyterNotebook の環境構築


 仕組み

準備

クライアント作成
アシスタント作成
スレッド作成


実行

ユーザーメッセージの追加（質問）
回答生成
結果をテキストファイルに出力して閲覧




 使い方
それぞれのコードブロックを Notebook のコードセルと同じように分けて配置する。
最初の３つのセルを実行後、質問のたびにうしろ２つを実行し、質問を行う。
スレッドの作成を実行し直すことで、会話をリセットできる。

 ソースコード

クライアントの作成
from op...]]></summary>
        <author>
            <name>zaruju</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのzip関数]]></title>
        <id>https://zenn.dev/takaha4k/articles/73fa6ba41dce64</id>
        <link href="https://zenn.dev/takaha4k/articles/73fa6ba41dce64"/>
        <updated>2023-11-08T02:18:42.000Z</updated>
        <summary type="html"><![CDATA[zip関数
複数リストをまとめて取り出すときに利用する。
days=['Mon','Tue','Wed']
fruits=['apple','banana','orange']

for day, fruit in zip(days,fruits):
	print(day,fruit)

もしリストの項目数が合っていない場合は、配列数の最小値までがループされる。

以上]]></summary>
        <author>
            <name>takaha4k</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Assistant APIでConversation Agent作る]]></title>
        <id>https://zenn.dev/wisteria30/articles/3cf284af754a78</id>
        <link href="https://zenn.dev/wisteria30/articles/3cf284af754a78"/>
        <updated>2023-11-07T17:34:00.000Z</updated>
        <summary type="html"><![CDATA[モチベーション
TRPGで動かすようなロングタームなAgentの記憶をどうしようか考えていたタイミングでAssistant APIが登場し、無限に長いスレッドの面倒を見てくれるので試してみました。
また、サンプルはtoolとの連携はあるものの、複数会話でのThreadとMessageの紐付きがよく分からなかったので実際に動かして確認してみたかったのもやってみた理由です。
なお、作成したのはツールを使わないシンプルな対話モデルになります。

A key change introduced by this API is persistent and infinitely long thr...]]></summary>
        <author>
            <name>かっか</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[地域メッシュコードからポリゴンを作成する]]></title>
        <id>https://zenn.dev/itch/articles/950f25f301d325</id>
        <link href="https://zenn.dev/itch/articles/950f25f301d325"/>
        <updated>2023-11-07T16:10:14.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事では総務省統計局が公開する地域メッシュ統計の特質・沿革 に基づき、地域メッシュコードからポリゴンを作成するPythonプログラムについて説明します。
地域メッシュコードについて
地域メッシュコードとは日本地図に重畳されたメッシュの格子ごとの地域区画を一意に定める要素番号であり、4桁または6~11桁の数字から構成されています。
上記の資料のP18~20に定義に関する記載があるため、気になる方はそちらをお読みください。

ポリゴンについて
ポリゴンは主要な地理データ型の1つで、地球上のある領域を表します。
本記事では地理データの情報を持つjsonであるgeojson形式...]]></summary>
        <author>
            <name>itch</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[オブジェクト指向とは？]]></title>
        <id>https://zenn.dev/monyyy/articles/ed299ef848dca3</id>
        <link href="https://zenn.dev/monyyy/articles/ed299ef848dca3"/>
        <updated>2023-11-07T14:55:03.000Z</updated>
        <summary type="html"><![CDATA[オブジェクト指向について
https://youtu.be/7_hNvwSYEmo?si=sXHSWRu8GDqHH2kO
下記から内容を言語化していきますが、動画の内容から持ってきているため、より内容を確認したい方は動画の視聴をお願いしやす。

内容
動画を参考に、以下の内容を、まずはoopなしにやってみる。


最終出力（ゴール）
"ピカチュウがあらわれた。 ピカチュウのＨＰは20だ。"
"ヒトカゲがあらわれた。 ヒトカゲのＨＰは18だ。"
"ピカチュウの攻撃！ 10万ボルト！ヒトカゲは10ダメージをもらった。 ヒトカゲのＨＰは8だ。"
"ヒトカゲの攻撃！ひのこ！ ピカチュウは5...]]></summary>
        <author>
            <name>Mon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SendGrid のInbound Email Parse Webhook で受け取ったメールから添付ファイルを取得する]]></title>
        <id>https://zenn.dev/killinsun/articles/9253e044d00dcb</id>
        <link href="https://zenn.dev/killinsun/articles/9253e044d00dcb"/>
        <updated>2023-11-07T13:27:11.000Z</updated>
        <summary type="html"><![CDATA[SendGrid の公式で、 Python のサンプルを見ると Flask だったので、 FastAPI だったらどう書くかメモ。
結論、FastAPI らしい書き方で書くことはできず、Flask の書き方とほぼ同一になってしまった 😢(理由は後述)

 コード

@router.post(
    "/webhook",
    status_code=status.HTTP_200_OK,
)
async def sendgrid_webhook( # 1
    request: Request,
):
    form = await request.form()
    hea...]]></summary>
        <author>
            <name>首無しキリン</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[日本語対応のプログラミング用フォント「Calex Code JP」を作ってみた]]></title>
        <id>https://zenn.dev/nishiki/articles/e59c7fed847a73</id>
        <link href="https://zenn.dev/nishiki/articles/e59c7fed847a73"/>
        <updated>2023-11-07T11:30:36.000Z</updated>
        <summary type="html"><![CDATA[Calex Code JPの紹介
個人的な好みで、英数字に Cascadia Mono Regular を、日本語に IBM Plex Sans JP Medium を使用したフォントが欲しかったので、それらをマージして新しいフォント「Calex Code JP」を作ってみました。
すこしかわいい感じのフォントを組み合わせていて、違和感のない結果になった気がしています。

エディタで見るとこんな感じ
フォントを作り方は全く知らなかったのですが、マージする方法なら既存フォントをありがたく拝借するだけなのでとても簡単でした。誰でも好きな組合せのフォントを作成できるので楽しいと思います。た...]]></summary>
        <author>
            <name>Nishiki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub Actions で Python コードの自動フォーマットを実現しよう]]></title>
        <id>https://zenn.dev/arsaga/articles/bf20daf4b35ccc</id>
        <link href="https://zenn.dev/arsaga/articles/bf20daf4b35ccc"/>
        <updated>2023-11-07T09:00:15.000Z</updated>
        <summary type="html"><![CDATA[はじめに
CI/CD（継続的インテグレーションと継続的デリバリー）は、ソフトウェア開発プロジェクトにおいて品質向上と効率化を実現するための不可欠な要素となっています。GitHub Actions は、GitHub リポジトリ内で CI/CD パイプラインを簡単に設定できるツールで、本記事ではその導入と設定について解説します。

 GitHub Actions を採用するメリット


簡単なセットアップ
GitHub Actions は GitHub リポジトリとシームレスに統合されており、設定は YAML ファイルで定義するだけでワークフローを簡単にセットアップできます。複雑な環境設...]]></summary>
        <author>
            <name>rem</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[クエリからリレーションシップを推定するPythonコード]]></title>
        <id>https://zenn.dev/yuichi_dev/articles/96832193f31f87</id>
        <link href="https://zenn.dev/yuichi_dev/articles/96832193f31f87"/>
        <updated>2023-11-07T08:59:23.000Z</updated>
        <summary type="html"><![CDATA[はじめに
データカタログをどう管理すべきか考えていたところ、下記の記事に辿りついた。
データカタログを作成してZOZOTOWNデータベース定義をまとめた話

ZOZOTOWNでは、外部キー制約は貼られていないがリレーションシップを持っているものとして
運用されているテーブルが多数存在しており、その関係を手動でまとめるのは困難でした。

記事によると、共感する課題感があった。

本番環境で実際に実行されたクエリを大量に入手。
その中からJOIN句でつながっているテーブル名とカラム名を抜き出し、
どちらかがPKであれば仮想外部キーの候補とする。

と記載があったが、肝心の抜粋方法の記載は...]]></summary>
        <author>
            <name>Yuichi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonでMT4EA分析超入門]]></title>
        <id>https://zenn.dev/harukii/books/54e2f5ded77783</id>
        <link href="https://zenn.dev/harukii/books/54e2f5ded77783"/>
        <updated>2023-11-07T03:52:15.000Z</updated>
        <summary type="html"><![CDATA[EAをデータ分析するサンプルコード集です。]]></summary>
        <author>
            <name>ホソノP</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python パッケージング周辺の概念, 用語, ツールの整理]]></title>
        <id>https://zenn.dev/sankantsu/articles/1cddd3c08582a1</id>
        <link href="https://zenn.dev/sankantsu/articles/1cddd3c08582a1"/>
        <updated>2023-11-06T20:43:58.000Z</updated>
        <summary type="html"><![CDATA[概要
Python のパッケージング (packaging) 周辺は歴史的経緯もあって様々なツールや用語が登場するためかなりややこしいです。
また、現在では非推奨 (deprecated) となっているツールの使用なども多くの記事で見られるため、何が現在推奨されるやりかたであるかを見極めるのが難しく感じられます。
この記事は2023年11月現在のパッケージング周辺のエコシステムを調べ、パッケージングを行うために推奨されていると思われる方法をまとめ、パッケージング周辺の用語の関係性を整理する試みです。
Python のパッケージングというのはかなり複雑かつ広いトピックであり、筆者自身も...]]></summary>
        <author>
            <name>sankantsu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GCPのコストをSlackに通知する]]></title>
        <id>https://zenn.dev/amatyrain/articles/2d85304cc95de4</id>
        <link href="https://zenn.dev/amatyrain/articles/2d85304cc95de4"/>
        <updated>2023-11-06T18:52:00.000Z</updated>
        <summary type="html"><![CDATA[予想外のGCPのコスト発生を早期検知するために、コストをSlackに通知することにしました。


 予算とアラートの設定
アラートを作成する

◼️閾値の設定
基本無料枠でしか使わないので、コストが1円でも出たら通知するように。
怖いので閾値どんどん追加していったら↓こんなことに…😅

◼️通知の管理
Pub/Sub トピックを接続する


 Cloud Functionの作成

◼️構成
Pub/Sub トリガーを追加する

先ほどのトピックを選択

◼️Cloud Functionのコード

main.py
import base64
import functions_framewo...]]></summary>
        <author>
            <name>あまてぃ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSVファイルを読み込んでZabbixにホスト登録]]></title>
        <id>https://zenn.dev/charatech_bps/articles/9fc68db3d4a66c</id>
        <link href="https://zenn.dev/charatech_bps/articles/9fc68db3d4a66c"/>
        <updated>2023-11-06T15:28:11.000Z</updated>
        <summary type="html"><![CDATA[1. はじめに
GUI画面で１サーバずつ登録していたのですが、非常に面倒なので、ZabbixAPIとpyzabbixを使用して、一括で登録してみました。Githubにリポジトリ作成していますが、もう少し詳細にして、日本語で記載してみました。
登録するのは、ZabbixAgentでの監視を前提として、ホストグループと登録するテンプレートは固定としています。

 2. 使用する環境
以下を使用します。

Zabbix 6.0
python 3.11
pyzabbix
pandas


 3. 環境準備
Zabbixは以下のURLを参照して構築してください。
https://www.zab...]]></summary>
        <author>
            <name>charatech_bps</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pathlibが便利すぎてもうos.pathは使えない件]]></title>
        <id>https://zenn.dev/nano_sudo/articles/31a6e04a05dd96</id>
        <link href="https://zenn.dev/nano_sudo/articles/31a6e04a05dd96"/>
        <updated>2023-11-06T14:35:49.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは、@nano_sudoです!
今回は、Pythonの標準ライブラリであるpathlibを紹介します。(n番煎じ...)
タイトルは正直なところ、少し大げさですが、pathlibは、os.pathよりも便利なので、ぜひ使ってみてください！

 pathlibとは
pathlibは、ファイルパスを扱うためのライブラリです。
pathlibを使うと、ファイルパスを文字列で扱うのではなく、オブジェクトとして扱うことができます。

 os.pathじゃだめなの？
pathlibは、os.pathと比べて、次のようなメリットがあります。


豊富なメソッド
pathlibは、...]]></summary>
        <author>
            <name>須藤ナノ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[最近流行りの気温ヒートマップ画像を手軽に作れるwebアプリをstreamlitでさくっと作った]]></title>
        <id>https://zenn.dev/shiro46/articles/465b73982faf29</id>
        <link href="https://zenn.dev/shiro46/articles/465b73982faf29"/>
        <updated>2023-11-06T13:19:07.000Z</updated>
        <summary type="html"><![CDATA[https://weather-heatmap.streamlit.app/?embed_options=show_toolbar
今年の夏は例年以上に暑い日が続いたことで、暑さを可視化するインフォグラフィックが流行りました。
その1つが↓のようなヒートマップで過去の気温の推移を可視化したものです。
https://twitter.com/kaz_ogiwara/status/1680580458701094915
n番煎じですが、この気温ヒートマップをwebで手軽に作成できるアプリを作って公開しました。

 技術紹介
最近おぼえたstreamlitで動かしています。
デフォルトのグラフ...]]></summary>
        <author>
            <name>SHIRO</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PSM_S]]></title>
        <id>https://zenn.dev/aoyagi816/articles/7184b9351f2c92</id>
        <link href="https://zenn.dev/aoyagi816/articles/7184b9351f2c92"/>
        <updated>2023-11-06T07:48:09.000Z</updated>
        <summary type="html"><![CDATA[import numpy as np
from scipy.stats import norm

def psens(x, y, Gamma=6, GammaInc=1):
    """
    Rosenbaum Sensitivity Test for Wilcoxon Signed Rank P-Value
    
    Parameters:
    - x: Treatment group
    - y: Control group
    - Gamma: Maximum value for gamma
    - GammaInc: Increment for ga...]]></summary>
        <author>
            <name>Aoyagi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[無料でZephyr-7BをGoogleColabで動かしてAPIサーバとして使う方法]]></title>
        <id>https://zenn.dev/00/articles/run_api-server-with_zephyr-7b_on_google_colab</id>
        <link href="https://zenn.dev/00/articles/run_api-server-with_zephyr-7b_on_google_colab"/>
        <updated>2023-11-06T02:28:43.000Z</updated>
        <summary type="html"><![CDATA[これは何ですか？
これは、エンドポイントを介して LLM を使用する Jupyter ノートブックです。
これは llama.cpp、ngrok、そして TheBloke からのモデルを使用しています。基本的な Jupyter ノートブックは zephyr-7b を使用しています。

 使い方 [必要条件]

Google アカウント（Google Colab 用）https://colab.google.com/

ngrok アカウント https://ngrok.com



 ステップ 0. 上記のアカウントを作成する

 ステップ 1. Jupyter ノートブックをコピー...]]></summary>
        <author>
            <name>koji</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[syslog 負荷試験用アプリを Python で作成する]]></title>
        <id>https://zenn.dev/microsoft/articles/25e9bf687aff6f</id>
        <link href="https://zenn.dev/microsoft/articles/25e9bf687aff6f"/>
        <updated>2023-11-06T02:28:42.000Z</updated>
        <summary type="html"><![CDATA[はじめに
syslog サーバの負荷試験用に大量の syslog を送信する必要があるのですが、ちょうどよいフリーのアプリがないため、ChatGPT を活用して syslog 負荷試験用のアプリを作りたいと思います。

 事前準備
Windows クライアントのローカルで検証するため、事前に PowerShell で syslog サーバ相当を動作させ、ログ受信テストをします。
syslog サーバ相当 Powershell はこちらを参考にさせていただき、ChatGPT に指示して Close 処理を追加しました。(ありがとうございます)
https://level69.net/a...]]></summary>
        <author>
            <name>k.sato</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Chat GPTの応用～Open AIのAPIを利用したドキュメント一括生成ツール]]></title>
        <id>https://zenn.dev/kenya_saitoh/articles/cacaf192dbb1a7</id>
        <link href="https://zenn.dev/kenya_saitoh/articles/cacaf192dbb1a7"/>
        <updated>2023-11-06T02:07:52.000Z</updated>
        <summary type="html"><![CDATA[Open AIのAPIを利用したドキュメント一括生成ツールをGitHubに公開
Chat GPTは、文字通りチャットのインタフェースによって、Open AIのサービスからインタラクティブに有効な回答を引き出すツールです。システム開発において、Chat GPTの活用はすでに一般的になっており、開発者が作成したソースコードをレビューしてもらったり、保守のためのドキュメントをリバースしたりする、という用途で使っている人も多いのではないでしょうか。ただしこれらの用途の場合、特段のインタラクションは不要であり、目的に応じてプロンプトのテキストを事前に決めることができれば、1ショットで答えを引き...]]></summary>
        <author>
            <name>KenyaSaitoh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python 基本所作]]></title>
        <id>https://zenn.dev/murasame_rexxx/articles/b163adbbbfd9f5</id>
        <link href="https://zenn.dev/murasame_rexxx/articles/b163adbbbfd9f5"/>
        <updated>2023-11-05T19:37:32.000Z</updated>
        <summary type="html"><![CDATA[Python 環境構築後の一歩目

 動作環境
https://zenn.dev/murasame_rexxx/articles/88558f73cce762
↑にあるように、condaを使って仮想環境を構築して、pythonを操作します。

 コードエディタについて
基本的にPythonを記述・編集する際にはjupyter notebookというツールを使います。
それでは早速ターミナルで、仮想環境をactiveにしてから

input
jupyter notebook

でjupyterを起動しましょう。
すると↑の写真のような画面が出てくるはずです。この画面では、pythonの...]]></summary>
        <author>
            <name>tekaru10000</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[App Store Connect APIを使ってアプリのインストール数を取得する]]></title>
        <id>https://zenn.dev/yamazaking/articles/eedf5e9179d46a</id>
        <link href="https://zenn.dev/yamazaking/articles/eedf5e9179d46a"/>
        <updated>2023-11-05T19:00:45.000Z</updated>
        <summary type="html"><![CDATA[つい最近個人開発アプリをだし、そのアプリのインストール数とかをapp storeのanalyticsで見ていたのですが、いちいち見に行くのが面倒くさかったり、Slack等と連携したかったので、アプリアナリティクスの数字をとってくれるいい感じのないかな〜と探したところ、Appleから公式のAPIが出ていたので、これを使ってみることにしました。
仕様としては、インストール数や課金登録数などを一日一回Slack等に通知してくれる、というものです。
久しぶりにこういうのを作ってみるということで、格安サーバーを探してみました。
以前はHerokuが個人開発者用の代表的サービスだったのですが、自分が...]]></summary>
        <author>
            <name>yamazaking</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FastAPIでOAuth2.0認証]]></title>
        <id>https://zenn.dev/kou_kawa/articles/10-oauth20-fastapi</id>
        <link href="https://zenn.dev/kou_kawa/articles/10-oauth20-fastapi"/>
        <updated>2023-11-05T14:16:53.000Z</updated>
        <summary type="html"><![CDATA[🎯目的

OAuth2.0認証を理解する。
FastAPIとGCPで実装してみる


 OAuth 2.0とは？
OAuth 2.0は、ユーザーが自分のデータを安全に第三者アプリケーションと共有できるようにするための標準プロトコルです。
例えば、SNSアカウントでログインする機能や、カレンダーアプリがメールアカウントの予定を読み取る機能など、日常の多くのサービスでOAuth 2.0が背後で動作しています。
主に以下の特徴があります。

トークンベース: ユーザーの資格情報を直接共有するのではなく、アクセストークンを使用してリソースにアクセスします。
スコープ: アクセス許可の範囲を指...]]></summary>
        <author>
            <name>Kou</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PC上で飼えるペット"Mozuku"を開発する]]></title>
        <id>https://zenn.dev/pienthon/articles/c6f193858bd41b</id>
        <link href="https://zenn.dev/pienthon/articles/c6f193858bd41b"/>
        <updated>2023-11-05T07:27:38.000Z</updated>
        <summary type="html"><![CDATA[Mozukuって何？
私のアルバイトしているビジネスホテルにaiboがいます。
aiboは顔を認識して懐いてくれたり、人によって芸をやってくれたりやってくれなかったり、かなりリアルの犬に近くてかわいいです。
ペットゲームはたくさんありますが、aiboのように人を認識してくれるものは少ないなと感じたので作ろうと思ったのがMozukuです。
aiboは30万円くらいして高すぎるので、インターネット環境さえあれば誰でも気軽にペットを飼えるようなサービスを作ろうとしています。
ちなみにMozukuという名前は、地元にいた猫のもずくちゃんから名前を拝借しました。

 使用技術

 フロントエン...]]></summary>
        <author>
            <name>Rininmmmment</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【python】型アノテーションは必要か]]></title>
        <id>https://zenn.dev/kazu1/articles/662816f4acaede</id>
        <link href="https://zenn.dev/kazu1/articles/662816f4acaede"/>
        <updated>2023-11-05T04:43:51.000Z</updated>
        <summary type="html"><![CDATA[型アノテーションは必要なんですか？
そんな疑問について考える記事でございます。

 型アノテーションとは
型アノテーションとは、変数、関数の引数、戻り値に期待されるデータの型を明示するための構文です。Pythonにおける型アノテーションは、コードの可読性を向上させ、開発者が関数やメソッドを使う際の意図を明確にするのに役立ちます。また、静的型チェッカーを使うことで、実行前に型の不一致によるエラーを検出できるため、バグを減らし開発の効率化に寄与します。
例えば、以下の関数では：
def greet(name: str) -> str:
    return f'Hello, {name...]]></summary>
        <author>
            <name>僕はエンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[/usr/bin/ld: cannot find -lpython3.9: No such file or directory の対処法メモ]]></title>
        <id>https://zenn.dev/uchiiii/articles/10c3a890eab705</id>
        <link href="https://zenn.dev/uchiiii/articles/10c3a890eab705"/>
        <updated>2023-11-04T16:06:36.000Z</updated>
        <summary type="html"><![CDATA[自分用のメモです。間違えたこと言ってたら教えてください。

 経緯
rye で用意した python 環境で、pola-rs/pyo3-polars の example を build しようとしたら、
> make install
...
  = note: /usr/bin/ld: cannot find -lpython3.9: No such file or directory
          collect2: error: ld returned 1 exit status


error: could not compile `expression_lib` (l...]]></summary>
        <author>
            <name>uchiiii</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Amazon Bedrock実装②：Docker on Cloud9で実装してみる]]></title>
        <id>https://zenn.dev/zgw426/articles/d5779a1c2ce1e4</id>
        <link href="https://zenn.dev/zgw426/articles/d5779a1c2ce1e4"/>
        <updated>2023-11-04T12:34:28.000Z</updated>
        <summary type="html"><![CDATA[Bedrock勉強中
Bedrockの使い方の勉強メモ

 事前準備／環境
バージニアリージョン(us-east-1)に、Cloud9(Ubuntu Server 22.04 LTS)を立てます。
また、Cloud9のEC2のIAMロールに必要な権限を付与しておきます（面倒なら、とりあえず AdministratorAccess 付与しちゃう)
以下はCloud9のDockerバージョンです。
iam0001:~/environment $ docker --version
Docker version 24.0.7, build afdd53b


 Dockerファイルを作成する...]]></summary>
        <author>
            <name>suo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[電子帳簿保存法に悩むAmazonヘビーユーザに捧ぐ、Amazonの請求書ファイル名を電子帳簿保存法に対応した形式に一括変換するプログラム]]></title>
        <id>https://zenn.dev/koki_n22/articles/c6d674ecc4d3a9</id>
        <link href="https://zenn.dev/koki_n22/articles/c6d674ecc4d3a9"/>
        <updated>2023-11-04T11:08:43.000Z</updated>
        <summary type="html"><![CDATA[TL;DR
以下リポジトリをクローンし、使用してください。
https://github.com/koki-nakamura22/amazon-invoice-renamer

 本記事で説明しないこと
電子帳簿保存法そのものの細かい説明。

 対象ユーザ
経費になるものをAmazonから購入しがちで、かつファイル名を電子帳簿保存法に対応した形式に変更するのがしんどい人。
なお、本プログラムは非Amazon Businessの方の請求書に対応しているため、「Amazon Businessでしか買い物してないぜ！」という方はブラウザバック or 本記事で紹介するコード編集でお願いします...]]></summary>
        <author>
            <name>koki_n22</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[title1]]></title>
        <id>https://zenn.dev/chatgpt_4/articles/f2fa8abaad4dfa</id>
        <link href="https://zenn.dev/chatgpt_4/articles/f2fa8abaad4dfa"/>
        <updated>2023-11-04T10:14:04.000Z</updated>
        <summary type="html"><![CDATA[There will be an improvement in relationships. You will participate in grand events. There will be joy and happiness in the home. The family will stay together. You will be involved in traditional activities. You may acquire valuable assets. Attractive proposals will come your way. You will be a ...]]></summary>
        <author>
            <name>スーパークリエイター</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで可視化するときのちょっとしたコツ]]></title>
        <id>https://zenn.dev/shundeveloper/articles/51596a6e9bfeb3</id>
        <link href="https://zenn.dev/shundeveloper/articles/51596a6e9bfeb3"/>
        <updated>2023-11-04T08:19:19.000Z</updated>
        <summary type="html"><![CDATA[Abstract
プログラムやツールを使って可視化するときに, ちょっとしたコツを知っていると, 可視化がより簡単になります. 今回は, Pythonで可視化するときの事例を紹介します.

実際に可視化をしたポスト



 データ
今回用いたデータはこちらです

人口動態調査 人口動態統計 確定数 出生 4-2 出生月別にみた年次別出生数及び出生率（人口千対）


 CSVを生で読むためのツール
Pythonなどのプログラミング言語でCSVを読み込んでしまうとその後は原則としてPackageやLibraryのインターフェースに則って処理を行うことになります. しかし, その前にCSV...]]></summary>
        <author>
            <name>Shun</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[(Coconut) Pythonによる機能プログラミング]]></title>
        <id>https://zenn.dev/yvvakimoto/articles/826d36393fdd55</id>
        <link href="https://zenn.dev/yvvakimoto/articles/826d36393fdd55"/>
        <updated>2023-11-04T06:47:25.000Z</updated>
        <summary type="html"><![CDATA[背景と概要

 背景
私は探索的・対話的なデータ分析や理論の基礎検証にPythonを用いることが多い。その場合プログラミングそのものの試行錯誤だけではなく分析や理論検証の試行錯誤が必要である。後者のより本質的な試行錯誤に注力するためにはプログラムが適切に機能分解され、個別に検証されていることが望ましい。そのうえで有用なのが関数型プログラミングだが、イデオロギー的な臭いを排しプラグマティックな視点で臨むために「機能プログラミング」と書くことにした。英語にすればいずれもfunctional programmingである。この記事はPythonによる「機能プログラミング」の考え方や手法を整...]]></summary>
        <author>
            <name>ywakimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[レストランメニューの最適化: プログラミングで解く]]></title>
        <id>https://zenn.dev/azuki9140/articles/8fe37ec933cc96</id>
        <link href="https://zenn.dev/azuki9140/articles/8fe37ec933cc96"/>
        <updated>2023-11-04T05:20:30.000Z</updated>
        <summary type="html"><![CDATA[1. はじめに

 1-1. 目的
この記事では、Pythonを使用してレストランのメニューアイテムを表現し、それを最適化する方法について説明します。具体的には、サイゼリヤのメニューデータを用いて最適化問題を作成し、それを解いてみます。この問題は、与えられた予算と各ジャンルの最大アイテム数の制約の下で、メニューアイテムの選択を最適化することを目指します。

 1-2. データソース
この記事で使用するサイゼリヤのメニューデータは、以下のGitHubリポジトリから取得しました。
参考にしたリポジトリ:
https://github.com/marushosummers/Saizeriy...]]></summary>
        <author>
            <name>AzuKi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[基于FastAPI构建 Server-Sent Events API]]></title>
        <id>https://zenn.dev/akishichinibu/articles/1423539f71d8c2</id>
        <link href="https://zenn.dev/akishichinibu/articles/1423539f71d8c2"/>
        <updated>2023-11-04T04:20:31.000Z</updated>
        <summary type="html"><![CDATA[前言
最近，LLM与OpenAI非常流行， 相信很多人从Complete和Chat API中的stream模式第一次接触到了SSE API。SSE(Server-Sent Events)是一种支持从Server Side向Client Side推送事件的方式。它与传统的Restful API不同，传统的Restful架构只能从服务器端发起请求，然后客户端返回响应的方式进行数据传输。在需要实时更新数据的场景中，只能依赖轮询或者异步任务机制来实现。但前者性能不高，而后者会增加前后端架构的复杂性。
WebSocket也是一个选择，但实现则更加复杂。
对于需要服务端主动向客户端推送消息，而客...]]></summary>
        <author>
            <name>アキシチニブ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Streamlit設計方針: 効果的なアプリケーションの構築を考える]]></title>
        <id>https://zenn.dev/enterrocken/articles/2aaab79961e386</id>
        <link href="https://zenn.dev/enterrocken/articles/2aaab79961e386"/>
        <updated>2023-11-04T03:37:29.000Z</updated>
        <summary type="html"><![CDATA[はじめに
初めまして。
都内IT企業で、データアルゴリズムチームのエンジニアをしております、Noraです。
機械学習やデータサイエンスプロジェクトに関わる際、デモプロダクトを作りたい状況は多いと思います。
その際、Streamlitという、PythonのみでWebアプリケーションを作成できるフレームワークが有用です。
https://streamlit.io/
今回の記事では、「運用保守が容易で開発コストを下げる」ディレクトリ設計方針を解説していきます。
「Streamlitプロジェクトの、最適なディレクトリ設計方針を考えたい」という、チームで開発しているエンジニアにおすすめの記事と...]]></summary>
        <author>
            <name>yuki.hirano</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pytorch, BERT, batch処理, paddingするとしない時とは値が異なる]]></title>
        <id>https://zenn.dev/fmfm_mdk/articles/pytorch-masked-value-is-not-same</id>
        <link href="https://zenn.dev/fmfm_mdk/articles/pytorch-masked-value-is-not-same"/>
        <updated>2023-11-03T18:36:00.000Z</updated>
        <summary type="html"><![CDATA[回答：気のせいです．
正確には，誤差の範囲，で良いと思います．
以降より細かい検証の話です．

 環境情報

OS: win 10
pytorch==2.10


 以下のコードでCLSの値を取り出します
from transformers import BertJapaneseTokenizer, BertModel
model_name = 'cl-tohoku/bert-base-japanese-whole-word-masking'

tokenizer = BertJapaneseTokenizer.from_pretrained( model_name )
pt_mod...]]></summary>
        <author>
            <name>fmfm_mdk</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VSCode extension mypy-type-checker 使ってみた]]></title>
        <id>https://zenn.dev/yamasakit/articles/dc9ed1acd5ae3b</id>
        <link href="https://zenn.dev/yamasakit/articles/dc9ed1acd5ae3b"/>
        <updated>2023-11-03T13:40:00.000Z</updated>
        <summary type="html"><![CDATA[💡 やったこと


ruff の採用と同時に Linter/Formatter/Type annotation の見直しをしました。

mypy はゆるく使う方針で --disallow-untyped-defs のみ採用しました。

mypy-type-checker を使うことで mypy の利用がより簡便になりました。


 背景
ruff という Linter/Formatter が最近いい感じらしいです。
https://docs.astral.sh/ruff


flake8, isort, black とほぼ同等 (公式が言うには例えば black は 99% カバー)...]]></summary>
        <author>
            <name>yamasaKit</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Djangoで大量データをループでテストする]]></title>
        <id>https://zenn.dev/koki_n22/articles/7c53c523d1b154</id>
        <link href="https://zenn.dev/koki_n22/articles/7c53c523d1b154"/>
        <updated>2023-11-03T11:52:20.000Z</updated>
        <summary type="html"><![CDATA[このページでは、Djangoで大量データをループでテストする方法を説明します。

 TL;DR
大量データをループでテストのコードをコピペし、状況に合わせて手を入れてお使いください。

 何が嬉しいのか
例えば、チケット価格で11枚目以降は以下のように謎の値引きが行われることがあるとします。
11枚目: 9500円
12枚目: 9300円
13枚目: 9200円
14枚目: 9000円
15枚目: 8700円
...以降、1枚ずつの値段設定が続く
このテストコードを真面目に書くと、以下のように似通ったコードをひたすら書くことになり、可読性が悪くなります。
保守性も悪くなり、手を入れる際に...]]></summary>
        <author>
            <name>koki_n22</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[title2]]></title>
        <id>https://zenn.dev/praveen2501/articles/4ded1312d863d0</id>
        <link href="https://zenn.dev/praveen2501/articles/4ded1312d863d0"/>
        <updated>2023-11-03T10:23:59.000Z</updated>
        <summary type="html"><![CDATA[Dog parks are usually full of excitement as pooches of all sizes and breeds gather to play, sniff, explore and run amok. That being said, there are some dog parks that take the excitement to a whole new level through innovative landscapes, tasty treats on offer and so much more. Those who enjoy t...]]></summary>
        <author>
            <name>Praveen Kumar</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[title1]]></title>
        <id>https://zenn.dev/praveen2501/articles/c774e111f0d371</id>
        <link href="https://zenn.dev/praveen2501/articles/c774e111f0d371"/>
        <updated>2023-11-03T10:23:23.000Z</updated>
        <summary type="html"><![CDATA[There will be an improvement in relationships. You will participate in grand events. There will be joy and happiness in the home. The family will stay together. You will be involved in traditional activities. You may acquire valuable assets. Attractive proposals will come your way. You will be a ...]]></summary>
        <author>
            <name>Praveen Kumar</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[自前サーバーで動かしてたWebサービスを障害発生から4時間でHeroku環境に移行させた話]]></title>
        <id>https://zenn.dev/croys/articles/d782e590d4d709</id>
        <link href="https://zenn.dev/croys/articles/d782e590d4d709"/>
        <updated>2023-11-03T08:37:23.000Z</updated>
        <summary type="html"><![CDATA[そもそもどんなサービスを動かしていたのか

 VRSNS　VRChat向けのゲーム内通貨保存システム「CBS」
・ユーザー数はおよそ3000人
・日あたりのアクティブユーザーは60人


 特徴
・ゲーム内でのロールプレイイベントに価値を付加できる
・イベントに向けて労働ワールドで稼ぎ，イベントをさらに楽しむ
・キャストは給与を貰える→循環経済の創造

 今回何が起きたのか

 アップデート
・ターゲットサービスプラットフォームであるVRChatにクライアントアップデートが入った
・この際にhttpによる平文通信がブロックされるように変更された
・事前のアナウンスはなかった

 当日...]]></summary>
        <author>
            <name>Croys</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[title2]]></title>
        <id>https://zenn.dev/praveen2501/articles/b8fff48bf6fc43</id>
        <link href="https://zenn.dev/praveen2501/articles/b8fff48bf6fc43"/>
        <updated>2023-11-03T08:18:01.000Z</updated>
        <summary type="html"><![CDATA[Dog parks are usually full of excitement as pooches of all sizes and breeds gather to play, sniff, explore and run amok. That being said, there are some dog parks that take the excitement to a whole new level through innovative landscapes, tasty treats on offer and so much more. Those who enjoy t...]]></summary>
        <author>
            <name>Praveen Kumar</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[title1]]></title>
        <id>https://zenn.dev/praveen2501/articles/74bcb5870522fa</id>
        <link href="https://zenn.dev/praveen2501/articles/74bcb5870522fa"/>
        <updated>2023-11-03T08:17:22.000Z</updated>
        <summary type="html"><![CDATA[There will be an improvement in relationships. You will participate in grand events. There will be joy and happiness in the home. The family will stay together. You will be involved in traditional activities. You may acquire valuable assets. Attractive proposals will come your way. You will be a ...]]></summary>
        <author>
            <name>Praveen Kumar</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Djangoのテンプレートでforのようなendタグを持つカスタムタグを書く]]></title>
        <id>https://zenn.dev/gomo/articles/971bfa63f0705f</id>
        <link href="https://zenn.dev/gomo/articles/971bfa63f0705f"/>
        <updated>2023-11-03T07:49:18.000Z</updated>
        <summary type="html"><![CDATA[概要
pythonのWebフレームワークDjangoで{% for athlete in athlete_list %}<div>{{athlete.name}}</div>{% endfor %}のような、HTMLや他のタグを間に挟めるendタグを持つカスタムタグを自作する方法です。
初Django（というかpythonも少ししか書いたことない）なのでお作法とか違ったらすいません。
ドキュメントは下記ですが少々内容が足りないです。タグの引数の解析の説明がありません。
https://docs.djangoproject.com/en/4.2/howto/cu...]]></summary>
        <author>
            <name>Masamoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[BERTで512トークンを超える長文を扱う方法]]></title>
        <id>https://zenn.dev/robes/articles/f7912be0269b1f</id>
        <link href="https://zenn.dev/robes/articles/f7912be0269b1f"/>
        <updated>2023-11-03T01:46:57.000Z</updated>
        <summary type="html"><![CDATA[BERTは、テキスト分類や感情分析などの自然言語処理タスクにおいて、
革命的な成果をもたらしたモデルの一つです。
しかしながら、その使用にあたっては、致命的な制約があります。
それは、モデルが一度に処理できる文章の長さが512トークンまでという制約です。
この制約のため、BERTでは長文を扱えないと考えていらっしゃる方も多いと思います。
私もそうでした。
この記事では、BERTで512トークンを超える長文を扱う方法について解説していきます。

 BERTで長文を扱う方法
BERTで長文を扱うための方法として、いくつかのアプローチが提案されています。
ここでは、最も、原始的な方法として、長...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[拡張クロスデータ行列法 with Python]]></title>
        <id>https://zenn.dev/totopironote/articles/d3e189855a6150</id>
        <link href="https://zenn.dev/totopironote/articles/d3e189855a6150"/>
        <updated>2023-11-02T21:00:01.000Z</updated>
        <summary type="html"><![CDATA[はじめに
拡張クロスデータ行列法(extended-cross-data-matrix methodology (ECDM))は、YataとAoshimaによって開発されたもので、YataとAoshimaによるCDMの拡張です
CDMについてはこちらをチェック。
https://zenn.dev/totopironote/articles/b63807d5fb8333
今回は分割方法を紹介し、その分割するpythonコードを載せてあります。
ECDMを用いて推定量を求めるところまではしてないので詳しく知りたい方は参考文献をご確認ください。

 拡張クロスデータ行列法
n_{(1)}=...]]></summary>
        <author>
            <name>ととぴろnote</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[部会の準備が面倒だった話]]></title>
        <id>https://zenn.dev/gae/articles/922451ce9b107f</id>
        <link href="https://zenn.dev/gae/articles/922451ce9b107f"/>
        <updated>2023-11-02T17:01:20.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは．まずはこの記事を開いてくれてありがとうございます．これは私が所属するMMAというサークル(総合格闘技じゃないよ)の部会の準備を楽にしようとした話です．
初心者が初心者なりに作成して記事を書くので，拙い部分も多いとは思いますが，最後まで読んでいただければ幸いです．
https://github.com/gae-22/club_meeting

 部会の準備
MMA では，毎週部会を行っています．部会では，毎週部員から挙げられる議題の話し合いだったり，講習会だったりを行っています．問題は，議題を投票して決めるところです．
その準備には，次のようなものが必要です．

...]]></summary>
        <author>
            <name>gae</name>
        </author>
    </entry>
</feed>