<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://s-i27.github.io/Rssfeed/index.html</id>
    <title>osmos::feed</title>
    <updated>2024-02-16T01:12:47.629Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="https://s-i27.github.io/Rssfeed/index.html"/>
    <link rel="self" href="https://s-i27.github.io/Rssfeed/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[Blender Pythonでメッシュの各ポリゴンの各頂点の頂点座標値、Shapekeyごとの頂点座標値、UV座標値、頂点カラーを取得する]]></title>
        <id>https://zenn.dev/dimebag29/articles/61811779c3a13b</id>
        <link href="https://zenn.dev/dimebag29/articles/61811779c3a13b"/>
        <updated>2024-02-15T13:56:12.000Z</updated>
        <summary type="html"><![CDATA[概要
メッシュの各ポリゴンの各頂点の
　・頂点座標値
　・各Shapekeyに登録されている頂点座標値
　・UV座標値
　・頂点カラー
を取得する方法を紹介します
今回は例としてデフォルトキューブを使って情報を取得してみます

 環境

Blender 3.3


 Pythonスクリプトと実行方法

Blenderを開き、デフォルトキューブを消さずに「ウィンドウ」タブの「システムコンソール切り替え」をクリックし、スクリプトの実行結果やエラーが見えるようにする
「Sclipting」タブの「＋新規」ボタンをクリックして以下のPythonスクリプトを貼り付け、「▶」ボタンをクリックし、...]]></summary>
        <author>
            <name>dimebag29</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django ORM クエリセット]]></title>
        <id>https://zenn.dev/satumahayato010/articles/0f3cf817b85115</id>
        <link href="https://zenn.dev/satumahayato010/articles/0f3cf817b85115"/>
        <updated>2024-02-15T12:48:12.000Z</updated>
        <summary type="html"><![CDATA[SELECT
テーブル名: products
カラム: id, name, price, created_at
-- 全ての商品を取得する
SELECT * FROM products;

-- 商品の名前と価格だけを取得する
SELECT name, price FROM products;
# 全ての商品を取得する
Product.objects.all()

# 商品の名前と価格だけを取得する 
products = Product.objects.only('name', 'price')

 SELECTを使用するときの注意点

インデックスを適切に設定していない場合、大量...]]></summary>
        <author>
            <name>satumahayato010</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[アドベントカレンダーや会社ブログの進捗管理を自動化]]></title>
        <id>https://zenn.dev/ivry/articles/e0e2049cc484c6</id>
        <link href="https://zenn.dev/ivry/articles/e0e2049cc484c6"/>
        <updated>2024-02-15T06:47:12.000Z</updated>
        <summary type="html"><![CDATA[はじめに
電話自動応答サービスIVRyでエンジニアをしている小瀬です。
https://ivry.jp/
普段はバックエンドの開発がメインですが、今回はプロダクト開発ではなく、社内業務で利用する便利なリマインダーを作成した経験についてブログに書きたいと思います。

 2023年のアドカレは50ブログ
2023年のIVRyのアドカレは、紅組と白組に分かれてPV数で競う紅白戦を実施しました。
そのため、IVRy全体で25 x 2 = 50件のブログを投稿しました。
https://x.com/IVRy_jp/status/1730521537294520802?s=20
この進捗管理を人...]]></summary>
        <author>
            <name>kose_atsuya</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[行列積状態について考える (10) — 50 量子ビットの期待値計算]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-matrix-product10</id>
        <link href="https://zenn.dev/derwind/articles/dwd-matrix-product10"/>
        <updated>2024-02-14T18:08:43.000Z</updated>
        <summary type="html"><![CDATA[目的
行列積状態について考える (9) — 100 量子ビットのもつれ状態 で大量の量子ビットの行列積状態 (MPS) のもつれ状態を見た。
テンソルネットワーク計算で量子状態を求める場合、係数である波動関数ごとに計算する必要があり、すべての波動関数を計算しようとすると (量子ビット数について) 指数関数的な計算量になる。
ところがハミルトニアンの期待値計算の場合、実はたった 1 つの波動関数を求めれば良いので MPS の恩恵を得ることができる。今回はこれを見たい。

Qiskit Aer
cuTensorNet
自前実装

の 3 パターン実装して確認してみたい。

 期待値計算
...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[StreamlitでPyGWalkerを試してみる]]></title>
        <id>https://zenn.dev/0msys/articles/34a380d0af1269</id>
        <link href="https://zenn.dev/0msys/articles/34a380d0af1269"/>
        <updated>2024-02-14T15:45:34.000Z</updated>
        <summary type="html"><![CDATA[はじめに
前から存在は知っていたものの、なんか難しそうなので手を出してなかったPyGWalkerを試してみました。
ここにPyGWalkerの紹介と、デモコードがあるので、これを動かしてみます。
https://docs.kanaries.net/ja/pygwalker/use-pygwalker-with-streamlit
例によって、以前作ったStreamlitのテンプレートを使用します。

 依存関係のインストール
pandas, streamlit, pygwalkerをインストールするように書かれていますが、pandasはstreamlitに含まれているので、pygwa...]]></summary>
        <author>
            <name>0msys</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Azure OpenAI Service の Assistant API を理解する]]></title>
        <id>https://zenn.dev/microsoft/articles/533488db14e442</id>
        <link href="https://zenn.dev/microsoft/articles/533488db14e442"/>
        <updated>2024-02-14T08:03:10.000Z</updated>
        <summary type="html"><![CDATA[はじめに
OpenAI DevDay にて本家 OpenAI の β 版機能として発表された Assistant API が Azure OpenAI Service (AOAI) でも Assistant API (プレビュー) として利用可能になりました。そこで、自分自身の理解や言語化も兼ねて情報をまとめました。
なお、本記事は AOAI の基本的な部分をある程度理解できている開発者を想定して書かれています。

 Assistant API

 Assistant API とは何か
Assistant API は 開発者による独自のアシスタント (Microsoft 的な表現をす...]]></summary>
        <author>
            <name>ryohtaka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ローカルLLMを翻訳apiを通して日本語化]]></title>
        <id>https://zenn.dev/emoclew/articles/1671555576f77f</id>
        <link href="https://zenn.dev/emoclew/articles/1671555576f77f"/>
        <updated>2024-02-14T07:32:47.000Z</updated>
        <summary type="html"><![CDATA[前回ローカルLLM APIサーバーを建てました
https://zenn.dev/emoclew/articles/9dfa7fdん948a18b
性能的にはphi-2が良さそうなのですが、日本語の入出力に対応していませんでした
そこで、前に立てた翻訳APIサーバーを間に噛ませることで、日本語対応を目指します
(そもそも、翻訳はかなり難しいタスクらしく、LLMのみの翻訳でGoogle翻訳やDeepLを超えることは、現状では無理みたいです。
ですから、日本語対応しているLLMであっても、英語で入出力をして、間に翻訳機を噛ませたほうが、性能は上がると思います)

 プログラム
前回建てたLL...]]></summary>
        <author>
            <name>emoclew</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CPUのみのローカルLLMサーバー構築(llama.cpp)]]></title>
        <id>https://zenn.dev/emoclew/articles/9dfa7fd948a18b</id>
        <link href="https://zenn.dev/emoclew/articles/9dfa7fd948a18b"/>
        <updated>2024-02-14T04:03:40.000Z</updated>
        <summary type="html"><![CDATA[LLM(大規模言語モデル)を使って作業がしたい
でも、Chat GPTやGeminiはお金がかかるから使いたくない
そうだ、ローカルにLLMを建てよう
という考えから、LLMのローカルAPIサーバー構築を始めます。
ただ、実際に計画してみると、自分の使っているサーバーのスペック不足が否めません
現在使っているマシンのスペックは

CPU : i7-5950X
Memory : 48GB

と、時代遅れの遺物です。性能的にはi5-10400とかryzen 5 3500などの数世代前のミドルレンジと同程度です。しかし、予算など存在しないので、なんとかこのマシンで動くLLMサーバーを作ります
...]]></summary>
        <author>
            <name>emoclew</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GPT等のトークン制限内で長文テキストを処理する方法]]></title>
        <id>https://zenn.dev/buenotheebiten/articles/4ba927d896b9e1</id>
        <link href="https://zenn.dev/buenotheebiten/articles/4ba927d896b9e1"/>
        <updated>2024-02-14T02:39:46.000Z</updated>
        <summary type="html"><![CDATA[GPTのAPIなどで要約をしたりQ&Aに対応したりする時で、例えば論文などを参照したい場合にトークン上限に達してしまって処理できないことがあります。
そんな時の対処法として調べているといくつかの方法があったのでメモ。

 1） RAG: 長文データから関連性の高いデータを取得して参照&生成する


長文データをベクトル化し、ベクトルデータベースに保存する
タスク（質問）の内容でベクトル検索し、データベースから類似情報を取得
「取得した情報（コンテキスト）+入力タスク」でLLMのテキスト生成を行う


 2） 長文データを要約して参照&生成する
RAGとは異なり、長...]]></summary>
        <author>
            <name>えびてん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【LangChain】HTMLHeaderTextSplitterのLimitations（制限）のメモ]]></title>
        <id>https://zenn.dev/buenotheebiten/articles/f2cf21b6ff6080</id>
        <link href="https://zenn.dev/buenotheebiten/articles/f2cf21b6ff6080"/>
        <updated>2024-02-14T02:33:18.000Z</updated>
        <summary type="html"><![CDATA[HTMLデータの加工でHTMLHeaderTextSplitterを使っている際に、ドキュメントにLimitationsが書かれていたので、その読解メモです。
（この記事はChatGPTとの会話を編集して記載しています。）


 Limitations
There can be quite a bit of structural variation from one HTML document to another, and while HTMLHeaderTextSplitter will attempt to attach all “relevant” headers to any ...]]></summary>
        <author>
            <name>えびてん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【中級者向け】Pythonで学ぶ偏微分方程式の数値シミュレーション]]></title>
        <id>https://zenn.dev/labcode/books/1acc4991f8f8b8</id>
        <link href="https://zenn.dev/labcode/books/1acc4991f8f8b8"/>
        <updated>2024-02-13T16:17:32.000Z</updated>
        <summary type="html"><![CDATA[📰 概要
本書は、Pythonを用いた偏微分方程式の数値シミュレーションを学べる技術書です。

偏微分方程式の理論を解説する書籍は数多く存在しますが、実際の実装にフォーカスした書籍はそれほど多くありません。
本書では、偏微分方程式の数値計算理論を始点とし、実装方法に至るまでを具体的に解説していきます。

実装に関しては、計算に関してだけではなく、グラフやアニメーションの作成方法、計算ログの取り方についても、コード例を交えて詳細に説明しています。

理論から実装までの全過程を一貫して学びたい方に最適な一冊です。

まえがきと第1章は無料で公開しておりますので、ぜひご一読ください。

👍 本書でできるようになること
主に以下の四つのことができるようになります。

・ 偏微分方程式から差分方程式を導けるようになる
・ 差分方程式をプログラムに落とし込み、計算できるようになる
・ 計算結果をグラフやアニメーションを使って可視化できるようになる
・ 計算結果をログとして出力できるようになる

💰 販売価格
期間限定で ¥2,500→¥1,000 (60% OFF!!)で販売しております！

📰 アップデート情報
2024/02/14：技術書初版がリリースされました。

本技術書は随時アップデートされていきます。
一度購入された方はアップデートされたとしても追加料金は発生しませんのでご安心ください。]]></summary>
        <author>
            <name>LabCode（ラボコード）</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kotomamba: Mamba State Space Model 分散学習ライブラリ]]></title>
        <id>https://zenn.dev/kotoba_tech/articles/3eb0984d8fdfb8</id>
        <link href="https://zenn.dev/kotoba_tech/articles/3eb0984d8fdfb8"/>
        <updated>2024-02-13T08:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Kotoba Technologiesでインターンをしている東京工業大学 B4 横田研究室の藤井(@okoge_kaz)です。
Kotoba TechnologiesはNLPと分散並列学習に関する技術を用いて、日本及び非英語圏におけるLLMやマルチモーダルモデルの実運用に向けた研究開発を行っています。
今回は、Transformerに代わるアーキテクチャとして注目を集めているMamba(State Space Model: 状態空間モデル)を分散学習するためのライブラリであるkotomambaを開発、公開しました。
本記事は、このライブラリの使用方法と、Mambaについて簡...]]></summary>
        <author>
            <name>Kazuki Fujii</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ユニークな文字列(キー)を生成したい]]></title>
        <id>https://zenn.dev/hir0_728/articles/78b87e79b1053b</id>
        <link href="https://zenn.dev/hir0_728/articles/78b87e79b1053b"/>
        <updated>2024-02-13T03:41:58.000Z</updated>
        <summary type="html"><![CDATA[はじめに
開発を行っていく中で、ユニークな文字列を必要なタイミングがあった。
本記事では、Pythonを利用した環境において、生成する文字列がユニークであることを目標とし、
その手法にどんなものがあるかをまとめる。

 前提条件

生成する文字列は衝突する確率が低いこと
実装はPythonで行う


 考えられる手段

ランダムモジュールを利用する
タイムスタンプを利用する
UUIDを利用する
ハッシュ関数を利用する
ユニークキー生成ライブラリを利用する


 1. ランダムモジュールを利用する
まずは単純にランダムな数字や文字を組み合わせてユニークな文字列を生成してみる。
だがしか...]]></summary>
        <author>
            <name>HIR0</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SQLAlchemy+aiomysql+pytest-asyncioを使ったデータベースのテストの書き方]]></title>
        <id>https://zenn.dev/nazo/articles/9230a54acb41e4</id>
        <link href="https://zenn.dev/nazo/articles/9230a54acb41e4"/>
        <updated>2024-02-13T02:30:00.000Z</updated>
        <summary type="html"><![CDATA[pytest-asyncio も SQLAlchemy も優秀なのでそんなに困ることはないのですが、いくつかはまりどころがあったのでメモしておきます。

 aiomysql では sync_engine が使えない
aiomysql は asyncio でしか使えないようになっているので、sync_engine が利用できません。あまり困ることはないですが、 click などを使う時でも async を強制されるので少し面倒です。 asyncio.run() で囲みましょう。
データベース全体の操作は SQLAlchemy の少し外側に出ることが多いので、 async を対応させるのはひ...]]></summary>
        <author>
            <name>nazo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【LangChain】HTMLHeaderTextSplitterで出たエラー]]></title>
        <id>https://zenn.dev/buenotheebiten/articles/396e06533e7e9a</id>
        <link href="https://zenn.dev/buenotheebiten/articles/396e06533e7e9a"/>
        <updated>2024-02-13T01:58:31.000Z</updated>
        <summary type="html"><![CDATA[LangChainでHTMLテキストを分割して処理をするためにHTMLHeaderTextSplitterを使用した時に、下記エラーが出てしまいました。
ValueError: Input object has no document: lxml.etree._ElementTree

 解決方法「lxmlライブラリのバージョン変更」
原因としては、lxmlのバージョンが低かったことで起きたエラーのようです。
pip install lxml==4.9.4

 まとめ
エラー部分に関係するライブラリのバージョン確認が大事だと改めて認識しました。
Google Colaboratoryでは...]]></summary>
        <author>
            <name>えびてん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[MattermostのスマホPush通知をWebhook+ntfy(Basic認証付き)で代用する]]></title>
        <id>https://zenn.dev/nondescript/articles/60cd1d84ee1e79</id>
        <link href="https://zenn.dev/nondescript/articles/60cd1d84ee1e79"/>
        <updated>2024-02-12T17:19:24.000Z</updated>
        <summary type="html"><![CDATA[TL;DR

server.ymlでauth-default-access: deny-all


ntfy user add posterとntfy access poster \"*\" wo && ntfy token add posterで投稿用トークン取得

ntfy user add ユーザー名とntfy access ユーザー名 "*" roで購読権限付与
Webhookサーバーを建て、Mattermostからのメッセージをカスタマイズしてトークン認証でntfyサーバーにPOST


 背景
自前の通知サーバーを用いたMattermost公式のAndro...]]></summary>
        <author>
            <name>素人の戯言</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python FastAPIを使用して画像のアップロードと表示を行う方法]]></title>
        <id>https://zenn.dev/nyaru_tech/articles/987f6038e059eb</id>
        <link href="https://zenn.dev/nyaru_tech/articles/987f6038e059eb"/>
        <updated>2024-02-12T17:04:25.000Z</updated>
        <summary type="html"><![CDATA[記事概要:
PythonのWebフレームワークであるFastAPIを使用して、画像のアップロードと表示を行う方法について解説します。このガイドでは、FastAPIを使用して画像をバイナリデータとして保存し、それらの画像を表示する方法を示します。

 画像のアップロード
FastAPIを使用して画像をアップロードするためには、POSTリクエストを受け付け、UploadFileを使用して画像ファイルを受け取ります。以下の例では、/Contents/Createエンドポイントが画像のアップロードを処理しています。

python
@app.post("/Contents/Create")
...]]></summary>
        <author>
            <name>にゃる～技術があれば覆水すら盆に返る～</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GoCVを使って自動でナンプレを解いてみた]]></title>
        <id>https://zenn.dev/hamao/articles/97968d347e4696</id>
        <link href="https://zenn.dev/hamao/articles/97968d347e4696"/>
        <updated>2024-02-12T16:02:59.000Z</updated>
        <summary type="html"><![CDATA[したこと
タイトルの通り、GoCVを使って、ナンプレの自動読み取りをしてみました。
n+1番煎じですが、昔からの夢だったので作ってみることにしました。Pythonの記事はいくつかあったのですが、そのまま写すだけだと少しつまらないので、せっかくなのでGoで書くことにしました。

 完成品


 環境
M1 Mac
OS: macOS Sonoma version 14.2.1
$ brew --version                    
Homebrew 4.2.7-140-g352f57d
Homebrew/homebrew-core (git revision 2615...]]></summary>
        <author>
            <name>hamao</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Kaggle】Kaggleで学習する機械学習]]></title>
        <id>https://zenn.dev/team_delta/articles/kaggle_article_1</id>
        <link href="https://zenn.dev/team_delta/articles/kaggle_article_1"/>
        <updated>2024-02-12T16:00:14.000Z</updated>
        <summary type="html"><![CDATA[はじめに
どうも、都内の大学で情報系の学科を専攻している千代丸と申します。
この記事はKaggleに参加して機械学習を勉強しよう！というものの超入門記事になっています。
私は普段から機械学習や生成AIなどの文献を読み漁っており、ハンズオン形式でもっと深く理解したいという思いから最近Kaggleに参加しました。

 この記事を読んで欲しい人

「Kaggle」もしくは「機械学習」という言葉を聞いたことがある人・興味がある人
AI系、データサイエンスに興味がある人
機械学習、データサイエンスなどを始めたいが何から始めればいいかわからない人


 Kaggleって何？
Kaggle（呼び方...]]></summary>
        <author>
            <name>reochiyo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Kaggle】Kaggleで学習する機械学習]]></title>
        <id>https://zenn.dev/reochiyo/articles/kaggle_article_1</id>
        <link href="https://zenn.dev/reochiyo/articles/kaggle_article_1"/>
        <updated>2024-02-12T16:00:14.000Z</updated>
        <summary type="html"><![CDATA[はじめに
どうも、都内の大学で情報系の学科を専攻している千代丸と申します。
この記事はKaggleに参加して機械学習を勉強しよう！というものの超入門記事になっています。
私は普段から機械学習や生成AIなどの文献を読み漁っており、ハンズオン形式でもっと深く理解したいという思いから最近Kaggleに参加しました。

 この記事を読んで欲しい人

「Kaggle」もしくは「機械学習」という言葉を聞いたことがある人・興味がある人
AI系、データサイエンスに興味がある人
機械学習、データサイエンスなどを始めたいが何から始めればいいかわからない人


 Kaggleって何？
Kaggle（呼び方...]]></summary>
        <author>
            <name>reochiyo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GIS × Python Tutorial Session5 ~ geopandas 実践編 ~]]></title>
        <id>https://zenn.dev/daidai_daitai/articles/be62e3e9882441</id>
        <link href="https://zenn.dev/daidai_daitai/articles/be62e3e9882441"/>
        <updated>2024-02-12T12:41:29.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事は「GIS × Python Tutorial」の関連記事です。
前回はgeopandasの基本的な使い方を解説したので、今回はgeodatasetsのAPIを使用して、シカゴ周辺のデータを取得し、データをこねくり回してみましょう。
実際にデータを分析する際には、いくつかのデータを組み合わせる場合が多いので、この中から今回は以下のデータを取得し組み合わせて見ましょう。全てシカゴのデータです

2000年と2010年の地域別にみる人口の変化（Polygon）
2011年の放置車両（Point）

geodatasets
https://geodatasets.read...]]></summary>
        <author>
            <name>橙。</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Azure Pipelines で Python の自作パッケージのテスト＆ビルド自動化]]></title>
        <id>https://zenn.dev/takanari_dev/articles/2024-02-12-azure-devops-python-package-pipeline</id>
        <link href="https://zenn.dev/takanari_dev/articles/2024-02-12-azure-devops-python-package-pipeline"/>
        <updated>2024-02-12T12:40:11.000Z</updated>
        <summary type="html"><![CDATA[はじめに
これは以下の記事の続きである。本記事は以下の記事のcatlibという自作パッケージについて、テストやビルドを自動化するものである。
https://zenn.dev/takanari_dev/articles/2024-02-06-azure-devops-python-package

 やりたいこと


mainブランチへのマージ時に自作 Python パッケージのテストを自動的に行う
タグを切ったときに Azure Artifacts へのデプロイを自動的に行う


 テスト自動化

 パイプラインの準備
ローカル環境のリポジトリ直下から.azure-pipeline...]]></summary>
        <author>
            <name>takanari</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python のパッケージを Poetry で自作して Azure Artifacts に置いてみる]]></title>
        <id>https://zenn.dev/takanari_dev/articles/2024-02-06-azure-devops-python-package</id>
        <link href="https://zenn.dev/takanari_dev/articles/2024-02-06-azure-devops-python-package"/>
        <updated>2024-02-12T12:40:11.000Z</updated>
        <summary type="html"><![CDATA[はじめに
仕事で Azure DevOps を使おうとしているが、いかんせん情報が少ない。（ただし、公式ドキュメントは充実している。）GitHub よりもケーススタディ的な記事が少なく自分が苦労したので、備忘録として記事を書きたくなった。今回は Azure Artifacts に Python の独自ライブラリを（手動で）置いてみることを試したので、それを書く。
また、前半はほとんど Python のパッケージ作成の話である。Python の自作パッケージ / ライブラリの配布等の記事も探しにくかったので、そちらのほうでも参考になれば幸いである。
そもそも Azure DevOps ...]]></summary>
        <author>
            <name>takanari</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【LangChain】GitHubリポジトリ内のプロンプトをみる]]></title>
        <id>https://zenn.dev/buenotheebiten/articles/244a8716f00858</id>
        <link href="https://zenn.dev/buenotheebiten/articles/244a8716f00858"/>
        <updated>2024-02-12T12:12:26.000Z</updated>
        <summary type="html"><![CDATA[LangChainのGitHubを見ていたら、いくつかChatGPTなどでも利用できそうなプロンプトを見かけたので、まとめのメモです。
https://github.com/langchain-ai/langchain/tree/master

 1. LLMの要約チェック
「事実確認」や「テキストに対して事実をもとに修正を行う」などのプロンプトがありました。
全体的に下記のプロンプトに加えて、外部データとして事実データを参照した方が精度が上がりそうなイメージがしました。

 1-1. テキスト全てが正しいかどうか判定
複数のテキストの内容が全て正しいかどうか、を判定するプロンプトです。...]]></summary>
        <author>
            <name>えびてん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GCP Cloud Functionsでシークレット付きのPythonスクリプトを定期実行する手順]]></title>
        <id>https://zenn.dev/tanny/articles/9c651bf26d33ea</id>
        <link href="https://zenn.dev/tanny/articles/9c651bf26d33ea"/>
        <updated>2024-02-12T11:19:04.000Z</updated>
        <summary type="html"><![CDATA[この記事は、Zennの記事投稿キャンペーン（テーマ：Google Cloud）の応募記事です。以前に自作したPythonスクリプトをGCP上で定期実行する手順を紹介します。
https://info.zenn.dev/2024-02-01-campaign-gc24

 はじめに
2023年の1月に、「降水確率に応じてSwitchBotのスマートライトの色を変える」というPythonスクリプトを自作し、大変多くの反響をいただきました。
https://zenn.dev/tanny/articles/808487545eb30f
このPythonスクリプトはGitHub Actionsを利...]]></summary>
        <author>
            <name>Tanny</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【LangChain】複数処理をつなげる「Chains」読解メモ]]></title>
        <id>https://zenn.dev/buenotheebiten/articles/8dbf5cfef5f3eb</id>
        <link href="https://zenn.dev/buenotheebiten/articles/8dbf5cfef5f3eb"/>
        <updated>2024-02-12T07:53:53.000Z</updated>
        <summary type="html"><![CDATA[LangChainでLLMやツール使用、データの前処理など、さまざまな処理をラクにつなげることができる「Chains」のドキュメントを読み解いたメモです。
https://python.langchain.com/docs/modules/chains
https://api.python.langchain.com/en/stable/langchain_api_reference.html#module-langchain.chains
pip install -U openai langchain langchain-openai

 「Chains」とは
LLM、ツール、データ前...]]></summary>
        <author>
            <name>えびてん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【深く】DjangoのMigrationを理解する]]></title>
        <id>https://zenn.dev/kazu1/articles/4e70817baa7dfb</id>
        <link href="https://zenn.dev/kazu1/articles/4e70817baa7dfb"/>
        <updated>2024-02-12T06:47:59.000Z</updated>
        <summary type="html"><![CDATA[!
この記事は、Djangoのマイグレーションについてより理解したいと考えている方々に向けたものです。
Djangoがマイグレーションをどのように追跡し、適用するか、そして開発者が新しいマイグレーションを作成する際にDjangoがどのようにモデルの変更を検出するかについて解説しています。


 Djangoがどのようにマイグレーションを追跡するか
既にマイグレーションを適用している状態で再度、migrateコマンドを実行すると以下のようになりますね。
python manage.py migrate
Operations to perform:
  Apply all migration...]]></summary>
        <author>
            <name>Kazu1</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【OpenAI API】Function calling による振り分けを試してみた]]></title>
        <id>https://zenn.dev/ryota_09/articles/1b44973515dc4c</id>
        <link href="https://zenn.dev/ryota_09/articles/1b44973515dc4c"/>
        <updated>2024-02-12T06:10:44.000Z</updated>
        <summary type="html"><![CDATA[こんにちは！@Ryo54388667です!☺️
普段は都内でフロントエンドエンジニアとして業務をしてます！
主にTypeScriptやNext.jsといった技術を触っています。
今回はOpenAIのAPI、Function callingという機能を試してみたいと思います。

 📌 Function calling とは

In an API call, you can describe functions and have the model intelligently choose to output a JSON object containing arguments to cal...]]></summary>
        <author>
            <name>りょた</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pyenvの導入]]></title>
        <id>https://zenn.dev/tsaeki/articles/bc868a8d8fd6ae</id>
        <link href="https://zenn.dev/tsaeki/articles/bc868a8d8fd6ae"/>
        <updated>2024-02-12T04:35:05.000Z</updated>
        <summary type="html"><![CDATA[https://github.com/pyenv/pyenv の導入してみます。

 環境
ubuntu with WSL2でzsh使ってます。

 事前にパッケージをインストール
事前に必要なパッケージをインストールしておきます。
https://github.com/pyenv/pyenv/wiki#suggested-build-environment
sudo apt update; sudo apt install build-essential libssl-dev zlib1g-dev \
libbz2-dev libreadline-dev libsqlite3-dev ...]]></summary>
        <author>
            <name>tsaeki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[中学2年生のPython勉強①]]></title>
        <id>https://zenn.dev/program_ke/articles/b2505f918ace8e</id>
        <link href="https://zenn.dev/program_ke/articles/b2505f918ace8e"/>
        <updated>2024-02-12T00:04:41.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Pythonで利用できるpyinstallerの忘備録です。
(webサイトを公開する際、htmlなどのファイルもexeにまとめたい場合）
zenn自体初めて触るのでご指摘ください(o*。_。)oペコッ

 pythonで複数ファイルをexe化する
①pip install pyinstaller
②pyinstaller file.py -onefile --noconsole
実行すると下記のような.specファイルが生成されると思う

specファイル
a = Analysis(
    ['filename.py'],
    pathex=[],
    bina...]]></summary>
        <author>
            <name>Ke</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[デザインで使えそうなスクリプトをPythonで書いてみる]]></title>
        <id>https://zenn.dev/calloc134/articles/9aa88e42b95345</id>
        <link href="https://zenn.dev/calloc134/articles/9aa88e42b95345"/>
        <updated>2024-02-11T14:14:34.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは。かろっくです。
今回はゆるい記事です。
デザインで使えそうなスクリプトを三つほど Python で書いてみました。
ChatGPT にかなり頼ったので、自分でもあまりコードを理解できてない部分がありますがご了承ください・・・。
Python での画像処理もほぼ初めて書いたので、許してください

 文字パーツ分割

このような透明な画像に対して、文字のパーツを分割するスクリプトです。

それぞれ画像として分割されるので、位置を調整して使うことができます。
イメージ(Aviutl において、震えるアニメーションを適用してあります)

https://twitter....]]></summary>
        <author>
            <name>calloc134</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Alembicでマイグレーション（FastAPI+SQLModel）]]></title>
        <id>https://zenn.dev/keita_f/articles/6e1323fe023fa1</id>
        <link href="https://zenn.dev/keita_f/articles/6e1323fe023fa1"/>
        <updated>2024-02-11T12:54:06.000Z</updated>
        <summary type="html"><![CDATA[前回、FastAPIとSQLmoelを使用して、webアプリケーションを作成しました。
https://zenn.dev/keita_f/articles/4493e3cfd76aec
このアプリケーションに、別のモデルを追加して、さらに、二つのデータベースに関連性を持たせます。

 BaseUserModelの設定変更
前回作成したBaseUserModelを少し変更します。

backend/v1/model/user_model.py
 class BaseUserModel(BaseUser, table = True):
   id: Optional[int] = Field...]]></summary>
        <author>
            <name>KITFJN</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Cloud Functions から別プロジェクトの Artifact Registry にあるpythonパッケージを使用する]]></title>
        <id>https://zenn.dev/abaoaqu/articles/61634dcd4fd378</id>
        <link href="https://zenn.dev/abaoaqu/articles/61634dcd4fd378"/>
        <updated>2024-02-11T12:09:16.000Z</updated>
        <summary type="html"><![CDATA[概要
Cloud Functions(python) から別プロジェクトの Artifact Registry に格納されている python パッケージをインストールする手順を記載します。

 対象読者

Google Cloud のサービスをコンソールまたはCLIで構築した経験のある方
Python の開発環境を構築した経験のある方


 環境

 ローカル端末

OS: macOS Sonoma 14.1
チップ: Apple M3 Max
Google Cloud SDK: 463.0.0
Pythonパッケージ

pip: 24.0
setuptools: 69.0.3
w...]]></summary>
        <author>
            <name>abaoaqu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[３分でわかるpipreqsでrequirements.txtを自動的に生成する方法]]></title>
        <id>https://zenn.dev/nyaru_tech/articles/4f51343b263cf2</id>
        <link href="https://zenn.dev/nyaru_tech/articles/4f51343b263cf2"/>
        <updated>2024-02-11T10:25:15.000Z</updated>
        <summary type="html"><![CDATA[概要
Pythonのプロジェクトを管理する際に、必要なライブラリや依存関係を管理するのは重要です。pipreqsは、Pythonプロジェクトの依存関係を自動的に検出し、requirements.txtファイルを生成するツールです。この記事では、pipreqsの使い方を紹介します。

 本文
最初に、pipreqsをインストールする必要があります。ターミナルまたはコマンドプロンプトを開き、次のコマンドを実行します。

bash
pip install pipreqs

pipreqsを使用して、Pythonプロジェクトのディレクトリ内のファイルから依存関係を検出し、requiremen...]]></summary>
        <author>
            <name>にゃる～技術があれば覆水すら盆に返る～</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TouchDesignerでLINEに通知を送る方法]]></title>
        <id>https://zenn.dev/svertkatter/articles/d7941f95b52385</id>
        <link href="https://zenn.dev/svertkatter/articles/d7941f95b52385"/>
        <updated>2024-02-11T08:19:01.000Z</updated>
        <summary type="html"><![CDATA[こんにちは。TouchDesignerでLINEに通知を送りたいですよね。
特にWebSocketを使用してネットワークが切れていないかなと不安になっている中、通知してくれたほうが助かります。
調べていく中で、Slackを利用した通知方法などはありますが、LINEでしている人はいなかったと思うので、この記事でそのやり方を説明しようと思います。

 前提条件
まず前提をお話します。この記事を書いてる人間、つまり私はド素人です。プログラミングを生業にしている訳ではありません。ご了承ください。


TouchDesigner

バージョン：2022.35320



Python

3.9.5...]]></summary>
        <author>
            <name>svertkatter</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[@propertyとは]]></title>
        <id>https://zenn.dev/yuto_mo/articles/29682f6b0c402c</id>
        <link href="https://zenn.dev/yuto_mo/articles/29682f6b0c402c"/>
        <updated>2024-02-11T06:48:26.000Z</updated>
        <summary type="html"><![CDATA[今回はpythonの@propertyについて軽く解説します。

 ＠propertyとは
@propertyは、クラスのインスタンス変数を簡潔に呼び出せるようにする組み込みのデコレータです。
デコレータは、装飾される関数を引数として取り、新しい関数を返す高階関数ですが、@propertyはその関数における特殊メソッドをオーバーライドし、関数の呼び出し方によって返す関数を変更します。
言葉で表すと非常に難解なので、例を見ていきましょう。

 例
class Person:
    def __init__(self, name):
        self._name = name

 ...]]></summary>
        <author>
            <name>yuu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで引数にキーワードを強制する方法]]></title>
        <id>https://zenn.dev/nakurei/articles/forcing-keywords-as-arguments-in-python</id>
        <link href="https://zenn.dev/nakurei/articles/forcing-keywords-as-arguments-in-python"/>
        <updated>2024-02-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[これはなに
Pythonの関数で、利用時にキーワードによる指定を強制できると知ったのでまとめたメモ。

 この記事が役立つ人

すでにPythonの基本的な知識を持っている人で

関数呼び出し時にキーワード指定を強制したい人
コードの可読性や保守性を向上させたい人




 本記事の要約
Python関数の引数の定義で、*の後に引数を定義すると、利用者にキーワードによる指定を強制できる。この引数はキーワード専用引数（Keyword-Only Arguments）と呼ばれる。下記の例では、is_upperをキーワード専用引数として定義している。

関数定義
# `*`の後に定義した引数...]]></summary>
        <author>
            <name>NakuRei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[悪ノリで Lisp トランスパイラを実装した with Python。]]></title>
        <id>https://zenn.dev/wsuzume/articles/d00e803c5b8743</id>
        <link href="https://zenn.dev/wsuzume/articles/d00e803c5b8743"/>
        <updated>2024-02-10T12:05:57.000Z</updated>
        <summary type="html"><![CDATA[はじめに
友達がこんなことを呟いていた。
https://x.com/xeki00/status/1753426382410183054?s=20
気持ちは分かるよ。私も Python には滅んでほしいと思っている。そしてプログラミング界隈にはこんなジョークがあるんだ。
https://x.com/wsuzume/status/1753427254645051723?s=20
パンがないならケーキを焼いて食べればいいのに。対する友の返答はこうだった。
https://x.com/xeki00/status/1753427989805891862?s=20

 え、マジ？ 作るけど？
...]]></summary>
        <author>
            <name>Josh Nobus</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Union-Findアルゴリズムと計算科学の話]]></title>
        <id>https://zenn.dev/kaityo256/articles/union_find_physics</id>
        <link href="https://zenn.dev/kaityo256/articles/union_find_physics"/>
        <updated>2024-02-10T11:27:35.000Z</updated>
        <summary type="html"><![CDATA[概要
Union-Findアルゴリズムは、グラフ系でよく使われるアルゴリズムですが、物性物理においても重要な役割を果たします。その実装と使われ方について少しメモしておきます。

 Union-Findアルゴリズム
何か2つの物が与えられたとき、それらがある意味において「同じグループに所属するかどうか」が判定できるとき、その関係を同値関係と呼びます。例えば相似などが典型例で、図形Aと図形Bが相似、図形Bと図形Cが相似ならば、図形Aと図形Cも相似です。このように「友達の友達は友達」みたいな関係が同値関係です。とりあえず同値関係を\simで表現することにしましょう。ある集合の要素a,b,c...]]></summary>
        <author>
            <name>ロボ太</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのdataclassについての備忘録]]></title>
        <id>https://zenn.dev/tonokokko/articles/77d3f3f6f9c143</id>
        <link href="https://zenn.dev/tonokokko/articles/77d3f3f6f9c143"/>
        <updated>2024-02-10T03:06:19.000Z</updated>
        <summary type="html"><![CDATA[Pythonのdataclassについてまとめています。
「self.var = var」みたいに連打しなくてよくなるのは便利ですね！
初見だと意味不明でしたが...
試験的に、生成AIとのやりとりして調べた結果を記事の形にまとめてもらっています。

 @dataclassデコレータについて

Python 3.7以降で利用可能な@dataclassデコレータを使用すると、クラスの定義を簡潔に書くことができます。

@dataclassは、インスタンス変数のための__init__メソッドなどを自動的に生成します。


 独自の__init__メソッドを定義する場合


@dataclas...]]></summary>
        <author>
            <name>とのこっこ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Zennで「いいねした投稿」と「読んでいる本」をNotionで管理する]]></title>
        <id>https://zenn.dev/xcter/articles/05db4018cfdc71</id>
        <link href="https://zenn.dev/xcter/articles/05db4018cfdc71"/>
        <updated>2024-02-10T02:37:10.000Z</updated>
        <summary type="html"><![CDATA[何を作ったか
Zennで自分が「いいねした投稿」と「読んでいる本」をNotionのデータベースに保存するスクリプトを作りました。Notionのアカウントとpythonの実行環境があれば誰でも使えるようになっています。
すぐに試したい方は、こちらのREADMEを読んで試してみてください
こんなもの↓ができます！（これは私がいいねした投稿の一覧です）
https://zealous-rosehip-7a8.notion.site/a3c1dd8fa96a42fbb6e162e91354a68d?v=324c9e7e593746838d64ee2123d175e6&pvs=4

 ...]]></summary>
        <author>
            <name>XCTER</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GPT連携アプリ開発時の必須知識、RAGをゼロから解説する。概要＆Pythonコード例]]></title>
        <id>https://zenn.dev/spiralai/articles/8af7cbf526c2e1</id>
        <link href="https://zenn.dev/spiralai/articles/8af7cbf526c2e1"/>
        <updated>2024-02-10T01:50:02.000Z</updated>
        <summary type="html"><![CDATA[こんにちは。わいけいです。
今回の記事では、生成AI界隈ではかなり浸透している RAG について改めて解説していきます。
「低予算で言語モデルを使ったアプリを開発したい」というときに真っ先に選択肢に上がるRAGですが、私自身もRAGを使ったアプリケーションの実装を業務の中で何度も行ってきました。
今回はその知見をシェア出来れば幸いです。

 RAG（Retrieval-Augmented Generation)とは
まず、 そもそもRAGとは何ぞや？ というところから見ていきましょう。
RAG（Retrieval-Augmented Generation) は自然言語処理（NLP）と特に...]]></summary>
        <author>
            <name>わいけい</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[1次ソース公式ドキュメントBlender 4.0 Python API Documentation を日本語で嚙み砕く]]></title>
        <id>https://zenn.dev/jim_soros/articles/8429c4b2a91b76</id>
        <link href="https://zenn.dev/jim_soros/articles/8429c4b2a91b76"/>
        <updated>2024-02-10T01:28:19.000Z</updated>
        <summary type="html"><![CDATA[Blender 4.0 Python API Documentation を日本語で嚙み砕く
https://docs.blender.org/api/current/index.html

 【Quickstart】
https://docs.blender.org/api/current/info_quickstart.html

先ずはEnable Developer Extra and Python Tooltips.を表示できるようにチェック --> 上部Edit-Prefarence-interface-PythonTooltips と DeveloperExtra...]]></summary>
        <author>
            <name>ねこまいたけだよ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ポケモン界における最強タイプを遺伝的アルゴリズムで求めてみた]]></title>
        <id>https://zenn.dev/nope/articles/2278e0a922b5b9</id>
        <link href="https://zenn.dev/nope/articles/2278e0a922b5b9"/>
        <updated>2024-02-09T16:48:15.000Z</updated>
        <summary type="html"><![CDATA[はじめに
みなさんポケモンは好きでしょうか。
ポケモンには、現在18種類のタイプが存在しますが、中には弱点が多くて不利なタイプがありますよね。例えば、草タイプや氷タイプは弱点が多く、一方で鋼タイプや電気タイプは耐性が多くて有利に見えます。
そこで、もし実際にこれらのタイプのポケモンが同じ環境で共生していたら、何百世代か後には、弱点が多いタイプは自然淘汰され、耐性が多いタイプが優勢になるのでは？？という疑問が湧きました。

今回は遺伝的アルゴリズムを用いて、異なるタイプのポケモンが共存する環境をシミュレーションします。能力が全く同じであると仮定した場合、どのタイプのポケモンが生き残るの...]]></summary>
        <author>
            <name>nope</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[高速・高精度な音声文字起こしが出来るという噂の「Deepgram」を試してみた (導入編)]]></title>
        <id>https://zenn.dev/smartcamp/articles/8b24739ab8cba3</id>
        <link href="https://zenn.dev/smartcamp/articles/8b24739ab8cba3"/>
        <updated>2024-02-09T14:52:21.000Z</updated>
        <summary type="html"><![CDATA[高速・高精度なASR(自動音声認識)サービスを提供するDeepgramというサービスがあると噂を聞いたので試してみました。

 Deepgramとは
Deepgramは2015年に設立されたアメリカのスタートアップ企業です。
AIを用いた企業向けの音声認識に特化しており、スタートアップからSpotifyやNASAのような大企業まで多数のクライアントにサービスを提供しています。
https://deepgram.com/
公式サイトによると主な競合他社に比べて速度・精度・コストのいずれも優れており、更に日本語を含む30カ国以上の言語に対応しているとのことです。
主なプロダクトは以下の3つで...]]></summary>
        <author>
            <name>信玄餅</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WSL2でPython,pip,venvをインストールして仮想環境を作成]]></title>
        <id>https://zenn.dev/ak_yoshimatsu/articles/69457d3f44fe55</id>
        <link href="https://zenn.dev/ak_yoshimatsu/articles/69457d3f44fe55"/>
        <updated>2024-02-09T14:35:45.000Z</updated>
        <summary type="html"><![CDATA[wsl2でPythonの開発環境を整えた際の備忘録。

 参考サイト
Windows で Web 開発に Python を使用する | Microsoft Lean

 Python,pip,venvをインストール

 1. Linuxディストリビューションの更新（wsl2）
最新バージョンを使用するために、以下のコマンドでwsl2を最新に更新。
sudo apt update & sudo apt upgrade

 2. Pythonの更新
Python3がすでにインストールされていることを確認。
python3 --version
>> Pyhon 3.10.1...]]></summary>
        <author>
            <name>よしまつ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【LangChain】長文テキスト処理する機能「Text Splitters」読解メモ]]></title>
        <id>https://zenn.dev/buenotheebiten/articles/af5cfba98b1b8f</id>
        <link href="https://zenn.dev/buenotheebiten/articles/af5cfba98b1b8f"/>
        <updated>2024-02-09T11:24:29.000Z</updated>
        <summary type="html"><![CDATA[「LangChain」のLLMで長文参照する時のテキスト処理をしてくれる「Text Splitters」機能のメモです。
https://python.langchain.com/docs/modules/data_connection/document_transformers/

 Text Splittersの種類
具体的には下記8つの方法がありました。



名前
説明




Split by character

指定文字で分割してまとめる最もシンプルな方法。（default: ""）


Recursively split by character

指定文字リストに従って...]]></summary>
        <author>
            <name>えびてん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Saasの契約更新月が近づいてきたら通知する仕組みをつくりました]]></title>
        <id>https://zenn.dev/ryutag/articles/1af81e56f20650</id>
        <link href="https://zenn.dev/ryutag/articles/1af81e56f20650"/>
        <updated>2024-02-09T10:58:31.000Z</updated>
        <summary type="html"><![CDATA[導入と概要
こんにちは、delyの後藤です。
弊社では、Saas管理ツールとしてdxeco を導入しています。
ツール内のインサイトとして契約更新前のnヶ月前になったらUI上にお知らせを出してくれる機能があり、それをSlackに通知する仕組みを作ったところ、意外にもウケが良かったのでzennに記事を作ることにしました。
(ちなみに導入時の私のインタビュー記事は こちら ですw)

 設計
APIを叩いて、流し込むだけの難しいことは何もしていない形で作成しました。

 データ登録と設定
データの登録と、いつお知らせを受け取りたいか、という設定はdxecoのUI上で手登録を行います。
こ...]]></summary>
        <author>
            <name>ryuta goto【dely株式会社】</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonのSentenceTransformerを用いた文章類似度比較]]></title>
        <id>https://zenn.dev/welmo/articles/a79b8b45573383</id>
        <link href="https://zenn.dev/welmo/articles/a79b8b45573383"/>
        <updated>2024-02-09T02:18:49.000Z</updated>
        <summary type="html"><![CDATA[ご挨拶
株式会社Welmoでエンジニアとして働いている進藤です。Welmoは介護業界の様々な社会課題（介護負担の増大・労働者不足など）を、ICTと先端技術の力で解決するために日々努めています。

 はじめに
文章の類似度を計算することは、テキストデータを扱う多くのプロジェクトで重要です。このため、Pythonの SentenceTransformer ライブラリは非常に役立つツールです。この記事では、SentenceTransformer ライブラリを使用して、文章の類似度を計算する基本的な手法について解説します。

 SentenceTransformerとは？
SentenceT...]]></summary>
        <author>
            <name>進藤　翔太</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】LangChainでGPT-4を使ってみる]]></title>
        <id>https://zenn.dev/buenotheebiten/articles/15546ada9106a0</id>
        <link href="https://zenn.dev/buenotheebiten/articles/15546ada9106a0"/>
        <updated>2024-02-09T01:48:39.000Z</updated>
        <summary type="html"><![CDATA[LangChainでGPT-4を利用するには「Chat Models」を利用します。

Chat Models | 🦜️🔗 Langchain


 セットアップ

インストール

pip install langchain-openai

APIキーのセット

方法1) 環境変数OPENAI_API_KEYにセットする
方法2) ChatOpenAI(openai_api_key="YOUR_API_KEY")でセットする




 1. 簡単なコード
from langchain_openai import ChatOpenAI

# --- APIキー ---
OPENAI_API...]]></summary>
        <author>
            <name>えびてん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[機械翻訳APIコンテナの実装]]></title>
        <id>https://zenn.dev/emoclew/articles/bdc0cb017a0ccf</id>
        <link href="https://zenn.dev/emoclew/articles/bdc0cb017a0ccf"/>
        <updated>2024-02-08T23:51:42.000Z</updated>
        <summary type="html"><![CDATA[動機
ローカルで動くLLMがほしいなと思って、いろいろと調べていました。
しかし、軽量のLLMは日本語が怪しくなるという話をよく聞きます
そこで、一度機械翻訳を間に入れて、
日本語指示 → 機械翻訳 → 英語指示 → LLM→英語結果 → 機械翻訳 → 日本語結果
としたいと思います。
（実際に、機械翻訳を入れたときの性能がどうなるかは要検証です）
機械翻訳について調べてみると、気軽に使えるAPIでは、DeepLもしくはGoogle Translateが最も性能が良いようです。時点で、MicrosoftのTranslate。
また、LLMを使った機械翻訳も研究されているようですが、D...]]></summary>
        <author>
            <name>emoclew</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで無料でTwitterのBotを作る方法]]></title>
        <id>https://zenn.dev/d60/articles/1e0419b3a4d0c7</id>
        <link href="https://zenn.dev/d60/articles/1e0419b3a4d0c7"/>
        <updated>2024-02-08T06:11:17.000Z</updated>
        <summary type="html"><![CDATA[Pythonで無料でTwitterのBotを作る方法！！


 この記事の概要
無料で、APIキーなしでツイッターAPIを利用できるPythonのライブラリ「Twikit」を紹介します。

 Twikitとは
Twikitは、スクレイピングを利用して、ツイートの投稿、ツイートの検索、ユーザーのツイートの取得、トレンドの取得などができるPythonのライブラリです。
これを使えば、一定時間毎にツイートを投稿するボットを作ったりすることができます。
https://github.com/d60/twikit

 このライブラリの特徴
このライブラリの最大の特徴は、APIキー不要かつ無料で...]]></summary>
        <author>
            <name>d88</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[deptryでpyprojectをお掃除する]]></title>
        <id>https://zenn.dev/saorio/articles/330892959959cf</id>
        <link href="https://zenn.dev/saorio/articles/330892959959cf"/>
        <updated>2024-02-08T05:00:47.000Z</updated>
        <summary type="html"><![CDATA[pyprojectのいらないライブラリを簡単に見つけられる deptryが便利。
pyproject.tomlがあるディレクトリでdeptry .を実行すると不要なライブラリや設定ミスを確認できる。CIに入れて定期的に確認するのが良さそう。]]></summary>
        <author>
            <name>saorio</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ARマーカーで動画内の特定の画面を切り出す]]></title>
        <id>https://zenn.dev/hartree_fock/articles/8cc22fe15cc995</id>
        <link href="https://zenn.dev/hartree_fock/articles/8cc22fe15cc995"/>
        <updated>2024-02-07T15:58:14.000Z</updated>
        <summary type="html"><![CDATA[はじめに
https://qiita.com/mo256man/items/3a8a1f304ecdfaef6e15]]></summary>
        <author>
            <name>hartree_fock</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python標準GUI「Tkinter」を使ってみる。]]></title>
        <id>https://zenn.dev/hartree_fock/articles/3365a05a82a1fa</id>
        <link href="https://zenn.dev/hartree_fock/articles/3365a05a82a1fa"/>
        <updated>2024-02-07T15:46:02.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Python標準GUI「Tkinter」を使ってみます。

 参考サイト
https://techplay.jp/column/552
https://ossa2019.stars.ne.jp/Remember/tkinter/tk3.html
https://pg-chain.com/python-radiobutton

 やりたいこと
やりたいことの流れは以下の通り。
① 起動するとGUIが表示
- GUIにはA,B,Cの3つのボタンが表示されている
- GUIには「OK」ボタンがある。
② A,B,Cのいずれかのボタンを押すと、そのボタンがハイライトされる
③ ボタ...]]></summary>
        <author>
            <name>hartree_fock</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonだけで帳票の手書き文字をOCRで読みとる]]></title>
        <id>https://zenn.dev/torachi0401/articles/reportscan_python_1</id>
        <link href="https://zenn.dev/torachi0401/articles/reportscan_python_1"/>
        <updated>2024-02-07T14:43:18.000Z</updated>
        <summary type="html"><![CDATA[はじめに
手書き帳票の数字を、別のシステムに入力するために転記することはありませんか？
めちゃくちゃめんどくさいし、すごい工数がかかる作業ですよね～
そこで、Pythonを使って、手書きの帳票をスキャナで読みとり、該当箇所の数字を読み取る
プログラムを作成してみたので紹介します。
さっさとプログラムを見たい方は以下より↓

 コード全文
GitHubに公開してます。
該当業務の要件としては以下になります。

 現状の業務の要件

手書きの帳票が集まってくる
その帳票をスキャナでPDFとして読み取る
手書きの数字（8桁）＋YYYYMMDDをPDFのファイル名にリネームする
さらに手書き...]]></summary>
        <author>
            <name>Torachi0401</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[実務でPandasとMatplotlibを使う時がやっと来た]]></title>
        <id>https://zenn.dev/kyonaka/articles/d6b66d8f9ae934</id>
        <link href="https://zenn.dev/kyonaka/articles/d6b66d8f9ae934"/>
        <updated>2024-02-07T05:58:28.000Z</updated>
        <summary type="html"><![CDATA[はじめに
AWS エンジニアになる前は Python を独学で学び、Pandas や Matplotlib などデータ分析に関わるライブラリを触ってきました。
実務で使うことはあるのかと思っていましたが、ようやく学んだことを活かせる時が来たので記事にしようと思います。

 どんな業務で扱うことになったのか？
AWS エンジニア(インフラ担当)として、『AWS リソースの使用状況を月次で報告する』 という月一の定例業務が発生することになりました。
EC2 インスタンスの 1 ヶ月の CPU やメモリの使用率などの推移を見て、今後のキャパシティプランニングに役立てる目的のためです。
私が...]]></summary>
        <author>
            <name>Kyonaka@AWSエンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Segmentation Models Pytorch の BackBone をカスタムする方法]]></title>
        <id>https://zenn.dev/syu_tan/articles/c56919106e3682</id>
        <link href="https://zenn.dev/syu_tan/articles/c56919106e3682"/>
        <updated>2024-02-07T05:27:56.000Z</updated>
        <summary type="html"><![CDATA[Segmentation Models Pytorch の バックボーン(Backbone) を設定したいように変更する時の方法と注意点

 はじめに
https://pytorch.org/
ディープラーニングのための自動微分をしてくれる PyTroch において、セグメンテーションのタスクのモデルを簡単に提供してくれるのが Segmentation Models Pytorchです。

モデル作成の初学者から Kaggle などのコンペ、業務でも仕様できるくらい便利なライブラリーです。
https://smp.readthedocs.io/en/latest/
もう既にバックボーンと...]]></summary>
        <author>
            <name>emmyeil</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[List操作のデバッグを効率化するラッパークラス活用法]]></title>
        <id>https://zenn.dev/tonbi_attack/articles/a1f581d8becd1b</id>
        <link href="https://zenn.dev/tonbi_attack/articles/a1f581d8becd1b"/>
        <updated>2024-02-06T15:33:23.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Java や Python など、多くのプログラミング言語で List やその他のコレクション型のデータ構造は頻繁に使用されます。これらのコレクションにオブジェクトを追加する際、特に複雑なアプリケーションや可読性の非常に低いコードでは、デバッグが難しくなることがあります。特に、List のオブジェクトクラスなどが多用されている場合、問題の追跡と解決はより複雑になります。このような状況を解決するための有効なデバッグ方法の一つが、List の Add メソッドなどのメソッドをラップしてブレークポイントで捕まえるテクニックです。

 方法の概要
この方法では、既存の List に...]]></summary>
        <author>
            <name>tonbiattack</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ローカルLLMの推論速度を高速化する5つの手法と比較評価]]></title>
        <id>https://zenn.dev/kaeru39/articles/1ea73bfa40c7df</id>
        <link href="https://zenn.dev/kaeru39/articles/1ea73bfa40c7df"/>
        <updated>2024-02-06T14:35:32.000Z</updated>
        <summary type="html"><![CDATA[目的
ローカルLLMの推論速度を改善する手法がいくつか報告されています。
今回は実際に報告されている5つの手法を実装して推論速度がどの程度改善するか確認します。

 推論処理の高速化手法

 1. torch.compile

計算グラフを構築
各演算をCPUやGPUのデバイスに特化した細かい命令に分解
与えられた入力に対して上記の命令を呼び出して演算を効率化

https://pytorch.org/get-started/pytorch-2.0/#technology-overview

 実装
モデルを読み込んだ直後にtorch.compileを追加
model = AutoM...]]></summary>
        <author>
            <name>kaeru39</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SPCS(Snowpark Container Services)でコンテナをお試し移管してみた]]></title>
        <id>https://zenn.dev/deask/articles/97d71c0c86d312</id>
        <link href="https://zenn.dev/deask/articles/97d71c0c86d312"/>
        <updated>2024-02-06T09:49:01.000Z</updated>
        <summary type="html"><![CDATA[はじめに
SPCSが遂に東京リージョンでもPuPrされましたね。
Available regions
これをきっかけに、SPCSのチュートリアルを行ったり自前のコンテナをSPCSに移管したりしてみました。
今回は、SPCSや移管をどう行ったかについて書いていきます。

 想定読者
SPCSについてまだよくわからない人
SPCSにコンテナを移管する例が知りたい人

 SPCSについて

 SPCSとは
SPCS(Snowpark Container Services)とは、Snowflakeが提供するフルマネージドコンテナサービスです。
SPCSはSnowflakeと統合されており、以...]]></summary>
        <author>
            <name>deask</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VscodeにおけるFlaskのデバッガ設定【備忘録】]]></title>
        <id>https://zenn.dev/straydog/articles/4783ed8b29573b</id>
        <link href="https://zenn.dev/straydog/articles/4783ed8b29573b"/>
        <updated>2024-02-06T01:30:14.000Z</updated>
        <summary type="html"><![CDATA[はじめに
ほったらかしてた備忘録。F5 押した際にデバッグが走るようにする設定する。

 内容
「.vscode」フォルダ直下の「launch.json」ファイルに以下のような内容を設定する。
なければ作成してください。

launch.json
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Python: flask", // 任意の名前
      "type": "python",
      "request": "launch",
      "module": "flask",
   ...]]></summary>
        <author>
            <name>stray dog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Prefectでプロダクトデータ処理基盤のDXを向上させようとしているはなし | Offers Tech Blog]]></title>
        <id>https://zenn.dev/overflow_offers/articles/prefect-is-perfect</id>
        <link href="https://zenn.dev/overflow_offers/articles/prefect-is-perfect"/>
        <updated>2024-02-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
おはこんばんちは。
Offers と、Offers MGR を運営している株式会社 overflow のバックエンドエンジニアばばです。
Web サービスを開発している皆様であれば、高度なデータ処理の大変さ・つらさを味わったことはあるかと思います。
たとえば

グラフ用データを作成するには、API からデータ取得が終わった後に、DWH で集計して、その後バッチ処理かけてごにょごにょ
想定してたよりデータ量が多くて、許容時間内に処理が終わらないー
あの API 、 Rate Limit 厳しいからから並列数制御しないといつまでたっても取得がおわらない・・・

など、悩みはつき...]]></summary>
        <author>
            <name>bibio</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[技術メモPDFから学習させるGPTの作り方]]></title>
        <id>https://zenn.dev/tasiten/articles/80cd7994087011</id>
        <link href="https://zenn.dev/tasiten/articles/80cd7994087011"/>
        <updated>2024-02-05T18:51:23.000Z</updated>
        <summary type="html"><![CDATA[目的
去年の11月頃にOpenAIからカスタマイズ可能なChatGPTである，「GPTs」が発表された．特定の処理だけをさせるものを作ることができる．これはChatGPT Plusユーザーなら無料で作成・使用が出来る．
また何か開発する際などには技術的メモを残すものだが，それを時間が経って見返すときになかなか見つからないときがある．
そこで今回は今までWeb上にメモしたドキュメントをPDF化してそれをGPTに学習させることで，対話形式で技術的メモを引き出せるようにする．
ちなみにデータサイズが小さいという理由で，一度htmlファイルを学習させたがhtmlのコードが多く学習されたため，...]]></summary>
        <author>
            <name>tasiten</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nextcloud Talkのチャットボットを仕様通りに構築する]]></title>
        <id>https://zenn.dev/nondescript/articles/abbfd1f6a7ac93</id>
        <link href="https://zenn.dev/nondescript/articles/abbfd1f6a7ac93"/>
        <updated>2024-02-05T15:32:12.000Z</updated>
        <summary type="html"><![CDATA[TL;DR

Nextcloudサーバー上でコマンドocc talk:bot:installで作成する
Webhook→トークへのレスポンス

レスポンス先

NextCloudのURL/ocs/v2.php/apps/spreed/api/v1/bot/{トークID}/message


ヘッダ


X-Nextcloud-Talk-Bot-Random：任意の64桁16進文字列

X-Nextcloud-Talk-Bot-Signature：X-Nextcloud-Talk-Bot-Randomと返信メッセージのバイト列をBot作成時のシークレットを用いてHMACで暗号化した16...]]></summary>
        <author>
            <name>素人の戯言</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TransformerモデルをSentenceTransformersで使えるようにするには]]></title>
        <id>https://zenn.dev/nishimoto/articles/9b29f8257b436a</id>
        <link href="https://zenn.dev/nishimoto/articles/9b29f8257b436a"/>
        <updated>2024-02-05T11:14:19.000Z</updated>
        <summary type="html"><![CDATA[SentenceTransformer上でContrieverを使えるようにしたよ！
Facebookの作成したContrieverをSentenceTransformerで使えるようにしました！リポジトリは以下です。
https://huggingface.co/nishimoto/contriever-sentencetransformer
READMEに記載がありますが、以下のようにSentenceTransformerライブラリ上でContrieverを使用することができます。
# !pip install -U sentence-transformers

from sen...]]></summary>
        <author>
            <name>nishimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[cx＿freezeでハマったところ]]></title>
        <id>https://zenn.dev/takeyan/articles/ae1c6f81be6559</id>
        <link href="https://zenn.dev/takeyan/articles/ae1c6f81be6559"/>
        <updated>2024-02-05T08:15:37.000Z</updated>
        <summary type="html"><![CDATA[pyside6＋αを使ったpythonスクリプトをexeファイルにする際にcx＿freezeを使ったが幾つかハマった所があったので忘備録として残します。
pip install cx_Freeze
を実行してcx＿freezeをインストールしsetup.pyを作る。
from cx_Freeze import setup, Executable
import sys

# Dependencies are automatically detected, but some might need fine-tuning
build_exe_options = {"packages": ["o...]]></summary>
        <author>
            <name>takerin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windowsでのpython開発環境構築 with Docker, WSL2, Git and VS Code]]></title>
        <id>https://zenn.dev/emoclew/books/3087b7cff69946</id>
        <link href="https://zenn.dev/emoclew/books/3087b7cff69946"/>
        <updated>2024-02-05T07:33:15.000Z</updated>
        <summary type="html"><![CDATA[WindowsでDocker、WSL2、Git、VS Codeをインストールしてpythonの開発環境を整えるための手順をまとめた本]]></summary>
        <author>
            <name>emoclew</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VertexAIとLangChain サンプルコード集]]></title>
        <id>https://zenn.dev/ymd65536/articles/vertexai_gemini_llm</id>
        <link href="https://zenn.dev/ymd65536/articles/vertexai_gemini_llm"/>
        <updated>2024-02-05T02:14:11.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事ではVertexAIとLangChainを使ってLLMから応答を得る方法を探ってみました。
参考資料

google_vertex_ai_palm
Retrieval indexing
langchain.indexes.vectorstore.VectorstoreIndexCreator
Vertex AI PaLM APIとLangChainで容易になった生成AIアプリケーションの構築
question_answering_documents_langchain_matching_engine.ipynb
VectorStoreIndexWrapper
rec...]]></summary>
        <author>
            <name>Kento.Yamada</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenAI Streaming + Function callingの並列実行に対応する]]></title>
        <id>https://zenn.dev/keitakn/articles/tools-with-function-calling</id>
        <link href="https://zenn.dev/keitakn/articles/tools-with-function-calling"/>
        <updated>2024-02-05T02:06:04.000Z</updated>
        <summary type="html"><![CDATA[概要
OpenAI Python library を使ってFunction callingの並列実行に対応した実装を紹介する記事です。
ユーザーへの返答はStreamingで返答します。
私は最近LLMを使ったアプリケーション開発案件に関わっていますが、BtoB・BtoCに関わらずユーザー体験の観点からStreaming対応が必要になることが多いです。
その為、この記事のサンプルコードは実際のプロダクトにも応用できると思います。

 対象読者
OpenAIを使ったアプリケーション開発の概要を理解している方が対象となります。

 筆者のバックグラウンド
普段はTypeScript（Ne...]]></summary>
        <author>
            <name>keitakn</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows PCとWindows上のIoT Edgeモジュール間でファイル共有を行う]]></title>
        <id>https://zenn.dev/headwaters/articles/f3540383b4bf24</id>
        <link href="https://zenn.dev/headwaters/articles/f3540383b4bf24"/>
        <updated>2024-02-05T00:01:08.000Z</updated>
        <summary type="html"><![CDATA[ゴール：Windows PCに配置したファイルをWindows上のIoT Edgeモジュールから閲覧および編集ができる
Raspberry Piに入れた自作IoT Edgeモジュールを用いて、Raspberry Piに配置したファイルをIoT Edgeモジュールから閲覧や編集ができるようにしました。
そのモジュールをWindows PCに入れて実行することになり、ファイル共有処理も使用する必要が出ました。
本記事はその共有の方法についてまとめています。

 説明すること

ゴールを達成するためのIoT Edgeモジュールのデプロイ設定
Windowsの共有フォルダおよびその中に入れる...]]></summary>
        <author>
            <name>Shuichiro Sakata</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Snowflake]UDFでユーザー管理のキャッシュ領域がほしい]]></title>
        <id>https://zenn.dev/dataheroes/articles/d9671363c6d257</id>
        <link href="https://zenn.dev/dataheroes/articles/d9671363c6d257"/>
        <updated>2024-02-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[/tmpと /dev/shmが使えた。
Snowpark Optimized Warehouseに新たなユースケースを見出したかもしれない。

 なぜほしいか？
ファイルパスで非構造化ファイルを受け取るライブラリはよくある。
例えば、画像処理ライブラリのPillowはImage.open(image_path)のようにファイルパスを受け取る。他にも、MLモデルや動画ファイルをファイルパスとして渡すことはよくあると思う。
ただ、UDFからほとんどの領域は書き込み権限がない。
PermissionError: [Errno 1] Operation not permitted

 結論
冒頭...]]></summary>
        <author>
            <name>Kentaro Maeda</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Snowflake]UDFでユーザー管理のキャッシュ領域がほしい]]></title>
        <id>https://zenn.dev/efx/articles/d9671363c6d257</id>
        <link href="https://zenn.dev/efx/articles/d9671363c6d257"/>
        <updated>2024-02-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[/tmpと /dev/shmが使えた。
Snowpark Optimized Warehouseに新たなユースケースを見出したかもしれない。

 なぜほしいか？
ファイルパスで非構造化ファイルを受け取るライブラリはよくある。
例えば、画像処理ライブラリのPillowはImage.open(image_path)のようにファイルパスを受け取る。他にも、MLモデルや動画ファイルをファイルパスとして渡すことはよくあると思う。
ただ、UDFからほとんどの領域は書き込み権限がない。
PermissionError: [Errno 1] Operation not permitted

 結論
冒頭...]]></summary>
        <author>
            <name>Kentaro Maeda</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[workerdのpyodide統合を試す]]></title>
        <id>https://zenn.dev/laiso/articles/cfc7277d92b7f3</id>
        <link href="https://zenn.dev/laiso/articles/cfc7277d92b7f3"/>
        <updated>2024-02-04T13:16:51.000Z</updated>
        <summary type="html"><![CDATA[昨年末ぐらいからworkerdのPyodide統合の開発が活発になっている
search results: repo:cloudflare/workerd  pyodide
PyodideはWasmを使ってPythonインタプリターをブラウザ上で実行する環境で、これがリリースされるとRustサポートのようにCloudflare WorkersにPythonで書いたコードを直接デプロイできるようになると思われる
https://developers.cloudflare.com/workers/runtime-apis/webassembly/rust/
cloudflare/python...]]></summary>
        <author>
            <name>laiso</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[scrapyでプレスのPDFファイルを収集してLLMで要約する]]></title>
        <id>https://zenn.dev/khisa/articles/397b1d9e289352</id>
        <link href="https://zenn.dev/khisa/articles/397b1d9e289352"/>
        <updated>2024-02-04T13:15:16.000Z</updated>
        <summary type="html"><![CDATA[PythonのスクレイピングフレームワークScrapyを利用して、プレスなどのPDFファイルを収集、LLM（OpenAI API）でサマリを作成し、結果をデータベースに格納するという一連の流れを実現してみました。Scrapy、OpenAI APIともごく基本的な使い方しかしていませんが、あっという間に自動収集するプログラムが作成できましたので紹介します。

 Scrapyで収集したPDFファイルの内容をLLMに読み込ませてサマリーを作成
今回やりたいことは以下のとおりです。

Scrapyで特定のWebサイトの最新情報（今回はプレスリリースのタイトル、日付、PDFファイルなど）を取得する...]]></summary>
        <author>
            <name>ひさ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Python] APIで返した日本語が文字化けしたときの対処法]]></title>
        <id>https://zenn.dev/kotopasi/articles/ee03e9f3343ad6</id>
        <link href="https://zenn.dev/kotopasi/articles/ee03e9f3343ad6"/>
        <updated>2024-02-04T09:56:55.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Pythonで実装した関数をFlaskのAPIで返したら日本語だけ文字化けしたときの対処法を載せます

 動作環境

mac macOS 14.2.1
Python 3.9


 手順
以下のコードを追加します
from flask import Flask

app=Flask(__name__)
+ app.json.ensure_ascii = False
flaskライブラリのjsonifyで解決できるという記事が多かったのですが、Flaskのバージョンが2.3.2 以上の場合､Flaskの設定ファイルから文字コードの設定を変更する必要があるみたいです。

 おわり...]]></summary>
        <author>
            <name>あまたつ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Python] バックエンド側でCORSを許可する設定]]></title>
        <id>https://zenn.dev/kotopasi/articles/10b9d575b563c7</id>
        <link href="https://zenn.dev/kotopasi/articles/10b9d575b563c7"/>
        <updated>2024-02-04T09:54:34.000Z</updated>
        <summary type="html"><![CDATA[はじめに
技育CAMPキャラバン@東京ハッカソンでフロントバック間のAPIの繋ぎ込みに苦戦しましたが、バックエンド側でCORSを許可することで解決しました

 動作環境

mac macOS 14.2.1
Python 3.9


 手順
CORSライブラリをimportして設定するだけです
from flask import Flask
+ from flask_cors import CORS

app=Flask(__name__)
+ CORS(app)

 おわりに
CORSの理解浅いので勉強しなきゃ...

 参考]]></summary>
        <author>
            <name>あまたつ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FastAPIのGetメソッドパラメータをBaseModelで受け取れるようにしてみる]]></title>
        <id>https://zenn.dev/takuty/articles/5a94628bd87179</id>
        <link href="https://zenn.dev/takuty/articles/5a94628bd87179"/>
        <updated>2024-02-04T08:36:12.000Z</updated>
        <summary type="html"><![CDATA[はじめに
FastAPI で API 開発をしていて Get メソッドを叩く時にhttp://lcalhost:8080/items?name=Aのようにクエリパラメータに対応した Get メソッドはよく出でくると思います
ただ、検索ページの API のようにクエリパラメータが５個 10 個と必要になった時にどうしていますか
メソッドの引数に５個 10 個と指定するのはあまりに不自然だと思いましたので現状これが良さそうだなというのをこちらに記載していきたい思います

 前提
商品のリストを Get メソッドで検索する、という想定です
検索項目としては

商品の ID
商品名
商品値段...]]></summary>
        <author>
            <name>Takuty</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[prefect の deployment について理解する]]></title>
        <id>https://zenn.dev/massu_devix/articles/8184386de66394</id>
        <link href="https://zenn.dev/massu_devix/articles/8184386de66394"/>
        <updated>2024-02-04T07:58:50.000Z</updated>
        <summary type="html"><![CDATA[はじめに
prefect の構成要素のうち、 deployment について理解します。
また説明の中で、関連要素である flow や task についても触れます。
前回は prefect の基本要素について触れました。
https://zenn.dev/massu_devix/articles/a016774865d647

 deployment とは
deployment とは、 prefect に登録した flow を リモートで実行可能なエンティティ に昇華させるオブジェクトです。
flow とは prefect におけるワークフローとしての起動単位です。 flow を起...]]></summary>
        <author>
            <name>mas_dx</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[numpyで特異値分解]]></title>
        <id>https://zenn.dev/sawarae/articles/27d848a17fe7fc</id>
        <link href="https://zenn.dev/sawarae/articles/27d848a17fe7fc"/>
        <updated>2024-02-04T07:00:16.000Z</updated>
        <summary type="html"><![CDATA[「Pythonによる数値計算入門」で最小二乗法の例をnumpy.linalg.solveで解く例があったので、それのsvd版を書いておきます。
import numpy as np

# y = 2x + 3に誤差を加えたデータ
# 数値はPythonによる数値計算入門より

N = 5
X = np.zeros(N)
Y = np.zeros(N)
Z = np.zeros(N)

X[0] = 0.0; Y[0] = 3.00
X[1] = 1.0; Y[1] = 4.51
X[2] = 2.0; Y[2] = 7.54
X[3] = 3.0; Y[3] = 8.43
X[4] = ...]]></summary>
        <author>
            <name>sawara</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[どうしてもneovimでjupyterlabしたいんや]]></title>
        <id>https://zenn.dev/afk2777/articles/zenn-nvim-jupyter</id>
        <link href="https://zenn.dev/afk2777/articles/zenn-nvim-jupyter"/>
        <updated>2024-02-04T06:39:07.000Z</updated>
        <summary type="html"><![CDATA[はじめに
はじめまして、makioです。
仮想通貨自動売買プログラムの開発をしています。
データ分析の勉強がてらkaggleに入門しようとブラウザやらvscodeでjupyterを操作していましたが、「vimでやりてぇー」という気持ちが抑えきれずneovim上でjuypterをやる方法を模索しました。
調べた結果、nevim上で以下のようなことができるようになりました。

juypter notebook(*.ipynb)を開くと自動でpythonファイルとして開く。
保存時にipynbに編集内容を反映する。
「#%%」で囲われた箇所を一つのセルとしてコードを実行できる。
nvimの...]]></summary>
        <author>
            <name>makio</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】Lambdaで外部APIを使う]]></title>
        <id>https://zenn.dev/sekochan/articles/721fb53c99f753</id>
        <link href="https://zenn.dev/sekochan/articles/721fb53c99f753"/>
        <updated>2024-02-04T02:41:52.000Z</updated>
        <summary type="html"><![CDATA[requestsは別途installしてimportする必要があるのでurllib3を使う
例
import json
import urllib3
from urllib3 import PoolManager

def req():

    url = f"https://sample.com"
    
    http = urllib3.PoolManager()
    response = http.request('GET', url)
    decoded_data = response.data.decode('utf-8')
    json_data = js...]]></summary>
        <author>
            <name>sekochan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Flask] 引数を取って動的なAPIを作成する]]></title>
        <id>https://zenn.dev/kotopasi/articles/cab921a085775e</id>
        <link href="https://zenn.dev/kotopasi/articles/cab921a085775e"/>
        <updated>2024-02-04T02:01:39.000Z</updated>
        <summary type="html"><![CDATA[はじめに
技育CAMPキャラバンハッカソンで音楽マッチングアプリを作成したときにFlaskでAPIを作成したときの備忘録です

 動作環境

macOS 14.2.1


 手順

 ルーティングURLに引数をとる
From flask import Flask

app=Flask(__name__)
@app.route('/hello/<string:name>')
def hello(name):
    return {"hello":name}
これで/hello/以降に入れた文字列がnameに代入されて返ってくる
http://localhost:5000/...]]></summary>
        <author>
            <name>あまたつ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Python]Spotify APIで楽曲の情報を取得する]]></title>
        <id>https://zenn.dev/kotopasi/articles/7dc6a1478a5060</id>
        <link href="https://zenn.dev/kotopasi/articles/7dc6a1478a5060"/>
        <updated>2024-02-04T01:43:21.000Z</updated>
        <summary type="html"><![CDATA[はじめに
技育CAMPキャラバンハッカソンで音楽マッチングアプリを作成したときにSpotifyAPIで遊んでみた備忘録です

 動作環境

macOS 14.2.1


 目標

SpotifyAPIを利用できるようにする
曲情報を取得する


 手順

 SpotifyAPIを利用できるようにする
APIダッシュボードからログインしたあと以下を入力することでclientIDとsecretKeyを取得する


 曲情報を取得する
PythonでSpotify APIを使うために、spotipyライブラリを使う
import spotipy
from spotipy.oauth2 im...]]></summary>
        <author>
            <name>あまたつ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonにおけるSemanticKernelのPlannerの種類を整理する]]></title>
        <id>https://zenn.dev/nomhiro/articles/sk-plan-type</id>
        <link href="https://zenn.dev/nomhiro/articles/sk-plan-type"/>
        <updated>2024-02-03T13:18:09.000Z</updated>
        <summary type="html"><![CDATA[はじめに
SemanticKernelをまだまだ使いこなせてませんが、AOAIのドーナツ本を読む中で、Plannerの種類がいくつかあることを知りました。そのため、Plannerの種類を整理してみます。
ここではPythonで使えるPlannerを試します。
C#版ではいくつかPlannerに変更があったようなので、そちらについては別途調査します。Migrating from the Sequential and Stepwise planners to the new Handlebars and Stepwise planner

 そもそもSemanticKernelとは
Se...]]></summary>
        <author>
            <name>しろくま</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【2024年2月】エンジニアなら読むべき技術書まとめ]]></title>
        <id>https://zenn.dev/yottabyte/articles/74b20c15ca48d3</id>
        <link href="https://zenn.dev/yottabyte/articles/74b20c15ca48d3"/>
        <updated>2024-02-03T10:56:12.000Z</updated>
        <summary type="html"><![CDATA[生成AI時代を勝ち抜く事業・組織のつくり方


生成AI時代のビジネス・サービスづくりの教科書。
生成AIをいかに活用して新たな価値を生むか、成功のフレームワークを大公開！
OpenAIの対話型AI「ChatGPT」をはじめとした生成AIは、もはや一過性のブームではない。
とはいえ、
「使ってみたけれど思ったほど仕事に役立たない」「どう活用すべきか分からない」
「ビジネスに本当に生かせるのか疑問」など、
懐疑的な声もあふれている。
本書は、そんな疑いや疑問を払拭するための指南書だ。
それも、経営層や事業リーダー、サービスづくりに携わる方たちが真に求めている知識やノウハウを提供すること...]]></summary>
        <author>
            <name>Raio｜高校生エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【BTYDモデル】阿部(2020)の解説]]></title>
        <id>https://zenn.dev/joanofarc/articles/abe_2020_description</id>
        <link href="https://zenn.dev/joanofarc/articles/abe_2020_description"/>
        <updated>2024-02-03T07:27:17.000Z</updated>
        <summary type="html"><![CDATA[0. この記事の趣旨
この記事では BTYD モデルの一種として提案された 周期的な購買行動に対応した顧客の 生涯価値の導出と顧客維持介入戦略への応用(阿部 2020) について、その数理構造を解説することを目的としています。一応 python を用いた推定の実装についても触れるつもりではありますが、私は数値最適化や計算の高速化については十分な知見がないので、ご利用の際はご注意ください。ソースコードは以下にあります。
https://github.com/BlackJack2021/Zenn_abe_2020_description

 1. モデルの概要
本章では、以下の 2 点に...]]></summary>
        <author>
            <name>JoanOfArc</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tableauダッシュボードのサイズをオブジェクト無視で変更する]]></title>
        <id>https://zenn.dev/t_katsumoto/articles/8073607afd0dc0</id>
        <link href="https://zenn.dev/t_katsumoto/articles/8073607afd0dc0"/>
        <updated>2024-02-03T06:08:07.000Z</updated>
        <summary type="html"><![CDATA[つまりどういう事か。Tableauでダッシュボードの全体サイズを変えると各オブジェクトの位置や大きさまで変わってしまうが、いやいや、サイズだけ変えたいから！オブジェクトそのままでいいから！という時にどうするかというお話である。
勿論、変わって欲しい時もある。しかし、そうでない時もある・・固定サイズで浮動オブジェクトも色々配置して作り込んでいる時などは特にそうだろう。もう少しだけ幅足して、ここにこれが置ければ。。なんて事があったとしても、サイズを変えると全てのオブジェクトの位置や大きさが変わってしまうものだから、サイズ変更前のワークブックのコピーを開いて、そこにある元のオブジェクトの情報を...]]></summary>
        <author>
            <name>Katsumoto Takashi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[dlt(data load tool)を試す。[Harlequin SQL IDE]]]></title>
        <id>https://zenn.dev/yuichi_dev/articles/d601ebab84b7ac</id>
        <link href="https://zenn.dev/yuichi_dev/articles/d601ebab84b7ac"/>
        <updated>2024-02-03T04:46:01.000Z</updated>
        <summary type="html"><![CDATA[dlt(data load tool)とは
Python のオープンソース ライブラリで、おもに多様なデータソースからデータ基盤にデータを転送するときに利用する。embulkあたりが競合かなSaaSだとfivetranやtroccoあたりが競合かなという理解。

https://dlthub.com/

 コネクタ
データ転送元としては、ほどんどのDBが対応しており、広告系だとGAとかFBがあり今後の拡充に期待
https://dlthub.com/docs/dlt-ecosystem/verified-sources/

 セットアップ
dltをインストール
pip install...]]></summary>
        <author>
            <name>Yuichi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django + daphne + channels構成のWebsocketサーバーで502エラー]]></title>
        <id>https://zenn.dev/t0mmy/articles/internal_server_error_by_websocket</id>
        <link href="https://zenn.dev/t0mmy/articles/internal_server_error_by_websocket"/>
        <updated>2024-02-03T00:36:23.000Z</updated>
        <summary type="html"><![CDATA[概要
Django + Dapahne + Channlels 構成の Websokcet サーバーにて、502エラーが発生する事態に遭遇しました。
原因や解決策を、調べた範囲で書いていきます。

 結論
サーバー側に、実質的な Websocket 接続上限が存在していた。
上限を超えてWebsocket接続を試みた結果、接続時に502エラーが発生した。
Websocketの上限は、マシンの CPU コア数に依存する模様。
また、環境変数で上限を設定することもできる。

 構成


 遭遇した問題
ある日、WebsocketクライアントからWebsocket接続を試みたところ、エラー...]]></summary>
        <author>
            <name>t0mmy</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[python初心者] 仮想環境venvのことを調べました]]></title>
        <id>https://zenn.dev/shomtsm/articles/6110fac57d3f40</id>
        <link href="https://zenn.dev/shomtsm/articles/6110fac57d3f40"/>
        <updated>2024-02-03T00:25:42.000Z</updated>
        <summary type="html"><![CDATA[venvとは
pythonで仮想環境を作るためのモジュール
Python3.3以降で標準ライブラリの一部になった

 なぜ仮想環境必要か
仮想環境は、プロジェクトごとに異なるパッケージやパッケージバージョンを管理するために使用される。
システム全体のPythonインストールを変更せずに、プロジェクト固有の依存関係を維持することができる。
javascript/node.jsのpackage.jsonがあって、インストールして関連パッケージがnode_modulesに格納されると同じイメージ

 仮想環境基本コマンド
前提としてPythonがシステムにインストールされていること
つまり...]]></summary>
        <author>
            <name>松嶋松</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Lambda・Aurora Postgres・PostGISで地理情報APIを構築]]></title>
        <id>https://zenn.dev/sekochan/articles/b76fde0c53f7dd</id>
        <link href="https://zenn.dev/sekochan/articles/b76fde0c53f7dd"/>
        <updated>2024-02-02T14:55:27.000Z</updated>
        <summary type="html"><![CDATA[やりたいこと

APIGateway, lambdaでAPIを作成
lambdaからAurora Postgresに接続
Aurora PostgresでPost GISを使用
住所を送ると、DBに登録したlocationを近い順にtop10を返す

1. は終わっているので2. 3. 4.をやります。

 AuroraとAurora Serverlessの違い
・主な違いはRDS Proxyに対応したこと
RDS Proxyはコネクションをプールさせておくことで同時接続数などの問題を回避できる。
参考：
https://acro-engineer.hatenablog.com/en...]]></summary>
        <author>
            <name>sekochan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python便利メモ]]></title>
        <id>https://zenn.dev/nishimoto/articles/11b1953caaf832</id>
        <link href="https://zenn.dev/nishimoto/articles/11b1953caaf832"/>
        <updated>2024-02-02T12:31:19.000Z</updated>
        <summary type="html"><![CDATA[Python全般

 Pythonで並列処理
# func: function, 並列化したい処理
# args_list: list, 入力とするもののリスト

from tqdm.notebook import tqdm
from multiprocessing import Pool, cpu_count
with Pool(cpu_count()) as p:
    result_list = list(tqdm(p.imap(func, args_list), total=len(args_list)))

 pythonでfull pathからfilenameを取得する...]]></summary>
        <author>
            <name>nishimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChatGPTのhtmlページをマークダウンに変換するプログラムをChatGPT自身に書いてもらう]]></title>
        <id>https://zenn.dev/meboo/articles/0bda616ec521ab</id>
        <link href="https://zenn.dev/meboo/articles/0bda616ec521ab"/>
        <updated>2024-02-02T06:14:12.000Z</updated>
        <summary type="html"><![CDATA[※このページの主要部分は作成したpythonコードを用いて出力したのものです。
※作成するにあたりChatGPTとの会話をまず記載します。
※ChatGPTに書いてもらったコードを自分で微修正して完成させたものを本ページの最後に掲載しています。

 あなたの発言
※「要素とストーリー構造.html」というファイルをアップロード。これはChatGPTとの会話ページをCtrl+Sで保存したものです。
ファイルアップロードしたものはChatGPTのページをHTMLとして保存したファイルとなります。
・このような構造のHTMLを読み込んで、以下の変換を行うpythonスクリプトを書いてください。...]]></summary>
        <author>
            <name>meboo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GradioでCSSを使う方法]]></title>
        <id>https://zenn.dev/00/articles/gradio-with-css</id>
        <link href="https://zenn.dev/00/articles/gradio-with-css"/>
        <updated>2024-02-02T02:18:13.000Z</updated>
        <summary type="html"><![CDATA[最近仕事で、 Gradioベースのアプリケーションの見た目をデザイナーのデザインしたものに寄せる作業が発生して、Gradioに無理やりCSSを当てるということをやってました。
本記事では、Gradioサイトに乗っているInterfaceのサンプルを使いますが、Blockでも全く同じことが可能です。
import gradio as gr

def greet(name):
    return "Hello " + name + "!"

demo = gr.Interface(fn=greet, inputs="text", outputs="text")
demo.launch()
...]]></summary>
        <author>
            <name>koji</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[JinjaでSQLを動的生成する]]></title>
        <id>https://zenn.dev/iwatagumi/articles/14787c4ccec626</id>
        <link href="https://zenn.dev/iwatagumi/articles/14787c4ccec626"/>
        <updated>2024-02-02T00:51:11.000Z</updated>
        <summary type="html"><![CDATA[みなさんこんにちは！kirigayaです。
みなさんJinja使ってますか？
どうでもいい話ですが最初は神社とは知らずジンジャーと呼んでいました。
今回はpythonコードの中で柔軟にSQLを生成する記事です。
動的生成のイメージとしてはクエリの中に変数を埋め込んで変数を変えるだけで
クエリの内容を変える感じです。
使える場面としては決まったクエリ内でフィルター条件だけ変えたいと言った場面です。
環境はColabノートブックを使います。
DBはdukdbを使います。ノートブック上にすぐ構築できて色々便利です。
1セルずつ実行していきましょう。
初期セットアップ
!pip install ...]]></summary>
        <author>
            <name>kirigaya</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SKKを意識したkeyhac設計]]></title>
        <id>https://zenn.dev/awtnb/articles/7ec2de7a4fb742</id>
        <link href="https://zenn.dev/awtnb/articles/7ec2de7a4fb742"/>
        <updated>2024-02-02T00:02:05.000Z</updated>
        <summary type="html"><![CDATA[SKK（CorvusSKK）を使い始めました。keyhacと組み合わせることでさらに快適な日本語入力ライフを送れるようになったので備忘録です。
最新状況：
https://github.com/AWtnb/keyhac
以前に書いたkeyhacの紹介記事：
https://zenn.dev/awtnb/books/adf6c5162a9f08

詳細は上記のリポジトリや紹介記事を見ていただければと思いますが、keyhacは基本的に configure 関数の中に処理を書いていきます。
以下のコードはすべてこの関数内に記述していきます（インデントを省略しているのでコピペ時にはご注意ください...]]></summary>
        <author>
            <name>AWtnb</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Stable Diffusion】WebUI拡張機能開発！作り方からIndexリスト登録まで]]></title>
        <id>https://zenn.dev/safubuki/articles/turtle-20240128-stable-ext</id>
        <link href="https://zenn.dev/safubuki/articles/turtle-20240128-stable-ext"/>
        <updated>2024-02-01T18:13:11.000Z</updated>
        <summary type="html"><![CDATA[画像生成AIは、掛け算の組み合わせ（例えば、亀×犬や花×亀など）から、想像もできないようなものを生み出し驚かされます。画像生成AIには様々なツールがありますが、今回は扱うStable Diffusion WebUI（以下、WebUI）は、自分のPCに環境を作ることができます。そして、他の人が作成した拡張機能を自由に組み合わせて、自分の好きなようにカスタマイズすることができます。
私は拡張機能を便利に利用していましたが、自分でも作ってみたいと思い、2024年正月に挑戦してみました！
さらに、WebUIには、Indexリストから欲しい拡張機能を探して、簡単にインストールできる仕組みがあります...]]></summary>
        <author>
            <name>タートルヴィレッジ・ゆう</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのmultiprocessingで子プロセスの異常終了を検知したい時の対処方法]]></title>
        <id>https://zenn.dev/slopetech/articles/b4d5b89d5a7480</id>
        <link href="https://zenn.dev/slopetech/articles/b4d5b89d5a7480"/>
        <updated>2024-02-01T10:34:42.000Z</updated>
        <summary type="html"><![CDATA[問題
multiprocessingライブラリで並列化処理を実施している際、子プロセスが異常停止する（OOM KillerなどにKillされるなど）と、親プロセスがハングアップしてしまう問題があります。
これはCPythonのIssueでも報告されており、対処方法が日本語記事にはあまり見当たらなかったので備忘録として記載しておきます。
再現コードとして、下記を用意しました。実行してみると、親プロセスが子プロセスの異常終了を検知できず応答なしの状態になることが確認できます。
import multiprocessing
import sys


def worker_fn(dummy:...]]></summary>
        <author>
            <name>hedgeek</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScriptでC言語のプログラムを実行する]]></title>
        <id>https://zenn.dev/bonsai_engineer/articles/878bf88da5b1bb</id>
        <link href="https://zenn.dev/bonsai_engineer/articles/878bf88da5b1bb"/>
        <updated>2024-02-01T08:28:08.000Z</updated>
        <summary type="html"><![CDATA[最近はlinuxやハードウェアやネットワークなど低レイヤの勉強をしています。プログラムはどの言語でも最終的に機械語で実行されており、なら他の言語のプログラムも実行できるではと思い、調べてみました。そうするとJavaScriptでC言語が実行できたのでやり方を共有します。

 環境


 1.C言語のプログラムを準備
C言語の簡単なプログラムを準備します。適当な引数を受け取りそれを標準出力で吐くようなものにしました。

main.c
const { exec } = require('child_process');

const argValue = 'tttttt aa aaaa';
...]]></summary>
        <author>
            <name>盆栽エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[M1 MacBook でCPUとGPU(MPS)のどちらが早く文章をベクトル化できるか]]></title>
        <id>https://zenn.dev/atsushi570/articles/293516d4abd6e3</id>
        <link href="https://zenn.dev/atsushi570/articles/293516d4abd6e3"/>
        <updated>2024-02-01T05:00:21.000Z</updated>
        <summary type="html"><![CDATA[概要
MacBookで文章をベクトル化するときに、CPUとGPUのどちらが早く処理できるかあたり評価を行った。
文章が短いときはCPUが早い。
ただし、モデルにもよって異なるので用途によって検討必要。

 環境



item
spec




pc
M1 MacBook


OS
14.2.1


python
3.11.5


torch
2.1.2


transformers
4.37.2


model
intfloat/multilingual-e5-small




 コード（の一部）
# トークナイズするテキスト
        texts = [ ここの文字列は評...]]></summary>
        <author>
            <name>atsushi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PyTorch Custom Loss with NumPy]]></title>
        <id>https://zenn.dev/tnakabeppu/articles/d45cefc1ae3e67</id>
        <link href="https://zenn.dev/tnakabeppu/articles/d45cefc1ae3e67"/>
        <updated>2024-01-31T17:46:34.000Z</updated>
        <summary type="html"><![CDATA[PyTorchでカスタマイズした目的（損失）関数を設定したい

 1.はじめに
ディープラーニングの実装において、PyTorch はその柔軟性と効率性で広く利用されています。特に、カスタム損失関数を用いることで、特定の問題に合わせた最適化が可能になります。しかし、このプロセスには、 Numpy との相互作用に関連する一つの重要な落とし穴があります。本記事では、PyTorch の自動微分エンジンと Numpy を用いたカスタム損失関数の作成における問題点とその解決策について解説します。

 2.理論

 2-1.PyTorch の自動微分エンジンの基礎
PyTorch の最大の特徴の一...]]></summary>
        <author>
            <name>nakabeppu@kikagaku</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pysnmpの話]]></title>
        <id>https://zenn.dev/toratti/articles/e3668ee484e5df</id>
        <link href="https://zenn.dev/toratti/articles/e3668ee484e5df"/>
        <updated>2024-01-31T15:51:00.000Z</updated>
        <summary type="html"><![CDATA[SNMP周りをちゃんと()整理し，pysnmpというライブラリについて使ってみました．この記事書き始めたのは2023の年末だったけどpysnmpの実験が間に合ってなくて…
さらにTerraformしてたから尚更…
軽くこんなライブラリ使ってみたよって話にしようと思ったらかなり長くなってしまいました．
不備がありそうなので修正予定です．

 SNMPとは
TCP/IPネットワーク上でネットワーク管理するためのプロトコルでUDP上で動作するらしいです．
Simple Network Management Protocolを略してSNMP．
登場人物は，SNMPマネージャーとSNMPエージェン...]]></summary>
        <author>
            <name>とらっち</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[動的型付け言語の限界と静的型付け言語の真価]]></title>
        <id>https://zenn.dev/tonbi_attack/articles/0835a5ea9203f1</id>
        <link href="https://zenn.dev/tonbi_attack/articles/0835a5ea9203f1"/>
        <updated>2024-01-31T13:27:57.000Z</updated>
        <summary type="html"><![CDATA[はじめに
動的型付け言語はその柔軟性で知られていますが、この柔軟性が時には代償を伴います。一方で、静的型付け言語はその厳格さにより多くのメリットを提供します。FastAPI と Pydantic を使用することで、Python のような動的型付け言語でも型の安全性を部分的に享受できるようになりました。しかし、この体験はまた、静的型付け言語におけるエディタの補助や型システムの堅牢さがいかに価値あるものかを痛感させられました。型ヒントとデータバリデーションを通じて得られた疑似的な型安全性は、静的型付け言語の持つ本質的な型安全性とエディタのサポートには及びません。この経験から、静的型付け言...]]></summary>
        <author>
            <name>tonbiattack</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【cuBLAS】llama-cpp-pythonでのGPU推論入門]]></title>
        <id>https://zenn.dev/saldra/articles/8785e45e1db493</id>
        <link href="https://zenn.dev/saldra/articles/8785e45e1db493"/>
        <updated>2024-01-31T02:55:45.000Z</updated>
        <summary type="html"><![CDATA[はじめに
llama.cppは実はpythonでも使える。
https://github.com/abetlen/llama-cpp-python
これの良いところはpythonアプリに組み込むときに使える点。GPUオフロードにも対応しているのでcuBLASを使ってGPU推論できる。一方で環境変数の問題やpoetryとの相性の悪さがある。
「llama-cpp-python+cuBLASでGPU推論させる」を目標に、簡易的な備忘録として残しておく。
今回はUbuntuなので、Windowsは適宜READMEのWindws Notesを見ておくこと。

 事前準備
なお、nvidia-...]]></summary>
        <author>
            <name>Sald ra</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flet はいいぞ]]></title>
        <id>https://zenn.dev/vs_blog/articles/2992bb9df43118</id>
        <link href="https://zenn.dev/vs_blog/articles/2992bb9df43118"/>
        <updated>2024-01-31T00:12:09.000Z</updated>
        <summary type="html"><![CDATA[はじめまして。じんと申します。株式会社バニッシュ・スタンダードの Data AI Unit というチームのマネージャーを拝命しております。社名に中黒「・」があることに違和感を感じる方が多いように感じていますが、自然言語処理屋として英語の単語の間には「・」を入れる派なので割と社名に違和感がない勢です。駆け出しの頃には YRP 野比におりました。365日24時間火の灯る街でした。

 Disclaimer

記事の概要：本記事は Python で簡潔にアプリケーションを構築可能なフレームワークである Flet の内容を含んでいますが、一方で、本記事の趣旨はむしろ、フロントエンドとはほど遠い分...]]></summary>
        <author>
            <name>じん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Automating GIS Processes 2023 を読む その３]]></title>
        <id>https://zenn.dev/mopinfish/articles/automating-gis-03</id>
        <link href="https://zenn.dev/mopinfish/articles/automating-gis-03"/>
        <updated>2024-01-30T23:11:27.000Z</updated>
        <summary type="html"><![CDATA[概要
ヘルシンキ大学地球科学・地理学科の GIS コースの教材であるAutomating GIS Processes 203を読んでいきます。

 Lesson3

 講義動画
https://youtu.be/xs_csmGkVVU

 Overview

ジオコーディングとは、地名や住所を座標に変換するプロセスである。このレッスンでは、Geopandas と geopy を使って住所をジオコーディングする方法を学びます。
Geopy やその他のジオコーディングライブラリ（geocoder など）は、ウェブサービス（「ジオコーダ」）を使って世界中の住所、都市、国、ランドマークの座標...]]></summary>
        <author>
            <name>Otsuka Noboru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[devcontainerのためにDockerfileを書くべきか考察]]></title>
        <id>https://zenn.dev/hiroga/articles/devcontainer-dockerfile-python</id>
        <link href="https://zenn.dev/hiroga/articles/devcontainer-dockerfile-python"/>
        <updated>2024-01-30T22:43:32.000Z</updated>
        <summary type="html"><![CDATA[TL;DR

Dockerfileで構築したPython環境をdevcontainerのFeatureで上書きしてしまい、ModuleNotFoundErrorが発生した
Dev ContainerのFeatureは、VSCodeの拡張機能だけでなく、ランタイムのインストールも行う
Dev Containerを使うときは、ランタイムの設定はDockerfile側かdevcontainer側のどちらかに統一するべき


 動機
Windows環境でPlaywrightを使ってスクレイピングをするにあたって、ローカルを汚さないようにDev Containersを使って開発環境を構築しまし...]]></summary>
        <author>
            <name>hiroga</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[devcontainerのためにDockerfileを書くべきか考察]]></title>
        <id>https://zenn.dev/hiroga/articles/devcontainer-python-postcreatecommand</id>
        <link href="https://zenn.dev/hiroga/articles/devcontainer-python-postcreatecommand"/>
        <updated>2024-01-30T22:42:36.000Z</updated>
        <summary type="html"><![CDATA[TL;DR

Dockerfileで構築したPython環境をdevcontainerのFeatureで上書きしてしまい、ModuleNotFoundErrorが発生した
Dev ContainerのFeatureは、VSCodeの拡張機能だけでなく、ランタイムのインストールも行う
Dev Containerを使うときは、ランタイムの設定はDockerfile側かdevcontainer側のどちらかに統一するべき


 動機
Windows環境でPlaywrightを使ってスクレイピングをするにあたって、ローカルを汚さないようにDev Containersを使って開発環境を構築しまし...]]></summary>
        <author>
            <name>hiroga</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WSL2にCUDA(CUBLAS) + llama-cpp-pythonでローカルllm環境を構築]]></title>
        <id>https://zenn.dev/yumefuku/articles/wsl2-llm-install</id>
        <link href="https://zenn.dev/yumefuku/articles/wsl2-llm-install"/>
        <updated>2024-01-30T16:06:01.000Z</updated>
        <summary type="html"><![CDATA[はじめに
はじめまして、こちら初記事となります（温かい目で見てください）。
今回の執筆の経緯は以下となります。
最近のローカルllmの流行りに乗っかろう
↓
windowsで環境構築しようとしたら、なんかインストール周りが面倒 & 管理がしづらい
↓
WSL2(ubuntu)に環境構築してみよう
↓
手順を残しておきたい
となりました。
すでにいくつかの記事でllmの環境構築手順は紹介されておりましたが、自分なりに行った手順をまとめましたので展開します。
また今回は使いませんが、せっかくなのでPyTorchのインストールも行います（CUDA_Toolkitをインストールする際...]]></summary>
        <author>
            <name>ゆめふく</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GIS × Python Tutorial Session4 ~ geopandas 練習編 ~]]></title>
        <id>https://zenn.dev/daidai_daitai/articles/35041ed9b84a01</id>
        <link href="https://zenn.dev/daidai_daitai/articles/35041ed9b84a01"/>
        <updated>2024-01-30T13:55:53.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事は「GIS × Python Tutorial」の関連記事です。
今回はgeopandasでのデータ分析を行っていきます。pythonを使用する方であればpandasを使用した事がある方が多いかと思いますので、分からない部分はgeopandasドキュメントを見て行けば躓かずに理解できるかと思います。またgeopandasのgeometryはshapelyのgeometryオブジェクトが入力されるので、個別のメソッドはshapelyの公式ドキュメント、あるいは前回のSession3の記事を参考にしてください。

 geopandasとは
geopandasは、pand...]]></summary>
        <author>
            <name>橙。</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WindowsのVSCode(ユーザーインストーラー版)で管理者権限でデバッグする]]></title>
        <id>https://zenn.dev/nondescript/articles/11e750f159e1d2</id>
        <link href="https://zenn.dev/nondescript/articles/11e750f159e1d2"/>
        <updated>2024-01-30T13:50:56.000Z</updated>
        <summary type="html"><![CDATA[TL;DR

起動コマンドに--user-data-dir="フォルダのパス"を付与して起動(管理者権限でVSCodeを起動)


 内容
ユーザーインストーラー版でインストールした場合、ショートカットで「管理者権限としてプログラムを実行する」にチェックするだけでは不十分で、ユーザーデータの保存フォルダパスを明示的に指定する必要がある。
これについては以下の記事にあるLinuxと同等の効果を発揮する。

ただし、なぜこのオプションで管理者権限で実行できるようになるかという理由については、明確に仕様として記載されているドキュメントは見つけられなかった。
またフォルダはどこでも良いようだ...]]></summary>
        <author>
            <name>素人の戯言</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【DeepL API】DeepL APIを取得する手順]]></title>
        <id>https://zenn.dev/eito_blog/articles/2e353b96a42494</id>
        <link href="https://zenn.dev/eito_blog/articles/2e353b96a42494"/>
        <updated>2024-01-30T13:35:47.000Z</updated>
        <summary type="html"><![CDATA[DeepL APIを利用することで、英文を翻訳するプログラムを作成することができます。
本記事では上記プログラム作成のために必要な下記の情報を取得する手順について解説していきます。

認証キー


 APIページにアクセス
添付URLにアクセスし、「無料で登録する」をクリックし、アカウントを作成してください。。
https://www.deepl.com/ja/pro-api?cta=header-pro-api/


 認証キーを取得する
アカウントを管理するをクリックしてください。

アカウントタブをクリックしてください。

DeepL APIで使用する認証キーから認証キーを取得して...]]></summary>
        <author>
            <name>エイト</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonでの実務でよくありそうな内容のリファクタを検討してみた]]></title>
        <id>https://zenn.dev/shibata/articles/39722d3c6ea3a8</id>
        <link href="https://zenn.dev/shibata/articles/39722d3c6ea3a8"/>
        <updated>2024-01-30T12:13:54.000Z</updated>
        <summary type="html"><![CDATA[概要
ORMを使ったレコードの操作は便利ですが、特に更新操作時に気をつけないとスパゲッティコードの種になりがちと思ったことと、実際書かれがちなコードを改善していこうと思います。

 実装
下記は簡単な例です。
<User(name='Yamada Taro', age='40')>になるかと思います。
from sqlalchemy import Column, Integer, Sequence, String, create_engine
from sqlalchemy.orm import declarative_base, sessionmaker

engine...]]></summary>
        <author>
            <name>Shibata</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GIFアニメーションをPythonで処理する方法]]></title>
        <id>https://zenn.dev/oyama_llc/articles/5874fc75eab272</id>
        <link href="https://zenn.dev/oyama_llc/articles/5874fc75eab272"/>
        <updated>2024-01-30T05:15:51.000Z</updated>
        <summary type="html"><![CDATA[GIFアニメーションファイルには、複数の画像とそれぞれの画像の表示時間などのメタデータが含まれる。GIFアニメーションを編集するためには、そのファイルに含まれるすべての画像を適切に処理する必要がある。PILでの処理方法を以下に紹介する。

 対象ファイルがGIFアニメーションか判別する
def is_animated_gif(path: str) -> bool:
    try:
        with Image.open(path) as img:
            if img.format != 'GIF':
                return Fals...]]></summary>
        <author>
            <name>Oyama LLC</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】__〇〇__ メソッドの正体]]></title>
        <id>https://zenn.dev/open8/articles/python-special-method</id>
        <link href="https://zenn.dev/open8/articles/python-special-method"/>
        <updated>2024-01-30T04:17:26.000Z</updated>
        <summary type="html"><![CDATA[__〇〇__メソッドの正体 is「特殊メソッド」
Python で開発する際、__init__ をはじめとする __ (アンダースコア*2) で囲まれたメソッドを目にする機会があると思います。
これらのメソッドは「特殊メソッド」と呼ばれ、Python では以下のように定義されています。

special method
(特殊メソッド) ある型に特定の操作、例えば加算をするために Python から暗黙に呼び出されるメソッド。この種類のメソッドは、メソッド名の最初と最後にアンダースコア2つがついています。

つまり、独自で定義したクラス内でこれら特殊メソッドをオーバーライドすることで、...]]></summary>
        <author>
            <name>Kento Toriumi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[kubeadmでkubernetesクラスターの自作]]></title>
        <id>https://zenn.dev/bonsai_engineer/articles/76f1935c055f8d</id>
        <link href="https://zenn.dev/bonsai_engineer/articles/76f1935c055f8d"/>
        <updated>2024-01-30T03:13:41.000Z</updated>
        <summary type="html"><![CDATA[概要
勉強としてミニPC3台でkubernetesクラスターを構築します。メモ代わりに記事書くので雑ですみません。

 構成
物理的なもので用意したのはミニPC3台とネットワークスイッチとWiFiルータです。

Kubernetesの構成はマスターノード1台とワーカーノード2台です。後々NASをアタッチしたり、マスターノードを冗長構成にしたいなと考えてます。

CNIはFlannelを選択しました。

 手順

 1. kubeadmのインストール
kubeadmなどのコマンドはkubernetesのドキュメントを参考にしインストールしました。

 2. スワップ機能をOFFにする
...]]></summary>
        <author>
            <name>盆栽エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Automating GIS Processes 2023 を読む その２]]></title>
        <id>https://zenn.dev/mopinfish/articles/automating-gis-02</id>
        <link href="https://zenn.dev/mopinfish/articles/automating-gis-02"/>
        <updated>2024-01-29T22:49:42.000Z</updated>
        <summary type="html"><![CDATA[概要
ヘルシンキ大学地球科学・地理学科の GIS コースの教材であるAutomating GIS Processes 203を読んでいきます。

 Lesson2

 講義動画
https://youtu.be/DzkEbhQEbpY

 Overview

このレッスンでは、Geopandasを使ってPythonで空間データを扱う方法を学びます。Geopandasは、表データを分析するPandasと、ジオメトリを扱うshapelyのパワーを組み合わせたものです。
空間データをファイルから読み書きする方法、ジオメトリを操作する方法、異なる座標参照系（CRS）間でデータを変換する方法を...]]></summary>
        <author>
            <name>Otsuka Noboru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[変数の命名規則にはルールがあるらしい?]]></title>
        <id>https://zenn.dev/joo_hashi/articles/ca7190ce158512</id>
        <link href="https://zenn.dev/joo_hashi/articles/ca7190ce158512"/>
        <updated>2024-01-29T14:43:06.000Z</updated>
        <summary type="html"><![CDATA[どれだけ種類があるんですか?
変数の名前のつけ方と記号の使い方でよく悩みます🫠
どれが良いのだろうと考えます。jQueryとかだと、camelCaseが多かった気がします...
.envの定数を書くときは、UPPERCASEを使ってましたね。UPPER_SNAKE_CASEを使ったこともありましたね。基本大文字な気がする。
kebab-caseはVue2.6を使っていたときに、本で書いてあったので、これが良いパターンなのかなと思って使ってました。
変数書くときは、普段はlowercaseが多いですね。



命名規則
説明
用途




キャメルケース (camelCase)
最初の...]]></summary>
        <author>
            <name>JboyHashimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jupyter Notebookで仮想環境venvを使う（2024/01/29)]]></title>
        <id>https://zenn.dev/ts0/articles/4285fffdf38a8b</id>
        <link href="https://zenn.dev/ts0/articles/4285fffdf38a8b"/>
        <updated>2024-01-29T13:47:52.000Z</updated>
        <summary type="html"><![CDATA[前言
Jupyter Notebookで仮想環境venvを使う方法を記述します。（2024/01/29)

 環境
Windows 11
python 3.11.5

 利用手順

 プロジェクトディレクトリの作成
コマンドプロンプトを開き、ディレクトリをプロジェクト直下に移動します。
[project_dir]はプロジェクトのフォルダのパスです。
cd [project dir]

 仮想環境の作成
以下のコマンドを実行し、仮想環境を作成します。[env_name]は仮想環境名であり、任意の名前を設定できます。
python3 -m venv [env_name]

 仮想環境の有...]]></summary>
        <author>
            <name>ts</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Cognitoの全ユーザーを取得するPythonスクリプト]]></title>
        <id>https://zenn.dev/gsy0911/articles/80a48e0cee92c7</id>
        <link href="https://zenn.dev/gsy0911/articles/80a48e0cee92c7"/>
        <updated>2024-01-29T13:06:10.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Cognitoの全ユーザーの情報をまとめて取得したいときはありませんか？ネットで検索するとちらほらと出てきますが、Generatorで実装したものがなかったので備忘録的に残しておきます。

 コード
コードは以下の通りです。
from typing import Generator, List
import boto3

client = boto3.client('cognito-idp')


def cognito_list_all_users(user_pool_id: str) -> Generator[List[dict], None, None]:
  ...]]></summary>
        <author>
            <name>gsy0911</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【2024年】ITエンジニア本大賞まとめ]]></title>
        <id>https://zenn.dev/yottabyte/articles/ab9d62b00cf38e</id>
        <link href="https://zenn.dev/yottabyte/articles/ab9d62b00cf38e"/>
        <updated>2024-01-29T12:53:56.000Z</updated>
        <summary type="html"><![CDATA[アジャイルプラクティスガイドブック チームで成果を出すための開発技術の実践知


チーム・組織にプラクティスを導入し、根付かせるために！
116の手法を一冊にまとめた“実践”の手引き
チームでのアジャイル開発には、開発技術やツールなどの「技術プラクティス」の活用が重要です。
プラクティスはそれぞれの目的や役割を意識することで効果を発揮します。しかし、目まぐるしく状況が変化する開発では、当初の目的を忘れて、プラクティスに取り組むこと自体が目的化してしまうチームも少なくありません。
本書は、チーム・組織でアジャイル開発に取り組んできた著者が、プラクティスの効果的な選択・活用のしかたについ...]]></summary>
        <author>
            <name>Raio｜高校生エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【2024年1月】エンジニアなら読むべき技術書TOP5]]></title>
        <id>https://zenn.dev/yottabyte/articles/4c044f66a5af35</id>
        <link href="https://zenn.dev/yottabyte/articles/4c044f66a5af35"/>
        <updated>2024-01-29T11:13:14.000Z</updated>
        <summary type="html"><![CDATA[世界一流エンジニアの思考法


noteでも大人気！　米マイクロソフトのエンジニアが放つ最前線の仕事術
頭が先、手は後。一流の仕事のカギは順序にある。
――楠木建（経営学者）
知的生産へのリスペクトがイノベーションの源泉だ。
――落合陽一（メディアアーティスト）
「怠惰であれ！」「早く失敗せよ」――
米マイクロソフトの現役ソフトウェアエンジニアの著者が、超巨大クラウドの開発の最前線で学んだ思考法とは？
“三流プログラマ”でもできた〈生産性爆上がり〉の技術！
・試行錯誤は「悪」。“基礎の理解”に時間をかける
・より少ない時間で価値を最大化する考え方とは？
・「準備」と「持ち帰り」をやめ...]]></summary>
        <author>
            <name>Raio｜高校生エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【まとめ】アルゴリズム的思考力が身につく！Atcoder ②]]></title>
        <id>https://zenn.dev/hikaelis/articles/34db1f3d8fa2d6</id>
        <link href="https://zenn.dev/hikaelis/articles/34db1f3d8fa2d6"/>
        <updated>2024-01-29T10:41:10.000Z</updated>
        <summary type="html"><![CDATA[アルゴリズムの勉強のために以下の本を読んだので、読んでいた時のメモ
上級編
中級編は前記事
https://www.kadokawa.co.jp/product/321904000758/

 再帰関数と全探索
関数の中で同じ関数を呼び出す関数
終了条件必ずつける
N重のfor loop→コード書くのが難しい
→同じ処理(つまり再帰関数)をfor i in Nすればいいよね。

 ナップザック問題
重さWの中で品物の価値の和を最大化する問題
品物を選ぶか選ばないかを0,1で表して0と1の数列を作ると、2^N乗通りの計算が必要となる
N重のfor文はNが確定してないと書けない
→再帰関数　...]]></summary>
        <author>
            <name>hikaelis</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【まとめ】アルゴリズム的思考力が身につく！Atcoder ①]]></title>
        <id>https://zenn.dev/hikaelis/articles/69c75ca3d425f9</id>
        <link href="https://zenn.dev/hikaelis/articles/69c75ca3d425f9"/>
        <updated>2024-01-29T09:55:25.000Z</updated>
        <summary type="html"><![CDATA[アルゴリズムの勉強のために以下の本を読んだので、読んでいた時のメモ
中級編
https://www.kadokawa.co.jp/product/321904000758/

 バケット・連想配列

 バケット
num[v]← 配列Aの中の値のvの個数　vは正の整数に限られる！
配列Aから直接数えてもいいけど、setにAの値入れて行って要素数数えると楽　計算量O(1)

 連想配列
num[s] ←文字列sが何個あるか
添え字が文字列でも使える便利
Python3ではcollections.defaultdict型を使う
(一般的にはdict使うけど、競技プログラミングでは存在しないキー...]]></summary>
        <author>
            <name>hikaelis</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django Meetup Tokyo #12]]></title>
        <id>https://zenn.dev/muetaro/articles/django_meetup_tokyo_12</id>
        <link href="https://zenn.dev/muetaro/articles/django_meetup_tokyo_12"/>
        <updated>2024-01-29T08:20:33.000Z</updated>
        <summary type="html"><![CDATA[Django Meetup Tokyo #12 に参加しました。
すごく良かったので感想を書こうと思います。

 私とDjango

2017~2018（とあるスタートアップA）

社内の広告配信システム数値管理システム（4名のうちの一人）

（先輩がdjangoマニアでmanage.pyを魔改造したり…）


しかし私のメインの担当は某オンラインクレーンゲーム(php & node.js)でしたので、そちらを優先する以上チケット消費が雑で、いつもみんなに迷惑をかけていました。（えー！なるっちの担当箇所がバグだらけ！？）


2019/8 ~ 2022/3（とあるスタートアップB...]]></summary>
        <author>
            <name>むえたろう</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[材料力学の梁問題のシミュレータを作った（完全版）]]></title>
        <id>https://zenn.dev/halmet7000/articles/6d3d6e3adddc83</id>
        <link href="https://zenn.dev/halmet7000/articles/6d3d6e3adddc83"/>
        <updated>2024-01-29T07:20:27.000Z</updated>
        <summary type="html"><![CDATA[はじめに
前回、sympyを用いて固定端の片持ち梁を解析しました。
（https://zenn.dev/halmet7000/articles/000fe097378382）
今回はそれを一般化できたので共有します。
時間がなかったため記事内容はカスです。すみません。
過去問の答え合わせやsympyの練習にどうぞ。
colab:https://colab.research.google.com/drive/1LiBu57fFNymdoTkepuPB8pNtS_BBISqx?usp=sharing

 入力と出力の例
![]
これのSFD,BMD,たわみ角,たわみのグラフが正しく出力さ...]]></summary>
        <author>
            <name>HAL</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【LangChain】GPTにYoutube動画を扱える能力を注入]]></title>
        <id>https://zenn.dev/spacemarket/articles/042e4d977103fa</id>
        <link href="https://zenn.dev/spacemarket/articles/042e4d977103fa"/>
        <updated>2024-01-29T06:10:04.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは。スペースマーケットでインターンしています、dumbled0reです。
一ヶ月前に大学を卒業して韓国から帰って来ましたが、韓国はマイナス10℃とかの世界なので日本は暖かいなと感じています。韓国は寒い。
僕は普段からYoutubeで動画を見ていますが、動画が長いと見たい箇所に辿り着くまで少しずつ飛ばしながら動画を見ていることがあります。これ結構めんどくさいなと思っています。
なので、LangChainを用いて〇〇については動画の何分くらいからなのか尋ねたら時間を教えてくれたり、要約してくれるなどの能力をGPTに与えてみました。

 事前準備

 OpenAI API...]]></summary>
        <author>
            <name>dumbled0re</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonの__init__についてメモ]]></title>
        <id>https://zenn.dev/uchi1203/articles/ac5f70976b9dea</id>
        <link href="https://zenn.dev/uchi1203/articles/ac5f70976b9dea"/>
        <updated>2024-01-29T05:28:29.000Z</updated>
        <summary type="html"><![CDATA[init.py ってなにもの
myDir
 - __init_.py
 - sample.py
main.py
みたいにいるファイル、何者なのか

 Pythonにおける定義（イメージ）
モジュール => pythonのファイル
パッケージ => ディレクトリとその中身
myDir
 - __init_.py
 - sample.py
main.py
この時、myDirはパッケージで、sample.pyはモジュール
__init__.pyはこのパッケージに何があるかをまとめる場所
（もともとは、単一モジュールのパッケージを呼び出す際に短縮する方法だった？）
import ...]]></summary>
        <author>
            <name>uchi1203</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ローカルLLM向けのGUIアプリを作成した 2【会話編】]]></title>
        <id>https://zenn.dev/topo/articles/5ddedb7ea81130</id>
        <link href="https://zenn.dev/topo/articles/5ddedb7ea81130"/>
        <updated>2024-01-28T14:29:50.000Z</updated>
        <summary type="html"><![CDATA[はじめに


simple-text-generative-AIというローカルLLM（Large Langage Model）の初心者向けGUIアプリを作成しました。
ローカルLLMとの基本的な会話やファインチューニングを誰でも行えるようにすることを目指しています。
この記事では、前回の記事の続きで、simple-text-generative-AIによるローカルLLMとの会話までの使い方を説明します。


 前回の記事
この記事では、simple-text-generative-AIの概要と導入方法をまとめています。
https://zenn.dev/topo/articles/7...]]></summary>
        <author>
            <name>ToPo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rustの勉強]]></title>
        <id>https://zenn.dev/iwatagumi/articles/0db12ddd2374be</id>
        <link href="https://zenn.dev/iwatagumi/articles/0db12ddd2374be"/>
        <updated>2024-01-28T10:00:05.000Z</updated>
        <summary type="html"><![CDATA[Rustの勉強1日目
は〜？と思ったところのメモ

 文字列の違い
pythonの場合
text1 = "Hello"
text2 = text1
print(text1)
print(text2)
Rustの場合
fn main(){
let s1 = String::from("Hello");
let s2 = s1;
println!("{}", s1)
println!("{}", s2)
}
この方法ではエラーになります...
正しくは
fn main() {
    let x = "Hello";
    let y = x;
    println!("{}", x);...]]></summary>
        <author>
            <name>kirigaya</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[requirements.txtのちょっとしたテクニック]]></title>
        <id>https://zenn.dev/shiro_toy_box/articles/1df3fc4658d1dd</id>
        <link href="https://zenn.dev/shiro_toy_box/articles/1df3fc4658d1dd"/>
        <updated>2024-01-28T08:18:05.000Z</updated>
        <summary type="html"><![CDATA[pythonの環境を共有する際にrequirements.txtを使ったやり方にtorchを含む場合
そのまま自分の環境をpip freeze > requirements.txtすると
torch==2.1.2+cu118のようにバージョンとそれ以外のものが含まれたものが記述されます。
このままインストールするとエラーが出てしまいます。
それを回避するために出力したrequirements.txtを編集します。
出力したrequirements.txtにはほかにもライブラリが含まれますが省いています。

requirements.txt　編集前
torch==2.1.2+cu11...]]></summary>
        <author>
            <name>しろ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++からPythonを操る黒魔術]]></title>
        <id>https://zenn.dev/husty/articles/2a08fdde40aab3</id>
        <link href="https://zenn.dev/husty/articles/2a08fdde40aab3"/>
        <updated>2024-01-28T06:17:41.000Z</updated>
        <summary type="html"><![CDATA[はじめに
突然ですが、C++からPythonを使いたいことはありませんか？
たとえば組み込み系のモジュール開発やPoCで部分的にAIを使ってみたいとき。深層学習のフレームワークによってはC言語のAPIを提供していたり、ONNXなどモデル自体が多言語対応のものもありますが、そうやって、なんとかしてPythonを避けていませんか？
PythonからCのモジュールを呼び出すのはよくあるけれど、その逆はできないと思っていませんか？
これ実は、公式なやり方でできます。
https://docs.python.org/3/extending/embedding.html
こちらのページ内のサンプ...]]></summary>
        <author>
            <name>Takumi Yamashita</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Python] ChannelAccessToken v2.1 で LINE BOTを作る]]></title>
        <id>https://zenn.dev/killinsun/articles/d7caf4c5334e96</id>
        <link href="https://zenn.dev/killinsun/articles/d7caf4c5334e96"/>
        <updated>2024-01-28T05:14:13.000Z</updated>
        <summary type="html"><![CDATA[LINE Messasging API を活用して LINE Bot を作るとき、ネットでドキュメントや作例をみると「チャネルアクセストークン（長期）」と「チャネルシークレット」を使って構築する例が多くあります。
私も今までその構成で BOT を開発していたのですが、今は 「ChannelAccessToken v2.1」なるものがあり、現在の推奨として公式ドキュメントに案内されています。
ただ、公式ドキュメントや公式SDKの情報だけだと初学者にはハマりどころや情報不足感も否めないため、備忘録として私なりの管理方法を記載します。

 前提

LINE Developers Console...]]></summary>
        <author>
            <name>首無しキリン</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Certbot用ACMEサーバーをFlaskで偽装し、DNS-01で自己証明書を取得]]></title>
        <id>https://zenn.dev/nondescript/articles/cabb2a25be14ec</id>
        <link href="https://zenn.dev/nondescript/articles/cabb2a25be14ec"/>
        <updated>2024-01-28T04:18:23.000Z</updated>
        <summary type="html"><![CDATA[概要

レート制限のあるステージングhttps://acme-staging-v02.api.letsencrypt.orgや本番https://acme-v02.api.letsencrypt.org/directoryを実際に使わずに無制限でLet's Encryptの証明書を疑似的に自己証明書で取得するローカル検証環境
hosts修正とFlaskサーバー起動の簡易操作のみで、step-ca、step-cli不使用


 TL;DR

ダミーのレスポンス処理をFlask(SSL)で実装


 事前準備
前提：Docker版Certbot(certbot/certbot:amd64...]]></summary>
        <author>
            <name>素人の戯言</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[prefect をローカルで動かすための構成要素を理解する]]></title>
        <id>https://zenn.dev/massu_devix/articles/a016774865d647</id>
        <link href="https://zenn.dev/massu_devix/articles/a016774865d647"/>
        <updated>2024-01-28T04:07:14.000Z</updated>
        <summary type="html"><![CDATA[はじめに
prefect の構成要素について理解します。
ここでの構成要素とは、prefect をローカル環境で動かすための要素を指します。
（そのため、SaaS である prefect cloud については言及しません。）
この記事では、以下の要素について説明しています。

prefect-server
database


 prefect とは
prefect とは、手軽にデータ処理 pipeline を構築することができるワークフロー管理ツールです。
https://docs.prefect.io/latest/

 prefect のインストール
公式ドキュメントを参照し...]]></summary>
        <author>
            <name>mas_dx</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FastAPIアプリケーション〜環境設定からログイン処理まで〜]]></title>
        <id>https://zenn.dev/keita_f/articles/4493e3cfd76aec</id>
        <link href="https://zenn.dev/keita_f/articles/4493e3cfd76aec"/>
        <updated>2024-01-27T23:30:00.000Z</updated>
        <summary type="html"><![CDATA[開発環境の設定(docker)
dockerの設定をしていきます。

backend/Dockerfile
FROM python:latest
WORKDIR /backend
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONBUFFERED 1

# pipを使ってpoetryをインストール
RUN pip install poetry

# poetryの定義ファイルをコピー (存在する場合)
COPY pyproject.toml* poetry.lock* ./

# poetryでライブラリをインストール (pyproject.tomlが既...]]></summary>
        <author>
            <name>KITFJN</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mapbox Directions APIを使って一周する経路を作る]]></title>
        <id>https://zenn.dev/takilog/articles/575c58ed6b57de</id>
        <link href="https://zenn.dev/takilog/articles/575c58ed6b57de"/>
        <updated>2024-01-27T13:57:07.000Z</updated>
        <summary type="html"><![CDATA[背景
趣味でジョギング (実態はジョギングとは言えない速度…) をやるのですが、ある地点からスタートして戻ってくるコースを考える必要があります。普段は固定のコースを走るのですが、たまには別のルートを行かないと飽きてしまいます。なので、スタートを固定して、いくつか候補が欲しくなります。このような巡回ルート探しを手伝ってくれるアプリはいろいろ世の中にあり、例えば「Trail Router」などがあります。
https://trailrouter.com/
この記事は、似た計算をやってみようと思って書きました。

 考えたこと
実装した計算の考え方を先に説明します。

 周回ルートの設定
...]]></summary>
        <author>
            <name>たきろぐ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【python】gBizINFO APIで企業分析が捗る]]></title>
        <id>https://zenn.dev/shibainu0007/articles/1feea9ddf5cd6f</id>
        <link href="https://zenn.dev/shibainu0007/articles/1feea9ddf5cd6f"/>
        <updated>2024-01-27T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[イントロダクション
gBizINFO（ジービズインフォ）は、「世界最先端IT国家創造宣言」に基づいて運用される政府の情報提供サイトです。約400万の国内法人情報が掲載されており、法人番号、法人名、本社所在地の基本情報に加え、府省との契約情報や表彰情報など、政府が公開する様々な法人活動情報を一括検索し、閲覧できます。
　gBizINFOの情報がAPIを通じて自由に活用できることにより、取引先の最新の活動情報を社内イントラネットに取り込むなど、ビジネスにおいて多様な使い方が可能となります。

 今回のゴール
本ブログ記事では、国税庁法人番号公表サイトから入手可能な法人データとgBizIN...]]></summary>
        <author>
            <name>しばいぬ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Polars】polars.whenで文字列型のカラムを生成する時の注意]]></title>
        <id>https://zenn.dev/hanata/articles/1981872b5f4363</id>
        <link href="https://zenn.dev/hanata/articles/1981872b5f4363"/>
        <updated>2024-01-27T10:26:09.000Z</updated>
        <summary type="html"><![CDATA[polarsでは、pl.whenを用いることで条件分岐によるカラム生成を行うことができる。SQLのcase when文に相当するものである。
特定のカラムの条件に応じて、新たに文字列型のカラムを生成するケースにおいて、polarsのversionの違いでハマったことがあったので、備忘録として残しておく。
まずは polars==0.18.3 の場合。
以下のように書くことで、文字列の値を持つ colc が生成される。
import polars as pl

df = pl.DataFrame({
    'cola': [1, 2, 2, 3]
    , 'colb': [4, 5,...]]></summary>
        <author>
            <name>hanata</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ログ-マンガのキャラクターのアイデアを生成する-OpenAI API,Python]]></title>
        <id>https://zenn.dev/masasan/articles/b7da4e15156a5a</id>
        <link href="https://zenn.dev/masasan/articles/b7da4e15156a5a"/>
        <updated>2024-01-27T09:22:55.000Z</updated>
        <summary type="html"><![CDATA[やりたかったこと

Pythonを使って、OpenAI APIをより意図通りに使えるようになる


 リファレンス

shi3zさんのYouTube
https://youtu.be/LC0GOvvxns4?si=y_b6PJUEauzpUfUC


 使用したもの

Google colab
OpenAI API


 コード

 準備
# 環境変数の設定
APIKEY="<APIキー>"

# インストール
!pip install openai==0.28

import openai

# APIキーの設定
openai.api_key =APIKEY
impo...]]></summary>
        <author>
            <name>Masa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Signate 第2回 金融データ活用チャレンジ ベースラインサマリー]]></title>
        <id>https://zenn.dev/nishimoto/articles/1587fe7a29f145</id>
        <link href="https://zenn.dev/nishimoto/articles/1587fe7a29f145"/>
        <updated>2024-01-27T08:45:04.000Z</updated>
        <summary type="html"><![CDATA[第2回 金融データ活用チャレンジ のベースラインを作成してみます。このZenn記事では全体的な方針をさっくり書いています。早くコードを動かしたい人はColabへのリンクからColabへ移行してください

 基本情報









コンペURL
https://signate.jp/competitions/1325


コンペ課題概要
企業向けローンの返済可否予測


全コード

Colabへのリンク（Public score: 0.6738)




 EDA

あんまりNotebookでは頑張っていません。

最低限、各列の基礎的な統計情報（列の型、NaNがある行数、値の種類）を...]]></summary>
        <author>
            <name>nishimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】import system の全体像]]></title>
        <id>https://zenn.dev/sankantsu/articles/3de204445e9b4a</id>
        <link href="https://zenn.dev/sankantsu/articles/3de204445e9b4a"/>
        <updated>2024-01-27T04:11:09.000Z</updated>
        <summary type="html"><![CDATA[概要
Python の import 文は、プログラムの実行中に他のモジュールを読みこむために使われます。
おおまかな import 文の動作として、sys.path から指定された名前のモジュールを探して見つかったものを読みこむというように理解している人が多いのではないかと思います。
この理解は概ね正しいですが、実際には sys.path の探索は import system の一部分でしかなく、他の機構が用いられることもあります。さらにはカスタマイズした実装を使って import system の動作を拡張したり置き替えたりすることさえ可能です。
Python の import ...]]></summary>
        <author>
            <name>sankantsu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub CodespacesでPoetryによるPython開発環境を作る]]></title>
        <id>https://zenn.dev/kakerun/articles/491aeef26c56b8</id>
        <link href="https://zenn.dev/kakerun/articles/491aeef26c56b8"/>
        <updated>2024-01-26T12:00:16.000Z</updated>
        <summary type="html"><![CDATA[今更ながらCodespacesを使って、PoetryによるPythonの開発環境を作ったりしてみました。

 準備

 リポジトリを作成
まずはGitHubでリポジトリを作成しましょう。
今回は空のリポジトリから作っていきます。
記事内ではリポジトリ名をtutorialとします。
別名にする場合は適宜置き換えてください。
また、まったく空のリポジトリではCodespacesを使用できないので、リポジトリ作成時にADD a README fileにチェックを入れておきましょう（initial commitさえできれば良いので何でも良い）

READMEを追加

 環境設定

 Codesp...]]></summary>
        <author>
            <name>かけるん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【VSCode】Pythonのバージョン切り替え]]></title>
        <id>https://zenn.dev/lily_jenny/articles/7411b6b0a73c7b</id>
        <link href="https://zenn.dev/lily_jenny/articles/7411b6b0a73c7b"/>
        <updated>2024-01-26T04:18:27.000Z</updated>
        <summary type="html"><![CDATA[1.VSCodeの画面の一番下のステータスバーの右側に現在設定されているPythonのバージョンが表示されています。（下図 右下の赤枠)

2.画面右下のPythonのバージョンをクリックすると、コマンドパレットに「インタープリターの選択」と表示され、VSCodeが認識しているインストールされているPythonのバージョンの一覧が表示されます。（下図 右下の赤枠）
一覧から変更したいバージョンをクリックします。

3.この例では、バージョンを3.9.6を選択したので、ステータスバーの表示が3.9.6に変更されました。

無事に、Pythonのバージョンを変更することが出来ました。]]></summary>
        <author>
            <name>HAJIME-TOKYO</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】気象庁の降水量データを整形して、地図上にバーグラフを表示してみた【Streamlit】]]></title>
        <id>https://zenn.dev/labcode/articles/97a7410a0698f9</id>
        <link href="https://zenn.dev/labcode/articles/97a7410a0698f9"/>
        <updated>2024-01-25T23:42:31.000Z</updated>
        <summary type="html"><![CDATA[はじめに
バーグラフを描画したい、折れ線グラフを描画したい、、etc と思ったときに、それぞれのグラフを描画しやすい形に生データを整形したデータ（ファイル）が必要になります。
そんなときに、自分で自由にデータ整形ができるとデータ解析の幅が広がりますし、自分が表現したいようにグラフを描画することができるようになります。
今回は、マップ上にバーグラフを表示するために必要なデータファイルの整形の方法と、Streamlitを使って整形したデータを地図上にプロットする方法をご紹介します！
動作検証済み環境
macOS Monterey(12.4), python3.7.10

 データ整形の目...]]></summary>
        <author>
            <name>LabCode（ラボコード）</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[scikit-learn の PCA で GPU を活用する]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-sklearn-pca</id>
        <link href="https://zenn.dev/derwind/articles/dwd-sklearn-pca"/>
        <updated>2024-01-25T16:01:23.000Z</updated>
        <summary type="html"><![CDATA[目的
Scikit-learnが実験的にGPU対応していたので調査してみた！ という良記事があって、一部分 scikit-learn で GPU を活用できるようなので PCA (主成分分析) を試してみたい。

 どのくらい対応している？
11.1. Array API support (experimental) を見ると LinearDiscriminantAnalysis 以外にも decomposition.PCA もいけそうなので、今回はこれを Google Colab 上の T4 で試す。

 実装
まずは、従来通りに CPU で試して、次に PyTorch の Ten...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[「レガシーコードからの脱却」のテストコードをPythonで書いてみる]]></title>
        <id>https://zenn.dev/tanny/articles/d7c64464977273</id>
        <link href="https://zenn.dev/tanny/articles/d7c64464977273"/>
        <updated>2024-01-25T12:26:36.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事は、「レガシーコードからの脱却ーソフトウェアの寿命を延ばし価値を高める9つのプラクティス」の「11章 プラクティス7 テストでふるまいを明示する」のテストコードをPythonで書いた内容を紹介しています。
https://amzn.to/3ObTV2v
この書籍では、レガシーコード（＝バグを多く含み、壊れやすく拡張が難しいコード）を避けるためのプラクティスが9つ紹介されています。各プラクティスに対して、日常生活における例を挙げてその実践が重要となる背景が説明されており、とても腹落ちしやすい内容でした。
理論的な説明が多い本書ですが、その中でも11章の「プラクティス7...]]></summary>
        <author>
            <name>Tanny</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tavernのresponseで自作関数を呼び出すときの注意点]]></title>
        <id>https://zenn.dev/forte/articles/301f50a23468f1</id>
        <link href="https://zenn.dev/forte/articles/301f50a23468f1"/>
        <updated>2024-01-25T11:18:50.000Z</updated>
        <summary type="html"><![CDATA[はじめに
結論から言うと自作関数の第一引数にresponseを指定するのが必要なんですが、
これに気付くまでハマったので備忘録として残しておきます。

 ハマったケース
TavernでAPIのE2Eテストを書いている際に、responseを受け取った後に自作関数を呼び出したくなる事があります。
例えば以下のような場合があります。

API内でDBに登録・更新されるデータだがレスポンスに含まれない、かつ、後のテストで使用するデータのため、直接DBを参照してデータ取得する必要がある場合
テストのために作成したデータの後始末(削除)をしたいが削除APIが存在しないため、DBを直接操作してレ...]]></summary>
        <author>
            <name>FORTE</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ローカルLLM向けのGUIアプリを作成した 1【導入編】]]></title>
        <id>https://zenn.dev/topo/articles/7146c33b25ea68</id>
        <link href="https://zenn.dev/topo/articles/7146c33b25ea68"/>
        <updated>2024-01-25T00:36:54.000Z</updated>
        <summary type="html"><![CDATA[はじめに

simple-text-generative-AIという自分のPCで動くローカルLLM（Large Langage Model）向けのGUIアプリを作成しました。
LLMモデルのロードから、chatbotとしての利用、新規モデルの追加、ファインチューニングなどを誰でも簡単にできることを目指しています。
この記事は、simple-text-generative-AIの紹介と導入までの内容です。

ローカルLLMとは

自身のPCなどローカルな環境で使用できる文章生成を行うAIモデルです。大規模言語モデルとも呼ばれます。
LLMの代表的なものとしてChatGPTがありますが、...]]></summary>
        <author>
            <name>ToPo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】pydub使ったら音声データの解析がめっちゃ簡単だった]]></title>
        <id>https://zenn.dev/labcode/articles/7eaca4f7e9dbcf</id>
        <link href="https://zenn.dev/labcode/articles/7eaca4f7e9dbcf"/>
        <updated>2024-01-24T22:11:34.000Z</updated>
        <summary type="html"><![CDATA[音声データをPythonで取り込んで表示したり解析したりしたいと思ったことはありませんか？
この記事では音声データの入出力をPythonで行えるpydubのインストールと基本的な使用方法（音声データの読み込み）について説明します。
pydubで音声データファイルの入力ができれば，Numpyが提供する関数等を使用してPython上で音声データの解析・加工ができるようになります。
動作検証済み環境

macOS Catalina(10.15.7), python3.7.10, Jupyter Notebook, OpenCV 3.4.2

 Pythonで音声データを読み込み，波形を描画する...]]></summary>
        <author>
            <name>LabCode（ラボコード）</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac で RAG による最新情報の LLM を構築してみた]]></title>
        <id>https://zenn.dev/bashow0316/articles/9ed0c695e4eea2</id>
        <link href="https://zenn.dev/bashow0316/articles/9ed0c695e4eea2"/>
        <updated>2024-01-24T17:34:12.000Z</updated>
        <summary type="html"><![CDATA[Mac で RAG による最新情報の LLM を構築してみた

 はじめに
様々な企業が、AI 活用を視野に入れ始めて、取組みを良く見かけるようになり、Large Language Models (LLMs/LLM) も業務で活用される事例も増えております。そして、AI とデータを柔軟に管理してツールやプロセス、コストパフォーマンス、スケーラブルをバランス良くするための手法である MLOps や 、MLOps と GenAIOps を LLM 基準で開発と運用に考慮した LLMOps 、Retrieval-augmented generation (RAG) の配信と運用を考慮した ...]]></summary>
        <author>
            <name>bashow0316</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[完全自動でGoogle OAuth2.0認証情報を取得]]></title>
        <id>https://zenn.dev/nondescript/articles/f456023e2dd99f</id>
        <link href="https://zenn.dev/nondescript/articles/f456023e2dd99f"/>
        <updated>2024-01-24T14:23:44.000Z</updated>
        <summary type="html"><![CDATA[※二段階認証有効アカウント非対応

 TL;DR


InstalledAppFlow.run_local_server()をopen_browser=False指定でバックグラウンド待機

InstalledAppFlow.authorization_url()でクエリにredirect_uriが入るまで再取得
undetected_chromedriver使用


 コード全容

auto_oauth2.py
import os
import pickle
import shutil
import time
import traceback
from argparse import ...]]></summary>
        <author>
            <name>素人の戯言</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【My秘書】chatGPT×EDINET×LINEで保有銘柄の決算要約してくれるお姉さん]]></title>
        <id>https://zenn.dev/tomodo_ysys/articles/edinet-chatgpt-financial-report</id>
        <link href="https://zenn.dev/tomodo_ysys/articles/edinet-chatgpt-financial-report"/>
        <updated>2024-01-24T14:22:16.000Z</updated>
        <summary type="html"><![CDATA[はじめに
StableDiffusionで作成したアニメ絵のイラスト、せっかくだから何かに使えないか？
いろいろ考えた結果、今回は保有銘柄の決算が出たらLINEで要約教えてくれる秘書のお姉さんにしよう！と思いつきました。保有銘柄の決算報告書が新規アップロードされていないかEDINETで確認し、あればchatGPTで要約してLINEに通知します。
NISAで調子に乗って銘柄数を増やしすぎた投資初心者の私には願ってもない機能です。

 今回実現したいこと
EDINET APIを利用してウォッチリストの銘柄の半期報告書、四半期報告書が新規に提出されていないかを確認します。提出されている場合...]]></summary>
        <author>
            <name>ともど@SIerエンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[3ポイントシュートの上手さとフリースローの上手さは関係があるか？]]></title>
        <id>https://zenn.dev/zurukumo/articles/9c439ef31d5791</id>
        <link href="https://zenn.dev/zurukumo/articles/9c439ef31d5791"/>
        <updated>2024-01-24T12:12:02.000Z</updated>
        <summary type="html"><![CDATA[概要
『3ポイントシュートの上手さとフリースローの上手さは比例する。』
バスケットボールのファンコミュニティの間では上記のような言説がしばしば常識のように語られる。特に3ポイントシュートが下手な若手の選手に対して、「この選手はフリースローの確率が良いから、そのうち3ポイントの確率も上がっていくはずだ」のような文脈で語られることが多い印象だ。
3ポイントシュートもフリースローもシュートという大枠で見れば同じだが、足を接地した状態で放つフリースローとジャンプと同時に放たれる3ポイントシュートとで本当に上手さは比例するのだろうか？
今回、nba.comのデータを分析して仮説を検証する。

...]]></summary>
        <author>
            <name>つるくも</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【私的】Python環境構築（pyenv-win+venv）]]></title>
        <id>https://zenn.dev/hoshinagi1219/articles/091bdb6755b16f</id>
        <link href="https://zenn.dev/hoshinagi1219/articles/091bdb6755b16f"/>
        <updated>2024-01-24T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
新しいPCを購入した際に真っ先に行う、pythonの環境構築をまとめました。

python本体のインストール
pyenv-winで複数のバージョンを使用可能に
venvで仮想環境作成


 動作確認環境

 PC情報
OS：Windows 10 Home　｜　CPU：Inter(R) Core(TM) i5-3230M　｜　メモリ：4.00GB


 pythonバージョン

python：3.12.1

pyenv-win：3.1.1




 1. python本体のインストール

 1.1 インストーラーのダウンロード
pythonの公式サイト(https://ww...]]></summary>
        <author>
            <name>HoshimoriNagisa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Streamlitで機械学習モデルをキャッシュして、推論表示を早くする話]]></title>
        <id>https://zenn.dev/yuu7751/articles/24ef1aa32a7fab</id>
        <link href="https://zenn.dev/yuu7751/articles/24ef1aa32a7fab"/>
        <updated>2024-01-24T03:58:14.000Z</updated>
        <summary type="html"><![CDATA[背景
機械学習モデルを使って、予測を実行するアプリケーションをstreamlitで作っていたのですが、予測実行のたびにモデル読み込みで時間がかかっていたので、これを省略するためにchatGPTさんに解決方法を聴きました。

 やったこと

 before
以下がアプリコードです。time.sleep(10)が実際には機械学習モデルのpickle.loadになるわけですが、これだと推論ボタンを押すたびにモデルをloadして走ることになります。
import streamlit as st
import pickle
import time

def load_model():
    ...]]></summary>
        <author>
            <name>yu-min</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Streamlitで作ったダッシュボードを自動でスライドショーさせる]]></title>
        <id>https://zenn.dev/0msys/articles/6706370656478a</id>
        <link href="https://zenn.dev/0msys/articles/6706370656478a"/>
        <updated>2024-01-24T03:00:01.000Z</updated>
        <summary type="html"><![CDATA[今回作ったもの
Streamlitで作ったダッシュボードを自動でスライドショーできるか試してみました。
↓が完成したものです。

※スライドバーやチェックボックスを操作するたびに再描画され、乱数で作っているグラフが変化しているのはご愛嬌です。
一応イメージしていたものはできました。
https://github.com/0msys/streamlit-slide-show-test

 作成した背景
複数のダッシュボードを自動でスライドショーで回しながら常設ディスプレイで表示しておきたいことがあり、今まではStreamlitではできなかったのでGrafanaを使ってやっていたのですが...]]></summary>
        <author>
            <name>0msys</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[プロセスとスレッドの概念の違い]]></title>
        <id>https://zenn.dev/y_endo_hasibiro/articles/10f9303f6993ca</id>
        <link href="https://zenn.dev/y_endo_hasibiro/articles/10f9303f6993ca"/>
        <updated>2024-01-24T02:45:33.000Z</updated>
        <summary type="html"><![CDATA[みなさんプロセスとスレッドの違いを説明できますか？
僕はできなくて恥をかいたので反省がてらに記事にしました。

 概略
概念的には以下です。


 解説

 プロセス
プロセスはインスタンスの概念です。
プログラムの実行に必要なプログラムコードとその動作に必要なリソース（メモリ、ファイルハンドル、I/Oデバイスなど）が含まれています。
各プロセスに対して独立したメモリ領域を割り当てるため、他プロセスとのリソースの競合が起きません。
基本的にはCPUコア数とプロセス数は同数にすることが多いです。

 スレッド
スレッドはプロセス内部のタスク単位です。
プロセスの中には最低一つのスレッドが含...]]></summary>
        <author>
            <name>ハシビロ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[今日からはじめるアニメ監視]]></title>
        <id>https://zenn.dev/hitoe_kami/articles/0010-articles-reddit-monitoring</id>
        <link href="https://zenn.dev/hitoe_kami/articles/0010-articles-reddit-monitoring"/>
        <updated>2024-01-24T01:11:38.000Z</updated>
        <summary type="html"><![CDATA[TL;DR


Redditのアニメチャンネルで日次で盛り上がったアニメを監視します
Cloud Run Jobsを日次で起動させます
以下のようにGoogleSheetに日次でアニメのスレッドが書き込まれていきます




 はじめに
どうも、アニメマスターです。
皆さんアニメは好きですか？
私は三度の飯より好きです！
アニメ好きを長いことやっているとアニメを観るだけでは飽き足らず、アニメの感想を共有したり、クール内でどのアニメが人気なのかを監視したくなります。
ということで、本稿ではRedditという世界最大の掲示板アプリのアニメチャンネルの盛り上がりを日次監視していきます。

...]]></summary>
        <author>
            <name>MiyukiP</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Automating GIS Processes 2023 を読む その１]]></title>
        <id>https://zenn.dev/mopinfish/articles/automating-gis-01</id>
        <link href="https://zenn.dev/mopinfish/articles/automating-gis-01"/>
        <updated>2024-01-23T22:39:07.000Z</updated>
        <summary type="html"><![CDATA[概要
ヘルシンキ大学地球科学・地理学科の GIS コースの教材であるAutomating GIS Processes 203を読んでいきます。

 Lesson1

 講義動画
https://youtu.be/heEKeH2ECSk

 Overview

Pythonのshapelyパッケージを使って、Pythonで「単純な特徴」を作成し、操作する方法を学びます。

https://autogis-site.readthedocs.io/en/latest/lessons/lesson-1/overview.html

Pythonを使って空間データを扱い、分析する方法を学びます...]]></summary>
        <author>
            <name>Otsuka Noboru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】Polarsからリンク付きのExcelを出力する]]></title>
        <id>https://zenn.dev/alcnaka/articles/107976a28d060e</id>
        <link href="https://zenn.dev/alcnaka/articles/107976a28d060e"/>
        <updated>2024-01-23T11:32:30.000Z</updated>
        <summary type="html"><![CDATA[Rustではなく、Pythonの方のPolarsの話です。最近は機会があればPandasではなくPolarsで書いてみようと手を出していますが、なかなか慣れません。
今回は、リンク付きのExcelファイルをいい感じに出力しようとして、調べるのに結構時間がかかってしまいました。
polarsのwrite_excelメソッドで出力すると、=HYPERLINK("https://example.com", "リンクのサンプル") の様な文字列がそのまま出力されて、クリックできません。一旦xlsxwrite.Workbookを持ってきて、それをwrite_excleメソッドに渡して出力すると、求...]]></summary>
        <author>
            <name>alcnaka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FastAPI 環境構築]]></title>
        <id>https://zenn.dev/kumaaa1212/articles/65dfb512183030</id>
        <link href="https://zenn.dev/kumaaa1212/articles/65dfb512183030"/>
        <updated>2024-01-23T07:35:32.000Z</updated>
        <summary type="html"><![CDATA[FastAPI 環境構築を説明していきます。
ざっくりな流れとして、、、
PCにPython入れる　（pyenv）
↓
仮想環境を作る　（venv）
↓
必要なものをインストールする　（pip）

 Pythonをインストールする
https://original-game.com/python_course/install/mac-homebrew-pyenv/
この記事を参考にして、Pythonをインストールする。
(pyenvを使ってバージョン管理をしています。)

 仮想環境
仮想環境とは、パソコンやストレージなどのハードウェア内で仮想的に構築された環境のことです。
つまり、、物...]]></summary>
        <author>
            <name>kuma</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FastAPIとは？　「基本のキ」]]></title>
        <id>https://zenn.dev/kumaaa1212/articles/c6c5989b674493</id>
        <link href="https://zenn.dev/kumaaa1212/articles/c6c5989b674493"/>
        <updated>2024-01-23T05:46:50.000Z</updated>
        <summary type="html"><![CDATA[業務でfastAPIを使うことになったので、学習がてらFastAPIについてまとめます。

 FastAPI 概要

APIを構築するためのモダンで高速なPyhton Webフレームワーク
型ヒントに基づいて開発を行う。（基本的にPythonは型を重視して開発少ない）


 FastAPI メリット

パフォーマンス・開発・処理が高速（非同期処理をサポート）
型ヒントでの安全性が高い。
自動ドキュメント生成機能

型を元にopenAPIを自動生成してくれる。


大企業もFastAPIを採用している。




 他フレームワークとの比較

django

１つでなんでもできる万能型
組み...]]></summary>
        <author>
            <name>kuma</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[defaultdictを使って楽に配列カウントをする]]></title>
        <id>https://zenn.dev/gdtypk/articles/python-default-dict</id>
        <link href="https://zenn.dev/gdtypk/articles/python-default-dict"/>
        <updated>2024-01-23T00:49:27.000Z</updated>
        <summary type="html"><![CDATA[はじめに
配列で出てきたものを種類ごとにカウントしたいことってあると思います。
Pythonでは標準でcollectionsライブラリが用意されていて、
その中のdefaultdictが良い感じだったので紹介します。
defaultdictの公式ドキュメント
https://docs.python.org/ja/3.10/library/collections.html#collections.defaultdict

 やりたいこと
以下のような配列があった時、種類ごとに何回配列に出てきたかカウントしたいです。

python
fruits = ["りんご", "ばなな", "みか...]]></summary>
        <author>
            <name>ろん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[音楽をメルスペクトログラム+UMAP + G-meansでクラスタリングしてみた]]></title>
        <id>https://zenn.dev/migawari1253/articles/e6f7df001a355c</id>
        <link href="https://zenn.dev/migawari1253/articles/e6f7df001a355c"/>
        <updated>2024-01-23T00:07:26.000Z</updated>
        <summary type="html"><![CDATA[TL;DR

音楽をメルスペクトログラムで画像化
メルスペクトログラムをUMAPで次元削減 + G-meansによるクラスタリングし、似ている音楽ごとを教師なしでグループ分け


 動機
今回の検討の発端は、趣味でやっているDTMの悩み事です。DTMとはDesktop Top Musicの略で、パソコンを使った音楽制作のことです。正直下手の横好きなのですが、オリジナルの曲を自作できるのは魅力的です。
さて、DTMをやっていると「サンプルパック」というものをよく使います。サンプルパックとは、オーディオファイル(.wav等)がたくさん入っているパッケージのようなものです。例えば、以下のよ...]]></summary>
        <author>
            <name>あいうえおかきくけこ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Streamlitの開発コンテナテンプレートを作りました]]></title>
        <id>https://zenn.dev/0msys/articles/3524948d15c8d5</id>
        <link href="https://zenn.dev/0msys/articles/3524948d15c8d5"/>
        <updated>2024-01-22T16:56:59.000Z</updated>
        <summary type="html"><![CDATA[はじめに
最近自分がドはまりしているStreamlitを開発するための、テンプレートリポジトリを作りました。
開発コンテナを使っているので、ローカル環境を汚さずに色々なアプリをスクラップ＆ビルドできます。
https://github.com/0msys/streamlit-template-devcontainer

 リポジトリの使い方

テンプレートリポジトリになっているので、Use this templateボタンから、自分のリポジトリを作成してください。
以降の使い方についてはREADME.mdに書いてありますので、ここでは割愛します。
わからないことがあれば、コメント欄に...]]></summary>
        <author>
            <name>0msys</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonコンテナで非rootユーザーを使おうとしてハマった話]]></title>
        <id>https://zenn.dev/0msys/articles/3395011fb5c987</id>
        <link href="https://zenn.dev/0msys/articles/3395011fb5c987"/>
        <updated>2024-01-22T16:56:58.000Z</updated>
        <summary type="html"><![CDATA[背景
こちらの記事で紹介したStreamlitの開発コンテナテンプレートを作るときに、
コンテナ内のユーザーを非rootにするために、DockerFile作成でかなりハマったので、その内容をまとめました。

 結論
上記の記事で紹介したリポジトリのDockerFileが結論ですが、
コンテナ内のユーザーを非rootにする場合、

作成したユーザーのディレクトリでPATHを通す

pip installの際に--userオプションをつける

の2点を行う必要があるようです。
https://github.com/0msys/streamlit-template-devcontainer...]]></summary>
        <author>
            <name>0msys</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[負荷テストツールlocustを試してみた]]></title>
        <id>https://zenn.dev/hgmdev/articles/202401152155</id>
        <link href="https://zenn.dev/hgmdev/articles/202401152155"/>
        <updated>2024-01-22T05:41:10.000Z</updated>
        <summary type="html"><![CDATA[保育ICTを愛するみなさまこんにちは、H.G.M Developers S.K です。

 はじめに
負荷テストを行うことになり、その事前調査として負荷テストツールの locust を使ってみました。
locust はテストスクリプトを Python で書けるため、普段 Python を書き慣れている人間には取っ付きやすかったので、サクッと試してみました！

 開発環境

MacBook Pro M1
VS Code


 ライブラリ

Python 3.10
pipenv 2022.9.24
locust 2.19.1


 環境構築
pipenv で仮想環境を作成します。
$ pip...]]></summary>
        <author>
            <name>H.G.M Developers🛠️</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[M1 MacでPython NLTKライブラリのImportErrorを解決する]]></title>
        <id>https://zenn.dev/kubomi/articles/311856ee3f7daa</id>
        <link href="https://zenn.dev/kubomi/articles/311856ee3f7daa"/>
        <updated>2024-01-22T00:54:58.000Z</updated>
        <summary type="html"><![CDATA[はじめに
先日、M1 MacでPythonのNLTKライブラリ（Natural Language Toolkit）を使用しようとした際に、予期せぬImportErrorに直面しました。これは、異なるアーキテクチャ間での互換性の問題でした。
この記事では、問題の原因、解決策、そしてこの経験から得た教訓を共有します。

 問題の原因
エラーは次のようなものでした。

ImportError: dlopen(...): tried: ... (mach-o file, but is an incompatible architecture (have 'x86_64', need 'arm...]]></summary>
        <author>
            <name>kubomi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[『Django + Docker 』でデータ分析の環境構築をしてみた！]]></title>
        <id>https://zenn.dev/tekuteku_1104/articles/4c244c6d7159ee</id>
        <link href="https://zenn.dev/tekuteku_1104/articles/4c244c6d7159ee"/>
        <updated>2024-01-22T00:46:17.000Z</updated>
        <summary type="html"><![CDATA[はじめに
最近エンジニア向けの転職サイトを見ていると『データサイエンティスト募集』の文言をよく見かけるようになりました。データサイエンティストというと回帰分析や分類問題・統計学などいろいろと難しいそうな業務に取り組んでるイメージがあるかと思います。今回はそんな難しそうな業務は一旦置いといて、その前段階としてとりあえずデータ分析をできる環境を作ってみよう！ってことでやっていきましょう。

 開発環境

docker for windows
FW : Django
DB : MySQL


 ディレクトリ・ファイル構成

bash
PS C:\MyLocalRepository\djan...]]></summary>
        <author>
            <name>らっしー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Snowflakeのワーカーノードがサイレント大幅アップグレードされてた！]]></title>
        <id>https://zenn.dev/dataheroes/articles/34416dfb611347</id>
        <link href="https://zenn.dev/dataheroes/articles/34416dfb611347"/>
        <updated>2024-01-21T22:15:00.000Z</updated>
        <summary type="html"><![CDATA[Snowflakeのワーカーノードのスペック調べてみた。
ローカルディスク容量が倍に、CPUアーキテクチャがx86_64からaarch64になってた。
いつのまにかスペックが上がってました。

 現在のワーカーノードのスペック
2024年１月現在は、以下のようなマシンでクエリが実行される。
１ノードあたり



パラメータ
値




インスタンスタイプ
C6g.2xlarge


プラットフォーム
Elastic Kubernetes Service


オペレーティングシステム
Amazon Linux 2（Linux Kernel 5.4.181）


CPU コア

8コア/ノー...]]></summary>
        <author>
            <name>Kentaro Maeda</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Colab]Colab上でFastAPIのサーバーを立てる]]></title>
        <id>https://zenn.dev/kotopasi/articles/91bb0feeab9bbc</id>
        <link href="https://zenn.dev/kotopasi/articles/91bb0feeab9bbc"/>
        <updated>2024-01-21T15:46:44.000Z</updated>
        <summary type="html"><![CDATA[はじめに
ngrokを使ってColab上からFastAPIサーバーを立てる備忘録です

 目標

ColabでFastAPIのエンドポイントを作る
ngrokでサーバーを外部に公開する


 手順
!pip install -q fastapi nest-asyncio uvicorn pyngrok 

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import nest_asyncio
from pyngrok import ngrok
import uvicorn

...]]></summary>
        <author>
            <name>あまたつ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PySide6 002]]></title>
        <id>https://zenn.dev/m10k1/articles/0c549c887968b4</id>
        <link href="https://zenn.dev/m10k1/articles/0c549c887968b4"/>
        <updated>2024-01-21T13:33:43.000Z</updated>
        <summary type="html"><![CDATA[MainWindowをカスタマイズ
もうちょっと実用的なアプリケーションとして画像ビューワーを作ってみましょう

ImageViewer_001.py
import sys
from PySide6.QtWidgets import QApplication, QMainWindow

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Hello World")
        self.setGeometry(1...]]></summary>
        <author>
            <name>m10k1</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub GraphQL APIで指定したユーザーがスポンサーかどうかを確認する]]></title>
        <id>https://zenn.dev/laiso/articles/20cfffcc111f07</id>
        <link href="https://zenn.dev/laiso/articles/20cfffcc111f07"/>
        <updated>2024-01-21T13:29:34.000Z</updated>
        <author>
            <name>laiso</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[日経先物分析その4...開けた窓はいつ埋めるのか]]></title>
        <id>https://zenn.dev/daidai_daitai/articles/a69287f10c3304</id>
        <link href="https://zenn.dev/daidai_daitai/articles/a69287f10c3304"/>
        <updated>2024-01-21T12:25:58.000Z</updated>
        <summary type="html"><![CDATA[はじめに
ニュースなどを聞いていると
「日経平均株価は窓を開けて続伸し...」
などと言っているのを耳にします。そもそも窓とは何なのでしょうか。
窓とは前日始値から終値の範囲外から（あるいは高安値）翌日の取引が始まった場合の隙間の事を指しているようです。

「開けた窓はいずれ閉める」などの言葉を見る事もありますが、本当に窓を閉めるのでしょうか。
日経平均株価を検証しても使えないので、今回は日経先物miniのデータを使用し、Session別に価格を集計、窓を埋めるまでの時間を計測してみます。
!
この記事中で使用される価格データが、必ずしも正しいものではないかもしれません。気になった方...]]></summary>
        <author>
            <name>橙。</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PySide6 入門 001]]></title>
        <id>https://zenn.dev/m10k1/articles/fbb33e79661050</id>
        <link href="https://zenn.dev/m10k1/articles/fbb33e79661050"/>
        <updated>2024-01-21T10:07:50.000Z</updated>
        <summary type="html"><![CDATA[PySide6を使ってアプリケーションが作れる漢に俺はなる！

 はじめに

 PySide6とは
PySideって何？っていう方に説明をするとPySideはQtと呼ばれるマルチプラットフォームGUI開発フレームワークです。Qt自体は、C++言語で記述されています。Pythonにはバインディングと言ってC/C++で書かれたコード呼び出すことができる機能があるので、Qtのバインディングとして開発されたのがPySideというわけです。これにより、PythonでもマルチプラットフォームなGUIアプリケーションを作成できるようになるわけです。

 主な特徴
クロスプラットフォーム対応： PySi...]]></summary>
        <author>
            <name>m10k1</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【順次追加】AWS Lambda, FastAPI, DynamoDB で作るサーバーレスAPI]]></title>
        <id>https://zenn.dev/hayata_yamamoto/books/26f109546a5159</id>
        <link href="https://zenn.dev/hayata_yamamoto/books/26f109546a5159"/>
        <updated>2024-01-21T08:30:22.000Z</updated>
        <summary type="html"><![CDATA[本書は、 AWS Lambda, DynamoDB を用いて、FastAPI (Python) で簡単なサーバーサイドを開発・デプロイするまでの流れと手順を共有するものです。
※なお、内容は順次公開および追加され、読者の皆様からのご意見を反映しながら完成を目指します

フィードバックがある方に関しては、以下よりお気軽に投稿お願いします
https://zenn.dev/hayata_yamamoto/scraps/b6e35ec688323a]]></summary>
        <author>
            <name>山本隼汰 | Hayata Yamamoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[LLaVA-JPをColaboratoryでお試し。]]></title>
        <id>https://zenn.dev/kazuhito/articles/da87c94004e1f4</id>
        <link href="https://zenn.dev/kazuhito/articles/da87c94004e1f4"/>
        <updated>2024-01-21T01:48:58.000Z</updated>
        <summary type="html"><![CDATA[LLaVA-JP
LLaVA-JPは日本語VLMです👀
https://github.com/tosiyuki/LLaVA-JP
LLaVA-JPの詳細は、作者の@toshi_456様がQiitaにまとめられています。
https://qiita.com/toshi_456/items/248005a842725f9406e3

 Colaboratoryノートブック
お試しに使用したノートブックは以下です👀
Colaboratoryで上から順に実行したら動くと思います。
GPUでの実行を推奨しますが、CPUでも動作します。
（CPU実行は生成される文章の長さによっては相当な時間がか...]]></summary>
        <author>
            <name>kazuhito</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonで3D画像の最大輝度投影 (Max Intensity Projection)を行う]]></title>
        <id>https://zenn.dev/apo_zenn/articles/5e08aca8f385a4</id>
        <link href="https://zenn.dev/apo_zenn/articles/5e08aca8f385a4"/>
        <updated>2024-01-21T00:43:53.000Z</updated>
        <summary type="html"><![CDATA[手順

画像読み込み
z方向に足し合わせ
書き出し


 コード
3D画像(tiff形式など)の読み込みはskimageが便利です．pipで簡単にインストールできます．
書き出しも簡単です．

test.py
from skimage import io
import numpy as np

image = io.imread("test.tif") #画像読み込み
image = np.sum(image, axis=0)# Max Projection
io.imsave("Max Projection.tif", image)# 画像書き出し

z方向への足し合わせはnump...]]></summary>
        <author>
            <name>apo_zenn</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Azure Batch で物体検出モデル (YOLOv8) を動かしてみる]]></title>
        <id>https://zenn.dev/microsoft/articles/20240119_azure_batch</id>
        <link href="https://zenn.dev/microsoft/articles/20240119_azure_batch"/>
        <updated>2024-01-20T12:46:19.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Azure Batch は、Azure 上で大規模な並列処理を行うためのサービスです。
Azure Batch を利用することで、コンピューティングノード（仮想マシン）での処理を自動的にスケジュールしたり、タスクの実行状況を監視したりできます。
ただ、Azure Batch に関する日本語の情報はあまり多くないため、なかなか手を出しにくいという方も多いのではないでしょうか。
今回は、Azure Batch を利用して物体検出モデル (YOLOv8) を動かしてみたので、その手順を共有したいと思います。
https://learn.microsoft.com/ja-jp/az...]]></summary>
        <author>
            <name>kazuyan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[シャドーなるものを見たことがある]]></title>
        <id>https://zenn.dev/joo_hashi/articles/8c30ef3781ff8c</id>
        <link href="https://zenn.dev/joo_hashi/articles/8c30ef3781ff8c"/>
        <updated>2024-01-20T12:14:06.000Z</updated>
        <summary type="html"><![CDATA[🌓ユングの心理学で考えられたものらしい?
検索してたら、YUMEMIさんのサイトに辿り着いた?
https://notion.yumemi.co.jp/シャドーについて
なんかまた技術の話からズレたネタと思われそうですが後でします笑

 シャドーなるものはどうやってできるのか?
昔から色々な人を見てきたけど、外食産業で働いていたときもITの仕事についてもそれぽい人を見たことがある。

 🌔特徴はどんな感じか?
わかりやすいサイトから引用した文章だとこんな感じ:

一方で、小さい頃から「だらしない自分、弱い自分、頼りない自分」というものを自分が否定しながら生きてきた場合に、その否定して...]]></summary>
        <author>
            <name>JboyHashimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[git-lfsを使わずにhugging faceのレポジトリをダウンロードする]]></title>
        <id>https://zenn.dev/khun_aa/articles/6a9277e18a667a</id>
        <link href="https://zenn.dev/khun_aa/articles/6a9277e18a667a"/>
        <updated>2024-01-20T10:56:22.000Z</updated>
        <summary type="html"><![CDATA[経緯

クラウド上の計算機サーバで機械学習モデルをhugging faceからダウンロードしようとした。
公式ではgit-lfsを使うように書いてあったが、リモート環境でsudoが使えなかったためインストールできない。
そこでpythonのhuggingface_hubを使ってダウンロードした。


 方法

以下のコードをpythonで実行

import huggingface_hub
 
model_id = "stabilityai/stable-diffusion-2-1-base"  # レポジトリ名
local_dir = "models"  # 保存先フォルダ名
hu...]]></summary>
        <author>
            <name>Takuto Onikubo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Goで最低限必要な文法たち]]></title>
        <id>https://zenn.dev/ahoxa/articles/534768300cda5c</id>
        <link href="https://zenn.dev/ahoxa/articles/534768300cda5c"/>
        <updated>2024-01-19T16:55:16.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは！当記事をご覧くださりありがとうございます！
この記事はProgateで学んだGoの知識をアウトプットする場としてまとめたものです。
PythonやRubyなど比較的簡単な言語の基礎知識を学んでいることを前提とし、比較演算子や文字の連結、四則演算などについては概ねどの言語でも同じなので省略しています。
また、筆者がPython畑出身ですのでPythonから見たGoの感想をところどころ述べています。
指摘などございましたら是非コメントお願いいたします。
では、始めていきましょう！！

 Hello,Worldからif,elseまで
ここではほかの言語でも共通である文...]]></summary>
        <author>
            <name>Ahoxa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[フラッシュメッセージを実装してみる]]></title>
        <id>https://zenn.dev/nihiru/articles/1589cf2706313c</id>
        <link href="https://zenn.dev/nihiru/articles/1589cf2706313c"/>
        <updated>2024-01-19T02:41:09.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Djangoでレシピの投稿サイトを開発していて、ユーザーが操作した後に操作結果を通知したいと思いました。
そこでDjangoで標準提供されているフラッシュメッセージを使って実装したので、備忘録としてまとめておきます。

 Viewでメッセージフレームワークを読み込む
まずは、通知させたい画面のViewファイルでメッセージフレームワークを読み込みます。
from django.contrib import messages
messagesをimportすることで、メッセージフレームワークを使用できます。
このメッセージフレームワークはsettings.pyに初めから追加され...]]></summary>
        <author>
            <name>Nihiru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Chat GPT APIにてJSONで結果を取得する方法]]></title>
        <id>https://zenn.dev/hashito/articles/d315135388fd66</id>
        <link href="https://zenn.dev/hashito/articles/d315135388fd66"/>
        <updated>2024-01-19T00:33:13.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Chat GPTは結構なんでも出来るのですが、結果をいくつかに分けて]]></summary>
        <author>
            <name>hashito</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[listとarrayの違い]]></title>
        <id>https://zenn.dev/aay/articles/96a5f0dab25d0b</id>
        <link href="https://zenn.dev/aay/articles/96a5f0dab25d0b"/>
        <updated>2024-01-18T11:28:10.000Z</updated>
        <summary type="html"><![CDATA[はじめに
機械学習を学習していると、データ処理のフェーズにおいてlistとarrayの扱いに躓いた。そこで、本記事ではlistとarrayの特徴をまとめ、それぞれの違いとlist->array、array->listの変換についてもまとめていこうと思う。

 list
Pythonの標準のリスト。

 リスト内の要素は型の違うデータを混在することができる。
a = [1, 2, 3, 4, 5]
b = [1, 3.141592, 'apple']

print(a) # [1, 2, 3, 4, 5]
print(b) # [1, 3.141592, 'apple']
...]]></summary>
        <author>
            <name>ayaka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Slackボット① エコーボット]]></title>
        <id>https://zenn.dev/hatemoto/articles/c3fae865e257ab</id>
        <link href="https://zenn.dev/hatemoto/articles/c3fae865e257ab"/>
        <updated>2024-01-18T09:03:33.000Z</updated>
        <summary type="html"><![CDATA[はじめに
エコーボットの作成
環境構築

 開発環境

WSL(Ubuntu)
Python 3.10.12


 トークンの設定
AppトークンとBotトークンは，ボットの設定をしている時にメモしたものを使用する．
APP_TOKEN = "xapp-x-xxxxxxxxxx-xxxxxxxxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxxxxxxx"
BOT_TOKEN = "xoxb-xxxxxxxxxxxxxxx-xxxxxxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxx"

 イベントが発生したときに受け取る情報
イベントが発生したときにサーバーか...]]></summary>
        <author>
            <name>hatemoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Slackボット ⓪ 環境構築]]></title>
        <id>https://zenn.dev/hatemoto/articles/ce321ede465877</id>
        <link href="https://zenn.dev/hatemoto/articles/ce321ede465877"/>
        <updated>2024-01-18T08:26:12.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Slackボットを作成するための環境構築．

 開発環境

WSL
Python 3.10.12


 Slackボットの設定

 ボットの作成

Slackを開く
ボットを追加したいワークスペースを開く
「設定と管理」 > 「アプリを管理する」
右上の「ビルド」
「Create New App」 > 「From scratch」を選択


「App Name」にアプリの名前，「Pick a workspace to develop your app in:」からボットを追加したいワークスペースを選択し，「Create App」をクリック




 スコープの設...]]></summary>
        <author>
            <name>hatemoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Snowflake] SELECT LENGTH('🙆‍♀️')= 4 ←???]]></title>
        <id>https://zenn.dev/dataheroes/articles/0f04ead21013a3</id>
        <link href="https://zenn.dev/dataheroes/articles/0f04ead21013a3"/>
        <updated>2024-01-18T08:21:26.000Z</updated>
        <summary type="html"><![CDATA[問題
LENGTH関数は一部の絵文字や外国語(書記素クラスタ)を正しくカウントできない。

絵文字だけならともかく、フランス語や韓国語などのメジャーな言語でも問題は発生する。

 解決策
正確性が必要な場合、PythonなどのUDFでカウントする必要がある。
以下のように正しく文字列をカウントするUDFを作る。
CREATE OR REPLACE FUNCTION COUNT_GC(s varchar)
returns number
language python
runtime_version = 3.11
packages = ('pyicu')
handler = 'count...]]></summary>
        <author>
            <name>Kentaro Maeda</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonでWin32 API ①（ウィンドウの作成）]]></title>
        <id>https://zenn.dev/hatemoto/articles/09dd1a87ff4aa0</id>
        <link href="https://zenn.dev/hatemoto/articles/09dd1a87ff4aa0"/>
        <updated>2024-01-18T03:34:10.000Z</updated>
        <summary type="html"><![CDATA[はじめに
PythonでWin32 APIを扱う．
基本的はウィンドウの作成を行う．

 開発環境

Windows10 Home
PyCharm
Python3.11


 定数の定義

 win_const.py
WHITE_BRUSH = 0
BLACK_BRUSH = 2

CS_HREDRAW = 0x0002
CS_VREDRAW = 0x0001

CW_USEDEFAULT = 0x80000000

IDC_ARROW = 32512

WS_OVERLAPPEDWINDOW = 0x00CF0000

WM_DESTROY = 0x0002

SW_SHOWDEF...]]></summary>
        <author>
            <name>hatemoto</name>
        </author>
    </entry>
</feed>