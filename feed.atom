<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://s-i27.github.io/Rssfeed/index.html</id>
    <title>osmos::feed</title>
    <updated>2023-08-14T01:11:20.643Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="https://s-i27.github.io/Rssfeed/index.html"/>
    <link rel="self" href="https://s-i27.github.io/Rssfeed/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[[完成!]RaspberryPiでLINEから「ただいま」と送れば、マンションのオートロックを開けてくれるシステムを作った]]></title>
        <id>https://zenn.dev/yukitezuka/articles/c0672fa54cda4d</id>
        <link href="https://zenn.dev/yukitezuka/articles/c0672fa54cda4d"/>
        <updated>2023-08-14T01:00:05.000Z</updated>
        <summary type="html"><![CDATA[はじめに
僕が住んでるマンションには、共用エントランスに、鍵をさして開くタイプのオートロックがついていて、これが結構面倒です。
オートロックのイメージこんな感じ↓　自分の部屋番号を呼び出して部屋から解錠ボタンを押すか、エントランスに鍵をさすことで、開く感じです。

図1: オートロックのイメージ図
疲れて帰宅した中、毎回カバンの中から鍵を探したくないし、さらに、鍵を家に忘れてしまった場合は、近所さんがいないと開けてもらえないので、かなり困ります。(2、3回あった。)
ということで、RaspberryPiの勉強も兼ねて、LINEから「ただいま」と送れば「おかえり!」と返してくれて、マン...]]></summary>
        <author>
            <name>手塚裕貴</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ABCIの大規模言語モデル分散学習ハッカソンを振り返る]]></title>
        <id>https://zenn.dev/ohtaman/articles/abci-hackerthon</id>
        <link href="https://zenn.dev/ohtaman/articles/abci-hackerthon"/>
        <updated>2023-08-14T00:10:05.000Z</updated>
        <summary type="html"><![CDATA[７月6日〜14日の9日間、ABCIの主催で 第1回大規模言語モデル分散学習ハッカソン が開催されました。自分はいいだしっぺ 兼 チューターとして参加したのですが、今回のイベントは個人的な学びも多かったし、なにより楽しかったので、忘れないうちに振り返っておこうと思います。

いいだしっぺというのは、3月に上記の tweet をしたら NVIDIA の @sfuruyaz さんが拾って諸々進めてくれた、という話です。自分はイベント内容の案をだしたり、技術検証やサンプルプログラムを作成したりしました。

 イベント概要
イベント概要は以下の通りです


期間: 2023/07/06 - 202...]]></summary>
        <author>
            <name>ohtaman</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[APIを使ってChatGPTと会話してみよう！]]></title>
        <id>https://zenn.dev/tsuzukia/articles/df414098fcd5bd</id>
        <link href="https://zenn.dev/tsuzukia/articles/df414098fcd5bd"/>
        <updated>2023-08-13T17:22:30.000Z</updated>
        <summary type="html"><![CDATA[皆さん、ChatGPTを使っていますか？
ChatGPTはPCのブラウザ、スマホのアプリから使用することが出来ますが、APIを使ってもChatGPTを使用することが出来るんです！

 APIとは？
APIとは、Application Programming Interfaceの略称です。あるプログラムが他のプログラムの特定の部分を利用するための「手引き」のようなものです。
OpenAIのAPIを使うと、自分のウェブサイトやアプリにChatGPTの機能を追加できます。今回はVisual Studio CodeでChatGPTを実行してみましょう！

 OpenAIのAPI keyについて
...]]></summary>
        <author>
            <name>TAKEZO</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[MacのローカルでComfyUIを使ってみた(StableDffusion)]]></title>
        <id>https://zenn.dev/michy/articles/19699637f8cb16</id>
        <link href="https://zenn.dev/michy/articles/19699637f8cb16"/>
        <updated>2023-08-13T15:59:20.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事は個人的なメモを兼ねたM1/M2 Mac上でComfyUIを使う環境構築方法をまとめた記事です。
ComflyUIは以下のものを使います。
https://github.com/comfyanonymous/ComfyUI#manual-install-windows-linux

 環境構築

 venvの環境構築
python -m venv venv

 仮想環境のアクティベート
. ./venv/bin/activate

 pipの最新化
pip install --upgrade pip

 pytorchの開発版インストール
pip install -...]]></summary>
        <author>
            <name>zaiwa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python でイテラブルとイテレータの使い分け]]></title>
        <id>https://zenn.dev/shizukakokoro/articles/d634f8ddad833c</id>
        <link href="https://zenn.dev/shizukakokoro/articles/d634f8ddad833c"/>
        <updated>2023-08-13T10:59:35.000Z</updated>
        <summary type="html"><![CDATA[Python には イテラブル と イテレータ という概念があります。
この二つの概念は、その違いが書かれた記事が多くありますが、その使い分けについてはあまり書かれていないです。
そこで、この記事では「どういう時にイテラブルを使い、どういう時にイテレータを使うのか」について書いていきます。
本題は ここから です。

 イテラブルとイテレータの違い
イテラブルとイテレータの違いについては、以下の記事が詳しいです。

この記事内で、イテラブルとイテレータの違いについては以下のように書かれています。

イテラブルとは、for文で要素を1つずつ取り出せるような反復可能なオブジェクトのことを言い...]]></summary>
        <author>
            <name>静心</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Code Interpreter で自動運転レースのデータ解析をしてみた (2)]]></title>
        <id>https://zenn.dev/danchinocto/articles/code-interpreter-for-data-analysis-2</id>
        <link href="https://zenn.dev/danchinocto/articles/code-interpreter-for-data-analysis-2"/>
        <updated>2023-08-13T09:46:46.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Virtual Motorsport Lab Inc. (VML) でプロダクト開発をしている @danchinocto です。この記事は、第2回 Generative AI 勉強会 関西での発表内容をまとめ直したものです。前回の記事はこちら。
https://zenn.dev/danchinocto/articles/code-interpreter-for-data-analysis-1

 自動運転レースのデータ解析

 概要
今回は、Code Interpreter プラグインを使って自動運転レースの走行ログを解析しました。 ChatGPT への指示にはできるだけ自...]]></summary>
        <author>
            <name>団地のCTO</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのコーディング規約を調査しました]]></title>
        <id>https://zenn.dev/yamaden/articles/9469cbe0bca86e</id>
        <link href="https://zenn.dev/yamaden/articles/9469cbe0bca86e"/>
        <updated>2023-08-12T14:59:36.000Z</updated>
        <summary type="html"><![CDATA[各言語には必ずある「コーディング規約」ですが、Python にはどの様なものがあるのでしょうか。
Python のコーディング規約として「PEP 8」があります。
これを全て読み解くのは大変なので基本的なことだけをピックアップします。

 始めに総論

インデントは 4 スペースを利用する
関数の引数が複数ある場合は統一された方法で折り返す

関数の開きカッコに揃える
関数の 1 行目に引数を書き、その位置に 2 行目以降を合わせる
1 行目には引数を置かず、追加のインデントを含める


波括弧/ブラケット/括弧の位置は統一された方法でおく

リストの最後の要素が置かれた行の、はじめの文...]]></summary>
        <author>
            <name>naoki matsuzaki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonのLinterとFormatter設定]]></title>
        <id>https://zenn.dev/yamaden/articles/23d3805fc85d99</id>
        <link href="https://zenn.dev/yamaden/articles/23d3805fc85d99"/>
        <updated>2023-08-12T14:59:35.000Z</updated>
        <summary type="html"><![CDATA[Python の Linter や Formatter といってもさまざまな種類があります。
今回は、Linter に「flake8」、Formatter に「black」を VSCode で利用するための設定方法をまとめました。
その前に、その他パッケージについても簡単にですがまとめておきます。

 Linter

 pycodestyle
pycodestyle は、Python のコードが PEP8 に準拠しているかをチェックするための linter です。以前は pep8 という名前でしたが、文書の方の PEP8 と名前が同じでややこしいので、pycodestyle という名前に...]]></summary>
        <author>
            <name>naoki matsuzaki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VS CodeでAWS SAMのローカルデバッグをやってみる]]></title>
        <id>https://zenn.dev/danishi/articles/aws-sam-local-debug</id>
        <link href="https://zenn.dev/danishi/articles/aws-sam-local-debug"/>
        <updated>2023-08-12T14:28:03.000Z</updated>
        <summary type="html"><![CDATA[準備
既にAWS SAMアプリがある場合は不要ですが、ない場合はまずは事前準備。

 適当なAWS SAMアプリを用意する
こちらのHello Worldアプリを作りましょう（デプロイは必要ありません）。
https://docs.aws.amazon.com/ja_jp/serverless-application-model/latest/developerguide/serverless-getting-started-hello-world.html
手順に従ってsam initが終わったら、ターミナルで以下を実行。
sam local start-api
別のターミナルから...]]></summary>
        <author>
            <name>danishi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Albumentations で XYZ軸回転のデータ拡張をするメモ]]></title>
        <id>https://zenn.dev/kazuhito/articles/404bad30fbbf73</id>
        <link href="https://zenn.dev/kazuhito/articles/404bad30fbbf73"/>
        <updated>2023-08-12T09:23:02.000Z</updated>
        <summary type="html"><![CDATA[Albumentations で XYZ軸回転のデータ拡張をするメモです🦔
と言っても、Albumentations.Lambda()と自作のcv_rotate_3dを組み合わせただけの覚書です。
Google Colaboratory で動くサンプルノートブックを用意しているので、興味がある方は動かしてみてください。

以下、使い方メモ👀
サンプル画像は、ぱくたそ様の食後のケーキを利用しています。

 cv_rotate_3dスクリプトダウンロード
!wget https://raw.githubusercontent.com/Kazuhito00/cv_rotate_3d/main/...]]></summary>
        <author>
            <name>kazuhito</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS SAMで構築したLambdaをDynamoDB Localに接続する]]></title>
        <id>https://zenn.dev/k1e1n04/articles/597c564c58af44</id>
        <link href="https://zenn.dev/k1e1n04/articles/597c564c58af44"/>
        <updated>2023-08-12T07:18:50.000Z</updated>
        <summary type="html"><![CDATA[はじめに
ローカルのDynamoDBとAWS SAMで構築したLambdaを接続するのに少し苦戦したので、メモを残します。

 前提

Dockerがインストールされている
AWS CLIがインストールされている
LambdaのRuntimeはPython3.9
AWS SAM CLIがインストールされている
SAMによるプロジェクトは作成済
venvでもanacondaでも良いが環境構築をし、boto3とulid-pyがインストールされていること


 実装

 テンプレート
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS...]]></summary>
        <author>
            <name>Ken</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【情報符号理論】Pythonで実装して理解する情報源、符号化、通信路、誤り訂正【実装】]]></title>
        <id>https://zenn.dev/mirrorrabbit/articles/e9d9c07e35bb20</id>
        <link href="https://zenn.dev/mirrorrabbit/articles/e9d9c07e35bb20"/>
        <updated>2023-08-12T07:13:04.000Z</updated>
        <summary type="html"><![CDATA[概要
情報学の一分野である情報符号理論に登場する「情報源」「符号化」「通信路」「誤り訂正」について、それに相当するクラスを実際にPythonで実装することで理解を深めることを目的とした記事です。
情報源の定義など、情報符号理論の基礎的な内容について詳しく説明することはしませんので予めご了承ください。

 想定する読者像

計算機科学を学習している人
Pythonにある程度慣れている人


 前提する知識

情報符号理論の基礎的な理解
Pythonの初級的な内容（クラスの継承等まで）


 この記事の内容

情報符号理論の各種内容（ハフマン符号化、加法的通信路、ハミング符号等）をシミュ...]]></summary>
        <author>
            <name>mira</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-282｜B - Let's Get a Perfect Score]]></title>
        <id>https://zenn.dev/hyperdb/articles/8d0d9e8035461e</id>
        <link href="https://zenn.dev/hyperdb/articles/8d0d9e8035461e"/>
        <updated>2023-08-12T03:54:23.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-282 B - Let's Get a Perfect Score



 提出結果
def getIntMap():
    return map(int, input().split())


def getStringListRow(N):
    return [list(input()) for _ in range(N)]


def chk(a1, a2):
    r = True
    for i in range(len(a1)):
        if a1[i] == 'x' and a2[i] == 'x':
           ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-282｜A - Generalized ABC]]></title>
        <id>https://zenn.dev/hyperdb/articles/3892c3b453b3f9</id>
        <link href="https://zenn.dev/hyperdb/articles/3892c3b453b3f9"/>
        <updated>2023-08-12T03:54:22.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-282 A - Generalized ABC



 提出結果
def getInt():
    return int(input())


def main():
    n = getInt()
    a = ord('A')

    s = ''
    for i in range(n):
        s += chr(a + i)
    print(s)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Python] GIFを合成する方法]]></title>
        <id>https://zenn.dev/techstart/articles/059616f6272696</id>
        <link href="https://zenn.dev/techstart/articles/059616f6272696"/>
        <updated>2023-08-12T01:35:54.000Z</updated>
        <summary type="html"><![CDATA[複数のGIFを組み合わせて1つのGIFにする方法をメモとしてまとめておきます。
きっかけはNFTで、GIFのジェネラティブ画像を大量に作成する方法を模索していたことでした。

 前提
私はPythonは全く書いたことがありませんが、調べたところライブラリも充実しているようだったので、見よう見まねでコードを書きました。
最初はGoで挑戦していましたが、ライブラリも十分になく、コードもかなり複雑になってきた上に完成したGIFのチラつきがすごく、満足したものが出せなかったためPythonを選びました。
※Goの書き方、ライブラリを知っている人は教えてください。

 ディレクトリ構成


 実装...]]></summary>
        <author>
            <name>Totsumaru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】欠落番号]]></title>
        <id>https://zenn.dev/takuh/articles/fc6377950117ca</id>
        <link href="https://zenn.dev/takuh/articles/fc6377950117ca"/>
        <updated>2023-08-11T23:48:53.000Z</updated>
        <summary type="html"><![CDATA[作るもの
与えられた整数リスト nums から欠けている整数を見つける関数。

 実装

missing_numbers.py
def missingNumbers(nums):
    # 正の無限大の値を2つリストに追加しておくことで、ループ処理を簡略化する
    nums += [float("inf"), float("inf")]

    # 数値を変換して欠けている整数の位置を示す
    for index in range(len(nums) - 2):
        visited_index = abs(nums[index]) - 1  # 数値の絶対値か...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Alexaスキル用のチャットボットを8秒以内に応答させたい]]></title>
        <id>https://zenn.dev/sikkim/articles/a3f6633428998e</id>
        <link href="https://zenn.dev/sikkim/articles/a3f6633428998e"/>
        <updated>2023-08-11T23:20:40.000Z</updated>
        <summary type="html"><![CDATA[はじめに
ChatGPTと会話できるAlexaスキルを作って遊んでいるのですが、ときどき「スキルがリクエストに正しく応答できませんでした」と言われて止まってしまうことがあります。

これは、Alexaスキルの仕様で、8秒以内に応答しないとエラーになってしまうためです。応答に時間がかかるのは、OpenAIのAPIが原因です。どうにかしたいと思っていたのですが、ひとつ解決方法を思いついたので紹介します。

 解決方法の概要
OpenAIのCreate chat completion API（いわゆるChatGPTのAPI）にはstreamというオプションがあります。これをtrueにすると...]]></summary>
        <author>
            <name>TAKAHASHI Taro</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Snowflakeアプリ開発環境をDockerで構築]]></title>
        <id>https://zenn.dev/al_everywhere/articles/snowflake-app-with-docker</id>
        <link href="https://zenn.dev/al_everywhere/articles/snowflake-app-with-docker"/>
        <updated>2023-08-11T19:50:25.000Z</updated>
        <summary type="html"><![CDATA[概要
この記事は、ローカルの環境を汚さずにSnowflake上のデータや大規模言語モデル(LLM)を活用したアプリ開発を行えるよう、Streamlit+Snowpark+LangChainといったPythonのライブラリを活用できる環境を、Dockerで構築することを目的に書いています。
私のGitHub上でもコードなど公開していますので、良ければ参照やgit cloneしてください。
あくまでも目的は開発環境構築ですが、後半では動作確認のためのこれらのライブラリを用いた単純なアプリについても紹介します。

アプリの外観

 前提条件
構築する上での条件は下記の通りです。

Dock...]]></summary>
        <author>
            <name>almost_everywhere</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonでPDFをバイナリーで結合する方法]]></title>
        <id>https://zenn.dev/torachi0401/articles/combine_pdf_binary</id>
        <link href="https://zenn.dev/torachi0401/articles/combine_pdf_binary"/>
        <updated>2023-08-11T15:34:24.000Z</updated>
        <summary type="html"><![CDATA[Pythonでバイナリー形式のPDFファイルとローカルのPDFファイルを結合する方法
画像やテキストなどの情報を含むPDFファイルは、重要な文書を扱う際に広く使用されます。特定の状況では、WebからAPI等でダウンロードしたバイナリー形式のPDFファイルとローカルにあるPDFファイルを結合させる必要が生じることがあります。この記事では、PythonのPyPDF2とbase64モジュールを使用して、バイナリー形式のPDFファイルとローカルのPDFファイルを効果的に結合する方法を詳しく解説します。

 コードの意味と使い方
以下のコードは、ダウンロードしたバイナリー形式のPDFファイルと...]]></summary>
        <author>
            <name>Torachi0401</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonでファイルをbase64で開く]]></title>
        <id>https://zenn.dev/torachi0401/articles/howto_encode_base64</id>
        <link href="https://zenn.dev/torachi0401/articles/howto_encode_base64"/>
        <updated>2023-08-11T15:34:05.000Z</updated>
        <summary type="html"><![CDATA[PythonでファイルをBase64エンコードする方法
ファイルのデータをエンコードする際に、Base64はよく使用されるエンコーディングの一つです。Base64エンコードはバイナリデータをASCIIテキストに変換する方法で、データをテキスト形式で扱えるようにするための手段です。Pythonのbase64モジュールを使用して、ファイルをBase64エンコードする方法を解説します。

 Base64エンコードとは？
Base64エンコードは、8ビットバイナリデータをASCII文字列に変換する手法です。バイナリデータは、文字コードによって扱いにくいことがありますが、Base64エンコード...]]></summary>
        <author>
            <name>Torachi0401</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonで画像処理する際のエッジ検出]]></title>
        <id>https://zenn.dev/torachi0401/articles/howto_python_canny</id>
        <link href="https://zenn.dev/torachi0401/articles/howto_python_canny"/>
        <updated>2023-08-11T15:33:49.000Z</updated>
        <summary type="html"><![CDATA[画像のエッジ検出を簡単に行う方法：Cannyアルゴリズムとは？
画像処理をする際に、エッジ検出は重要なタスクの一つです。エッジは画像内の物体の境界を表し、それを検出することで物体の形状や位置を特定することができます。PythonのOpenCVとNumPyライブラリを使用して、画像のエッジ検出を簡単に行う方法をご紹介します。この記事では、以下のコードを通じてその詳細を解説します。
import numpy as np
import cv2

med_val = np.median(img_blur)
sigma = 0.33  # 0.33
min_val = int(max(0, (...]]></summary>
        <author>
            <name>Torachi0401</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonでPDFファイルを画像に変換する方法]]></title>
        <id>https://zenn.dev/torachi0401/articles/change_pdf_to_image</id>
        <link href="https://zenn.dev/torachi0401/articles/change_pdf_to_image"/>
        <updated>2023-08-11T15:32:59.000Z</updated>
        <summary type="html"><![CDATA[PythonでPDFファイルを画像に変換する方法
PDFファイルを画像ファイルに変換することは、文書を共有する際やウェブ上で表示する際に便利な手法です。Pythonのpdf2imageモジュールを使用して、PDFファイルを画像に変換する方法を解説します。さらに、変換時に使用するツールpopplerを環境変数に追加する手順も詳しく説明します。

 コードの意味と使い方
以下のコードは、PDFファイルを画像に変換する方法を示しています。
import os
from pathlib import Path
from pdf2image import convert_from_path

...]]></summary>
        <author>
            <name>Torachi0401</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python[pyinstaller]で実行ファイル（exe）の作成]]></title>
        <id>https://zenn.dev/torachi0401/articles/howto_pyinstaller</id>
        <link href="https://zenn.dev/torachi0401/articles/howto_pyinstaller"/>
        <updated>2023-08-11T15:08:27.000Z</updated>
        <summary type="html"><![CDATA[PyInstallerを使ってPythonアプリを独立した実行ファイルにしよう！
Pythonで素晴らしいアプリを作成したら、他の人にも使ってもらいたいと思いませんか？そんなときに便利なのが「PyInstaller」です。このツールを使えば、Pythonスクリプトを独立した実行ファイルに変換することができます。この記事では、PyInstallerの基本的な使い方から応用まで、詳細に解説します。

 PyInstallerとは？
PyInstallerは、Pythonスクリプトをコンパイルされた実行ファイルに変換するツールです。これによって、Pythonのインタプリタが不要な状態でアプ...]]></summary>
        <author>
            <name>Torachi0401</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python[PySimpleGui]でUI画面を作成する]]></title>
        <id>https://zenn.dev/torachi0401/articles/howto_pysimplegui</id>
        <link href="https://zenn.dev/torachi0401/articles/howto_pysimplegui"/>
        <updated>2023-08-11T15:02:26.000Z</updated>
        <summary type="html"><![CDATA[PySimpleGUIを使ってPython GUIアプリを簡単に作成しよう！
Pythonを使ってGUIアプリケーションを作成すると聞いて、難しそうだし大変そう…と思ったことはありませんか？しかし、そんな不安を解消するのが「PySimpleGUI」です。この素晴らしいライブラリを使えば、誰でも簡単にPython GUIアプリを作成することができます。この記事では、PySimpleGUIの基本的な使い方と共に、実際のコード例を通じてその魅力をご紹介します。

 PySimpleGUIって何？
PySimpleGUIは、PythonでGUIアプリケーションを作成するためのライブラリです。...]]></summary>
        <author>
            <name>Torachi0401</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】レーベンシュタイン距離]]></title>
        <id>https://zenn.dev/takuh/articles/a1dc69c9a2ad8c</id>
        <link href="https://zenn.dev/takuh/articles/a1dc69c9a2ad8c"/>
        <updated>2023-08-11T13:44:16.000Z</updated>
        <summary type="html"><![CDATA[作るもの
2つの文字列間のLevenshtein距離を計算するアルゴリズム。

 補足

レーベンシュタイン距離とは？
2つの文字列間の類似度や差異を測る指標

例）
元の文字列: "kitten"
目標文字列: "sitting"
この場合、元の文字列を目標文字列に変換するためには次の操作が必要。
"k" を "s" に置換
"e" を "i" に置換
"n" を "t" に置換
合計で3回の置換操作が必要。したがって、この2つの文字列間のLevenshtein距離は3となる。

 実装

levenshtein_distance.py
def levenshteinDistanc...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonからGoへ：参照渡しと値渡しを整理してスムーズな移行をする]]></title>
        <id>https://zenn.dev/shibata/articles/67a25654171980</id>
        <link href="https://zenn.dev/shibata/articles/67a25654171980"/>
        <updated>2023-08-11T08:18:42.000Z</updated>
        <summary type="html"><![CDATA[背景
いざGoを書くにあたり参照渡しと値渡しが曖昧だったので再整理しました。

 本文
例えば、次のGoのコードを見てみましょう。
showName 関数の引数は①user Userとするのか、それとも②user *Userとするのか、どちらが適切なのでしょうか？
package main

import (
    "fmt"
)

type User struct {
    Name string
    Age  int
}

func showName(user *User) {
    fmt.Println(user.Name)
}

func main() {
   ...]]></summary>
        <author>
            <name>Shibata</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】逆ポーランド記法]]></title>
        <id>https://zenn.dev/takuh/articles/15ee93dfd0771c</id>
        <link href="https://zenn.dev/takuh/articles/15ee93dfd0771c"/>
        <updated>2023-08-11T07:52:59.000Z</updated>
        <summary type="html"><![CDATA[作るもの
逆ポーランド記法（Reverse Polish Notation、RPN）を使用して表現された数式を計算する関数。
中置記法で表現された式「3 + 4」を逆ポーランド記法に変換すると「3 4 +」となる。この式をRPNで解釈すると、最初に「3」と「4」をスタックに積み、次に「+」演算子が来たときにスタックから2つの数値を取り出して演算し、計算結果をスタックに戻すという手順が続く。

 実装

rpn.py
def evaluate_rpn(expression):
    stack = []  # 演算対象の数値や中間結果を保持するスタック

    # RPN式の各トー...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python(pytest)でテスト書くならfixture,conftest,parametrizeを理解すると世界が一気に変わる]]></title>
        <id>https://zenn.dev/tk_resilie/articles/python_test_template</id>
        <link href="https://zenn.dev/tk_resilie/articles/python_test_template"/>
        <updated>2023-08-11T06:53:06.000Z</updated>
        <summary type="html"><![CDATA[概要
Pythonのテストライブラリといえばpytestが一般的です。
Python標準のuniitestとは異なり、クラスベースではなく関数ベースでテストコードを記述することが一般的ですが、fixture,conftest,parametrizeを理解すると一気に世界が変わり、テスト体験が圧倒的に向上するため、これらの実装方法を紹介します。

 リポジトリ
本記事の説明に使用しているサンプルのテスト実装は、以下のリポジトリです。
https://github.com/takashi-yoneya/python-test-template

 想定読者
PythonやGitの基本的な...]]></summary>
        <author>
            <name>米谷 昂(Python/FastAPIプロフェッショナル)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】パターンマッチャー]]></title>
        <id>https://zenn.dev/takuh/articles/d49963a0ffa5fd</id>
        <link href="https://zenn.dev/takuh/articles/d49963a0ffa5fd"/>
        <updated>2023-08-11T06:37:58.000Z</updated>
        <summary type="html"><![CDATA[作るもの
与えられたパターンに対して、文字列内の部分文字列の組み合わせを探し、一致する場合にその組み合わせを返す関数。

 実装

pattern_matcher.py
def patternMatcher(pattern, string):
    # パターンが空または文字列よりも長い場合は、マッチング不可能なので空のリストを返す
    if len(pattern) == 0 or len(pattern) > len(string):
        return []

    # パターンの最初の文字を取得
    firstLetterA = pattern[0...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[StreamlitでChatGPTアプリを作成しよう!]]></title>
        <id>https://zenn.dev/tsuzukia/articles/bc0564a7a7f427</id>
        <link href="https://zenn.dev/tsuzukia/articles/bc0564a7a7f427"/>
        <updated>2023-08-11T05:20:41.000Z</updated>
        <summary type="html"><![CDATA[StreamlitでChatGPTアプリが作れちゃうんです。
しかもstreaming機能ありで結構本家に近いですよ！


 Streamlitとは？
Streamlitは、PythonでWebアプリケーションを素早く作成するためのオープンソースライブラリです。データ分析、可視化、機械学習モデルのデモなどに特に適しており、コーディングの専門知識がなくても使いやすいツールです。
https://streamlit.io/

 ChatGPTとは？
ChatGPTについてはご存じですよね？ChatGPTはOpenAIによって開発された自然言語処理のモデルで、人間のような文章の生成が可能です。...]]></summary>
        <author>
            <name>TAKEZO</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【2023年度最新版】Twitter API 取得方法]]></title>
        <id>https://zenn.dev/eito_blog/articles/a982fdb073493a</id>
        <link href="https://zenn.dev/eito_blog/articles/a982fdb073493a"/>
        <updated>2023-08-11T05:04:04.000Z</updated>
        <summary type="html"><![CDATA[Twitter APIを利用することでツイート処理を自動化することができます。
本記事ではTwitter APIの取得方法について解説していきます。
※電話番号、メールアドレスが登録されているTwitterアカウントを所持していることが前提となります。

 Twitter Developersにアクセス
以下のURLにアクセスします。Twitterアカウントのログインが求められることもあるのでその際はログインをします。
https://developer.twitter.com/en/apps

 Create an appをクリック
その後Create an appをクリックします。...]]></summary>
        <author>
            <name>エイト</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】カレンダーマッチング]]></title>
        <id>https://zenn.dev/takuh/articles/4b591ffb605b9f</id>
        <link href="https://zenn.dev/takuh/articles/4b591ffb605b9f"/>
        <updated>2023-08-11T04:18:51.000Z</updated>
        <summary type="html"><![CDATA[作るもの
2人のカレンダースケジュールを比較し、共通の空き時間（会議を開催できる時間帯）を見つけるための関数。

 実装

calendar_matching_py
# ２つのカレンダーのスケジュールを比較し、共通の空き時間を見つける関数
def calendarMatching(calendar1, dailyBounds1, calendar2, dailyBounds2, meetingDuration):
    # 両カレンダーの営業開始と終了の最大・最小時間を取得
    earlyBound = max(timeToMinutes(dailyBounds1[0]), t...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】ナップサック問題]]></title>
        <id>https://zenn.dev/takuh/articles/7f58d455ca30ce</id>
        <link href="https://zenn.dev/takuh/articles/7f58d455ca30ce"/>
        <updated>2023-08-11T00:30:36.000Z</updated>
        <summary type="html"><![CDATA[作るもの
再帰を使用してナップサック問題を解決する関数。内部関数 dfs は、現在のアイテムを選ぶか選ばないかを選択肢としながら、可能な組み合わせを試すことで最適解を探索する。関数 knapsackProblem は、最初に dfs を初期値で呼び出してナップサック問題を解決し、最終的な結果を返す。
※ ナップサック問題（Knapsack Problem）とは？
最適化問題の一つであり、与えられた一定の容量を持つナップサック（背負い袋）に、異なるアイテムの集合を入れていくことで、アイテムの価値の合計を最大化する問題。

 実装

knapsack_problem.py
from ty...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】４つの数の合計]]></title>
        <id>https://zenn.dev/takuh/articles/322bad420fee69</id>
        <link href="https://zenn.dev/takuh/articles/322bad420fee69"/>
        <updated>2023-08-11T00:01:07.000Z</updated>
        <summary type="html"><![CDATA[作るもの
与えられた配列から4つの要素の組み合わせを選び、その合計が目標値と一致するものを見つけてリストで返す関数。

 実装

four_number_sum.py
def fourNumberSum(array, targetSum):
    result = []  # 合計が目標値と一致する組み合わせを格納するリスト
    array.sort()  # 配列をソートして順序を整える
    for i in range(len(array) - 3):  # 4つの要素の組み合わせを探すため、最後から4番目の要素までループ
        for j in range(...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】単調配列]]></title>
        <id>https://zenn.dev/takuh/articles/41f16414a3c64e</id>
        <link href="https://zenn.dev/takuh/articles/41f16414a3c64e"/>
        <updated>2023-08-10T23:10:26.000Z</updated>
        <summary type="html"><![CDATA[作るもの
与えられた配列が単調な増加または単調な減少を持つかどうかを判定するための関数。

 実装

main.py
def isMonotonic(array):
    c = True  # 単調増加を示すフラグ
    d = True  # 単調減少を示すフラグ
    for i in range(len(array) - 1):
        # 配列内の要素を順番に比較し、単調増加かどうかを判定
        c = c and array[i] <= array[i + 1]
        # 配列内の要素を順番に比較し、単調減少かどうかを判定
    ...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Qiskit で遊んでみる (17) — Quantum Machine Learning その 3]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-qiskit17</id>
        <link href="https://zenn.dev/derwind/articles/dwd-qiskit17"/>
        <updated>2023-08-10T18:15:05.000Z</updated>
        <summary type="html"><![CDATA[目的
Qiskit で遊んでみる (15) — Quantum Machine Learning の内容を GPU シミュレーションで行いたい。そのために、今回は cuQuantum で遊んでみる (5) — VQE その 2 で触れた cuQuantum (cuTensorNet) を活用したい。

 ナイーブな実装
Qiskit で遊んでみる (15) — Quantum Machine Learning での実装において、期待値計算を以下のようにすればいけるのだが、これがとてつもなく思い。期待計算と勾配計算のための QuantumCircuit をばらばらに構築するコストや、C...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【DRF】drf-writable-nestedはvalidated_dataの値を参照しない]]></title>
        <id>https://zenn.dev/takapy11820/articles/3b307a5fc93f5b</id>
        <link href="https://zenn.dev/takapy11820/articles/3b307a5fc93f5b"/>
        <updated>2023-08-10T15:16:20.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Django REST frameworkで、リレーションされたデータを生成しようと考えた時、公式ドキュメントには
https://www.django-rest-framework.org/api-guide/relations/#writable-nested-serializers
と示されています。ふむ。
また、他の選択肢としては以下のサードパーティライブラリがあります
https://github.com/beda-software/drf-writable-nested
前者・後者ともやりたいことは実現できる為、drf-writable-nestedを採用した結...]]></summary>
        <author>
            <name>takapp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】特定の要素をリストの末尾に移動する関数]]></title>
        <id>https://zenn.dev/takuh/articles/c5933b9f577ba4</id>
        <link href="https://zenn.dev/takuh/articles/c5933b9f577ba4"/>
        <updated>2023-08-10T14:09:14.000Z</updated>
        <summary type="html"><![CDATA[作るもの
与えられたリスト（array）内の特定の要素（toMove）をリストの末尾に移動する関数。

 実装

main.py
def moveElementToEnd(array, toMove):
    # 一時的なインデックスを初期化
    tmp = 0

    # リスト内の各要素に対してループ処理を開始
    for i in range(len(array)):
        # 現在の要素が移動させたい要素でない場合
        if array[i] != toMove:
            # 現在の要素と一時的な位置にある要素を入れ替え
  ...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】最小の差]]></title>
        <id>https://zenn.dev/takuh/articles/9221b331aa2c34</id>
        <link href="https://zenn.dev/takuh/articles/9221b331aa2c34"/>
        <updated>2023-08-10T08:59:18.000Z</updated>
        <summary type="html"><![CDATA[実装概要
2つの整数配列 arrayOne と arrayTwo が与えられたときに、それらの配列間で最も差が小さい要素のペアを見つけるための関数。

 実装

smallest_difference.py
def smallestDifference(arrayOne, arrayTwo):
    # 与えられた2つの配列を昇順にソート
    arrayOne.sort()
    arrayTwo.sort()
    
    # 初期値を設定
    smallest, pair = float("inf"), []  # 最小の差と対応するペアを初期化
    oneI...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonによるデータ可視化_ヒストグラムと箱ひげ図を同時に出力]]></title>
        <id>https://zenn.dev/keitakahata/articles/75451ae92ccc10</id>
        <link href="https://zenn.dev/keitakahata/articles/75451ae92ccc10"/>
        <updated>2023-08-10T08:58:47.000Z</updated>
        <summary type="html"><![CDATA[経緯
データ分析を行うためにまずはデータを可視化することが多いと思います。
何らかのcsvファイルが与えられた時、dataframeで読み込んだ後、ヒストグラムと箱ひげ図を出力するコードをまとめました。
また可視化を行う過程で外れ値が含まれていることもあると思います。外れ値を除去する場合にも対応できるようにしています。今回は四分位範囲による外れ値検出を行うコードを記載しておきます。
今後も私がデータ可視化のために便利だと思った機能があれば順次追加していきます。

 必要なライブラリ
import pandas as pd
import matplotlib.pyplot as plt...]]></summary>
        <author>
            <name>KeiTAKAHATA</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SlackとChatGPT APIでチャットボットを作る パート3（function calling編）]]></title>
        <id>https://zenn.dev/techflagcorp/articles/fbd9ea60dc2e36</id>
        <link href="https://zenn.dev/techflagcorp/articles/fbd9ea60dc2e36"/>
        <updated>2023-08-10T05:53:27.000Z</updated>
        <summary type="html"><![CDATA[SlackとChatGPT APIでチャットボットを作る パート3（function calling編）
パート1（基礎編）、パート2（会話履歴管理編）と来て、パート3はやっとfunction calling編です。

 function callingとは
function callingでは、ChatGPTが回答作成のために使用することができる「関数」をあらかじめ用意し、質問などとともにこの関数の仕様を含んだメッセージをChatGPTに送ります。そうするとChatGPTは関数を使用したい場合は使用したい関数の名前とその関数に与える引数をメッセージとして返してきます。これを受け取っ...]]></summary>
        <author>
            <name>dagger1</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac上で.HEIC画像を.JPGに変換し、容量を下げる方法]]></title>
        <id>https://zenn.dev/efficientyk/articles/21b51a14ddc8dc</id>
        <link href="https://zenn.dev/efficientyk/articles/21b51a14ddc8dc"/>
        <updated>2023-08-10T05:18:48.000Z</updated>
        <summary type="html"><![CDATA[Terminalでコマンドを実行する方法と、Pythonを実行する方法の2つをご紹介します。

 コマンドラインツールを使用する方法:
例えば、700KB前後に変換したいとします。

 1. まず、imagemagickをインストールします。これにはHomebrewが必要です。
brew install imagemagick

 2. 以下のコマンドを使用して.HEICファイルを.JPGに変換し、サイズを変更します。
for file in *.HEIC; do magick "$file" -quality 70 -define jpeg:extent=700KB "${file%....]]></summary>
        <author>
            <name>YK</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Plotlyで出力したSVGの読み書きをするTips]]></title>
        <id>https://zenn.dev/nowa0402/articles/985da2f250ae1b</id>
        <link href="https://zenn.dev/nowa0402/articles/985da2f250ae1b"/>
        <updated>2023-08-09T23:40:16.000Z</updated>
        <summary type="html"><![CDATA[SVG 出力したグラフから凡例を切り取りたい…
前回の記事でデータ個数によるグラフの違いを解説しました。
今回はSVG出力された画像から凡例とグラフを分けるTipsを紹介します。
SVGの操作はPython標準搭載のxmlライブラリを使用しました。
https://docs.python.org/ja/3/library/xml.etree.elementtree.html

 前段: 前回出力したグラフ
今回は以下コード（前回記事）で出力した画像を基に分割作業を行います。
import numpy as np
import plotly.graph_objects as go
im...]]></summary>
        <author>
            <name>nowa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】行列の転置]]></title>
        <id>https://zenn.dev/takuh/articles/5b8ea4aab9bc95</id>
        <link href="https://zenn.dev/takuh/articles/5b8ea4aab9bc95"/>
        <updated>2023-08-09T21:56:16.000Z</updated>
        <summary type="html"><![CDATA[作るもの
行列を転置する関数。

 実装

transpose_matrix.py
def transposeMatrix(matrix):
    return list(zip(*matrix))

# テスト
if __name__ == "__main__":
    matrix = [[1, 2, 3], [4, 5, 6]]
    print(transposeMatrix(matrix))


出力
[(1, 4), (2, 5), (3, 6)]


 補足

zip関数の使用例


zip.py
names = ['Alice', 'Bob', 'Charlie...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Docker】Docker DeskTopのインストール]]></title>
        <id>https://zenn.dev/aew2sbee/articles/docker-desktop-install</id>
        <link href="https://zenn.dev/aew2sbee/articles/docker-desktop-install"/>
        <updated>2023-08-09T12:06:40.000Z</updated>
        <summary type="html"><![CDATA[はじめに
社内の有志メンバーの向けにDocker DeskTopのインストールの方法を解説します。

 Docker DeskTopのインストール

 1. インストーラーのダウンロード
下記URLをクリックし、Docker Desktopのインストーラーをダウンロードします。



 2. インストール開始
デフォルトのままのチェック状態でOKをクリックしてください。

インストールに少し時間がかかります。


 3. PCの再起動
!
Close and restartをクリックすると、 PCが再起動します。注意してください！
※WSL2を有効化する為に、PCの再起動が必要です。...]]></summary>
        <author>
            <name>ふるた なおき🥝</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-281｜A - Count Down]]></title>
        <id>https://zenn.dev/hyperdb/articles/dec79f345830b2</id>
        <link href="https://zenn.dev/hyperdb/articles/dec79f345830b2"/>
        <updated>2023-08-09T10:50:43.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-281 A - Count Down



 提出結果
def getInt():
    return int(input())


def main():
    n = getInt()

    while n >= 0:
        print(n)
        n -= 1


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-281｜B - Sandwich Number]]></title>
        <id>https://zenn.dev/hyperdb/articles/30543d974f34dc</id>
        <link href="https://zenn.dev/hyperdb/articles/30543d974f34dc"/>
        <updated>2023-08-09T10:50:43.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-281 B - Sandwich Number



 提出結果
def getString():
    return input()


def main():
    s = getString()

    r = True
    if not ('A' <= s[0] <= 'Z'):
        r = False
    elif not ('A' <= s[-1] <= 'Z'):
        r = False
    elif not s[1:-1].isdigit():
        r = False...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker buildでError: Can't Find Rust Compilerに困ったら]]></title>
        <id>https://zenn.dev/analog_technica/articles/cc5ba8535052de</id>
        <link href="https://zenn.dev/analog_technica/articles/cc5ba8535052de"/>
        <updated>2023-08-09T07:41:09.000Z</updated>
        <summary type="html"><![CDATA[結論

Dockerfile
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/root/.cargo/bin:$PATH"


 背景
深層学習モデルを含むアプリケーションを作るため、DockerにTransformersをインストールしようとしたところ↓のエラーでハマりました。
Error: Can't Find Rust Compiler
Transformersと依存関係のあるSafetensorsというライブラリのインストールにRustのコンパイラが必...]]></summary>
        <author>
            <name>analog_technica</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】構築不可能なお金]]></title>
        <id>https://zenn.dev/takuh/articles/6d12ec6a82db7f</id>
        <link href="https://zenn.dev/takuh/articles/6d12ec6a82db7f"/>
        <updated>2023-08-09T03:27:45.000Z</updated>
        <summary type="html"><![CDATA[作るもの
与えられた整数のリスト（コインの額面）を使用して作成できない最小のお金の額を計算する関数。

 実装
def nonConstructibleChange(coins):
    # コインの額面を昇順にソートする
    coins.sort()

    # コインを使って作成できる最小のお金の額を表す変数を初期化
    minimum_change = 0

    # ソートされたコインのリストを順に走査
    for coin in coins:
        # 現在のコインの額面が、最小のお金の額に1を加えたものよりも大きい場合、ループを終了
     ...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++とPythonでオンラインランキングシステムを一から作る]]></title>
        <id>https://zenn.dev/kd_gamegikenblg/articles/bf7c2af3a395d2</id>
        <link href="https://zenn.dev/kd_gamegikenblg/articles/bf7c2af3a395d2"/>
        <updated>2023-08-09T03:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
昨今のゲームはMobile/Pc/etc...とPlatform関わらず、オンラインユーザーデータ/ランキング/リアルタイム対戦/etc...と何らかの方法でネットワークにアクセスしています。今や繋がっていることが当たり前になっていますが、いざゲーム制作に実装しようとなった際にどう実装したら良いか分からない人も多いと思います。最近は情報も増えてきており、UnityやUnrealEngineならNetcode for GameObjectsやMultiplayerが公式からリリースされており、公式リファレンスやプロダクトで使った実例の技術ブログ等日本語でもかなりの量の情報があ...]]></summary>
        <author>
            <name>shirokuma1101</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【FDO43】【会話文章生成 その2】発言生成機能のプロンプトについて]]></title>
        <id>https://zenn.dev/esm/articles/7ad6983e5893c2</id>
        <link href="https://zenn.dev/esm/articles/7ad6983e5893c2"/>
        <updated>2023-08-09T01:00:00.000Z</updated>
        <summary type="html"><![CDATA[この記事は「おしゃべりクマちゃん🧸」シリーズの記事になります。インデックスはコチラ。前回の記事はコチラ。
発言生成機能を作成するにあたって、ChatGPTのAPIに与えるプロンプトを作成した時の話について、紹介します😀

 プロンプトエンジニアリングとは
ChatGPTのAPIは、プロンプトと呼ばれる指示を文章で与えてやることで、その文章の内容に応じた振る舞いを行います。プロンプトは日本語や英語などの自然言語を用いて、通常の文章として記述します。ChatGPTはプロンプトを受け取り、その内容に応じた振る舞いを行い、回答を生成します。
前回の記事の話の繰り返しになりますが、例えばプロンプト...]]></summary>
        <author>
            <name>sfjwr</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[equestsでダウロードしたファイルの中身がHTMLコードになっている]]></title>
        <id>https://zenn.dev/bern/articles/c2c44d111dcdef</id>
        <link href="https://zenn.dev/bern/articles/c2c44d111dcdef"/>
        <updated>2023-08-08T23:22:25.000Z</updated>
        <summary type="html"><![CDATA[pythonのrequetsを使ってWebサイト上の添付ファイルをダウンロードしようとしたときにつまづいたところを解決できたので備忘録として残します。

 発生した現象
ログインが必要なページ内の添付ファイルをダウンロードする時、request.getでダウンロードしようとしたところ、ダウンロードしたファイルの中身がHTMLのソースコードでした。
import requests

url = "https://example.com/download"
params = {
    'fileName': 'ファイル.pdf',
}
username = "your_username"
...]]></summary>
        <author>
            <name>ベルン</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VSCodeでpython venv仮想環境を構築する]]></title>
        <id>https://zenn.dev/bern/articles/438d22de55c0dd</id>
        <link href="https://zenn.dev/bern/articles/438d22de55c0dd"/>
        <updated>2023-08-08T22:32:52.000Z</updated>
        <summary type="html"><![CDATA[pythonでプログラムを作るたび、最初にする作業なので一連の作業をまとめます。

 実行環境

Windows10 (mac osでも動いた)
VSCode


 venv仮想環境の構築


venvをインストール
下記コマンドをVSCodeのターミナルにコピーペーストして実行します。
py37envが仮想環境名です。
名前は好きなもので大丈夫ですが、後からどんな仮想環境なのかわかるような名前にするとわかりやすいです。
py -3.7 -m venv py37env



venv起動コマンド
仮想環境名＋\Scripts\activate.batで起動できます。
前回のvenvインス...]]></summary>
        <author>
            <name>ベルン</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonでGithubにプッシュする方法]]></title>
        <id>https://zenn.dev/bern/articles/b6f4f2a592a500</id>
        <link href="https://zenn.dev/bern/articles/b6f4f2a592a500"/>
        <updated>2023-08-08T22:23:31.000Z</updated>
        <summary type="html"><![CDATA[指定のGitHubリポジトリにPythonを用いて画像を自動的にアップロードする方法について記述します。
PythonのモジュールであるPyGithubを使用することで、大量の画像などのファイルをループ処理しながらリポジトリにアップロードするところまでの手順を備忘録として残します。

 実行環境

Windows10
VSCode
venv仮想環境
python7


 Pygithubをインストール
python仮想環境に入って以下のコードをターミナルで実行します。
pip install PyGithub

 Githubにプッシュする時のコード
import os
import b...]]></summary>
        <author>
            <name>ベルン</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[streamlitのst.writeで改行する場合は半角スペースが2個必要]]></title>
        <id>https://zenn.dev/allforbigfire/articles/7e47b4daf7d943</id>
        <link href="https://zenn.dev/allforbigfire/articles/7e47b4daf7d943"/>
        <updated>2023-08-08T16:18:58.000Z</updated>
        <summary type="html"><![CDATA[バックスラッシュ（\）とnの前に、半角スペースが2個ないと改行できませんでした。

    # APIからのレスポンスを出力
    st.write('OpenAI ChatGPT(gpt-3.5-turbo)  \n' + response['choices'][0]['message']['content'])
    # st.write('OpenAI ChatGPT(gpt-3.5-turbo) \n' + response['choices'][0]['message']['content'])]]></summary>
        <author>
            <name>allforbigfire</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python でリストの中身を一時的に置き換える]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-tmp-list-replacer</id>
        <link href="https://zenn.dev/derwind/articles/dwd-tmp-list-replacer"/>
        <updated>2023-08-08T15:54:42.000Z</updated>
        <summary type="html"><![CDATA[目的
ふと Python の list で中身を一時的に置き換えながらループを回したいという謎めいたことがしたくなって、試したらできたので備忘録を残す。

 実装
contextlib --- with 文コンテキスト用ユーティリティ を参考に、例えば以下のようになりそうである。一時的に 1 個だけ要素を置換することもできるし、複数置換することもできる。
from __future__ import annotations
import contextlib
from typing import Any
from collections.abc import Sequence


@...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】３つの数字の合計]]></title>
        <id>https://zenn.dev/takuh/articles/838be0faff33a5</id>
        <link href="https://zenn.dev/takuh/articles/838be0faff33a5"/>
        <updated>2023-08-08T11:07:32.000Z</updated>
        <summary type="html"><![CDATA[作る関数
与えられた整数の配列から、3つの数の組み合わせを見つけて返す関数。
→ その3つの数の合計が目標の合計値（targetSum）と一致する組み合わせを出力する。

 実装

three_sum.py
def threeNumberSum(array, targetSum):
    # まず、入力された配列を昇順にソートする。
    array.sort()
    # 返すべき結果を保存する空のリストを作成する。
    res = []

    # 配列の各要素を順番に見ていく。
    for i in range(len(array)):
        # 与え...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】Python3.10.11をインストールする]]></title>
        <id>https://zenn.dev/aew2sbee/articles/python-3-10-11-install</id>
        <link href="https://zenn.dev/aew2sbee/articles/python-3-10-11-install"/>
        <updated>2023-08-08T10:35:22.000Z</updated>
        <summary type="html"><![CDATA[はじめに
社内の有志メンバーでdjango rest frameworkを利用すること決まりました。
Python3.10.11をインストールする方法を解説します。
!
※Python3.10.11を選んだ理由は、
2023/08月時点でsecurityかつEnd of supportが長いものを選択しました。



 1. インストーラーをダウンロードする
下記インストーラーのURLをクリックする
※勝手にダウンロードされます
Python3.10.11インストーラー

 2. ダウンロードされたインストーラーを実行する
python-3.10.11-amd64.exeをダブルクリ...]]></summary>
        <author>
            <name>ふるた なおき🥝</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-280｜A - Pawn on a Grid]]></title>
        <id>https://zenn.dev/hyperdb/articles/fa31d212f0a19e</id>
        <link href="https://zenn.dev/hyperdb/articles/fa31d212f0a19e"/>
        <updated>2023-08-08T04:21:14.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-280 A - Pawn on a Grid



 提出結果
def getIntMap():
    return map(int, input().split())


def getStringRow(N):
    return [input() for _ in range(N)]


def main():
    h, w = getIntMap()
    s = getStringRow(h)

    c = 0
    for r in s:
        c += r.count('#')
    print(c)


if __n...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-280｜B - Inverse Prefix Sum]]></title>
        <id>https://zenn.dev/hyperdb/articles/a55b4a9963160a</id>
        <link href="https://zenn.dev/hyperdb/articles/a55b4a9963160a"/>
        <updated>2023-08-08T04:21:13.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-280 B - Inverse Prefix Sum



 提出結果
def getInt():
    return int(input())


def getIntList():
    return list(map(int, input().split()))


def main():
    n = getInt()
    s = getIntList()
    a = []

    for i in range(len(s)):
        if i == 0:
            x = s[i]
        else:
...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Fast API+Cloud run+FirestoreでSlackアプリを作る【OauthテーブルもNoSQLを使用】]]></title>
        <id>https://zenn.dev/straydog/articles/cf3d039a100d3d</id>
        <link href="https://zenn.dev/straydog/articles/cf3d039a100d3d"/>
        <updated>2023-08-08T03:15:58.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事は、FastAPI+Cloud Run+Firestore で Slack アプリを作る際の備忘録のようなものです。
全てを話すと長くなるので、一応適当に作成したリポジトリを用意しました。

他の人の記事でも、firestore を使用しているものはありますが、Oauth テーブルも NoSQL で実装しているものをスニペット付きで記述ある人が見つからなかったので、ないならと思い。そんなにテストしてないので、参考程度にしてもらえればと思います。一応 ouath による他ワークスペースへのインストールも可能です。
なぜこの構成にしてるかというと、以下のような利点があり...]]></summary>
        <author>
            <name>stray dog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SlackとChatGPT APIでチャットボットを作る パート2（会話履歴管理編）]]></title>
        <id>https://zenn.dev/techflagcorp/articles/ebbec52ed11ff9</id>
        <link href="https://zenn.dev/techflagcorp/articles/ebbec52ed11ff9"/>
        <updated>2023-08-08T00:40:20.000Z</updated>
        <summary type="html"><![CDATA[SlackとChatGPT APIでチャットボットを作る パート2（ function calling編 会話履歴管理編）
パート1ではチャットボットの骨組み部分を作りました。パート2ではfunction callingを使って自分のデータベースにアクセスする機能を実装 しようと思いますが、 するつもりだったのですが、その前にまずチャットの履歴管理を強化しようとしたらそこそこ長くなったので今回は会話履歴管理編とします。

 履歴管理の強化
パート1のutilsモジュールを再掲します。

utils.py
from typing import List, Dict, Tuple, Op...]]></summary>
        <author>
            <name>dagger1</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[YouTubeを学習したChatGPTの実装方法【Python / LangChain】]]></title>
        <id>https://zenn.dev/umi_mori/articles/langchain-indexes-youtube</id>
        <link href="https://zenn.dev/umi_mori/articles/langchain-indexes-youtube"/>
        <updated>2023-08-07T23:55:31.000Z</updated>
        <summary type="html"><![CDATA[はじめまして、ますみです！

この記事では、「LangChain」というライブラリを使って、「特定のYouTube動画を学習したChatGPTの実装方法」を解説します。
ChatGPTやLangChainについてまだ詳しくない方は、こちらを先にご覧ください◎
https://zenn.dev/umi_mori/books/chatbot-chatgpt
https://zenn.dev/umi_mori/books/prompt-engineer
!
文字よりも「動画の方が理解しやすい」という方はこちらをご覧ください◎
YouTubeを学習したChatGPTの実装方法【Python / ...]]></summary>
        <author>
            <name>ますみ@エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[画像に枠線をつけてくれるWEBアプリを作る]]></title>
        <id>https://zenn.dev/not75743/articles/7074e1b4dbbcbf</id>
        <link href="https://zenn.dev/not75743/articles/7074e1b4dbbcbf"/>
        <updated>2023-08-07T14:31:52.000Z</updated>
        <summary type="html"><![CDATA[はじめに
昨日はpythonのpillowを使って画像に外枠を追加しました。
https://zenn.dev/not75743/articles/718e72a20453ff
今回はこれをWebアプリにして使いやすくしてみました。
環境はDocker(compose)、フレームワークはFlaskです。

 どんなアプリ？
このようなアクセスして枠線をつけたい画像をアップロードすると

枠線をつけたものをダウンロードすることができます。


 環境
$ cat /etc/lsb-release 
DISTRIB_ID=Ubuntu
DISTRIB_RELEASE=20.04
DIST...]]></summary>
        <author>
            <name>not75743</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】トーナメント優勝者]]></title>
        <id>https://zenn.dev/takuh/articles/d13bdf5c862680</id>
        <link href="https://zenn.dev/takuh/articles/d13bdf5c862680"/>
        <updated>2023-08-07T14:17:27.000Z</updated>
        <summary type="html"><![CDATA[作るもの
対戦カード（competitions）と結果（results）を与えて、最終的なトーナメントの勝者であるチーム名を返す関数。

 実装

tournament_winner.py
def tournamentWinner(competitions, results):
    dict = {}  # 勝利回数をカウントするための空の辞書を作成

    # 各競技の結果とその対戦を順番に処理
    for i, comp in enumerate(competitions):
        if results[i]:  # もしi番目の競技の結果がTrue（チーム1...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[並列処理による高速化の方法【ChatGPT / LangChain / Python】]]></title>
        <id>https://zenn.dev/umi_mori/articles/langchain-async-run</id>
        <link href="https://zenn.dev/umi_mori/articles/langchain-async-run"/>
        <updated>2023-08-07T11:47:12.000Z</updated>
        <summary type="html"><![CDATA[はじめまして、ますみです！

この記事では、「LangChain」というライブラリを使って、「複数のプロンプト処理を高速化する方法」を解説します。
ChatGPT APIを使ったシステムを作った時に、処理時間がかかりすぎて、高速化したい時ってありますよね。
そんな時に、LangChainのAgentとasyncioライブラリを組み合わせることで、処理を同時に実行することで高速化することができます！
ChatGPTやLangChainについてまだ詳しくない方は、こちらを先にご覧ください◎
https://zenn.dev/umi_mori/books/chatbot-chatgpt
htt...]]></summary>
        <author>
            <name>ますみ@エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ウェブページをChatGPTに学習させる方法【Python / LangChain / FAQ】]]></title>
        <id>https://zenn.dev/umi_mori/articles/langchain-indexes-webpage</id>
        <link href="https://zenn.dev/umi_mori/articles/langchain-indexes-webpage"/>
        <updated>2023-08-07T06:18:11.000Z</updated>
        <summary type="html"><![CDATA[はじめまして、ますみです！

この記事では、「LangChain」というライブラリを使って、「特定のウェブページを学習したChatGPTの実装方法」を解説します。
この記事を読むことで、企業や商品の紹介サイト、あるいはプログラミングの難解なドキュメンテーションを元にしたチャットボットの作成が可能になります。
ChatGPTやLangChainについてまだ詳しくない方は、こちらを先にご覧ください◎
https://zenn.dev/umi_mori/books/chatbot-chatgpt
https://zenn.dev/umi_mori/books/prompt-engineer
!...]]></summary>
        <author>
            <name>ますみ@エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-279｜A - wwwvvvvvv]]></title>
        <id>https://zenn.dev/hyperdb/articles/91367b290f84eb</id>
        <link href="https://zenn.dev/hyperdb/articles/91367b290f84eb"/>
        <updated>2023-08-07T03:53:07.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-279 A - wwwvvvvvv



 提出結果
def getString():
    return input()


def main():
    s = list(getString())

    print(s.count('v') + s.count('w') * 2)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-279｜B - LOOKUP]]></title>
        <id>https://zenn.dev/hyperdb/articles/31e47fc7e2f34e</id>
        <link href="https://zenn.dev/hyperdb/articles/31e47fc7e2f34e"/>
        <updated>2023-08-07T03:53:07.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-279 B - LOOKUP



 提出結果
def getString():
    return input()


def main():
    s = getString()
    t = getString()

    print('Yes' if s.find(t) >= 0 else 'No')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[備忘録] - macのVSCodeで作成したpythonのvenv環境が利用できるインタプリタ一覧に出てこなかった時の設定方法]]></title>
        <id>https://zenn.dev/kazh/articles/00003_mac_vscode_python_venv_enviroment</id>
        <link href="https://zenn.dev/kazh/articles/00003_mac_vscode_python_venv_enviroment"/>
        <updated>2023-08-06T14:37:48.000Z</updated>
        <summary type="html"><![CDATA[環境と背景
Macbook M2でHomebrewを使ってPythonをインストール。
その後、任意のフォルダにvenvで仮想環境を作成。
しかし、VSCodeのインタプリタ選択のリストに作成したvenv環境が出てこない。
このインタプリタ選択のリストに作成したvenv環境を表示させる方法をメモしておく。
※ 赤丸の場所をクリックすると、上に「インタープリターの選択」が出てくる。


 設定方法
settings.jsonファイルに以下を書き込む。
// Folders in your home directory to look into for virtual environme...]]></summary>
        <author>
            <name>日高一博</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonのPillowで画像に外枠をつける]]></title>
        <id>https://zenn.dev/not75743/articles/718e72a20453ff</id>
        <link href="https://zenn.dev/not75743/articles/718e72a20453ff"/>
        <updated>2023-08-06T13:11:36.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回はpythonのPillowで画像に外枠をつけてみました。
外枠をつければZennの添付画像がさらに見やすくなるため、ぜひともマスターしたいところです。

 方針
PillowのImageOpsモジュールを使います。
expandメソッドで画像に枠線を追加することが出来るため、今回の用途にドンピシャです。
https://pillow.readthedocs.io/en/stable/reference/ImageOps.html#PIL.ImageOps.expand

 イメージ図


 環境
Ubuntu 20.04
Python 3.11.1

 検証

 使用...]]></summary>
        <author>
            <name>not75743</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OptunaのLightGBMTunerに学ぶ、LightGBMのハイパーパラメーターのチューニング方法]]></title>
        <id>https://zenn.dev/nishimoto/articles/8d575924cc619d</id>
        <link href="https://zenn.dev/nishimoto/articles/8d575924cc619d"/>
        <updated>2023-08-06T13:11:32.000Z</updated>
        <summary type="html"><![CDATA[概要
OptunaのLightGBMTunerを読んでいたら、LightGBMTunerにハイパラチューニングのナレッジがぶっこまれていたのでシェア。
https://optuna.readthedocs.io/en/stable/_modules/optuna/integration/_lightgbm_tuner/optimize.html#LightGBMTuner


 何をチューニングすればいいの？
以下に「feature fraction, num_leaves, bagging_fraction および bagging_freq のいずれかによる変化が大きく」と記載があ...]]></summary>
        <author>
            <name>nishimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[あらゆる理論で音楽を作成・分析できるPythonライブラリ Neuma を作成する (3) - 音の調律 -]]></title>
        <id>https://zenn.dev/shizukakokoro/articles/95ee6a39f3a474</id>
        <link href="https://zenn.dev/shizukakokoro/articles/95ee6a39f3a474"/>
        <updated>2023-08-06T12:26:38.000Z</updated>
        <summary type="html"><![CDATA[今回は、Neuma の音の調律について書いていきます。
Neuma では、音の表示方法を Scale として表現していますが、同様に 音の調律もクラスとして表現 しています。
前回 ->


 音の調律
皆さんが普段使っている・聞き慣れている音は、 12平均律 という調律で調律されています。
12平均律は、 1オクターブを12等分 したものです。
1オクターブは周波数で2倍になるので、12平均律では、1オクターブを2の12乗根で割った周波数の音を1音階としています。
12平均律は非常に便利です。
なぜなら、 全ての音が等間隔 になっているからです。
全ての音が等間隔なら、カラオケで...]]></summary>
        <author>
            <name>静心</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[RetNetによる学習・評価・推論]]></title>
        <id>https://zenn.dev/selllous/articles/retnet_tutorial</id>
        <link href="https://zenn.dev/selllous/articles/retnet_tutorial"/>
        <updated>2023-08-06T08:34:18.000Z</updated>
        <summary type="html"><![CDATA[概要
Retentive Network（RetNet）はMicrosoft ResearchとTsinghua Universityが共同で発表した大規模言語モデル向けアーキテクチャであり、その学習速度の速さやメモリ効率の高さから、Transformerの後継モデルとして注目されています。
RetNetの公式ソースコードは、こちらにアップロードされています。ただし、8/6現在では、このソースコードの使用方法の記載は見当たりません。
そこで本記事では、この公式のソースコードを使用し、wiki-text103データセットをRetNetで学習・評価・推論する方法を説明します。

 検証...]]></summary>
        <author>
            <name>celery</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[LLaMa2 + PrivateGPTでローカルドキュメントを読めるオフラインチャットAIを実装]]></title>
        <id>https://zenn.dev/jamesjiang/articles/b08afed834c55f</id>
        <link href="https://zenn.dev/jamesjiang/articles/b08afed834c55f"/>
        <updated>2023-08-06T08:07:06.000Z</updated>
        <summary type="html"><![CDATA[OpenAIが開発したChatGPTは非常に高い性能を持っています。しかし、自分のドキュメントを読み込ませるためには月額20ドルの料金が必要で、プライバシーの懸念も存在します。そのため、ローカルのドキュメントを大規模な言語モデルに読ませる「PrivateGPT」と、Metaが最近公開したGPT3.5に匹敵する性能を持つと言われる「LLaMa2」を使用して、オフラインのチャットAIを実装する試みを行いました。
結果として、下の図に示すように、質問に対してローカルのドキュメントに基づく回答を参考文献とともに提供することができ、高い性能を発揮しました。

日本語訳

質問:
アメリカ合衆国大統...]]></summary>
        <author>
            <name>Jiang</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Firebase Functions で特定のコードベースの特定の関数をデプロイする]]></title>
        <id>https://zenn.dev/hr20k_/articles/5384f429633160</id>
        <link href="https://zenn.dev/hr20k_/articles/5384f429633160"/>
        <updated>2023-08-06T06:45:24.000Z</updated>
        <summary type="html"><![CDATA[結論
# firebase deplop --only functions:[codebase]:[functionName]
% firebase deplop --only functions:py:hello_world

 困っていたこと
Firebase Functions をデプロイする際､特定の関数のみデプロイしたい場合があります｡
その場合､ドキュメントに書いてあるとおり下記のコマンドでデプロイすることができます｡
# firebase deplop --only functions:[functionName]
% firebase deplop --only fu...]]></summary>
        <author>
            <name>hr20k_</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OptunaのLightGBMTunerの探索範囲を追う]]></title>
        <id>https://zenn.dev/nishimoto/articles/086508291c8a25</id>
        <link href="https://zenn.dev/nishimoto/articles/086508291c8a25"/>
        <updated>2023-08-05T23:59:25.000Z</updated>
        <summary type="html"><![CDATA[とても便利なLightGBMTunerですが、探索範囲がソースコードにしか書いてなかったのでメモ

 結論
param = {
    "lambda_l1": trial.suggest_float("lambda_l1", 1e-8, 10.0, log=True)
    "lambda_l2": trial.suggest_float("lambda_l2", 1e-8, 10.0, log=True)
    "num_leaves": trial.suggest_int("num_leaves", 2, 256)
    "feature_fraction": trial.s...]]></summary>
        <author>
            <name>nishimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[文献参照をするChatGPTの作り方【LangChain / Python】]]></title>
        <id>https://zenn.dev/umi_mori/articles/langchain-cite-source</id>
        <link href="https://zenn.dev/umi_mori/articles/langchain-cite-source"/>
        <updated>2023-08-05T22:55:40.000Z</updated>
        <summary type="html"><![CDATA[はじめまして、ますみです！

この記事では、「LangChain」というライブラリを使って、「文献参照をする方法」を解説します。
普段、ChatGPT APIを使った開発をしているときに、Bingチャットのように参照した情報元を見たい時ってありますよね。
また、ウェブ検索の参照元を知りたいだけでなく、社内ドキュメントを読み込んだシステムにおいてどのドキュメントのどの文章を参照したかを確認したい時もあるかと思います。
そんな時に役立つのが、LangChainのcreate_citation_fuzzy_match_chainです！
このChainを使うと、プロンプト内に学習させたい文章を入...]]></summary>
        <author>
            <name>ますみ@エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Qiskit で遊んでみる (16) — Quantum Machine Learning その 2]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-qiskit16</id>
        <link href="https://zenn.dev/derwind/articles/dwd-qiskit16"/>
        <updated>2023-08-05T13:39:08.000Z</updated>
        <summary type="html"><![CDATA[目的
Qiskit で遊んでみる (15) — Quantum Machine Learning では、状態ベクトルシミュレータを用いて厳密な期待値計算による、Iris データセットの分類問題を扱った。
今回は、ノイズのあるケースを扱ってみたい。但し、実機を用いると時間がかかることが予想されるので、AerEstimator にノイズモデルを設定する場合を扱う。併せてエラー緩和についても考察を行い、IBM Quantum 上で T-REx によるエラー緩和の適用を試みる。

 エラーのあるシミュレーション
VQE with Qiskit Aer Primitives の内容を利用する。...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Qiskit で遊んでみる (15) — Quantum Machine Learning]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-qiskit15</id>
        <link href="https://zenn.dev/derwind/articles/dwd-qiskit15"/>
        <updated>2023-08-05T12:00:51.000Z</updated>
        <summary type="html"><![CDATA[目的
Edward Grant et al. の Hierarchical quantum classifiers (arXiv:1804.03680) という論文があって、面白そうなので実装して試してみようという内容。
今回はその中の予備実験にあたる？ Iris データセットでの Tree TensorNetwork Classifier を試す[1]。

 概要
少々読み違えているところもあるかもしれないが、以下の設定とした。

Iris データセット (4 次元)、或は MNIST (784 次元) を量子回路に振幅エンコーディングする。MNIST の場合は次元が大きいので、主...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[openpyxlでタイトル行だけ書式を変える]]></title>
        <id>https://zenn.dev/ssfuno/articles/1e472244d72127</id>
        <link href="https://zenn.dev/ssfuno/articles/1e472244d72127"/>
        <updated>2023-08-05T09:03:30.000Z</updated>
        <summary type="html"><![CDATA[イントロダクション
PythonでExcelを扱えるopenpyxlライブラリを使用して、シートの先頭行だけ書式を変える方法を説明します。

 動作環境

Windows 11
Python 3.11.2
openpyxl 3.1.2


 コードと実行結果
from openpyxl import Workbook
from openpyxl.styles import PatternFill

wb = Workbook()
ws = wb.active

# サンプル内容の書き込み
content = [['1A', '1B', '1C'],
           ['2A',...]]></summary>
        <author>
            <name>すふー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】ソートされた二乗配列]]></title>
        <id>https://zenn.dev/takuh/articles/64772de060ea6c</id>
        <link href="https://zenn.dev/takuh/articles/64772de060ea6c"/>
        <updated>2023-08-05T00:50:48.000Z</updated>
        <summary type="html"><![CDATA[作るもの
与えられた整数の配列を二乗して、それらの値を昇順でソートした新しい配列を返す関数。

 実装

sortedSquaredArray.py
# sortedSquaredArray関数の定義。整数の配列を受け取り、二乗して昇順にソートした新しい配列を返す。
def sortedSquaredArray(array):
    # sortedSquaresという名前の新しいリストを作成し、arrayと同じ長さで0で初期化する。
    sortedSquares = [0 for _ in array]

    # arrayの要素を順番に処理するためのforループ
  ...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[「あの犬、何という犬種だったけ？」を解決してみた。]]></title>
        <id>https://zenn.dev/joel/articles/f5cfec7b8c372d</id>
        <link href="https://zenn.dev/joel/articles/f5cfec7b8c372d"/>
        <updated>2023-08-04T15:16:24.000Z</updated>
        <summary type="html"><![CDATA[Index

はじめに
本記事の概要
Dataset および実行環境
CNN の設計


入力層（データの前処理）
出力層（予測結果）
隠れ層（ネットワーク、モデル）


作成したプログラム
今後の活用
おわりに




 はじめに
「あの犬、何という犬種だったけ？」
私たちが日常生活で主にみるのは限られたいくつの犬種であるが、実際に世の中には色んな犬種が存在している。私もシーズーの飼い主だが、犬籍登録頭数 10 位であるシーズーさえも散歩中に良く犬種を聞かれる。また犬好きな私も散歩中に分からない犬種の犬によく合い、どんな犬種か質問する場合が多い。上記のことを踏まえてこの記事では Ai...]]></summary>
        <author>
            <name>Joel Lee</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[あらゆる理論で音楽を作成・分析できるPythonライブラリ Neuma を作成する (2)]]></title>
        <id>https://zenn.dev/shizukakokoro/articles/bff918dcb40a0b</id>
        <link href="https://zenn.dev/shizukakokoro/articles/bff918dcb40a0b"/>
        <updated>2023-08-04T14:39:24.000Z</updated>
        <summary type="html"><![CDATA[引き続き、Neuma の開発について書いていきます。
前回は Neuma の根幹について書きました。
今回は、Neuma の音の表示方法について書いていきます。
前回 ->


 音の表示方法が分かれている理由
そもそも、 なぜ、Note クラスに音の表示方法が含まれていないのか という疑問があると思います。
これは前回の記事を踏まえると、自ずとわかってくることではあるのですが、 Neuma は 既存の音楽理論にとらわれない 音楽ライブラリです。
そのため、基本的に「#・b」だとか「移動ド」だとか「移調」だとか、そういったものは Neuma にとって本質的な情報ではありません。
こ...]]></summary>
        <author>
            <name>静心</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Embeddable Pythonでpipを使用できるようにする]]></title>
        <id>https://zenn.dev/syache_fh/articles/af125d416ff93c</id>
        <link href="https://zenn.dev/syache_fh/articles/af125d416ff93c"/>
        <updated>2023-08-04T12:45:00.000Z</updated>
        <summary type="html"><![CDATA[Embeddable Pythonのセットアップ

 1.Embeddable Pythonの入手
Python Releases for WindowsからEmbeddable Pythonをダウンロードします。(例としてpython-3.10.11-embed-win32をダウンロードします。)

 2. ファイルの展開
任意の場所にダウンロードしてきたzipファイルを展開します。

 3. pipのインストール
展開したディレクトリ(/python-3.10.11-embed-win32)でコマンドプロンプトまたはPowerShellを開きます。
ディレクトリ内のpython3...]]></summary>
        <author>
            <name>しゃちぇ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】サブシーケンスの検証]]></title>
        <id>https://zenn.dev/takuh/articles/e6f0eacca86d4f</id>
        <link href="https://zenn.dev/takuh/articles/e6f0eacca86d4f"/>
        <updated>2023-08-04T12:24:08.000Z</updated>
        <summary type="html"><![CDATA[作るもの
与えられた array が与えられた sequence の有効なサブシーケンス（subsequence）であるかを判定する関数 isValidSubsequence を作る。関数はブール値を返す。True を返す場合、array は sequence の有効なサブシーケンスであることを示す。False を返す場合、array は sequence の有効なサブシーケンスではないことを示す。

 実装

validate_subsequence.py
def isValidSubsequence(array, sequence):
    # インデックス変数を初期化する
 ...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Writing Python like it’s Rustの紹介・邦訳]]></title>
        <id>https://zenn.dev/5ei74r0/articles/translate-jp-write-python-like-its-rust</id>
        <link href="https://zenn.dev/5ei74r0/articles/translate-jp-write-python-like-its-rust"/>
        <updated>2023-08-04T07:44:17.000Z</updated>
        <summary type="html"><![CDATA[いきなりですが，「これ，なーんだ！？」のお時間です．











正解は，くまモンって眉毛あるんだ
じゃなくて，私が研究室内に設置したトラップです．
見た人は当該ブログを読まなくてはなりません．
それがこちらです．
https://kobzol.github.io/rust/python/2023/05/20/writing-python-like-its-rust.html
Pythonで疲弊しているそこのあなたも，読みましょう読みましょう．
ただ，英語が母国語ではない人間に英語の記事を投げつけて「オラ読めぇ！！！」というのは横暴だなぁ，という気がしてきたので，ここで和訳を提...]]></summary>
        <author>
            <name>5ei74R0</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChatGPTと会話できるAlexaスキルにFunction callingを追加してみた]]></title>
        <id>https://zenn.dev/sikkim/articles/a0f7e37bb3947d</id>
        <link href="https://zenn.dev/sikkim/articles/a0f7e37bb3947d"/>
        <updated>2023-08-04T05:02:52.000Z</updated>
        <summary type="html"><![CDATA[はじめに
先日、「ChatGPTと会話できるAlexaスキルを作ろう 〜Node.jsとPythonに対応〜」という本を出版しました。その本の最後に、次のような文章を書きました。

「5.4 さらなる改良へ向けて」より
今回は、ここに挙げた「Function callingを使って、会話中に別の機能を呼び出す」というアイディアを、実際に試してみようと思います。目指すのは、次のような会話です。

ユーザー：「アレクサ、チャットボットを開始」

（ここでChatGPTと会話できるAlexaスキルが起動する）


アレクサ：「私はAIチャットボットです。何でも聞いてください」
ユーザー：「...]]></summary>
        <author>
            <name>TAKAHASHI Taro</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-278｜B - Misjudge the Time]]></title>
        <id>https://zenn.dev/hyperdb/articles/fd7dd6dc2fb1c0</id>
        <link href="https://zenn.dev/hyperdb/articles/fd7dd6dc2fb1c0"/>
        <updated>2023-08-04T04:44:20.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-278 B - Misjudge the Time



 提出結果
def getIntMap():
    return map(int, input().split())


def c(h, m):
    x = list('%02d' % h)
    y = list('%02d' % m)

    nh = x[0] + y[0]
    nm = x[1] + y[1]

    return True if ('00' <= nh <= '23') and ('00' <= nm <= '59') else Fal...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-278｜A - Shift]]></title>
        <id>https://zenn.dev/hyperdb/articles/32d96c950b2a5d</id>
        <link href="https://zenn.dev/hyperdb/articles/32d96c950b2a5d"/>
        <updated>2023-08-04T04:44:19.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-278 A - Shift



 提出結果
def getIntMap():
    return map(int, input().split())


def getStringList():
    return list(input().split())


def s(x):
    return [x[i] for i in range(1, len(x))] + ['0']


def main():
    n, k = getIntMap()
    a = getStringList()

    for i in range(k):
 ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[準同型暗号CKKSその4 Pythonによる動作確認]]></title>
        <id>https://zenn.dev/herumi/articles/ckks-python-sample</id>
        <link href="https://zenn.dev/herumi/articles/ckks-python-sample"/>
        <updated>2023-08-04T03:48:14.000Z</updated>
        <summary type="html"><![CDATA[初めに
今回は準同型暗号CKKSの理解を深めるためにPythonによる簡単なサンプルを動かしてみます(ckks.py)。実用的なものでは全く無い（特にレベルの扱いはいいかげん）ので注意してください。
記事一覧は準同型暗号CKKSその1 多項式環

 パラメータ設定
多項式と行列を扱うためにnumpyをインストールしておきます。準同型暗号CKKSその1 多項式環に従っていくつかのパラメータを適当に設定します。
Pythonの複素数はiではなく1jなのに注意してください。添え字が数式と異なってるのはご勘弁。


M : 2のべき乗
N:=M/2
\xi:=exp(2 \pi i / M)...]]></summary>
        <author>
            <name>herumi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PDFを学習させたChatGPTの実装方法【Python / LangChain / FAQチャットボット】]]></title>
        <id>https://zenn.dev/umi_mori/articles/langchain-indexes-pdf</id>
        <link href="https://zenn.dev/umi_mori/articles/langchain-indexes-pdf"/>
        <updated>2023-08-04T01:27:20.000Z</updated>
        <summary type="html"><![CDATA[はじめまして、ますみです！

この記事では、「LangChain」というライブラリを使って、「PDFを学習したChatGPTの実装方法」を解説します。
この記事を読むことで、機密性の高い社内PDFや商品紹介PDFを元にしたチャットボットの作成が可能になります。
ChatGPTやLangChainについてまだ詳しくない方は、こちらを先にご覧ください◎
https://zenn.dev/umi_mori/books/chatbot-chatgpt
https://zenn.dev/umi_mori/books/prompt-engineer
!
文字よりも「動画の方が理解しやすい」という方は...]]></summary>
        <author>
            <name>ますみ@エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SlackとChatGPT APIでチャットボットを作る パート1（基礎）]]></title>
        <id>https://zenn.dev/koichikawamura/articles/47828a57feedf7</id>
        <link href="https://zenn.dev/koichikawamura/articles/47828a57feedf7"/>
        <updated>2023-08-04T01:19:30.000Z</updated>
        <summary type="html"><![CDATA[SlackとChatGPT APIでチャットボットを作る パート1（基礎）
表記のテーマについて数回にわたって記事を書きます。パート１では基礎部分を作成し、以降のパートで徐々に機能を追加して行きたいと考えています。あえてLangChainなどを使わずに実装します。

 Slack上でNew Appを作る

ログインしている状態でSlack APIのトップ・ページから右上の方のYou AppsをクリックしてYour Appsページに飛び、右上のCreate New AppをクリックするとCreate an appポップアップが出ますので、From Scratchを選びます。



Na...]]></summary>
        <author>
            <name>dagger1</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[テスト投稿]]></title>
        <id>https://zenn.dev/kin_downey/articles/99c8741ef72c14</id>
        <link href="https://zenn.dev/kin_downey/articles/99c8741ef72c14"/>
        <updated>2023-08-03T23:35:25.000Z</updated>
        <summary type="html"><![CDATA[テスト]]></summary>
        <author>
            <name>K.Downey</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[美麗なコンソールアプリを手軽に作成 !richライブラリを使ってみた]]></title>
        <id>https://zenn.dev/nano_sudo/articles/8a0e60cc24648a</id>
        <link href="https://zenn.dev/nano_sudo/articles/8a0e60cc24648a"/>
        <updated>2023-08-03T15:37:28.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは、@nano_sudoです!
PythonでCLIアプリを作るとき、カッコいい出力をしたいと思うことがありませんか？
でもANSIのエスケープシーケンスとかpprintとかいちいち書くはの面倒ですよね。
そんなときに便利なのが、richです。
ということで、今回はrichを使ってみたので、紹介していきたいと思います。

 richとは
richは、PythonでCLIアプリを作るときに出力を装飾するためのライブラリです。
以下はrichの公式ドキュメントの説明です。


Rich is a Python library for writing rich text ...]]></summary>
        <author>
            <name>須藤ナノ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Overture Maps Foundationのデータを確認してみる (Placesデータのダウンロード)]]></title>
        <id>https://zenn.dev/takilog/articles/b2c588753fb3aa</id>
        <link href="https://zenn.dev/takilog/articles/b2c588753fb3aa"/>
        <updated>2023-08-03T15:27:22.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Overture Maps Foundationというものがあります。
https://overturemaps.org/
背景はこのあたりも見ていただけると分かります。
https://pc.watch.impress.co.jp/docs/news/1464782.html

Overture Maps Foundationは、世界中の地図サービスを強化できるような、共有アセットとしてのオープンな地図データの開発を目的とした取り組み。OpenStreetMapなど既存の地図データと、参加メンバーによる新たな地図データ、加えてAIやマシンラーニング技術を活用し、「現実世界...]]></summary>
        <author>
            <name>たきろぐ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonのクラス変数の上書き方法3種類の紹介(javaやC#と同じ挙動にするには)]]></title>
        <id>https://zenn.dev/noneprogrammer/articles/e83a7b5e5f2868</id>
        <link href="https://zenn.dev/noneprogrammer/articles/e83a7b5e5f2868"/>
        <updated>2023-08-03T14:22:20.000Z</updated>
        <summary type="html"><![CDATA[結論
クラス変数を上書きしたい場合、ご本尊MyClassを使ってアクセスします。obj1,obj2はご本尊ではありません。

 正しい使い方

 クラス変数を上書き(javaやC#と同じ挙動)
class MyClass:
    # クラス変数（static変数）でリストを宣言
    sharedValue = [1, 2]

if __name__ == "__main__":
    # 複数のオブジェクトを作成
    obj1 = MyClass()
    obj2 = MyClass()

    MyClass.sharedValue = (5, 10, 2)  #...]]></summary>
        <author>
            <name>none_programmer</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】２つの数値の合計]]></title>
        <id>https://zenn.dev/takuh/articles/6d8effd0e63e53</id>
        <link href="https://zenn.dev/takuh/articles/6d8effd0e63e53"/>
        <updated>2023-08-03T09:25:46.000Z</updated>
        <summary type="html"><![CDATA[実装内容
与えられた整数の配列 array から2つの数を選んで合計を targetSum とする組み合わせを見つける関数 twoNumberSum を作る。

 実装

two_number_sum.py
def twoNumberSum(array, targetSum):
    storage = set(num for num in array)

    for num in array:
        target = targetSum - num
        if target in storage and target is not num:
       ...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[あらゆる理論で音楽を作成・分析できるPythonライブラリ Neuma を作成する (1)]]></title>
        <id>https://zenn.dev/shizukakokoro/articles/127a7e9abf75e3</id>
        <link href="https://zenn.dev/shizukakokoro/articles/127a7e9abf75e3"/>
        <updated>2023-08-03T08:12:50.000Z</updated>
        <summary type="html"><![CDATA[西洋の音階に縛られない音楽を作ったり分析したりしたーい！
ということで、Pythonで音楽を作成・分析できるライブラリを自作しています。
まだ制作途中で、とある理由から当分公開する予定ではありませんが、アイデアまとめのためにも記事にしておきます。
いずれ、オープンソースとして公開する予定です。

 動機
なんで思いついたか 忘れました 。
ただ、 「既存の西洋音楽の音階に縛られたツールって随分多いよな」とは前から思っていました。
具体的には、以下のようなものです。

DAW
MIDI
MusicXML

などなど。
これら全て、西洋音楽の「ドレミファソラシ」の 7音階 を前提としています...]]></summary>
        <author>
            <name>静心</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[人物抽出のためのコード比較その①: OpenCV, MediaPipe, DeepLabV3]]></title>
        <id>https://zenn.dev/ykesamaru/articles/e0380990465d34</id>
        <link href="https://zenn.dev/ykesamaru/articles/e0380990465d34"/>
        <updated>2023-08-03T05:36:35.000Z</updated>
        <summary type="html"><![CDATA[はじめに
人物抽出は、画像や動画から特定の人物を背景から分離する技術です。
AR（拡張現実）やVR（仮想現実）のようなアプリケーションでよく使用されます。
今回は導入として、OpenCV、MediaPipe、DeepLabV3のResNet101とMobileNetV3 Largeの異なる手法を使用して、人物抽出のコードを考察します。
人物が歩いている動画から、人物だけを切り取り背景を無くす手法は主に「背景差分法」と「セマンティックセグメンテーション」の2つがあります。

背景差分法：動画の最初のフレームを背景として設定し、その後のフレームと比較して変化があった部分を抽出します。これ...]]></summary>
        <author>
            <name>yKesamaru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-277｜A - ^{-1}]]></title>
        <id>https://zenn.dev/hyperdb/articles/db2354e1072258</id>
        <link href="https://zenn.dev/hyperdb/articles/db2354e1072258"/>
        <updated>2023-08-03T05:28:18.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-277 A - ^{-1}



 提出結果
def getIntMap():
    return map(int, input().split())


def getIntList():
    return list(map(int, input().split()))


def main():
    n, x = getIntMap()
    p = [0] + getIntList()

    print(p.index(x))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-277｜B - Playing Cards Validation]]></title>
        <id>https://zenn.dev/hyperdb/articles/a80efef5111bc5</id>
        <link href="https://zenn.dev/hyperdb/articles/a80efef5111bc5"/>
        <updated>2023-08-03T05:28:18.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-277 B - Playing Cards Validation



 提出結果
def getInt():
    return int(input())


def getStringRow(N):
    return [input() for _ in range(N)]


def vc(c):
    if not c[0] in ['H', 'D', 'C', 'S']:
        return False
    if not c[1] in ['A', '2', '3', '4', '5', '6', '7', '8', '9', '...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[純粋関数の概念をぶち込んだオブジェクト指向プログラミング]]></title>
        <id>https://zenn.dev/noneprogrammer/articles/854e07c05e63b2</id>
        <link href="https://zenn.dev/noneprogrammer/articles/854e07c05e63b2"/>
        <updated>2023-08-03T03:59:47.000Z</updated>
        <summary type="html"><![CDATA[注意: メモリをジャブジャブ使います。
投票箱のデスクトップアプリをpythonで作成しました。

 投票箱フローチャート
投票箱フローチャート

処理の開始
   |
ユーザーに名前を聞く
   |
投票数1位のプログラミング言語をお勧めする
   |
この言語が好きか確認する
yes  no
   |
noの場合,投票数2位の言語をお勧めする
   |
再度この言語が好きか確認する
yes  no
   |
yesまで繰返し
   |
好きな言語名を聞く
   |
CSVファイルに書き込む(投票結果を反映)
   |
処理の終了

 ファイル構成
●単一ファイルver
---ai
 ...]]></summary>
        <author>
            <name>none_programmer</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChatGPTに演算機能を搭載する方法【Python / LangChain】]]></title>
        <id>https://zenn.dev/umi_mori/articles/langchain-agents-llm-math</id>
        <link href="https://zenn.dev/umi_mori/articles/langchain-agents-llm-math"/>
        <updated>2023-08-03T00:40:30.000Z</updated>
        <summary type="html"><![CDATA[はじめまして、ますみです！

この記事では、「LangChain」というライブラリを使って、「ChatGPTに演算機能を追加する方法」を解説します。
この記事を読むことで、ChatGPTが苦手だった演算機能を強化したチャットボットの作り方を学べます。
ChatGPTやLangChainについてまだ詳しくない方は、こちらを先にご覧ください◎
https://zenn.dev/umi_mori/books/chatbot-chatgpt
https://zenn.dev/umi_mori/books/prompt-engineer
!
文字よりも「動画の方が理解しやすい」という方はこちらをご...]]></summary>
        <author>
            <name>ますみ@エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ROSによるロボット操作法  Part-1 実機編]]></title>
        <id>https://zenn.dev/dsl_gunma/articles/1cd52b90ed52fe</id>
        <link href="https://zenn.dev/dsl_gunma/articles/1cd52b90ed52fe"/>
        <updated>2023-08-03T00:16:58.000Z</updated>
        <summary type="html"><![CDATA[0. 記事の内容
群馬県産業技術センターではAI技術等をはじめとしたデジタル技術を広く県内企業の方にも活用頂けるようデジタルソリューションラボ [外部リンク] 等を通じて情報等の提供を行っています。ここでは、DSLに整備されましたTHK(株)社製の移動台車を備えた単腕のロボットアームのGUIツールによる操作とPythonによるプログラムによる操作の手順等についてまとめています。

 1. はじめに
ロボットは、従来、工場内の自動化など、生産現場での利用が主でしたが、近年、人と会話をしたり、人に代わってファミリーレストランで配膳や下げ膳を行ったり、人と関りをもつロボットが身近なものとな...]]></summary>
        <author>
            <name>群馬産業技術センター デジタルソリューションラボ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonのライブラリであるOpenCVを用いた中心差分による画素値ごとの微分]]></title>
        <id>https://zenn.dev/blueman/articles/046cce5f52f114</id>
        <link href="https://zenn.dev/blueman/articles/046cce5f52f114"/>
        <updated>2023-08-02T11:51:24.000Z</updated>
        <summary type="html"><![CDATA[※この記事は自分のQiitaの記事の転載です。
Qiitaの記事はこちら
https://qiita.com/blueman/items/8b9b8a719d59c6f32979
前回の記事はこちら
https://zenn.dev/blueman/articles/e30de15f0c9bf3

 はじめに
前回の記事では、数値微分の中で最も精度が高いのは中心差分らしいということが分かりました。
今回は、中心差分を用いて画像の画素値ごとに中心差分を施していきOpenCVを用いて表示させようと思います。また、matplotlibを用いてRGBのそれぞれのヒストグラムを表示させようと思いま...]]></summary>
        <author>
            <name>ブルーマン</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[次世代の SendGrid !? メール送信プラットフォーム Resend]]></title>
        <id>https://zenn.dev/collabostyle/articles/5b0387a403bd3d</id>
        <link href="https://zenn.dev/collabostyle/articles/5b0387a403bd3d"/>
        <updated>2023-08-02T11:03:34.000Z</updated>
        <summary type="html"><![CDATA[気になるサービスを見つけたので、試してみました〜！！
https://resend.com/

 Resend

 Resend とは
Resend は API 経由でメールを送信することができるサービスです。
https://resend.com/blog/introducing-resend

Think of it as a next-generation Sendgrid.
次世代の Sendgrid と考えてください。

次世代の SendGrid と謳っており、開発者の開発体験を重視したメール送信プラットフォームを目指しているそうです。

 料金比較
SendGrid と利用...]]></summary>
        <author>
            <name>kazuno</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【社内勉強会向け①】Pythonについて]]></title>
        <id>https://zenn.dev/shytaani/articles/5f7096831542a9</id>
        <link href="https://zenn.dev/shytaani/articles/5f7096831542a9"/>
        <updated>2023-08-02T09:10:21.000Z</updated>
        <summary type="html"><![CDATA[1. Pythonとは
Python（パイソン）は、汎用的で高水準なプログラミング言語であり、1991年にGuido van Rossumによって設計・開発されました。Pythonは、シンプルで読みやすい構文を持ち、人間が理解しやすいコードを書きやすいことが特徴です。

 Zen of Python
Pythonの設計思想は、「The Zen of Python」[1]として知られる一連の原則によって表現されています。これはPythonに多大な貢献をしたティム・ピーターズ（Tim Peters）によって提唱され、Pythonコミュニティで広く受け入れられています。

Beautifu...]]></summary>
        <author>
            <name>Toru.T</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[StreamlitとAzure OpenAI APIを組み合わせて簡単にAIアプリを作成しよう！]]></title>
        <id>https://zenn.dev/tabukichi/articles/baca41b5227fc1</id>
        <link href="https://zenn.dev/tabukichi/articles/baca41b5227fc1"/>
        <updated>2023-08-02T09:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回は、PythonのフレームワークであるStreamlitを活用して、簡単にインタラクティブなAIアプリケーションを作成する方法をご紹介します。
Streamlitを使うと、HTMLやJavascriptを書くことなく、Pythonのみでウェブアプリケーションを作成できます。これにより、プログラミングに詳しくない方でも簡単にアプリケーションを構築できるようになります。
さらに、今回はAzure OpenAIのAPIを活用して、AIに何らかの生成処理を行わせるアプリケーションを作成します。Azure OpenAI APIは、自然言語処理や文章生成に特化した強力なAPIであり...]]></summary>
        <author>
            <name>tbkt</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Lambda + API GatewayでHTMLからPOST通信して、内容によって表示を分岐させる]]></title>
        <id>https://zenn.dev/tk_tech/articles/5bc14089f986c8</id>
        <link href="https://zenn.dev/tk_tech/articles/5bc14089f986c8"/>
        <updated>2023-08-02T08:47:55.000Z</updated>
        <summary type="html"><![CDATA[概要
キーワードを入力できるページAがある。
あるキーワードを入力し、POSTで送信する。
キーワードが正しいものであればページBを表示し、正しいキーワードでなければページCを表示する。

ページAへはGETでアクセスする。
ページB, CへはPOSTでアクセスする。

使用AWSサービス

API Gateway
Lambda Python 3.11


 参考サイト
AWS LambdaでHTMLを出力してみた
https://qiita.com/yoshidasts/items/d58c555aed2693e99ae6
こちらのサイトを参考に作成しようとしてみたが、かなり前の記...]]></summary>
        <author>
            <name>TKTK</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[知識ゼロから始める具体的なプログラミング入門]]></title>
        <id>https://zenn.dev/lamrongol/articles/6fe132ba619a52</id>
        <link href="https://zenn.dev/lamrongol/articles/6fe132ba619a52"/>
        <updated>2023-08-02T08:45:23.000Z</updated>
        <summary type="html"><![CDATA[試しに「プログラミング入門」「プログラミング 始め方」で検索したところ、どうすればプログラミングを（無料で）勉強できるか具体的に書いてるページがなかった（2022年現在）ので書いてみることにします。

 プログラミング言語とは
プログラミングを始めるにはまずプログラミング言語を選ばなければいけません。プログラミング言語とはコンピュータ（スマホや家電内蔵のものも含む）にどんな動作を行うべきかを記述するためのものです。なぜそんなものが必要なのかというと、コンピュータというのは0と1（より正確には電流のオン・オフ）しか判別できないため、指示するためには「0100001011...」というように...]]></summary>
        <author>
            <name>Laml🍞</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[python] __future__.annotations をインポートすると__annotations__が文字列になる]]></title>
        <id>https://zenn.dev/enven/articles/python_annotations_with_future</id>
        <link href="https://zenn.dev/enven/articles/python_annotations_with_future"/>
        <updated>2023-08-02T05:08:53.000Z</updated>
        <summary type="html"><![CDATA[ちょっとはまったので備忘録.
環境: windows python 3.11.4, 3.10.5

 背景
from dataclasses import dataclass


@dataclass
class A:
    f1: str


@dataclass
class B:
    f2: A
    f3: int | None


if __name__ == "__main__":
    print(B.__annotations__)

上記コードを実行すると以下のような出力になる
{'f2': <class '__main__.A'>, 'f3': i...]]></summary>
        <author>
            <name>えんぶん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【FDO43】【会話文章生成 その1】ChatGPTのAPIを利用したアプリケーションの実装]]></title>
        <id>https://zenn.dev/esm/articles/617c02f0cc41ef</id>
        <link href="https://zenn.dev/esm/articles/617c02f0cc41ef"/>
        <updated>2023-08-02T01:00:01.000Z</updated>
        <summary type="html"><![CDATA[この記事は、「おしゃべりクマちゃん🧸」シリーズの記事になります。
ChatGPTのAPIを利用して、おしゃべりクマちゃんの心臓部、雑談会話の文章を生成する機能(以降、発言生成機能と呼称)を作成しました。
その機能についての紹介を、何回かに分けて行なっていきます。
今回は、ChatGPTのAPIの使い方の解説になります😀

 ChatGPTのAPIについて
ChatGPTのAPIは、引数にプロンプト(と必要なら会話の履歴)を与えて呼び出すことで、そのプロンプトに対する回答を生成させることができます。
プロンプトとはChatGPTに与える指示のようなもので、日本語や英語などの自然言語で記述し...]]></summary>
        <author>
            <name>sfjwr</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jinjaテンプレートから自作関数を呼び出す]]></title>
        <id>https://zenn.dev/libra189/articles/a37d90688a0442</id>
        <link href="https://zenn.dev/libra189/articles/a37d90688a0442"/>
        <updated>2023-08-02T00:01:31.000Z</updated>
        <summary type="html"><![CDATA[ご閲覧ありがとうございます。
FlaskのJinjaテンプレートでFlask側で定義した自作関数を呼び出したいと思ったのですが、少し面倒だったので記録として残しておきます。

 検証環境



環境
バージョン




OS
MacOS 12.3


Python
3.9.6


Flask
2.0.2


Jinja
3.1.1




 解決したい問題
例えば、Flaskで動的に画面に値を表示したい時、Jinjaにはそのような関数は用意されていないため、一般的にはテンプレート呼び出し時に結果を引き渡す必要があります
コード例

app.py
from flask import Fla...]]></summary>
        <author>
            <name>リブラ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Django】modelsのField一覧]]></title>
        <id>https://zenn.dev/aew2sbee/articles/django-rest-framework-models</id>
        <link href="https://zenn.dev/aew2sbee/articles/django-rest-framework-models"/>
        <updated>2023-08-01T12:04:11.000Z</updated>
        <summary type="html"><![CDATA[はじめに
社内の有志メンバーの活動でDjangoを利用するので、modelsについて理解する必要があったので、
下記の公式ドキュメントを読み、本記事にまとめます。


 Field(フィールド)一覧



Fieldの種類
フィールドの説明




BooleanField
boolean値 (True/False)


CharField
文字列


TextField
長い文字列（テキスト）


SlugField
文字列(アルファベット、数字、アンダーバー、ハイフンのみ)


JSONField
JSONエンコードされたデータ


IntegerField
整数


Float...]]></summary>
        <author>
            <name>ふるた なおき🥝</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[exllama+GPTQをgoogle colabで試してみた]]></title>
        <id>https://zenn.dev/tatsuromurata/articles/558299f3b80f16</id>
        <link href="https://zenn.dev/tatsuromurata/articles/558299f3b80f16"/>
        <updated>2023-08-01T09:32:07.000Z</updated>
        <summary type="html"><![CDATA[exllamaとは
exllamaはローダーのライブラリであり、Llamaベースの大規模言語モデルの推論が早くなる模様
https://github.com/turboderp/exllama/tree/master

 リンク
Colab
github

 準備
Google Colabを開き、メニューから「ランタイム→ランタイムのタイプを変更」でランタイムを「GPU」に変更します。

 環境構築
インストール手順です。
!git clone https://github.com/oobabooga/text-generation-webui
%cd text-generation...]]></summary>
        <author>
            <name>しば🐕AI</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-276｜B - Adjacency List]]></title>
        <id>https://zenn.dev/hyperdb/articles/8e3c4f5eeabf8d</id>
        <link href="https://zenn.dev/hyperdb/articles/8e3c4f5eeabf8d"/>
        <updated>2023-08-01T04:40:54.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-276 B - Adjacency List



 提出結果
def getIntMap():
    return map(int, input().split())


def getIntListRow(N):
    return [list(map(int, input().split())) for _ in range(N)]


def main():
    n, m = getIntMap()
    ab = getIntListRow(m)

    r = [[] for _ in range(n + 1)]

    for a,...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-276｜A - Rightmost]]></title>
        <id>https://zenn.dev/hyperdb/articles/65567fc9f436fc</id>
        <link href="https://zenn.dev/hyperdb/articles/65567fc9f436fc"/>
        <updated>2023-08-01T04:40:53.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-276 A - Rightmost



 提出結果
def getString():
    return input()


def main():
    s = list(getString())

    s.reverse()

    print(len(s) - s.index('a') if 'a' in s else -1)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python3.11での型ヒントを用いた基本文法]]></title>
        <id>https://zenn.dev/trecodea/articles/3bb3a54237a1ac</id>
        <link href="https://zenn.dev/trecodea/articles/3bb3a54237a1ac"/>
        <updated>2023-08-01T04:18:26.000Z</updated>
        <summary type="html"><![CDATA[Python3.5で導入された型ヒントとは
Pythonでは、引数や戻り値・リストの要素には型指定を行わず、自由なIN/OUTが基本というのが元々の考え方だった。
しかし、大規模なシステムなどで複数の開発者により分担してプログラムを作成するにあたり、型の指定がないことで開発の遅れや不具合が起こるといった問題が発生しがちである。
そこで、型ヒントを用いて引数や戻り値の型を明確にし、開発における意思疎通を図ろうという仕組みが生まれた。
実際のプログラムをpythonコマンドで実行する際には影響はないが、mypyコマンドによる型のチェック機能を行うことでそれぞれの関数やオブジェクトの受け渡...]]></summary>
        <author>
            <name>シオムラ サキ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Cellposeで細胞をセグメンテーション]]></title>
        <id>https://zenn.dev/rchiji/articles/92690f26968e9b</id>
        <link href="https://zenn.dev/rchiji/articles/92690f26968e9b"/>
        <updated>2023-08-01T00:00:33.000Z</updated>
        <summary type="html"><![CDATA[Cellposeは機械学習を用いて細胞などの小単位を1つずつセグメンテーションするツールである。
https://www.cellpose.org/
この記事ではCellposeのインストールから学習済みモデルでのセグメンテーション、自身のデータに合わせた再学習を紹介する。
なおWindows 11での検証となる。
Anacondaを事前にインストールしておき、Anaconda Promptを使える環境を用意しておく必要がある。

https://www.anaconda.com/download


 インストール
以下の公式ページを参考にCellpose version 2.0のイン...]]></summary>
        <author>
            <name>Ryota Chijimatsu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[検索用APIを使わずにウェブページをChatGPTに学習させる方法【Python / LangChain / FAQ】]]></title>
        <id>https://zenn.dev/umi_mori/articles/langchain-agents-duckduckgo-search</id>
        <link href="https://zenn.dev/umi_mori/articles/langchain-agents-duckduckgo-search"/>
        <updated>2023-07-31T13:30:04.000Z</updated>
        <summary type="html"><![CDATA[はじめまして、ますみです！

この記事では、「LangChain」というライブラリを使って、「ウェブサイト検索が可能なChatGPTの作り方」を解説します。
この記事を読むことで、検索APIを使わずに、ウェブ上の最新情報を取り入れたChatbotの作成が可能になります。
ChatGPTやLangChainについてまだ詳しくない方は、こちらを先にご覧ください◎
https://zenn.dev/umi_mori/books/chatbot-chatgpt
https://zenn.dev/umi_mori/books/prompt-engineer
!
文字よりも「動画の方が理解しやすい」...]]></summary>
        <author>
            <name>ますみ@エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[discord.py でCog・Extensionを使ってみよう！]]></title>
        <id>https://zenn.dev/nano_sudo/articles/a00db1a55d6c4c</id>
        <link href="https://zenn.dev/nano_sudo/articles/a00db1a55d6c4c"/>
        <updated>2023-07-31T13:03:30.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事では、discord.pyでのCog・Extensionの使い方を説明します！
拡張性・メンテナンス性の高い discord Bot を目指している方におすすめです。

 Cogとは

Bot開発においてコマンドやリスナー、いくつかの状態を一つのクラスにまとめてしまいたい場合があるでしょう。コグはそれを実現したものです。(discord.pyドキュメント)


 Cog・Extensionを使うメリット

機能のグループ化
Cogを使用することで、Botの機能をグループに分けることができる。
(例:音楽コマンドや管理コマンドなど)
再利用性の向上
Cogをコピーすれ...]]></summary>
        <author>
            <name>須藤ナノ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[streamlitとfoliumを使用した都道府県別の新型コロナ感染者数ヒートマップを表示するデータアプリを作成する]]></title>
        <id>https://zenn.dev/hekuchandao/articles/e6b57ff3730fb4</id>
        <link href="https://zenn.dev/hekuchandao/articles/e6b57ff3730fb4"/>
        <updated>2023-07-31T13:01:42.000Z</updated>
        <summary type="html"><![CDATA[はじめに

作ったアプリ
ソースコード
https://github.com/IwataGumi/Japan_covid_19_map

 つくるもの

指定した期間を可視化できる
都道府県にカーソルを合わせたら詳細が出てくる


 環境
Python 3.9.6
python = ">=3.9,<3.9.7"
folium = "^0.14.0"
streamlit = "^1.25.0"
streamlit-folium = "^0.13.0"
geopandas = "^0.13.2"
numpy = "^1.25.1"

 データの加工

 データのダウンロード
...]]></summary>
        <author>
            <name>HEKUCHAN</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AIモデルの予測結果の可視化を楽にしたい? Gradioを使ってみよう!]]></title>
        <id>https://zenn.dev/ohke/articles/9ce51323c44f80</id>
        <link href="https://zenn.dev/ohke/articles/9ce51323c44f80"/>
        <updated>2023-07-31T09:05:02.000Z</updated>
        <summary type="html"><![CDATA[AIモデルによる推論結果を可視化して、それを社内に共有できるWebアプリケーションを作りたいということが、AIに関わるお仕事だとよくあるかと思います。
こういった機械学習向けのデモライブラリ (フレームワーク) として最近ちょこちょこ話題に上るGradioを触って、使い勝手などを見ていきます。
https://www.gradio.app/
Gradioの公式ガイドを主に参考にしています。
https://www.gradio.app/guides

 Gradioとは
Gradioは、機械学習モデルのデモをWebアプリケーションとして簡単に実装・公開できるPythonライブラリです。
...]]></summary>
        <author>
            <name>ohke</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[RVCで社長の声になりすませるか]]></title>
        <id>https://zenn.dev/voicy/articles/b56e73c8c56692</id>
        <link href="https://zenn.dev/voicy/articles/b56e73c8c56692"/>
        <updated>2023-07-31T07:38:36.000Z</updated>
        <summary type="html"><![CDATA[はじめに
株式会社Voicy データチーム所属のいしけんです。
今回は少し前に話題になったRVCボイスチェンジャーで(いまさらながら)遊んでみたので、そのことについて簡単にまとめてみようと思います。5分程度の軽い読みものとして目を通していただければ幸いです。
ちなみに私は音声変換等の技術について詳しい人間ではなく、機械学習の分野に精通している人間ではないので記事の内容に誤りがある可能性があります。もし誤り等ございましたらコメント等で教えていただけると幸いです。

 RVCとは
Retrieval-based-Voice-Conversionの略称です。
RVCはオープンソースの機械学...]]></summary>
        <author>
            <name>kenta</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Selenium でブラウザ操作を自動化する]]></title>
        <id>https://zenn.dev/mesgory/articles/a9ec9cbe8afe7d</id>
        <link href="https://zenn.dev/mesgory/articles/a9ec9cbe8afe7d"/>
        <updated>2023-07-31T05:43:16.000Z</updated>
        <summary type="html"><![CDATA[Selenium を利用して Python からウェブブラウザを自動操作する方法を説明します。

 🛠️ 事前準備
デバイスやソフトウェアは以下を用いる。

💻 PC端末（macOS）
💿 Python 、🔌 Selenium
💿 Visual Studio Code 、 🔌 Python


 1. Pyhton の導入
公式サイトからパッケージファイルをダウンロードし、インストールを済ませておく。
https://www.python.org/

🖥️ terminal
$ # Python のバージョンを表示
$ python3 --version

$ # pip のバージョンを...]]></summary>
        <author>
            <name>Mᴇsɢᴏʀʏ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-275｜B - ABC-DEF]]></title>
        <id>https://zenn.dev/hyperdb/articles/43e8e5b916b7b1</id>
        <link href="https://zenn.dev/hyperdb/articles/43e8e5b916b7b1"/>
        <updated>2023-07-31T04:52:44.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-275 B - ABC-DEF



 提出結果
def getIntMap():
    return map(int, input().split())


def m3(x, y, z, a):
    return (x % a) * (y % a) * (z % a)


def main():
    a, b, c, d, e, f = getIntMap()
    div = 998244353

    print((m3(a, b, c, div) - m3(d, e, f, div)) % div)


if __name__ == "...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-275｜A - Find Takahashi]]></title>
        <id>https://zenn.dev/hyperdb/articles/1642b68501910c</id>
        <link href="https://zenn.dev/hyperdb/articles/1642b68501910c"/>
        <updated>2023-07-31T04:52:44.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-275 A - Find Takahashi



 提出結果
def getInt():
    return int(input())


def getIntList():
    return list(map(int, input().split()))


def main():
    n = getInt()
    h = getIntList()

    print(h.index(max(h)) + 1)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[中心差分を用いた接線の交点の求め方とPythonのライブラリであるmatplotlibによる可視化]]></title>
        <id>https://zenn.dev/blueman/articles/e30de15f0c9bf3</id>
        <link href="https://zenn.dev/blueman/articles/e30de15f0c9bf3"/>
        <updated>2023-07-30T14:51:11.000Z</updated>
        <summary type="html"><![CDATA[この記事は、Qiitaにも投稿してます!!
詳しくは下のリンクから↓
https://qiita.com/blueman/items/542064585cd44f894494
TwitterではQiitaの新着記事の通知やおすすめの理工学書の紹介を行ってます!!
フォローよろしくお願いします!!
Twitterは下のリンクから↓
https://twitter.com/0ca00118726208m

 はじめに
様々な関数の任意の2点の接線の交点を求めると面白そうだったので、2つの接線の交点のx座標とy座標の式を求めました。
また、Pythonのライブラリであるmatplotlibを用...]]></summary>
        <author>
            <name>ブルーマン</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vertex AI PaLM APIを触ってみる]]></title>
        <id>https://zenn.dev/layerx/articles/e13030eb8e364a</id>
        <link href="https://zenn.dev/layerx/articles/e13030eb8e364a"/>
        <updated>2023-07-30T12:59:57.000Z</updated>
        <summary type="html"><![CDATA[LayerX で機械学習エンジニアとして働いている松村 @yu-ya4 です。現在はMLチームにて、バクラクシリーズのAI-OCR機能の開発をはじめとした機械学習技術の活用を推進しています。7月はLayerXエンジニアブログを活発にしよう月間 とのことですのでブログを執筆しております。今日は誰がなんと言おうと7/26です。
今回は、2023年5月にプレビューとなり先月から今月にかけてGAとなったVertex AI PaLM APIを触ってみたので紹介します。なお、このブログを執筆している2023年7月26日時点では英語やスペイン語など５つの言語への対応のみがGAであり、日本語は対応してお...]]></summary>
        <author>
            <name>Yuya Matsumura</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[犬の写真から犬種を判別するアプリを作成してみた]]></title>
        <id>https://zenn.dev/tarotaro33/articles/94d7287146b45b</id>
        <link href="https://zenn.dev/tarotaro33/articles/94d7287146b45b"/>
        <updated>2023-07-30T05:42:01.000Z</updated>
        <summary type="html"><![CDATA[概要
今回は犬の画像を用いて、犬の犬種を判別するAIアプリを作っていきたいと思います。
実際僕は犬の犬種については全く詳しくないので、犬の画像や名前を言われてもいつもピンとこないので、犬の画像を入力すると犬種が返ってくるというアプリを作りたいと思います。
とはいえ、いきなり全種類の犬種の判別はかなりハードルが高いので、まずは特徴が大きく異なる３種類の犬種の判別をできるアプリを作っていきたいと思います
今回のエントリーナンバ-
No1. コーギー

No2. ドーベルマン

No3. パグ

この3種類の犬の犬種を判別するアプリを作っていきたいと思います！

 目次
今回の開発は大きく...]]></summary>
        <author>
            <name>taro-u</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[僕のアプリが週刊誌取材を受けた話と、週刊誌に載せられなかったtech系の資料]]></title>
        <id>https://zenn.dev/ykesamaru/articles/c5948a9aca62d6</id>
        <link href="https://zenn.dev/ykesamaru/articles/c5948a9aca62d6"/>
        <updated>2023-07-30T04:48:33.000Z</updated>
        <summary type="html"><![CDATA[紙面にはモザイク処理をかけています。
2023年7月25日発売の8月8日号に掲載されています。

はじめに

まずEfficientNetV2とはなにか

EfficientNetV2の仕組みと使用理由

Progressive Learningとはなにか

Progressive Learningの実装コード





Grad-CAMとはなにか

Grad-CAMの仕組みと使用理由
バイアスを明らかにする
分類エラーの理由を明らかにする
Grad-CAMの実装コード



Average face(平均顔)の作成

Average faceとはなにか
平均顔作成の実装コード


類...]]></summary>
        <author>
            <name>yKesamaru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChatGPTで使うためにコードをマスクしたり戻したりする]]></title>
        <id>https://zenn.dev/shimo_s3/articles/79a238beb841e2</id>
        <link href="https://zenn.dev/shimo_s3/articles/79a238beb841e2"/>
        <updated>2023-07-30T02:57:31.000Z</updated>
        <summary type="html"><![CDATA[やりたいこと


業務でChatGPTを使うとき、業務での用語をChatGPTに渡さないようにマスクしたい

Pythonスクリプトを使って、マスクしたり戻せるように
ホワイトリストを作って、一般的な単語は残す

残さないと、ChatGPTが理解できない


suffix, prefixで指定した部分を残す

自分が理解しやすいように





注：ロジックそのものは隠せないので変数名を隠すという意味



 書いてないこと

マスクする是非、何をマスクすべきか、など


 Code

全部同じフォルダにある想定
result...はスクリプトで作成されるファイル




ファイル
...]]></summary>
        <author>
            <name>shimo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ウェブ検索ができるChatGPTの実装方法【Python / LangChain / Google / Bing】]]></title>
        <id>https://zenn.dev/umi_mori/articles/langchain-agents-google-search</id>
        <link href="https://zenn.dev/umi_mori/articles/langchain-agents-google-search"/>
        <updated>2023-07-30T01:50:33.000Z</updated>
        <summary type="html"><![CDATA[はじめまして、ますみです！

この記事では、「LangChain」というライブラリを使って、「ウェブサイト検索ができるChatGPTの実装方法」を解説します。
この記事を読むことで、GoogleやBingなどの検索エンジンを活用し、最新情報を反映した回答ができるChatbotの作り方を学べます。
ChatGPTやLangChainについてまだ詳しくない方は、こちらを先にご覧ください◎
https://zenn.dev/umi_mori/books/chatbot-chatgpt
https://zenn.dev/umi_mori/books/prompt-engineer
!
文字よりも...]]></summary>
        <author>
            <name>ますみ@エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SynologyのNASに公式の手段でPython3.9をインストールしてpipも使えるようにする]]></title>
        <id>https://zenn.dev/kn1cht/articles/synology-python-39</id>
        <link href="https://zenn.dev/kn1cht/articles/synology-python-39"/>
        <updated>2023-07-29T23:36:23.000Z</updated>
        <summary type="html"><![CDATA[TL;DR

現在のSynology NASでは標準機能でPython3.9をインストールできます
pipを使うには、ensurepipパッケージでpipをインストールする、またはvenvで仮想環境を作成するとよいです


 背景
Synology製のNAS（Network Attached Storage）では、様々な自作のプログラムを動かすことができます。特に、Pythonを使うことでWebサイトの監視、IoT、バックアップなど幅広い処理が可能です。筆者は、GitHubの自分のリポジトリを自動でNASに反映させるプログラムを定期実行しています。
https://zenn.dev/...]]></summary>
        <author>
            <name>kn1cht</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[pydantic V2] model_configという名前のフィールドを作るには？]]></title>
        <id>https://zenn.dev/shimat/articles/125dbd4874a8e0</id>
        <link href="https://zenn.dev/shimat/articles/125dbd4874a8e0"/>
        <updated>2023-07-29T21:57:00.000Z</updated>
        <summary type="html"><![CDATA[背景
pydantic V1では、BaseModelを継承したモデルの各種設定のために Config という名前の内部クラスを定義する仕様でした。これがV2では、model_config = pydantic.ConfigDict(...) の要領でフィールドとして定義するように改められています（V1の方法もまだ使えますが非推奨）。
https://docs.pydantic.dev/2.1/usage/model_config/
class MyModel(BaseModel):
    name: str
    model_config = ConfigDict(str_to_...]]></summary>
        <author>
            <name>shimat</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【時系列予測 - 実践編】LSTMを使用したマグニチュード予測]]></title>
        <id>https://zenn.dev/zaki_varlaw/articles/f0a32f3962d210</id>
        <link href="https://zenn.dev/zaki_varlaw/articles/f0a32f3962d210"/>
        <updated>2023-07-29T19:44:34.000Z</updated>
        <summary type="html"><![CDATA[はじめに
地震の加速度波形を利用して、何か地学的な情報を推測することはできないか。
ということで、今回はLSTMを利用した地震波形の学習とマグニチュードの一の位を予測する方法について解説します。
今後はより多くの説明変数を地学的視点で探っていき、他の機械学習モデルなども組み合わせて精度を高めていくことを検討しています。
最終的には気象庁のデータを組み合わせて津波の遡上高を推測することが目標です。
また、今回は一連の実装方法の解説と動作確認がメインのため、深層学習において必要な細かい概念については別の記事で紹介します。

 開発環境
Google Colabを使用します。

 データ作...]]></summary>
        <author>
            <name>zaki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【時系列予測 - 基礎編】Vol.3 Transformerから派生したGPT]]></title>
        <id>https://zenn.dev/zaki_varlaw/articles/d74a5c8156ad30</id>
        <link href="https://zenn.dev/zaki_varlaw/articles/d74a5c8156ad30"/>
        <updated>2023-07-29T19:43:13.000Z</updated>
        <summary type="html"><![CDATA[はじめに
【時系列予測 - 基礎編】Vol.1 ニューラルネットワーク 基本事項まとめ
【時系列予測 - 基礎編】Vol.2 Encoder-Decoderモデル 基本事項まとめ
から来た方はようこそ。
今回はGoogle社のBERTなどと共にTransformerから派生した「GPT」について触れていきます。
その前に、「事前学習」「ファインチューニング」という基本事項を押さえておきましょう。

 事前学習(pre-training)
事前学習とは、大量のデータを使用してモデルを事前に訓練するプロセスです。
通常、事前学習は非常に大規模なデータセットで行われます。
例えば、大量のテ...]]></summary>
        <author>
            <name>zaki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【時系列予測 - 基礎編】Vol.2 Encoder-Decoderモデル]]></title>
        <id>https://zenn.dev/zaki_varlaw/articles/8755c8909cf16f</id>
        <link href="https://zenn.dev/zaki_varlaw/articles/8755c8909cf16f"/>
        <updated>2023-07-29T19:41:44.000Z</updated>
        <summary type="html"><![CDATA[はじめに
【時系列予測 - 基礎編】Vol.1 ニューラルネットワーク
を読んでいない方はまずそちらを読むことをおすすめします。
とりあえず先に開発作業に触れてみたいという方は、こちらを読んでみてください。
【時系列予測 - 実践編】LSTMを使用したマグニチュード予測
今回の記事では、文章生成モデルの革命児Transformerに関する内容がメインになります。
画像認識AIとかをやっていると、学習データのかさ増しにtransformというものを使用しますが全く別物です。

 時系列予測のEncoder-Decoderモデル 基本事項まとめ


Encoder
入力を何かしらの固定長...]]></summary>
        <author>
            <name>zaki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【時系列予測 - 基礎編】Vol.1 回帰結合型ニューラルネットワーク]]></title>
        <id>https://zenn.dev/zaki_varlaw/articles/d69797ffba1ff5</id>
        <link href="https://zenn.dev/zaki_varlaw/articles/d69797ffba1ff5"/>
        <updated>2023-07-29T19:39:29.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回の【時系列予測 - 基礎編】ではVol.1~3に渡って、
時系列予測の基礎知識について紹介していきます。
【時系列予測 - 基礎編】Vol.2 Encoder-Decoderモデル
【時系列予測 - 基礎編】Vol.3 Transformerから派生したGPT
とりあえず先に開発作業に触れてみたいという方は、こちらを読んでみてください。
【時系列予測 - 実践編】LSTMを使用したマグニチュード予測

 対象読者
・(できれば)pythonに少しでも触ったことがある方
・ニューラルネットワークの基本構造（入出力層、隠れ層や重み、バイアスといった概念）を理解している方

...]]></summary>
        <author>
            <name>zaki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Django】django rest framework環境構築/インストール]]></title>
        <id>https://zenn.dev/aew2sbee/articles/django-rest-framework-install</id>
        <link href="https://zenn.dev/aew2sbee/articles/django-rest-framework-install"/>
        <updated>2023-07-29T12:26:15.000Z</updated>
        <summary type="html"><![CDATA[はじめに
社内の有志メンバーの活動でDRFを使用したので、導入方法を記録として残しておきます。
http://127.0.0.1:8000/books/list/にアクセスして
下記の画面が表示されるまでを解説します


 0. ファイル構成の確認
下記のようなファイル構成で始めます
src
└─ backend

 1. ライブラリーのインストール


djangoとdjango rest frameworkを下記コマンドでインストールする

pip install django
pip install djangorestframework

djangoのVersionを確認す...]]></summary>
        <author>
            <name>ふるた なおき🥝</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FastAPI+PoetryなDocker環境を作る！]]></title>
        <id>https://zenn.dev/yamiii/articles/c7c7fa66aedf3f</id>
        <link href="https://zenn.dev/yamiii/articles/c7c7fa66aedf3f"/>
        <updated>2023-07-29T06:54:10.000Z</updated>
        <summary type="html"><![CDATA[概要
FastAPI in Containers - Dockerを読んでいて、Poetryでライブラリ管理したいと思ったので、作ってみた！

 できたもの
https://github.com/r-eiyama/fast-api-docker
リポジトリをクローンして、docker compose up -dを実行すれば環境が作れてしまう！！
作れた人はこの記事にいいねを頼む。

 解説
ディレクトリ構成は下記のようにシンプルである。
Simple is the Bestとはまさにこのことを言うのではなかろうか。
.
├── Dockerfile
├── Taskfile.yml ...]]></summary>
        <author>
            <name>yamii</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[作りたいものがない。]]></title>
        <id>https://zenn.dev/fix/articles/d571d2867fb1d9</id>
        <link href="https://zenn.dev/fix/articles/d571d2867fb1d9"/>
        <updated>2023-07-29T05:18:15.000Z</updated>
        <summary type="html"><![CDATA[Flutter(Dart)学習 停滞
Flutter(Dart)学習あまりできてないです。
理由はタイトル通り。
Flutter大学に入ったのを機に、コミュニティ内の記事＆動画をラジオ替わりに聞くなどは合間で情報収集は継続。
それだけでも、月額料金を払った価値があるので十分ですが…。

 停滞する理由
最初の自己紹介の記事でも色々書きましたが、小学校の頃から趣味でプログラミング学習と、アプリ開発をやってるので、いい加減、作りたいアプリの制作アイデア的な物はもう枯れてきてます。
同じように、小・中学生時代から趣味でプログラミングをはじめてプライベートでも開発してる人がいれば、どんなソフ...]]></summary>
        <author>
            <name>fix</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonでZabbixのxmlから情報を抽出する]]></title>
        <id>https://zenn.dev/malwarekiddy/articles/dd6e5d8a243a69</id>
        <link href="https://zenn.dev/malwarekiddy/articles/dd6e5d8a243a69"/>
        <updated>2023-07-29T02:04:16.000Z</updated>
        <summary type="html"><![CDATA[Zabbixの数万行に及ぶ設定内容を、パラメーターシートとして提出しなければいけない事があります。
人力では無理ですので、Pythonにやってもらいます。

 前提
目的は、Zabbixから出力されたxml形式のファイルから、指定の情報を抽出することです。
zabbixから出力されるxmlは、データの内容によってDOM構造が異なりますが、スクリプト内のパスを書き換えれば、どのようなxmlでも処理できます。

 xml
今回は長文にしたくないのでお手軽に、ホスト情報のxmlから「ホスト名」「テンプレート名」「グループ名」「ホストのIPアドレス」を取得してみます。
今回処理するxmlは次のよ...]]></summary>
        <author>
            <name>kaka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[30分でFastAPIでGraphQL APIを開発するチュートリアル]]></title>
        <id>https://zenn.dev/nameless_sn/articles/gql_fastapi_tutorial</id>
        <link href="https://zenn.dev/nameless_sn/articles/gql_fastapi_tutorial"/>
        <updated>2023-07-29T01:45:04.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回の記事ではデータベースを使わずに、1時間でFastAPIでGraphQL APIを開発する方法を解説する。
!
注意：今回の記事では、GraphQL APIやFastAPIに関する知識を理解している前提で説明をする。本記事でも簡潔に解説するが、詳細に理解したいならばこちらの記事を参照するといい。FastAPIの場合はこちら。


 対象とする読者

FastAPIを使っているひと
これからPythonでGraphQL APIを開発したいひと
タイトルを見て気になったひと


 開発環境

Windows 11
Python 3.10.2
FastAPI
Strawber...]]></summary>
        <author>
            <name>Shota Nukumizu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHubリポジトリをChatGPTに学習させる方法【Python / LangChain / FAQ】]]></title>
        <id>https://zenn.dev/umi_mori/articles/langchain-indexes-git</id>
        <link href="https://zenn.dev/umi_mori/articles/langchain-indexes-git"/>
        <updated>2023-07-29T01:16:53.000Z</updated>
        <summary type="html"><![CDATA[はじめまして、ますみです！

この記事では、「LangChain」というライブラリを使って、「GitHubリポジトリのソースコードを学習したChatGPTの実装方法」を解説します。
この記事を読むことで、「ソースコードを一行一行読む」作業を減らすことができます。
ChatGPTやLangChainについてまだ詳しくない方は、こちらを先にご覧ください◎
https://zenn.dev/umi_mori/books/chatbot-chatgpt
https://zenn.dev/umi_mori/books/prompt-engineer
!
文字よりも「動画の方が理解しやすい」という方...]]></summary>
        <author>
            <name>ますみ@エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ソフトマックス関数について]]></title>
        <id>https://zenn.dev/yuto_mo/articles/b0d294992c050a</id>
        <link href="https://zenn.dev/yuto_mo/articles/b0d294992c050a"/>
        <updated>2023-07-28T11:36:12.000Z</updated>
        <summary type="html"><![CDATA[今回はソフトマックス関数について解説します。

 ソフトマックス関数とは
y_k=\dfrac{e^{a_k}}{\sum\limits_{i=1}^n e^{a_i}}
で表される関数です。
難しそうに見えますが、実は簡単な割合計算です。
理解するための例として、{a_1,a_2,a_3}の中で{a_1}の割合を求めたい場合、\dfrac{a_1}{a_1+a_2+a_3}と計算すると思います。
ソフトマックス関数はこの数値を、e^{a_1}のようにeの指数にaを当てはめたものに変えただけです。上記の例では
・y_1=\dfrac{e^{a_1}}{e^{a_1}+e^{a_2}+e^...]]></summary>
        <author>
            <name>pomu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[plotlyで描画するときはmodeを明示しよう（戒め）]]></title>
        <id>https://zenn.dev/nowa0402/articles/5eeb1366286856</id>
        <link href="https://zenn.dev/nowa0402/articles/5eeb1366286856"/>
        <updated>2023-07-28T11:00:02.000Z</updated>
        <summary type="html"><![CDATA[タイトル通り。2時間くらいハマった。
公式を読まなかった自身への戒めを込めて記事にします。
◎本記事の結論
折れ線グラフを作るときはmode="lines"かmode="line+markers"を明示する。
理由: modeはデータ数によってデフォルト値が変化するため

20個未満: mode="lines+markers"

20個以上: mode="lines"



 plotlyとは
グラフ描画を行うライブラリ
https://plotly.com/python/
pythonだとmatplotlibもよく使われます。
https://matplotlib.org/
私の用途で...]]></summary>
        <author>
            <name>nowa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-274｜A - Batting Average]]></title>
        <id>https://zenn.dev/hyperdb/articles/e91c7834a02f29</id>
        <link href="https://zenn.dev/hyperdb/articles/e91c7834a02f29"/>
        <updated>2023-07-28T04:46:08.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-274 A - Batting Average



 提出結果
def getIntMap():
    return map(int, input().split())


def r(x):
    return '1.000' if x == 1.0 else "0.%03d" % ((x * 10000 + 5) // 10)


def main():
    a, b = getIntMap()

    print(r(b / a))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-274｜B - Line Sensor]]></title>
        <id>https://zenn.dev/hyperdb/articles/37fa09df54473d</id>
        <link href="https://zenn.dev/hyperdb/articles/37fa09df54473d"/>
        <updated>2023-07-28T04:46:08.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-274 B - Line Sensor



 提出結果
def getIntMap():
    return map(int, input().split())


def getStringListRow(N):
    return [list(list(input())) for _ in range(N)]


def main():
    h, w = getIntMap()
    c = getStringListRow(h)

    a = []
    for i in range(len(c[0])):
        tmp = ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dockerでnltkを使いたい]]></title>
        <id>https://zenn.dev/kazuph/articles/9cf3aa31ac3fb0</id>
        <link href="https://zenn.dev/kazuph/articles/9cf3aa31ac3fb0"/>
        <updated>2023-07-28T00:53:29.000Z</updated>
        <summary type="html"><![CDATA[色々試しましたが、自分の環境では以下の2行が必要だった。
...
RUN pip3 install nltk
RUN python3 -m nltk.downloader all -d /root/nltk_data
...]]></summary>
        <author>
            <name>kazuph</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[文字数制限のない要約チャットボットの実装方法【Python / LangChain / ChatGPT】]]></title>
        <id>https://zenn.dev/umi_mori/articles/langchain-chains-long-text-summarize</id>
        <link href="https://zenn.dev/umi_mori/articles/langchain-chains-long-text-summarize"/>
        <updated>2023-07-28T00:43:29.000Z</updated>
        <summary type="html"><![CDATA[はじめまして、ますみです！

この記事では、「LangChain」というライブラリを使って、「文字数制限のない要約チャットボットの作り方」を解説します。
ChatGPTやLangChainやについてまだ詳しくない方は、こちらを先にご覧ください◎
https://zenn.dev/umi_mori/books/chatbot-chatgpt
https://zenn.dev/umi_mori/books/prompt-engineer
!
文字よりも「動画の方が理解しやすい」という方はこちらをご覧ください◎
文字数制限のない要約チャットボットの実装方法【Python / LangChain...]]></summary>
        <author>
            <name>ますみ@エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[文字数制限のないFAQチャットボットの実装方法【Python / LangChain / ChatGPT】]]></title>
        <id>https://zenn.dev/umi_mori/articles/langchain-chains-long-text-qa</id>
        <link href="https://zenn.dev/umi_mori/articles/langchain-chains-long-text-qa"/>
        <updated>2023-07-28T00:38:33.000Z</updated>
        <summary type="html"><![CDATA[はじめまして、ますみです！

この記事では、「LangChain」というライブラリを使って、「文字数制限のないFAQチャットボットの作り方」を解説します。
ChatGPTやLangChainやについてまだ詳しくない方は、こちらを先にご覧ください◎
https://zenn.dev/umi_mori/books/chatbot-chatgpt
https://zenn.dev/umi_mori/books/prompt-engineer
!
文字よりも「動画の方が理解しやすい」という方はこちらをご覧ください◎
文字数制限のないFAQチャットボットの実装方法【Python / LangCha...]]></summary>
        <author>
            <name>ますみ@エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【完全版】文字数制限のないChatGPTを実装するためのアルゴリズムまとめ【Python / LangChain / FAQチャットボット】]]></title>
        <id>https://zenn.dev/umi_mori/articles/langchain-chains-long-text-algorithm</id>
        <link href="https://zenn.dev/umi_mori/articles/langchain-chains-long-text-algorithm"/>
        <updated>2023-07-28T00:36:51.000Z</updated>
        <summary type="html"><![CDATA[はじめまして、ますみです！

この記事では、「文字数制限のないChatGPTを実装するためのアルゴリズム」を解説します！
ChatGPTやLangChainやについてまだ詳しくない方は、こちらを先にご覧ください◎
https://zenn.dev/umi_mori/books/chatbot-chatgpt
https://zenn.dev/umi_mori/books/prompt-engineer
!
文字よりも「動画の方が理解しやすい」という方はこちらをご覧ください◎
【完全版】文字数制限のないChatGPTを実装するためのアルゴリズムまとめ【Python / LangChain ...]]></summary>
        <author>
            <name>ますみ@エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonの辞書オブジェクトとJSONにハマった]]></title>
        <id>https://zenn.dev/collabostyle/articles/657cc495e69a9d</id>
        <link href="https://zenn.dev/collabostyle/articles/657cc495e69a9d"/>
        <updated>2023-07-27T12:55:56.000Z</updated>
        <summary type="html"><![CDATA[🐍「PythonでJSONを読み込みたいな～」
と思って色々いじってたのですが
dict（dictionary）という辞書オブジェクトと
JSONの違いにハマったので書きます。
具体的には、「JSONや！変換せな！」と思って
せっせこjson.loads()していたのだけれども
JSONじゃなくて既にdictionary型でした、、

 Dictionaryについて
こんな形式のPythonオブジェクトです↓
{'Apple':1, 'Banana':2, 'Cacao':3}

 JSONについて
こんな形式のデータ定義です。
{"Apple":1, "Banana":2, "Caca...]]></summary>
        <author>
            <name>なな</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[シグモイド関数は何故あの形なのか？]]></title>
        <id>https://zenn.dev/yuto_mo/articles/358bd04e699c15</id>
        <link href="https://zenn.dev/yuto_mo/articles/358bd04e699c15"/>
        <updated>2023-07-27T12:54:36.000Z</updated>
        <summary type="html"><![CDATA[以下の形の関数をシグモイド関数と呼びます。

このシグモイド関数は何故こんな形をしているのでしょうか？
数式から考えてみましょう。
シグモイド関数は
y = \dfrac{1}{1+e^{-x}}
という式で表されます。
一見難しく見えますが、1つずつ紐解いていきましょう。

 {e^{-x}}

まずは{e^{-x}}です。
これは{e^{-x}}=\dfrac{1}{e^{x}}と変形でき、グラフは以下のようになります。

\dfrac{1}{e^{x}}なので、xが大きくなるとその値は0に収束し、xが負の値になると
\dfrac{1}{e^{-x}} = {e^{x}}
なのでxが...]]></summary>
        <author>
            <name>pomu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sphinxでmermaidを書く]]></title>
        <id>https://zenn.dev/nekodamistie/articles/78fcd0404b57b1</id>
        <link href="https://zenn.dev/nekodamistie/articles/78fcd0404b57b1"/>
        <updated>2023-07-27T09:17:46.000Z</updated>
        <summary type="html"><![CDATA[Python Sphinx で mermaid を使いたい
PlantUML以外にも便利なものがあると、mermaidも教えてもらったが
環境構築が大変だったのでメモする。

 準備の流れ
Windows10、VSCode使用。Pythonはインストール済み。
venvで仮想環境を作って、そこに作っていく。
※仮想環境のPythonは3.11、pipとsetuptoolのみインストールされている状態

 1. 仮想環境を作成（初回）
コマンドラインに入力し、ディレクトリに移動、activateしておく
※activateされていれば３行目は実行不要。
> python -m v...]]></summary>
        <author>
            <name>misty summer</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonのpandasライブラリでCSVファイルを分割する]]></title>
        <id>https://zenn.dev/lulusekki/articles/74ff45c0631a74</id>
        <link href="https://zenn.dev/lulusekki/articles/74ff45c0631a74"/>
        <updated>2023-07-27T07:07:37.000Z</updated>
        <summary type="html"><![CDATA[完成したコード
import pandas as pd

data = pd.read_csv('hogehoge.csv')

# 分割数の計算
chunk_size = 199
num_chunks = len(data) // chunk_size + 1

# データを分割して出力
for i in range(num_chunks):
    start_idx = i * chunk_size
    end_idx = start_idx + chunk_size
    chunk_data = data[start_idx:end_idx]
    chunk_da...]]></summary>
        <author>
            <name>lulu_sekki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-273｜A Recursive Function]]></title>
        <id>https://zenn.dev/hyperdb/articles/ff69ca6087808a</id>
        <link href="https://zenn.dev/hyperdb/articles/ff69ca6087808a"/>
        <updated>2023-07-27T04:20:58.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-273 A - A Recursive Function



 提出結果
def getInt():
    return int(input())


def r(x):
    return 1 if x == 0 else x * r(x - 1)


def main():
    n = getInt()

    print(r(n))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-273｜B - Broken Rounding]]></title>
        <id>https://zenn.dev/hyperdb/articles/2c86e4994dd123</id>
        <link href="https://zenn.dev/hyperdb/articles/2c86e4994dd123"/>
        <updated>2023-07-27T04:20:57.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-273 B - Broken Rounding



 提出結果
def getIntMap():
    return map(int, input().split())


def r(a, b):
    a += (5 * (10 ** b))
    b += 1
    return a // (10 ** b) * (10 ** b)


def main():
    x, k = getIntMap()

    for i in range(k):
        x = r(x, i)
    print(x)


if __name__...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[text-generation-webuiでloraを利用してみた。]]></title>
        <id>https://zenn.dev/tatsuromurata/articles/5a4cb3c8679340</id>
        <link href="https://zenn.dev/tatsuromurata/articles/5a4cb3c8679340"/>
        <updated>2023-07-27T01:39:05.000Z</updated>
        <summary type="html"><![CDATA[text-generation-webuiとは
text-generation-webuiは簡単にLLMのためのchatやAPIをWebUI形式で利用することができるOSSです。
https://github.com/oobabooga/text-generation-webui
いつも通常のモデルや4bitのものをよく利用していたので、もう一つの省メモリの手段であるloraの利用手順について試したいと思います。

 リンク
Colab
github

 準備
Google Colabを開き、メニューから「ランタイム→ランタイムのタイプを変更」でランタイムを「GPU」に変更します。
...]]></summary>
        <author>
            <name>しば🐕AI</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DragDiffusionをgoogle colabで試してみた]]></title>
        <id>https://zenn.dev/tatsuromurata/articles/be09f5ba1fe06d</id>
        <link href="https://zenn.dev/tatsuromurata/articles/be09f5ba1fe06d"/>
        <updated>2023-07-27T01:33:27.000Z</updated>
        <summary type="html"><![CDATA[DragDiffusionとは
Drag Diffusionは、New Photoshopとして話題の編集型生成AIであるDragGANをGANのモデルではなく、Diffusion Modelで構築したものです。
https://github.com/Yujun-Shi/DragDiffusion

 リンク
Colab
github

 準備
Google Colabを開き、メニューから「ランタイム→ランタイムのタイプを変更」でランタイムを「GPU」に変更します。

 環境構築
インストール手順です。
!git clone https://github.com/Yujun-Shi/...]]></summary>
        <author>
            <name>しば🐕AI</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Whisper-Atをgoogle colabで試してみた]]></title>
        <id>https://zenn.dev/tatsuromurata/articles/04e3464854e894</id>
        <link href="https://zenn.dev/tatsuromurata/articles/04e3464854e894"/>
        <updated>2023-07-27T01:28:47.000Z</updated>
        <summary type="html"><![CDATA[Whisper-Atとは
Whisper-ATは、音声タグ付けと音声認識の両方を可能にした音声文字起こしモデルです。
https://github.com/YuanGongND/whisper-at

 リンク
Colab
github

 準備
Google Colabを開き、メニューから「ランタイム→ランタイムのタイプを変更」でランタイムを「GPU」に変更します。

 環境構築
インストール手順です。
!pip install whisper-at

 推論
(1)デモデータの準備
!pip -q install wget
import wget,IPython
wget.dow...]]></summary>
        <author>
            <name>しば🐕AI</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChatGPTでPandasのデータフレーム操作をする方法【Python / LangChain】]]></title>
        <id>https://zenn.dev/umi_mori/articles/langchain-chains-pandas</id>
        <link href="https://zenn.dev/umi_mori/articles/langchain-chains-pandas"/>
        <updated>2023-07-27T01:16:15.000Z</updated>
        <summary type="html"><![CDATA[はじめまして、ますみです！

この記事では、「LangChain」というライブラリを使って、「ChatGPTでPandasのDataFrameを操作する方法」を解説します。
ChatGPTやLangChainについてまだ詳しくない方は、こちらを先にご覧ください◎
https://zenn.dev/umi_mori/books/chatbot-chatgpt
https://zenn.dev/umi_mori/books/prompt-engineer
!
文字よりも「動画の方が理解しやすい」という方はこちらをご覧ください◎
ChatGPTでPandasのDataFrame操作をする方法【...]]></summary>
        <author>
            <name>ますみ@エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[パーセプトロンとは]]></title>
        <id>https://zenn.dev/yuto_mo/articles/010242256ff2ba</id>
        <link href="https://zenn.dev/yuto_mo/articles/010242256ff2ba"/>
        <updated>2023-07-26T12:58:30.000Z</updated>
        <summary type="html"><![CDATA[今回はパーセプトロンについて解説します。

 パーセプトロンとは？
パーセプトロンとは、0か1を出力する関数のことです。
パーセプトロンは入力xと重みw、出力yから構成され、
x×w が一定の値を越えた時にy=1,越えなかった時にy=0を出力する
という非常に単純なものになっています。
コードで書くと以下のようになります。
# 入力:x,重み:w,しきい値θ,出力:y
if x*w > θ:
 y = 1
else:
 y = 0
パーセプトロンは、入力xに対して重みwを書けた結果が、閾値θを超えた時に、1、超えなかった時に0を出力します。
これがパーセプトロンの動作です。
現在使...]]></summary>
        <author>
            <name>pomu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで最初に躓いたアンダーバーこれなに]]></title>
        <id>https://zenn.dev/collabostyle/articles/341c14dfecefec</id>
        <link href="https://zenn.dev/collabostyle/articles/341c14dfecefec"/>
        <updated>2023-07-26T12:44:46.000Z</updated>
        <summary type="html"><![CDATA[初めに
最近Pythonをメインに触れているためか、夢に蛇（パイソン）が出てきたケニーです。
タイトルのとおりなのですが、Pythonではよくアンダーバーが出てきます。
最初みたとき、なんだこれは！？と躓きまして、
初見では推測も理解も全くできなかったので調べてみました。

 アンダーバーの使い方
【関数名】についているアンダーバーについて以下にてまとめてみました。
他にも使い方があるのかもしれませんが、関数＋アンダーバーの組み合わせは本当よく見るので、まずはここから。。

 _function(hoge)　について
関数の前にアンダーバーが1つ
def _fugaFunction(...]]></summary>
        <author>
            <name>Kenny</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AI時代のPythonの基本：TypeHint]]></title>
        <id>https://zenn.dev/yosemat/books/1e021f1745566f</id>
        <link href="https://zenn.dev/yosemat/books/1e021f1745566f"/>
        <updated>2023-07-26T12:24:28.000Z</updated>
        <summary type="html"><![CDATA[こんにちは極論モンスターのYosematです。
Pythonを取り巻く環境はここ数年で大きく変化しています。
1. 大規模AIやマイクロサービスなどの登場とそれによる開発チームの大規模化
2. エディターの高機能化とAI Programmerの登場によるプログラミングスタイルの変化

これによってPythonプログラマは安全でクリーンでエディターやAIなどの機械にとっても読みやすいコードを書く必要がでてきました。

これに伴ってPythonもクリーンなコードを書く方法を充実させてきています。本書はモダンなPythonの新しい開発スタイルであるTypeHintについてまとめた本です。

TypeHintを日本や職場に広めて行きたい人はぜひいいねおしていってください。]]></summary>
        <author>
            <name>Yosemat</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[自宅サーバーからMyDNSへのIP通知をPythonで書いてダイナミックDNSを実現する]]></title>
        <id>https://zenn.dev/i_sugita/articles/4895a6a2337e2d</id>
        <link href="https://zenn.dev/i_sugita/articles/4895a6a2337e2d"/>
        <updated>2023-07-26T10:53:01.000Z</updated>
        <summary type="html"><![CDATA[僕は自宅サーバーを会社の有志に公開しているのですが、家のネット契約上Global IPが定期的に変わってしまうため、MyDNS.jpでダイナミックDNSを設定しています。
以前はMyDNSに定期的にログインするシェルスクリプトを作ってsystemdのタイマーで制御していたのですが、サーバOSのリプレースを機にPythonで書き直すことにしました。
僕はプロのプログラマとして会社で仕事をしているわけではなく、日曜プログラマーとしてゆるくやっているだけの人間なので、何か不備があるかもしれません。間違いや他に良いアイディアがありましたら気軽に教えて頂けると嬉しいです！

 環境
OS: Pro...]]></summary>
        <author>
            <name>杉田　一毅</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-272｜B - Everyone is Friends]]></title>
        <id>https://zenn.dev/hyperdb/articles/796178b37b3759</id>
        <link href="https://zenn.dev/hyperdb/articles/796178b37b3759"/>
        <updated>2023-07-26T08:28:18.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-272 B - Everyone is Friends



 提出結果
import itertools


def getIntMap():
    return map(int, input().split())


def getIntListRow(N):
    return [list(map(int, input().split())) for _ in range(N)]


def main():
    n, m = getIntMap()
    k = getIntListRow(m)

    a = sum([i + 1 for ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-272｜A - Integer Sum]]></title>
        <id>https://zenn.dev/hyperdb/articles/5ef0737e701621</id>
        <link href="https://zenn.dev/hyperdb/articles/5ef0737e701621"/>
        <updated>2023-07-26T08:28:17.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-272 A - Integer Sum



 提出結果
def getInt():
    return int(input())


def getIntList():
    return list(map(int, input().split()))


def main():
    n = getInt()
    a = getIntList()

    print(sum(a))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[LlamaIndexを触ってみた]]></title>
        <id>https://zenn.dev/collabostyle/articles/cc52ff546df34d</id>
        <link href="https://zenn.dev/collabostyle/articles/cc52ff546df34d"/>
        <updated>2023-07-26T00:24:13.000Z</updated>
        <summary type="html"><![CDATA[はじめに
先日クラスメソッドさん主催のDevelopersIO 2023に参加してきました！
どれも聞き応えのあるセッションで大変勉強になりました。
その中でLlamaIndexというライブラリを利用して、ChatGPTに独自データを付与するセッションがあり、ChatGPTのAPI初心者である自分でもできそうだったのと、面白そうだなと思ったのでやってみました！

 LlamaIndexとは
LlamaIndexは、大規模言語モデル（LLM） と外部データを接続するためのインターフェースを提供します。LlamaIndex を使うと、自分の持っているデータをLLMに組み込んで、質問があっ...]]></summary>
        <author>
            <name>kony</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS CDKを使ってPythonなLambda関数を作成する【Windows】]]></title>
        <id>https://zenn.dev/collabostyle/articles/2596792d6075e7</id>
        <link href="https://zenn.dev/collabostyle/articles/2596792d6075e7"/>
        <updated>2023-07-25T13:40:30.000Z</updated>
        <summary type="html"><![CDATA[AWS CDKはわたしにとってお初の対面でもないのですが、ガッツリ触って
まあまあ壁にぶちあたりながらなんとか攻略できた（気がする）ので
おばあちゃんになった時の自分のために解説していきます🧓

 AWS CDK とは
https://docs.aws.amazon.com/ja_jp/cdk/v2/guide/home.html

AWS Cloud Development Kit (AWS CDK) 開発者ガイドへようこそ。このドキュメントではAWS CDK、コードでクラウドインフラストラクチャを定義し、を通じてプロビジョニングするためのフレームワークについて説明しますAWS Clo...]]></summary>
        <author>
            <name>なな</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[geojsonからハイライト機能のあるKMLを作成する。]]></title>
        <id>https://zenn.dev/daidai_daitai/articles/a89a6477720f2f</id>
        <link href="https://zenn.dev/daidai_daitai/articles/a89a6477720f2f"/>
        <updated>2023-07-25T11:52:41.000Z</updated>
        <summary type="html"><![CDATA[何をするのか
pythonを使用して、geojsonに入力されているPolygonのデータを、GoogleEarthProで表示できるKMLファイルに変換します。
しかし、ただ変換するだけでは面白くないので、マウスカーソルを当てたPolygonがハイライトされる様に変更します。

 はじめに
私の職場ではArcGIS系のサービスを使用しているので、GISのデータはArcGIS系のWebアプリで可視化しています。業務の内容もあり季節ごとの衛星画像が好まれる様で
「GoogleEarthでも見れるようにしてくれ」
といつも言われているため、geojsonのデータをKMLに変換する作業をす...]]></summary>
        <author>
            <name>橙。</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CAEのためのPython2(要素の移動)]]></title>
        <id>https://zenn.dev/cae_taka/articles/bda3e0404e3d2f</id>
        <link href="https://zenn.dev/cae_taka/articles/bda3e0404e3d2f"/>
        <updated>2023-07-25T06:00:47.000Z</updated>
        <summary type="html"><![CDATA[動機
前回の記事でNastranファイルを読み込めたのでデータの加工に取り組んでいきます。
メッシュの作成をやっていると要素の移動をすることはよくあると思うので
今回はこの辺りに取り組んでいきます。

 今回やること
指定したPIDのメッシュモデルを移動します。

 プログラムの説明

pipで以下をインストール（回転移動で使用する四元数のライブラリ）

pip install pyquaternion

以下をインポート

import CAE_File_Read_Write as RW #前回作成したNastranファイルの入出力ファイル

指定したPID(PIDが2以上5以下な...]]></summary>
        <author>
            <name>Taka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-271｜B - Maintain Multiple Sequences]]></title>
        <id>https://zenn.dev/hyperdb/articles/b0937269e64815</id>
        <link href="https://zenn.dev/hyperdb/articles/b0937269e64815"/>
        <updated>2023-07-25T04:54:40.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-271 B - Maintain Multiple Sequences



 提出結果
def getIntMap():
    return map(int, input().split())


def getIntListRow(N):
    return [list(map(int, input().split())) for _ in range(N)]


def main():
    n, q = getIntMap()
    l = getIntListRow(n)
    st = getIntListRow(q)

    for ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-271｜A - 484558]]></title>
        <id>https://zenn.dev/hyperdb/articles/42c11236a8604e</id>
        <link href="https://zenn.dev/hyperdb/articles/42c11236a8604e"/>
        <updated>2023-07-25T04:54:39.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-271 A - 484558



 提出結果
def getInt():
    return int(input())


def main():
    n = getInt()
    h = ['0', '1', '2', '3', '4', '5', '6',
         '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F']

    print(h[n // 16] + h[n % 16])


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[重箱の隅をつつくクラスのあれこれ]]></title>
        <id>https://zenn.dev/yumax_panda/articles/31f833ea220ca9</id>
        <link href="https://zenn.dev/yumax_panda/articles/31f833ea220ca9"/>
        <updated>2023-07-25T03:53:38.000Z</updated>
        <summary type="html"><![CDATA[はじめに
本記事は筆者がPythonの学習をするうえで得た知識の備忘録です。明示的にも暗黙的にも全てが正しいとは保証できないのでご容赦ください（間違いの指摘は大歓迎です）。今回はクラスとその周りについて触れます。クラスの基礎は分かっている前提で、知っていると少しお得かもって程度の内容です。

 基本的な特殊メソッド
自分の定義したクラスに足し算や引き算等を定義できます。アンダースコア二つで名前が囲まれています(ex: __add__, __sub__, ...)。以下は複素数を簡易的に実装したものです。実部と虚部をインスタンス変数に持ちます。
from typing import U...]]></summary>
        <author>
            <name>Yumax-panda</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】関数についてまとめた]]></title>
        <id>https://zenn.dev/miya_akari/articles/6ee0f113d6efc4</id>
        <link href="https://zenn.dev/miya_akari/articles/6ee0f113d6efc4"/>
        <updated>2023-07-25T03:33:52.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Pythonの関数についてまとめました。
前回の記事(条件分岐と繰り返し処理)は、こちら！👇
https://zenn.dev/miya_akari/articles/73464786beecb9
今回は少し短いかも〜💦

 関数の定義

関数を定義するときは、defキーワードを使用する


sample.py
def my_func():
  print('これは関数です')


 関数の実行

関数を実行するには、関数名に()をつけて呼び出す


sample.py
def my_func():
  print('これは関数です')

# 関数の実行
my_func()...]]></summary>
        <author>
            <name>akari</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】条件分岐と繰り返し処理]]></title>
        <id>https://zenn.dev/miya_akari/articles/73464786beecb9</id>
        <link href="https://zenn.dev/miya_akari/articles/73464786beecb9"/>
        <updated>2023-07-25T03:32:54.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Pythonの条件分岐と繰り返し処理についてまとめました。
前回の記事(変数とデータ型)は、こちら！👇
https://zenn.dev/miya_akari/articles/8c82cee5f43c04

 条件分岐

条件分岐をおこなうときは、if文を使用する


 if文

「もしxxならXXをおこなう」というような条件分岐ができる
条件文の中では、比較演算子を使用する


sample.py
a = 40
b = 100

if b > a:
 print('bはaより大きい') # bはaより大きい

!
条件のあとに、「:(コロン)」を忘れないように注意...]]></summary>
        <author>
            <name>akari</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】変数とデータ型]]></title>
        <id>https://zenn.dev/miya_akari/articles/8c82cee5f43c04</id>
        <link href="https://zenn.dev/miya_akari/articles/8c82cee5f43c04"/>
        <updated>2023-07-25T03:31:47.000Z</updated>
        <summary type="html"><![CDATA[はじめに
2月~6月までJavaScriptの現場だったのですが、7月からPythonを扱う現場に異動になりました…！
「えっ{}不要なの！？慣れない…！😨」と思いながら1ヶ月勉強したので、学んだことをまとめていきたいと思います！

 Pythonとは

動的型付け(プログラマが型を指定しなくても良い)
オブジェクト指向
英語に似た単純な構文
セミコロンが不要
中括弧{}も不要で、インデントによってスコープを定義する


 インデントについて

インデントの数が異なると、別のブロックとみなされる

ifとelseなどのインデント数は揃える必要があるので注意！(一致していないとエラーに...]]></summary>
        <author>
            <name>akari</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】paizaラーニング レベルアップ問題集「特殊な探索」【線形探索】後編]]></title>
        <id>https://zenn.dev/amuharai_san/articles/db31885348bf04</id>
        <link href="https://zenn.dev/amuharai_san/articles/db31885348bf04"/>
        <updated>2023-07-25T01:57:12.000Z</updated>
        <summary type="html"><![CDATA[こちらの続きです。
https://zenn.dev/amuharai_san/articles/cb39445b621591
今回はコード全体を掲載します。
ローカルでコーディングし、標準入出力は使いません。テストケースは外部テキストファイルで準備しておき、プログラムから読み込みます。ジャッジ提出ではimportからファイル読み込み部までを削除する他、f.readline()をinput()に置き換えます。

 点と点の距離
名前と点数をメンバ変数とした構造体…を模したクラスPointを作成します。
manhattan()は、自身ともう一つのPointオブジェクトとのマンハッタン距離（...]]></summary>
        <author>
            <name>アムハライさん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VSCodeでPythonフォーマッターを設定してみた]]></title>
        <id>https://zenn.dev/bellstone/articles/ff5aac74455cbf</id>
        <link href="https://zenn.dev/bellstone/articles/ff5aac74455cbf"/>
        <updated>2023-07-24T14:01:16.000Z</updated>
        <summary type="html"><![CDATA[はじめに
VSCodeの拡張機能のBlack Formatterを利用してPythonのコードにフォーマットをかけることができます。拡張機能と設定方法は作成しないとすぐ忘れるため、今回はBlack Formatterと設定方法について共有したいと思います。
私はVSCodeでは主にHTML、CSS、JavaScript関連修正をしますので、フォーマッターはPrettierを使ってます。最近、Pythonで簡単なスクリプトを作成する時にVSCodeを使ってますが、Prettierが認識できませんでした。なので、Prettier用のPluginがあるか調査してみました。
!
余談ですが、...]]></summary>
        <author>
            <name>BellStone</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[MetaとMicrosoftの合作言語モデルLlama-2をlit-GPTでfinetuningする]]></title>
        <id>https://zenn.dev/yosemat/articles/7a93948e9de345</id>
        <link href="https://zenn.dev/yosemat/articles/7a93948e9de345"/>
        <updated>2023-07-24T11:50:58.000Z</updated>
        <summary type="html"><![CDATA[Llama-2とは


 研究にも商用にも使える最強のOSSモデル

https://huggingface.co/blog/llama2
OpenAIのChatGPT, GoogleのPaLM, BardなどのLarge-language model（LLM）が次々と発表されてきていますが、そのデータセットやモデルの公開は非常に限定的です。メガテック企業以外にとってLLMを使ったビジネスというのは非現実的でした。
OSSでもBloomなどのLLMが公開されてきましたが、モデルパラメータ数が小さく性能が足りなかったり、商用に使えないライセンスだったりしました。

 LLMビジネス最大...]]></summary>
        <author>
            <name>Yosemat</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[one-hot表現とは]]></title>
        <id>https://zenn.dev/yuto_mo/articles/37a2373e4d03a7</id>
        <link href="https://zenn.dev/yuto_mo/articles/37a2373e4d03a7"/>
        <updated>2023-07-24T10:51:17.000Z</updated>
        <summary type="html"><![CDATA[今回はone-hot表現について解説します。
まずどんなものか例を示します。
# 通常表現
1
2
3
# one-hot表現
[1,0,0]
[0,1,0]
[0,0,1]
このように、カテゴリをリスト化したものがone-hot表現になります。
one-hotという名前は、リストの一要素のみが1(hot)となっていることに由来します。
one-hot表現は機械学習で使用される単語で、正解データのラベルが意味を持つことを防ぐための表現方法です。
例えば、手描き文字の判別の際に、正解データが[2,1,3]の画像があるとします。
※手書きで2,1,3と書かれた画像データ
この時、正解データの...]]></summary>
        <author>
            <name>pomu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonのGUIウィンドウの多重起動を防止する(tkinter)]]></title>
        <id>https://zenn.dev/dimebag29/articles/a61832a330c540</id>
        <link href="https://zenn.dev/dimebag29/articles/a61832a330c540"/>
        <updated>2023-07-24T10:15:41.000Z</updated>
        <summary type="html"><![CDATA[方法
win32guiのFindWindowを利用し、指定した名前のウィンドウが既に存在したらGUIを立ち上げる前にプログラムを終了させます
win32guiはPythonからWindowsAPIを利用可能とするpywin32というライブラリの一部です。

 環境
・Windows10 64bit
・Python 3.7.5
・tkinter 8.6.9
・pywin32 306

 コード
import win32gui
from tkinter import *


# ウィンドウ名を定義
WindowName = "FoundMe"

# 定義したウィンドウ名と完全一致するウィ...]]></summary>
        <author>
            <name>dimebag29</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[大規模言語モデル(LLM)の作り方 Megatron-DeepSpeed編 Part2]]></title>
        <id>https://zenn.dev/turing_motors/articles/da7fa101ecb9a1</id>
        <link href="https://zenn.dev/turing_motors/articles/da7fa101ecb9a1"/>
        <updated>2023-07-24T09:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Turing 株式会社リサーチチームの藤井(@okoge_kaz)です。
Turingでは、自動運転を支える技術のひとつとして大規模言語モデル(Large Language Model: LLM)に注目しており、関連する技術の研究開発を行っています。
つい先日、大規模言語モデルの事前学習を行う際に用いられることが多いmicrosoft/Megatron-DeepSpeedが大きくupdateされました。(日本時間 2023/6/13, 2023/7/21に大きな変更がありました。)
具体的には、fork元であるNVIDIA/Megatron-LMの最新の変更を取り込むことを...]]></summary>
        <author>
            <name>Kazuki Fujii</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】paizaラーニング レベルアップ問題集「特殊な探索」【線形探索】前編]]></title>
        <id>https://zenn.dev/amuharai_san/articles/cb39445b621591</id>
        <link href="https://zenn.dev/amuharai_san/articles/cb39445b621591"/>
        <updated>2023-07-24T07:33:17.000Z</updated>
        <summary type="html"><![CDATA[「定番アルゴリズムの学習」線形探索メニュー「特殊な探索」の問題を解いてみました。
https://paiza.jp/works/mondai/sequence_search_problems/problem_index?language_uid=python3
問題を解くために組んだ関数をご紹介します。
※この問題集では、線形探索アルゴリズム学習のため原則として組み込み関数を禁じ手とし、愚直な探索を行っています。

 偶数の探索
def searchFirstEven(l: list):
    """
    リストの中で最初に現れる偶数のインデックスを返す。
    ない場合は-1を...]]></summary>
        <author>
            <name>アムハライさん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[HSコードのCSVを出力する]]></title>
        <id>https://zenn.dev/niwatoro/articles/a6f31d532229c9</id>
        <link href="https://zenn.dev/niwatoro/articles/a6f31d532229c9"/>
        <updated>2023-07-24T04:51:42.000Z</updated>
        <summary type="html"><![CDATA[TL;DR
ここからダウンロードしてください。
https://drive.google.com/file/d/1_nPDITqOpXVMKOF-cuo4RGy-opTOtteG/view?usp=drive_link

 概要
ボンジュルノ、にわとろです。最近越境ECに挑戦してみようかと日本の輸出品目の統計を見ていたのですが、e-Statからダウンロードすると品目名が全てHSコードで表されていることに気付きました。HSコードとは、海外とやり取りされる荷物に種類に応じて割り振られる番号のことです。EMSで海外に荷物を発送したことのある方は、送り状を書くときに税関のサイトで中身に対応す...]]></summary>
        <author>
            <name>にわとろ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[gunicornをsystemdで永続化してみる]]></title>
        <id>https://zenn.dev/nowa0402/articles/c0395b56fcffa8</id>
        <link href="https://zenn.dev/nowa0402/articles/c0395b56fcffa8"/>
        <updated>2023-07-23T22:25:00.000Z</updated>
        <summary type="html"><![CDATA[FastAPIをsystemdで制御したい
筆者はFastAPIを業務で使用し
実運用時はgunicornでプロセス管理を行います。
ただ、毎度作業するときにgunicornを直接キルしていて
いつかミスしそうな気がしたのでsystemdで動かしたいなあ…って思っていました。
今回は検証環境をサクッと準備して、systemdによる永続化を試してみます。

 検証環境
検証環境は以下の通り

 サーバ
dockerを使用。
イメージはredhat/ubi8
Red Hat社提供のコンテナイメージです。
https://access.redhat.com/ja/articles/5632...]]></summary>
        <author>
            <name>nowa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[特殊メソッド__X__について]]></title>
        <id>https://zenn.dev/yuto_mo/articles/d3a9422b0a3ecf</id>
        <link href="https://zenn.dev/yuto_mo/articles/d3a9422b0a3ecf"/>
        <updated>2023-07-23T09:37:57.000Z</updated>
        <summary type="html"><![CDATA[今回はpyhtonの特殊メソッドについて解説します。
pyhtonの特殊メソッドとは __ と __ によって囲まれている関数を指します。
主な用途は、class内の要素に対してstrやlenなど、元々存在するメソッドを変更することです。
class MyClass:
    def __init__(self, data):
        self.data = data
    
    def __str__(self):
        return f"MyClass instance with data: {self.data}"
    
    def __len__(...]]></summary>
        <author>
            <name>pomu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GPS軌跡データをマップにマッチングする「Fast Map Matching」とは？]]></title>
        <id>https://zenn.dev/r_nsd/articles/2938c356eba355</id>
        <link href="https://zenn.dev/r_nsd/articles/2938c356eba355"/>
        <updated>2023-07-23T02:54:58.000Z</updated>
        <summary type="html"><![CDATA[Map Matching とは
基本的にはGPSのデータ点を道路上に移動させることをMap Matching と呼びます．
これにより緯度経度の系列から車両がどの経路を走ったかを判定できます．
白い点がGPSデータ，赤線が道路上にマッチングしたあとの経路
本記事では，いくつかあるマップマッチング手法の中でも，GPSデータを使った論文でよく見るFast Map Matching (FMM) の解説と使い方について書いています．
なお，ほかの方法としては，MapboxがMap Matching API を出しているみたいです．
https://qiita.com/keijipoon/it...]]></summary>
        <author>
            <name>r_nsd</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WSL2を使っていて、Chrome WebDriverがエラーになる。]]></title>
        <id>https://zenn.dev/shogo/articles/a0a49f9f976165</id>
        <link href="https://zenn.dev/shogo/articles/a0a49f9f976165"/>
        <updated>2023-07-22T17:55:45.000Z</updated>
        <summary type="html"><![CDATA[自分の環境では最初こんなエラーがでました。
 WebDriverException(f"Service {self._path} unexpectedly exited. Status code was: {return_code}")     
selenium.common.exceptions.WebDriverException: Message: Service /home/shogoyamada/python_project/Kabuto/webdriver/chromedriver unexpectedly exited. Status code was: 127


 W...]]></summary>
        <author>
            <name>shogo.yamada</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[dataclassを捨ててpydanticに乗り換える]]></title>
        <id>https://zenn.dev/yosemat/articles/dd69000307f468</id>
        <link href="https://zenn.dev/yosemat/articles/dd69000307f468"/>
        <updated>2023-07-22T14:38:21.000Z</updated>
        <summary type="html"><![CDATA[Pydanticが今最高にCool
こんにちは、極論モンスターのYosematです。pydanticに替えてdataclassを使う理由は今ほとんどありません。pydanticがV2になったこのタイミングでpydanticに乗り換えましょう。この記事ではなぜdataclassよりもpydanticなのか理由を述べていきます。

素敵なブログからの引用。ただし現在はdataclassもslotを導入している。slotを利用して通常より高速にフィールドアクセスしたい人はattrsやdataclassもアリ。

 理由① より洗練されたインターフェース
pydanticをdataclass...]]></summary>
        <author>
            <name>Yosemat</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[最強のツール「LangSmith」が登場した話【Python / LangChain】]]></title>
        <id>https://zenn.dev/umi_mori/articles/langchain-langsmith</id>
        <link href="https://zenn.dev/umi_mori/articles/langchain-langsmith"/>
        <updated>2023-07-22T14:05:13.000Z</updated>
        <summary type="html"><![CDATA[はじめまして、ますみです！

この記事では、LangChainから出た最新機能であるLangSmithについて解説します！
https://twitter.com/LangChainAI/status/1682129604398678016?s=20
正直、公式ドキュメントを読んでも、最初は凄さがイマイチ理解できませんでしたが、よくよく読んでいくと、これからかなりメジャーなツールになる匂いがしました！
!
ChatGPTやLangChainについてまだ詳しくない方は、こちらを先にご覧ください◎

https://zenn.dev/umi_mori/books/chatbot-chatgp...]]></summary>
        <author>
            <name>ますみ@エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonにおける便利ツールまとめ]]></title>
        <id>https://zenn.dev/yuya_morimoto/articles/93e8ea0e2379c2</id>
        <link href="https://zenn.dev/yuya_morimoto/articles/93e8ea0e2379c2"/>
        <updated>2023-07-22T11:49:59.000Z</updated>
        <summary type="html"><![CDATA[Python開発時にとりあえず使うツール達まとめ
開発時にツール入れれば実質静的型付け言語になります。多分。
ロバストPythonで学んだことが多いのでお勧めします。
https://www.oreilly.co.jp/books/9784814400171/

 poetry
パッケージマネージャーの1つ
pipenvと似てるぞ
大きくは変わらないがなんかオシャレなので使ってる
https://github.com/python-poetry/poetry

 taskipy
タスクランナー
poetryのscriptsはタスクランナーとして使うものではないのでサードパーティのタス...]]></summary>
        <author>
            <name>yuya_morimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[プロンプト改善エージェントを作ってみた]]></title>
        <id>https://zenn.dev/kazuwombat/articles/2095668882245d</id>
        <link href="https://zenn.dev/kazuwombat/articles/2095668882245d"/>
        <updated>2023-07-22T08:43:14.000Z</updated>
        <summary type="html"><![CDATA[本記事はAI Agent Meetup#0で発表した内容を記事化したものです。
本記事では自動でプロンプトを改善する、プロンプト改善エージェントを作る方法についてご紹介します。先に言っておくと、魔法のように良いプロンプトを生成できるまでには至っていません。
ただ、可能性の片鱗は感じることができると思います👍🏼
レポジトリ
https://github.com/kazuooooo/prompt-agent


 そもそもAIエージェントとは?
AIエージェントとは、人の介在を必要とせず、自律的に目的を達成するソフトウェアの総称です。
例えば「最新のAppleの製品に関する記事の要約を、スプ...]]></summary>
        <author>
            <name>かずうぉんばっと</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TensorFlow Datasetsでwiki40bの日本語データを使う]]></title>
        <id>https://zenn.dev/fukugawa/articles/6d98b4e4e7c0e9</id>
        <link href="https://zenn.dev/fukugawa/articles/6d98b4e4e7c0e9"/>
        <updated>2023-07-22T05:15:05.000Z</updated>
        <summary type="html"><![CDATA[TensorFlow Datasetsでwiki40b/jaを使う
私が試した環境は、Python3.8@Ubuntu 20.04 LTSです。

 必要なPythonパッケージのインストール
まず、tensorflow-datasetsと、その関連パッケージをインストールします。
tensorflowに依存しているのでそれもインストールします。
pip install tensorflow==2.11.1
pip install tensorflow-datasets==4.8.3

 サンプルコード
wiki40bの日本語データセットをダウンロードし、trainスプリットの先頭1...]]></summary>
        <author>
            <name>fukugawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sentinel-2の画像から筆ポリゴンを使って圃場ポリゴンの領域の画像を切り取る]]></title>
        <id>https://zenn.dev/fusic/articles/6807ccf192eda0</id>
        <link href="https://zenn.dev/fusic/articles/6807ccf192eda0"/>
        <updated>2023-07-21T12:03:18.000Z</updated>
        <summary type="html"><![CDATA[こんにちは
福岡に来て4年目になりますが夏の暑さはやっぱりこたえる北海道出身の石橋です。
今回はSentinel-2の画像から筆ポリゴンを使って圃場ポリゴンの領域の画像を切り取る方法をメモしておきます

 準備
準備するデータは

筆ポリゴン
衛星画像（Sentinel-2）

です。
筆ポリゴンについてはこちら
https://www.maff.go.jp/j/tokei/porigon/
ダウンロードの度にアンケートみたいなのに回答する必要があって面倒なので自分は全データダウンロードしました。
Sentinel-2の画像については適宜open access hubやAPIなどからダウ...]]></summary>
        <author>
            <name>石橋　龍</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[運搬経路問題（配送最適化問題，Vehicle Routing Problem) をPuLPで解く]]></title>
        <id>https://zenn.dev/r_nsd/articles/89e329570687c2</id>
        <link href="https://zenn.dev/r_nsd/articles/89e329570687c2"/>
        <updated>2023-07-21T07:07:50.000Z</updated>
        <summary type="html"><![CDATA[※ https://qiita.com/r_nsd/items/19dcb30f5478384f90d3 と同じものです
巡回セールスマン問題を一般化した問題である「運搬経路問題」を，最適化問題を簡単に実装できるライブラリであるPythonの「PuLP」を使って解いてみました．
運搬経路問題(VRP)を解く　混合整数計画編 を参考にさせて頂きました．

 運搬経路問題 (VRP)とは
運搬経路問題は，複数の車両で複数の顧客のいる場所に訪れ，荷物の集荷or配達をするときに，その移動コストを最小化するような経路を求める問題です．  Vehicle Routing Problem (VRP)や...]]></summary>
        <author>
            <name>r_nsd</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-270｜A - 1-2-4 Test]]></title>
        <id>https://zenn.dev/hyperdb/articles/97bd1b0daf96f5</id>
        <link href="https://zenn.dev/hyperdb/articles/97bd1b0daf96f5"/>
        <updated>2023-07-21T05:38:04.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-270 A - 1-2-4 Test



 提出結果
def getIntMap():
    return map(int, input().split())


def q(n):
    r = []
    if n in [1, 2, 4]:
        r += [n]
    elif n == 3:
        r += [1, 2]
    elif n == 5:
        r += [1, 4]
    elif n == 6:
        r += [2, 4]
    elif n == 7:
        r ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-270｜B - Hammer]]></title>
        <id>https://zenn.dev/hyperdb/articles/62453f2b3ae522</id>
        <link href="https://zenn.dev/hyperdb/articles/62453f2b3ae522"/>
        <updated>2023-07-21T05:38:04.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-270 B - Hammer



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    x, y, z = getIntMap()

    if x < 0:
        x *= -1
        y *= -1
        z *= -1

    # 0 x y z
    if x < y < z:
        print(x)
        exit
    # 0 x z y
    elif x < ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Code Interpreter で自動運転レースのデータ解析をしてみた (1)]]></title>
        <id>https://zenn.dev/danchinocto/articles/code-interpreter-for-data-analysis-1</id>
        <link href="https://zenn.dev/danchinocto/articles/code-interpreter-for-data-analysis-1"/>
        <updated>2023-07-21T02:58:14.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Virtual Motorsport Lab Inc. (VML) でプロダクト開発をしている @danchinocto です。この記事は、第2回 Generative AI 勉強会 関西での発表内容をまとめ直したものです。

 Code Interpreter とは
OpenAI ChatGPT の Plus ユーザが使える公式プラグインで、2023年7月上旬にリリースされました。
https://openai.com/blog/chatgpt-plugins#code-interpreter

 VML選手権シーズンα
現在、 VML で試験的に運営している自動運転レー...]]></summary>
        <author>
            <name>団地のCTO</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SQLパーサーを使用してみた]]></title>
        <id>https://zenn.dev/carenet/articles/d42b236ae69bc5</id>
        <link href="https://zenn.dev/carenet/articles/d42b236ae69bc5"/>
        <updated>2023-07-21T02:44:07.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事ではいくつかのプログラミング言語でSQLパーサーを利用する方法について解説します。
SQLパーサーを使用することでSQLクエリを構成要素に分割したり、構文解析したり、クエリの改変・整形が可能になります。
具体的には以下のようなことが行えるようになります。

SQLクエリのフォーマッタ：SQLパーサーを使用してSQLクエリの整形を行います。一定のルールでSQLを整形することで可読性を向上させることができます。
クエリの検証：SQLパーサーを利用して実際にSQLを実行せずに構文的にSQLが正しいかを検証できます。
テーブルやカラムの調査：SQLパーサーを利用することで、...]]></summary>
        <author>
            <name>Kaz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChatGPTと一緒に爆速開発を進めるためのTips]]></title>
        <id>https://zenn.dev/shogo/articles/c3515d82e014f8</id>
        <link href="https://zenn.dev/shogo/articles/c3515d82e014f8"/>
        <updated>2023-07-21T01:50:41.000Z</updated>
        <summary type="html"><![CDATA[ここ数日、Androidエンジニアの自分がPythonを勉強したくなってChatGPTと共に開発をしてきたので、その際の効率のいいポイントについて書いていきたいと思います。
ChatGPTを活用することで誰でも短期間でプログラマーになれそうと感じています。

 Tips1 「できるだけ小さな単位で質問する」
ChatGPTには「トークンの制限」があったり「嘘を返してくる」みたいな性質があります。
このことから長いコードを1回で書かせようとすると、動かないコードを返事してくる場合が多いです。

 ダメな質問
「https://hogehoge というサイトの<a>タグとそのリン...]]></summary>
        <author>
            <name>shogo.yamada</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GCE Ubuntu20.04でCOEIROINK(CPU)のエンジンを動かしてリリンちゃんと話す]]></title>
        <id>https://zenn.dev/char/articles/6668adddee303f</id>
        <link href="https://zenn.dev/char/articles/6668adddee303f"/>
        <updated>2023-07-20T17:14:38.000Z</updated>
        <summary type="html"><![CDATA[2023/7/21 現在COEIROINKの製品版ではUbuntuをサポートされていません。GCEにサーバーを立ててスマホから合成を行いたかったため、既存の記事を参考にリポジトリにあるエンジンを使用してみました。
先駆記事様
https://zenn.dev/hojicha/articles/a5663b0b3c524a

 環境
python 3.8を使用するためにUbuntu20.04を採用しました。

マシンの構成: e2-medium
アーキテクチャ: x86/64
イメージ: ubuntu-2004-focal-v20230715
サイズ: 15GB (10GBでは足りなかった...]]></summary>
        <author>
            <name>ちゃあ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python3エンジニア認定基礎試験対策(1章・2章)]]></title>
        <id>https://zenn.dev/double/articles/0681adaf80d9bb</id>
        <link href="https://zenn.dev/double/articles/0681adaf80d9bb"/>
        <updated>2023-07-20T14:42:07.000Z</updated>
        <summary type="html"><![CDATA[1章：食欲をそそってみようか 出題数1問(2.5%)
C/C++/JAVA→プロフェッショナルなソフトウェア開発
UNIXシェルスクリプト/Windowsパッチファイル→用途が限られる

 Pythonの魅力

超高水準言語
→人間が理解しやすい言語
型の指定が不要(動的型付け)




主なデータ型
説明




str(文字列)
文字列


int(整数)
小数点含まない数


float(浮動小数)
少数


bool(真偽値)
TrueまたはFalse


list(リスト)
[]の中に複数の要素を「,」で区切って書く


tuple(タプル)
()の中に複数の要素を「,」で...]]></summary>
        <author>
            <name>takahashi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Lambdaコンテナ関数ではAWS提供ベースイメージを使う]]></title>
        <id>https://zenn.dev/enechange_blog/articles/ef40c3e78731e3</id>
        <link href="https://zenn.dev/enechange_blog/articles/ef40c3e78731e3"/>
        <updated>2023-07-20T14:39:53.000Z</updated>
        <summary type="html"><![CDATA[コールドスタートに4～5秒かかるPythonのLambdaコンテナ関数があり、改善策を調べていたら、AWS公式ブログに下記の記述を見つけました。

AWS が提供するベースイメージは、Lambda サービスによってプロアクティブにキャッシュされます。つまり、ベースイメージは近くの別のアップストリームキャッシュにあるか、ワーカーインスタンスキャッシュにすでに存在しています。はるかに大きいにもかかわらず、キャッシュされないかもしれないサードパーティのベースイメージと比較するとデプロイ時間が短くなる可能性があります。
コンテナイメージとしてパッケージ化された Lambda 関数の最適化 | A...]]></summary>
        <author>
            <name>Takashi Iwamoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[InquirerPyを使って、S3から対話式でファイルをダウンロードする]]></title>
        <id>https://zenn.dev/not75743/articles/17bab3ec7ff90f</id>
        <link href="https://zenn.dev/not75743/articles/17bab3ec7ff90f"/>
        <updated>2023-07-20T14:08:38.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回はpythonのInquirerPyを使って、
S3から対話式でわかりやすくファイルをダウンロード出来るCLIツールを作りました。
よかったら見てみて下さい。

 動作イメージ
とても便利です！


 コード
コード
main.py
import boto3
from InquirerPy import inquirer

s3 = boto3.resource('s3')

def list_buckets():
    return [bucket.name for bucket in s3.buckets.all()]

def list_objects(buck...]]></summary>
        <author>
            <name>not75743</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【TFDS】TensorFlow DatasetsでCC-100の日本語を使う]]></title>
        <id>https://zenn.dev/fukugawa/articles/8297cbef137332</id>
        <link href="https://zenn.dev/fukugawa/articles/8297cbef137332"/>
        <updated>2023-07-20T11:59:55.000Z</updated>
        <summary type="html"><![CDATA[TensorFlow DatasetsでCC-100の日本語を使う
TensorFlowデータセットのカタログ一覧にはcc100は含まれていません。（2023年7月現在）
しかし、Huggingfaceデータセットのcc100を、TensorFlowデータセット経由で使用することが可能です。

 必要なPythonパッケージのインストール
まず、tensorflow-datasetsと、その関連パッケージをインストールします。
tensorflowに依存しているのでそれもインストールします。
datasetsパッケージはHuggingfaceデータセットを利用するために必要です。
p...]]></summary>
        <author>
            <name>Ryoichi Fukugawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[LangChainを使って自然言語でデータベースを検索する（Azure編）]]></title>
        <id>https://zenn.dev/cannoteat/articles/ae6040bfaa52d4</id>
        <link href="https://zenn.dev/cannoteat/articles/ae6040bfaa52d4"/>
        <updated>2023-07-20T11:29:55.000Z</updated>
        <summary type="html"><![CDATA[やること
この記事ではLangChainを使って自然言語でデータベースを検索してみます。
環境はAzureを使っていますので、Azure OpenAIとSQL Databse付属のサンプルスキーマを利用します。
手順はこの辺を参考にしています。
https://python.langchain.com/docs/modules/agents/toolkits/sql_database
https://python.langchain.com/docs/modules/chains/popular/sqlite

 データベースの準備
マニュアルを参考にデータベースとサンプルデータを用...]]></summary>
        <author>
            <name>oops!</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[deta.spaceでデータベース（collections）を使う]]></title>
        <id>https://zenn.dev/shinshin777/articles/08a40dad45b225</id>
        <link href="https://zenn.dev/shinshin777/articles/08a40dad45b225"/>
        <updated>2023-07-20T09:18:06.000Z</updated>
        <summary type="html"><![CDATA[こんにちはーshinshinです。
データベースってmysqlとかphpとか大人たちは言っていますけど、コード閣僚多くてめんどくさいですよね。サーバーもいるし。
pythonで無料で簡単にできたらいいのになーって思います。
そんな高校生のみなさんに、deta.space !!
なにそれって方はこちらを
https://zenn.dev/shinshin777/articles/f000e04ecc38d4

 Let's Cook!!
新しいフォルダを作ってmain.pyとrequirements.txtを作ります。フォルダごとVScodeで開くと編集が楽です.
main.py
from...]]></summary>
        <author>
            <name>shinshin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenAI APIのパラメータで遊ぶ（top_p編）]]></title>
        <id>https://zenn.dev/agdm/articles/c41f4d27fccfd9</id>
        <link href="https://zenn.dev/agdm/articles/c41f4d27fccfd9"/>
        <updated>2023-07-20T09:16:09.000Z</updated>
        <summary type="html"><![CDATA[前回からの続きで、今回はtop_pを変えていくと何が起こるのかを見ていこうと思う。

 top_pってなあに？
Prompt Engineering Guideには以下のように書かれている。
Top_p - 同様に、核サンプリングと呼ばれるサンプリング手法であるtop_pでは、モデルが応答を生成する際の決定性をコントロールすることができます。正確で事実に基づいた回答を求めるのであれば、この値を低くしておきます。より多様な回答を求めるのであれば、より高い値にします。
「核サンプリング」。またしてものっけから優しくない。しかし、決定性をコントロールするというのは果たしてtemperature...]]></summary>
        <author>
            <name>揚げ玉</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deta Spaceの使い方?はまりポイント？]]></title>
        <id>https://zenn.dev/shinshin777/articles/f000e04ecc38d4</id>
        <link href="https://zenn.dev/shinshin777/articles/f000e04ecc38d4"/>
        <updated>2023-07-20T07:56:17.000Z</updated>
        <summary type="html"><![CDATA[こんにちはーshinshinです。
新しいdetaspaceがとても便利なので紹介します。

 deta.spaceとは？
一言でいえば「謎多き無料BaaS」です。pythonアプリ（ほかの言語もいけるかも？）をホストすることができ、データベースも使えます。flaskのようなwebアプリやAPIが作れます。
「謎が多い」のは、ドキュメントが短く。ネットにも全然情報が載っていないからです。料金プランすら見つけられなかったので、どうやって運営しているのかナゾです！
謎が多いのと無料なので、個人開発プロジェクトに向いています。（ユーザーをいっぱいお持ちの皆さんはrenderにでも課金してくださ...]]></summary>
        <author>
            <name>shinshin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-269｜B - Rectangle Detection]]></title>
        <id>https://zenn.dev/hyperdb/articles/2682bc514ef2ce</id>
        <link href="https://zenn.dev/hyperdb/articles/2682bc514ef2ce"/>
        <updated>2023-07-20T04:45:43.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-269 B - Rectangle Detection



 提出結果
def getStringRow(N):
    return [input() for _ in range(N)]


def main():
    s = getStringRow(10)

    r = []
    for i in range(10):
        r.append(0 if s[i].find('#') == -1 else 1)

    sr = r.index(1)
    r.reverse()
    er = r.index(1)

  ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-269｜A - Anyway Takahashi]]></title>
        <id>https://zenn.dev/hyperdb/articles/0499eba33f67ec</id>
        <link href="https://zenn.dev/hyperdb/articles/0499eba33f67ec"/>
        <updated>2023-07-20T04:45:43.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-269 A - Anyway Takahashi



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    a, b, c, d = getIntMap()

    print((a + b) * (c - d))
    print('Takahashi')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Omeka Classic IIIF Toolkitにデータを一括登録する]]></title>
        <id>https://zenn.dev/nakamura196/articles/fa861fa7dffbb8</id>
        <link href="https://zenn.dev/nakamura196/articles/fa861fa7dffbb8"/>
        <updated>2023-07-20T02:29:30.000Z</updated>
        <summary type="html"><![CDATA[概要
Omeka Classic IIIF Toolkitにデータを一括登録する方法を説明します。Omeka Classic IIIF Toolkitのセットアップについては、以下を参考にしてください。
https://zenn.dev/nakamura196/articles/ba173e62071ee8
また、以下の記事の内容を発展させ、excelデータを入力データとして、より簡便に使用できるようにしたものです。
https://zenn.dev/nakamura196/articles/042d4c8e960171

 excelファイルの準備
以下のようなexcelファイルを...]]></summary>
        <author>
            <name>nakamura196</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kaggle体験談]]></title>
        <id>https://zenn.dev/shinji0000/articles/94e1b63d6111dc</id>
        <link href="https://zenn.dev/shinji0000/articles/94e1b63d6111dc"/>
        <updated>2023-07-20T00:35:56.000Z</updated>
        <summary type="html"><![CDATA[はじめに
データサイエンスに興味を持ち、Kaggleに挑戦してみようと思い立ってチュートリアルの'Titanic - Machine Learning from Disaster'に取り組みました。データを眺めながら考えたことや役立つコードことを自分用の備忘録としてまとめました。有識者の方にはたくさんご指摘いただくことがあるかもしれないけど温かく見守っていただければ嬉しいです...

 備忘録

 ライブラリの読み込み
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pypl...]]></summary>
        <author>
            <name>shinji eto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[高校生エンジニアが解説！コンピューターサイエンスを学べる技術書5選]]></title>
        <id>https://zenn.dev/raio/articles/ced6aaec7bf56f</id>
        <link href="https://zenn.dev/raio/articles/ced6aaec7bf56f"/>
        <updated>2023-07-19T11:08:07.000Z</updated>
        <summary type="html"><![CDATA[はじめに
みなさん、こんにちは。公立高校に通いながら、放課後や休日はIT企業のエンジニアとして働いてるRaioです🙌
今回の記事では、コンピューターサイエンスが学べる技術書を5冊紹介します📕
ご興味のある方は、是非最後まで読んでみてください！
↓筆者について↓
https://zenn.dev/raio/articles/2478a66537c685

 技術書を無料で読む方法
KindleUnlimitedを使うことで、沢山の技術書を無料で何冊でも読むことが可能です🙌

200万冊以上の書籍が何冊でも読み放題
月額980円が今なら1ヶ月無料
場所に囚われず、様々な端末で使用可能

...]]></summary>
        <author>
            <name>Raio｜高校生エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-268｜B - Prefix?]]></title>
        <id>https://zenn.dev/hyperdb/articles/fe2c94bf23771f</id>
        <link href="https://zenn.dev/hyperdb/articles/fe2c94bf23771f"/>
        <updated>2023-07-19T08:18:06.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-268 B - Prefix?



 提出結果
def getString():
    return input()


def main():
    s = getString()
    t = getString()

    print('Yes' if t.find(s) == 0 else 'No')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-268｜A - Five Integers]]></title>
        <id>https://zenn.dev/hyperdb/articles/5468c04eb52f0f</id>
        <link href="https://zenn.dev/hyperdb/articles/5468c04eb52f0f"/>
        <updated>2023-07-19T08:18:06.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-268 A - Five Integers



 提出結果
def getIntList():
    return list(map(int, input().split()))


def main():
    n = getIntList()

    print(len(list(set(n))))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[大規模言語モデル(LLM)の作り方 GPT-NeoX編 Part 1]]></title>
        <id>https://zenn.dev/turing_motors/articles/dff1466194f4ac</id>
        <link href="https://zenn.dev/turing_motors/articles/dff1466194f4ac"/>
        <updated>2023-07-19T08:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Turing 株式会社のリサーチチームでインターンをしている東京工業大学 B4 の藤井(@okoge_kaz)です。
大規模モデルへの注目の高さを肌で感じる今日このごろですが、事前学習の知見については依然として十分に共有されているとは言い難いと個人的に感じています。
Turing株式会社では、次世代の自動運転技術を支える技術の1つとして大規模言語モデルに注目しており、独自に研究開発を行っています。今回は大規模言語モデルを学習する際、用いるライブラリ候補の１つに上がるであろうGPT-NeoXについて解説します。
以下で環境構築方法、学習を行う方法などについて詳しく解説します。...]]></summary>
        <author>
            <name>Kazuki Fujii</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonのパッケージマネージャ＆仮想環境マネージャ]]></title>
        <id>https://zenn.dev/karamawanu/articles/49862769ae826b</id>
        <link href="https://zenn.dev/karamawanu/articles/49862769ae826b"/>
        <updated>2023-07-19T06:07:52.000Z</updated>
        <summary type="html"><![CDATA[色々出てきて解らんと言ってるひとがいたので大雑把にまとめた。
より詳しくは、他の誰かさんが書いた資料が山ほどあるので参照されたい。

 仮想環境
python本体には、OSの環境変数を参照して環境を切り替える機構がもともと入っている。
https://docs.python.org/ja/3/using/cmdline.html#environment-variables
ここでいう”環境”とは、ライブラリ構成、python本体のバージョン等の組み合わせを示す。
適当なディレクトリに必要なファイル群を全て集めて、pythonがそこのファイルだけを参照するようにすれば、環境を切り替えること...]]></summary>
        <author>
            <name>karamawanu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Flet入門] 主要コントロールの使い方]]></title>
        <id>https://zenn.dev/gogotealove/articles/8a90a2a0519c2d</id>
        <link href="https://zenn.dev/gogotealove/articles/8a90a2a0519c2d"/>
        <updated>2023-07-19T05:45:39.000Z</updated>
        <summary type="html"><![CDATA[はじめに
https://zenn.dev/gogotealove/articles/3cb92bcdfac15f
Python でクロスプラットフォーム GUI アプリを作るのであれば最近のイチオシは flet です。イマドキな UI と敷居の低さが最高です。

 コントロールの紹介
https://flet.dev/docs/controls/
https://flet-controls-gallery.fly.dev/layout
迷ったら公式リファレンスとコントロールギャラリーまで。特にギャラリーはおすすめです。全ての動作イメージ確認とソースコードが閲覧できます。これをコピペ...]]></summary>
        <author>
            <name>えいじ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[テストしやすくリファクタリングしたら、いろいろうれしかった]]></title>
        <id>https://zenn.dev/x_point_1/articles/a849896a547e9b</id>
        <link href="https://zenn.dev/x_point_1/articles/a849896a547e9b"/>
        <updated>2023-07-19T04:01:38.000Z</updated>
        <summary type="html"><![CDATA[はじめに
開発をしていて、「あれ、テストしにくいな・・・」と思うことがあり、テストしやすくなるようにリファクタリングしてみると、いろいろメリットを感じることができたので共有します！

 リファクタリング前の状態

 Lambda本体

lambda_function.py
def lambda_handler(event, context):
    try:
        # eventオブジェクトからクエリパラメータを取得
        query_params = event.get("queryStringParameters")
        user_id = in...]]></summary>
        <author>
            <name>まみたす</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenAI APIのパラメータで遊ぶ（temperature編）]]></title>
        <id>https://zenn.dev/agdm/articles/02067751812ba4</id>
        <link href="https://zenn.dev/agdm/articles/02067751812ba4"/>
        <updated>2023-07-19T01:57:54.000Z</updated>
        <summary type="html"><![CDATA[前回作ったPythonの開発環境でOpenAI APIを遊んでいる。
https://zenn.dev/agdm/articles/0f82ea448e38b8
いろいろ打っているうちに、Pythonのコードをいろいろいじってみたくなってきた。ひとまずは他のプログラミング言語で学んだ作法の通り、ターミナルから標準入力で質問を打ち込めるようにしてみた。さて、ここからどうしようか。
import openai
openai.api_key = 'XXXXXXXXXXXXXXXXXXXXXXXXXXXXX'
stri = input("質問を入力してください：")

response = op...]]></summary>
        <author>
            <name>揚げ玉</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WikibaseSyncを試す]]></title>
        <id>https://zenn.dev/nakamura196/articles/95c36ed43626b1</id>
        <link href="https://zenn.dev/nakamura196/articles/95c36ed43626b1"/>
        <updated>2023-07-18T17:26:30.000Z</updated>
        <summary type="html"><![CDATA[概要
以下のWikibaseSyncを試す機会がありましたので、その備忘録です。
https://github.com/the-qa-company/WikibaseSync
以下の論文で、上記のツールを知りました。
https://doi.org/10.11517/jsaisigtwo.2022.SWO-056_04

 インストール
ソースコードや関連ライブラリをインストールします。
!get clone https://github.com/the-qa-company/WikibaseSync
cd WikibaseSync
!pip install -r requireme...]]></summary>
        <author>
            <name>nakamura196</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[wikibaseのapiをつかってみる]]></title>
        <id>https://zenn.dev/nakamura196/articles/d6c5ea5e7afeb7</id>
        <link href="https://zenn.dev/nakamura196/articles/d6c5ea5e7afeb7"/>
        <updated>2023-07-18T16:18:01.000Z</updated>
        <summary type="html"><![CDATA[概要
wikibaseのapiをpythonクライアントから使用する機会がありましたので、その備忘録です。
以下のライプラリを使用しました。
https://wikibase-api.readthedocs.io/en/latest/index.html

 インストール
以下でインストールします。
!pip install wikibase-api

 Read
今回は、以下のwikibaseインスタンスに対して処理を行います。
https://nakamura196.wikibase.cloud/
from wikibase_api import Wikibase

api_ur...]]></summary>
        <author>
            <name>nakamura196</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Flet入門] PythonだけでGUIアプリ作ろう！]]></title>
        <id>https://zenn.dev/gogotealove/articles/3cb92bcdfac15f</id>
        <link href="https://zenn.dev/gogotealove/articles/3cb92bcdfac15f"/>
        <updated>2023-07-18T15:36:46.000Z</updated>
        <summary type="html"><![CDATA[Flet に至る経緯（はじめに）
ちょっとした業務アプリやお便利ツールを他人に使ってもらうために、どうしてもGUIツールの開発が必要になることがあります。こんなとき一般企業の場合は、Excel VBA が最高最強なのですが、イマドキのフレームワークを使った開発体験もキャッチアップしておけばいつか応用も効くかもしれないですね（なにより楽しい！）
というわけで、使い慣れている Python で書きたいと思ったのですが、GUIフレームワーク自体にあまり追加学習コストをかけたくないので、チュートリアル含めたドキュメントが充実しているものがいいなと。導入までの手順もpip instalだけであ...]]></summary>
        <author>
            <name>えいじ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dataverseを試す]]></title>
        <id>https://zenn.dev/nakamura196/articles/5868ec4975eb42</id>
        <link href="https://zenn.dev/nakamura196/articles/5868ec4975eb42"/>
        <updated>2023-07-18T15:07:25.000Z</updated>
        <summary type="html"><![CDATA[概要
Dataverseを試す機会がありましたので、その備忘録です。以下のデモ環境を使用します。
https://demo.dataverse.org/

 アカウント作成
Sign Upからアカウントを作成します。


 Dataverseの作成
Dataverseを作成してみます。

以下のようなDataverseを作成しました。
https://demo.dataverse.org/dataverse/nakamura196


 Datasetの作成
Add Dataから、データセットを作成します。

以下が登録画面です。

以下が登録結果の画面です。

URLは以下になって...]]></summary>
        <author>
            <name>nakamura196</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS LambdaのPythonコードでBugsnagを使う際は「asynchronous=False」にする]]></title>
        <id>https://zenn.dev/enechange_blog/articles/2c9d4f4cce995a</id>
        <link href="https://zenn.dev/enechange_blog/articles/2c9d4f4cce995a"/>
        <updated>2023-07-18T12:01:17.000Z</updated>
        <summary type="html"><![CDATA[AWS LambdaのPythonコードでBugsnagを使う際、デフォルトの「asynchronous=True」のままだと、通知が飛びませんでした。深く追ってはいませんが、非同期的な通知より先にLambda関数が終了してしまうのでしょう。
「asynchronous=False」を指定したところ、意図どおり通知が飛ぶようになりました。
以下、参考リソースです。

By default, requests are sent asynchronously to BugSnag. If you would like to block until the request is done, y...]]></summary>
        <author>
            <name>Takashi Iwamoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Code interpreterを使ってプロンプトのみで機械学習を行う]]></title>
        <id>https://zenn.dev/hodakam/articles/d5fdc92042d933</id>
        <link href="https://zenn.dev/hodakam/articles/d5fdc92042d933"/>
        <updated>2023-07-18T11:46:33.000Z</updated>
        <summary type="html"><![CDATA[TL; DR
Code Interpreterを使うと、次の二つのプロンプトとデータセットをアップロードするだけで、EDA、欠損値処理、分布の変換、カテゴリ変数の変換、データの分割、学習、評価と一通りの機械学習を解説付きでやってくれた。

このデータは機械学習の練習によく用いられるカリフォルニアの住宅価格データセットです。このデータセットから住宅価格を予測するモデルを構築し、住宅の条件に合わせた適切な住宅価格を設定したいと思っています。では、まず何を始めたらいいでしょうか？


では次に何をしたらいいですか？


 はじめに
先日、ChatGPTの新機能としてCode Interpr...]]></summary>
        <author>
            <name>hodakam</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[東京都の月別平均気温を Climate Spiral っぽく可視化した]]></title>
        <id>https://zenn.dev/takilog/articles/84ff504c6673ee</id>
        <link href="https://zenn.dev/takilog/articles/84ff504c6673ee"/>
        <updated>2023-07-18T10:29:29.000Z</updated>
        <summary type="html"><![CDATA[はじめに
最近暑いですね。猛暑日が続いたり、早朝から30℃超えたり、梅雨明けを待たず厳しい季節が続きます。この時期になると、地球温暖化の話がインターネットで毎年見られます。
地球温暖化の真偽は置いておくとして、以前NASAが作った Climate Spriral という可視化はよく出来ているなと感じます。
https://www.youtube.com/watch?v=jWoCXLuTIkI&ab_channel=NASAClimateChange
今回の記事では、東京都のデータを使って、似たような作図をmatplotlibで行うことを目指します。

 作ったもの
先に作った...]]></summary>
        <author>
            <name>たきろぐ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[stable diffusion webuiのAPIを使う方法]]></title>
        <id>https://zenn.dev/shiro_toy_box/articles/8d58aa5a2bdc98</id>
        <link href="https://zenn.dev/shiro_toy_box/articles/8d58aa5a2bdc98"/>
        <updated>2023-07-18T09:06:18.000Z</updated>
        <summary type="html"><![CDATA[AUTOMATIC1111のstable diffusion webuiのAPIを使います。
以下のものの使い方がわかります。

webuiのAPIの起動方法
APIを使ってt2i、i2iの使い方

!
noteにシンプルにまとめてあります。


 webuiのAPI起動
webui-user.batのset COMMANDLINE_ARGSにコマンドライン引数を追加します。
set COMMANDLINE_ARGS=--api
!
APIが起動しなければ--nowebuiを付け加えてください

起動したらhttp://127.0.0.1:7861/docs（もしくは起動時のwebuiの...]]></summary>
        <author>
            <name>しろ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python + Motor で操作する MongoDB チュートリアル (WIP)]]></title>
        <id>https://zenn.dev/sweetsoundstory/articles/cc0c4f344c07e7</id>
        <link href="https://zenn.dev/sweetsoundstory/articles/cc0c4f344c07e7"/>
        <updated>2023-07-18T08:03:44.000Z</updated>
        <summary type="html"><![CDATA[基本用語説明



用語
説明




データベース (Database)
MongoDB内のデータのコンテナであり、複数のコレクションを含むことができます。


コレクション (Collection)
ドキュメントのグループであり、MongoDB内のデータの構造を定義します。テーブルに相当します。


ドキュメント (Document)
MongoDB内のデータの基本単位であり、キーと値のペアの集合です。JSON形式のデータです。レコードに相当します。


フィールド (Field)
ドキュメント内の個々のデータ項目であり、キーと値のペアです。列に相当します。


ドキュメントID...]]></summary>
        <author>
            <name>Shun</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-267｜A - Saturday]]></title>
        <id>https://zenn.dev/hyperdb/articles/913ef1d7591e3b</id>
        <link href="https://zenn.dev/hyperdb/articles/913ef1d7591e3b"/>
        <updated>2023-07-18T07:33:33.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-267 A - Saturday



 提出結果
def getString():
    return input()


def main():
    s = getString()
    d = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']

    print(5 - d.index(s))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-267｜B - Split?]]></title>
        <id>https://zenn.dev/hyperdb/articles/07b09b5d3cc8d6</id>
        <link href="https://zenn.dev/hyperdb/articles/07b09b5d3cc8d6"/>
        <updated>2023-07-18T07:33:32.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-267 B - Split?



 提出結果
def getString():
    return input()


def col(p):
    c = []
    c.append(0)
    c.append(p[7])
    c.append(p[4])
    c.append(1 if sum([p[2], p[8]]) > 0 else 0)
    c.append(1 if sum([p[1], p[5]]) > 0 else 0)
    c.append(1 if sum([p[3], p[9]]) > 0...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pytest+sqlalchemy+mysqlでループ内で失敗させてロールバックのテストをする]]></title>
        <id>https://zenn.dev/shimo_s3/articles/aef94a9ca2216c</id>
        <link href="https://zenn.dev/shimo_s3/articles/aef94a9ca2216c"/>
        <updated>2023-07-17T09:43:00.000Z</updated>
        <summary type="html"><![CDATA[やりたいこと
ループ途中でDB処理が失敗したときのロールバック挙動をテストする

 準備
(my環境)
Python 3.9.13
sqlalchemy  2.0.17
mysql 8.0.33

 MySQLのインストール、準備
インストール
sudo apt-get install mysql-server
sudo mysql_secure_installation
ログイン
sudo mysql -u root -p
dbnameというデータベース、 username, passwordでユーザを作成する。
CREATE DATABASE dbname;

CREATE US...]]></summary>
        <author>
            <name>shimo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[小ネタ]pipenvのvenvとPipfileの対応を確認して不要なものを消したい]]></title>
        <id>https://zenn.dev/shimo_s3/articles/6a0a2901454bd0</id>
        <link href="https://zenn.dev/shimo_s3/articles/6a0a2901454bd0"/>
        <updated>2023-07-17T01:10:39.000Z</updated>
        <summary type="html"><![CDATA[やりたいこと

pipenvの操作を失敗して、不要なvirtualenvsが沢山できていたので掃除しました。
念のためPipfileとの関連を確認しながら消しました。

!
環境を消すときは慎重にしてください。


 課題
VSCodeでPythonインタプリタを選択しようとしたら、、あら？みたいな大量の環境が。これを消して整理したいです。(pyenvでPythonを複数インストールしているのも原因なのですが、ここでは扱いません)


 やったこと

 確認が必要な場所

venvの場所(~/.local/share/virtualenvs/)
Pipfileの場所(各プロジェクトの...]]></summary>
        <author>
            <name>shimo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python concurrent.futures.ProcessPoolExecutor で KeyboardInterrupt のメモ]]></title>
        <id>https://zenn.dev/syoyo/articles/014ba15dc78871</id>
        <link href="https://zenn.dev/syoyo/articles/014ba15dc78871"/>
        <updated>2023-07-16T12:18:52.000Z</updated>
        <summary type="html"><![CDATA[concurrent.futures.ProcessPoolExecutor で並行処理しているのを, Ctrl-C で止めると子プロセスが残ってつらい...(Linux)

 環境
Python 3.8+

 原因
Python ProcessPoolExecutor では, fork ベースでプロセス作って IPC しているっぽいです.
そのため, プログラムによっては Ctrl-C で強制終了させると, 親プロセスと通信できなくなってずっと子プロセスが残ってしまうときがあります.

 解決
とりま　SIGINT handler と try の組み合わせで行います.
https://...]]></summary>
        <author>
            <name>syoyo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Matplotlibで折れ線グラフを描く：チートシート]]></title>
        <id>https://zenn.dev/yagiyuki/articles/matplotlib_line_graph</id>
        <link href="https://zenn.dev/yagiyuki/articles/matplotlib_line_graph"/>
        <updated>2023-07-16T06:36:07.000Z</updated>
        <summary type="html"><![CDATA[Pythonのデータ視覚化ライブラリであるMatplotlibは、データ分析者や研究者に広く利用されています。その主要な理由として、高度にカスタマイズ可能なプロットを容易に作成できる点が挙げられます。この記事では、PythonとMatplotlibを使用して基本的な折れ線グラフを作成する方法を解説します。
この記事で解説しているコードは、plt_line_graph.ipynbから参照できます。
以下の環境で動作確認済みです。
Python 3.8.16
matplotlib==3.7.2

 環境設定
Matplotlibは、以下のコマンドでインストールできます。
pip instal...]]></summary>
        <author>
            <name>yagiyuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[複数の学習済みモデルを評価する。評価項目と各コードを紹介。]]></title>
        <id>https://zenn.dev/ykesamaru/articles/41da74603fd098</id>
        <link href="https://zenn.dev/ykesamaru/articles/41da74603fd098"/>
        <updated>2023-07-16T06:09:26.000Z</updated>
        <summary type="html"><![CDATA[2行で説明


学習済みモデルの評価方法をまとめたよ。
作成したコードと出力結果を紹介するよ。



 はじめに
深層学習で得られたモデル群の評価について、

どのような評価軸があるのか
実際にどのようなコードを書けばよいのか

をまとめました。
例えば学習中であればepoch毎の損失値や精度を確認することができますが、学習が終わってしまえばどのようにそれら複数モデルの性能を評価すればよいのか、ということが気になると思います。

どのモデルが最も良いモデルなのかを判断するためには、評価方法を知っておく必要があります。

 評価の種類

 学習済みのモデルを評価する評価項目

 A...]]></summary>
        <author>
            <name>yKesamaru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ゼロから始めるDagster・すぐに使える実践ガイド]]></title>
        <id>https://zenn.dev/datamarket/articles/dagster_guide</id>
        <link href="https://zenn.dev/datamarket/articles/dagster_guide"/>
        <updated>2023-07-16T03:15:14.000Z</updated>
        <summary type="html"><![CDATA[はじめに
本ドキュメントは、Dagsterのシステムコンセプトについて基本的な内容を要約・再整理した、Dagster導入のガイドです。
Dagsterの概念は、データオーケストレーションに特化されているところから独特のコンセプトを用いているところがあります。そのため、特に難しく重要な内容を要約し、理解の助けにするところを目指しました。また、公式ドキュメントの構成も十分に整理されていない部分もあり私なりに再構成してあります。用途に応じ目次を参照しつつ拾い読みしながらご活用いただけると幸いです。

 Dagsterのシステム概要
以下は公式から引用したDagsterのシステム概要図です。...]]></summary>
        <author>
            <name>datamarket</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChatGPTでSQL操作をする方法【Python / LangChain】]]></title>
        <id>https://zenn.dev/umi_mori/articles/langchain-chains-sql</id>
        <link href="https://zenn.dev/umi_mori/articles/langchain-chains-sql"/>
        <updated>2023-07-16T02:07:58.000Z</updated>
        <summary type="html"><![CDATA[はじめまして、ますみです！

この記事では、「LangChain」というライブラリを使って解説します。
ChatGPTやLangChainについてまだ詳しくない方は、こちらを先にご覧ください◎
https://zenn.dev/umi_mori/books/chatbot-chatgpt
https://zenn.dev/umi_mori/books/prompt-engineer
!
文字よりも「動画の方が理解しやすい」という方はこちらをご覧ください◎
ChatGPTでSQL操作をする方法【SQL / Python / LangChain】

!
Google Colabで実行したい方...]]></summary>
        <author>
            <name>ますみ@エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[freee プログラミングコンテスト2023（ABC310）に参加したので冒頭3問を振り返ります]]></title>
        <id>https://zenn.dev/bun913/articles/enjoy_abc310</id>
        <link href="https://zenn.dev/bun913/articles/enjoy_abc310"/>
        <updated>2023-07-15T14:12:34.000Z</updated>
        <summary type="html"><![CDATA[こんにちは。
ダイの大冒険という漫画のガチ勢のbun913といいます。
皆さんはAtCoderという競技プログラミングを楽しめるサービスをご存知でしょうか？
https://atcoder.jp/?lang=ja
私は以前よりちょくちょく趣味でコンテストに参加しているのですが、先日の2023年7月15日（土）に開催されたfreee プログラミングコンテスト2023（AtCoder Beginner Contest 310） - AtCoderにも参加していました！
私は現在C問題までをほぼ確実に解ききるマンを目指しており、今回はC問題までの3問を解答することがきました。

 解いた問題と...]]></summary>
        <author>
            <name>bun913</name>
        </author>
    </entry>
</feed>