<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://s-i27.github.io/Rssfeed/index.html</id>
    <title>osmos::feed</title>
    <updated>2022-07-31T02:29:09.658Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="https://s-i27.github.io/Rssfeed/index.html"/>
    <link rel="self" href="https://s-i27.github.io/Rssfeed/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[拡散生成モデルで学ぶJax/Flaxによる深層学習プログラミング]]></title>
        <id>https://zenn.dev/dhirooka/articles/af80381a2cb6b0</id>
        <link href="https://zenn.dev/dhirooka/articles/af80381a2cb6b0"/>
        <updated>2022-07-31T00:34:13.000Z</updated>
        <summary type="html"><![CDATA[はじめに
深層学習モデルやその学習を実装する際には、多くの場合でPyTorchやKerasなどのフレームワークが使われます。本記事では、Googleより公開されているJaxというフレームワークを用いた深層学習プログラミングを紹介します。
コードは以下に配置しています。
https://github.com/daigo0927/jax-ddim

 Jaxとは
JaxはGoogleから公開されている、自動微分を備えた数値計算ライブラリと言えます。Numpyとほぼ同じように計算処理を実装でき、またGPUやTPUによって高速に演算を実行することもできます。これによって深層学習モデルを実装し...]]></summary>
        <author>
            <name>dhirooka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【TF-IDF】Adoの「過学習」はどのあたりが過学習なのか？]]></title>
        <id>https://zenn.dev/robes/articles/48cb25ee29a110</id>
        <link href="https://zenn.dev/robes/articles/48cb25ee29a110"/>
        <updated>2022-07-30T22:48:41.000Z</updated>
        <summary type="html"><![CDATA[過学習。機械学習やディープラーニングが世の中に広まる中、この言葉の認知度が増してきたところですが、Adoが「過学習」をリリースしたことで一気に市民権を得た感じがします。
一方で、この「過学習」の歌詞。 ざっと読んでみても、どのあたりが過学習なのか、よく分かりません。
そこで、今回は、自然言語処理の基本的技術の一つTF-IDFを使って何が過学習なのかを突き止めたいと思います。

 TF-IDFとは
ざっくり言うと、その文書を特徴づける重要な単語を抽出する手法になります。
以下のように、単語の出現頻度とレア度の積で表されます。単語の出現頻度が高く、かつ、他の文章にはあまり出てこない単語が重要...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonの標準ライブラリを使ってWebサーバーを起動する]]></title>
        <id>https://zenn.dev/masaruxstudy/articles/55668c093d184a</id>
        <link href="https://zenn.dev/masaruxstudy/articles/55668c093d184a"/>
        <updated>2022-07-30T22:44:06.000Z</updated>
        <summary type="html"><![CDATA[PythonでWebサーバーを構築する

 どうやって？


Pythonに付属している標準ライブラリにシンプルなWebサーバーとして機能するモジュールがあるので、これを使って構築する


ゴールはHTMLファイルをレスポンスとして返す
以下は手順(Pythonの環境構築は済んでいるものとする)



index.htmlファイルを用意する
PythonコマンドでWebサーバーの起動
index.htmlファイルを編集し、反映されるかを確認する


 前提知識
モジュール > パッケージ > ライブラリ


モジュール


.py などのファイル全てがモジュール



パ...]]></summary>
        <author>
            <name>Masaru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【自然言語処理】GoogleColaboratoryでGiNZAがロードできない時の解決策]]></title>
        <id>https://zenn.dev/robes/articles/7ee135605bdb8e</id>
        <link href="https://zenn.dev/robes/articles/7ee135605bdb8e"/>
        <updated>2022-07-30T21:54:13.000Z</updated>
        <summary type="html"><![CDATA[日本語NLPライブラリーであるGiNZAをGoogleColaboratoryで使おうとした場合、バージョンによってはエラーが出て、うまくロードできないケースがあります。
ここでは、以下のようなエラーが出た場合の解決策を記載します。

 GiNZAをインストールし、SpacyでLoadする
!pip install ginza==4.0.6 ja-ginza==4.0.0 
import spacy
nlp = spacy.load('ja_ginza')

 出現するエラー
Can't find model 'ja_ginza'. It doesn't seem to be a sh...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Slackのフリープラン変更対策、履歴テキストとファイルをpythonでバックアップ]]></title>
        <id>https://zenn.dev/oskgw_log/articles/slack_backup_py</id>
        <link href="https://zenn.dev/oskgw_log/articles/slack_backup_py"/>
        <updated>2022-07-30T20:49:12.000Z</updated>
        <summary type="html"><![CDATA[Slackのフリープランの変更
2022年9月1日より、Slackフリープランのメッセージ履歴が1万から過去90日に変更になるようです。

 では、現時点でバックアップは？
フリープランでやってる人のバックアップで、各チャンネルの過去ログとファイルを
ローカルPCにバックアップするものがあるのかよく分からなかったです。

 手動でバックアップ？？
いやー、、それはキツイです。
最後の手段かもしれませんが、あんまり人間的な仕事としては違うます。

 流行りのヘビに任せるか、、
最近流行りのヘビでお馴染み 邪神ちゃ・・・ではなく、pythonがあれば、なんとかできるかな、、、

 pyt...]]></summary>
        <author>
            <name>oskgw log</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Djangoにおけるテーブル内データの移行方法について]]></title>
        <id>https://zenn.dev/miyaji26/books/a530e44f826710</id>
        <link href="https://zenn.dev/miyaji26/books/a530e44f826710"/>
        <updated>2022-07-30T15:57:01.000Z</updated>
        <summary type="html"><![CDATA[Djangoを利用してアプリケーションを作っている際に、長く運用されているものほど適切なテーブル構造となっていないことが多々あります。

本書では記事とラベルを利用した誤ったテーブル構造を例として、データの移行方法について対応方法を紹介します。]]></summary>
        <author>
            <name>miyaji_26</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Qiskit で遊んでみる (6) — QGSS2022 より]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-qiskit06</id>
        <link href="https://zenn.dev/derwind/articles/dwd-qiskit06"/>
        <updated>2022-07-30T14:36:14.000Z</updated>
        <summary type="html"><![CDATA[目的
前回 に引き続き Qiskit Global Summer School 2022: Quantum Simulations で興味を持ったテーマを復習する。
今回はハードウェアノイズのシミュレーションを題材にする。

 準備
以下を import しているとする。
import numpy as np
from qiskit import QuantumCircuit, QuantumRegister
from qiskit.providers.aer import AerSimulator
from qiskit.providers.aer.noise import Noi...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ubuntu20.04に機械学習(GPU)環境を設定する方法]]></title>
        <id>https://zenn.dev/kwashizzz/articles/ubunt2004-setup-mlenv</id>
        <link href="https://zenn.dev/kwashizzz/articles/ubunt2004-setup-mlenv"/>
        <updated>2022-07-30T13:56:21.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは、わっしーです。
本記事では、Ubuntu20.04にGPUありの機械学習環境を設定する方法を紹介します。一応、AzureのVMで動作確認しました。
よく躓く、CUDA、pythonの導入部分も記載しています。
早速、方法を紹介します。

 1. sshでサーバ接続
ssh -i ./*.cer azureuser@xx.xxx.xxx.xxx
もし、Permissions 0644 for ‘xxx.key’ are too open.がでる場合は、
chmod 600 xxx.key
で権限を変更してください。
もし、Vscodeでサーバに入りたい場合は、以下...]]></summary>
        <author>
            <name>わっしー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Qiskit で遊んでみる (5) — QGSS2022 より]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-qiskit05</id>
        <link href="https://zenn.dev/derwind/articles/dwd-qiskit05"/>
        <updated>2022-07-30T09:28:35.000Z</updated>
        <summary type="html"><![CDATA[目的
Qiskit Global Summer School 2022: Quantum Simulations に参加した。その中で興味を持った題材について忘れないうちにまとめてみたい。
具体的には Quantum computers as universal quantum simulators: state-of-art and perspectives を参考にする形でハミルトニアン H = X \otimes X の時間発展についてまとめる。

 おさらい
次回の記事の伏線の形で、ハミルトニアン H = X の時間発展について考えてみる。これは U(t) = \exp(-i...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【MAYA・Python】hlslを利用してモデルチェックを行うツール]]></title>
        <id>https://zenn.dev/kuru_teo/articles/9a968a5d1b8512</id>
        <link href="https://zenn.dev/kuru_teo/articles/9a968a5d1b8512"/>
        <updated>2022-07-30T07:20:32.000Z</updated>
        <summary type="html"><![CDATA[今回はmayaのrender setup機能を用いて、シェーダ(hlsl)モデルのエラーチェックを視覚的に行うツールを作成しました。以下の動画ではポリゴンの裏面が見えてしまっていないか、ポリゴンの法線がおかしくないかを確認しています。
https://youtu.be/1qnJTBh56KU
https://github.com/Kuru-teo/PythonCollection/tree/master/ChangeMatByRenderSetUp

 【できること】
ポリゴンの裏面が見えてしまっていないか、ポリゴンの法線がおかしくないかを確認できます。またShaderを追加してデバッグ...]]></summary>
        <author>
            <name>kuruteo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[numpyでGPMLの線形回帰モデルを学ぶ]]></title>
        <id>https://zenn.dev/mory22k/articles/429ce4ad3208d7</id>
        <link href="https://zenn.dev/mory22k/articles/429ce4ad3208d7"/>
        <updated>2022-07-30T02:04:27.000Z</updated>
        <summary type="html"><![CDATA[GPML第2章前半部分を、自分なりに解釈しつつnumpyで実装します。
import numpy as np
import matplotlib.pyplot as plt
注: この記事はもともとQiitaに投稿していたものの焼き直しです。元の記事はこちらでご確認いただけます:https://qiita.com/mory22k/items/2491f2cfce345bbd805c

 単純な線形回帰モデル
まずは、バイアスを含む単純な線形回帰モデルを実装してみます。

 元の関数
もとの関数は、入力ベクトル\boldsymbol{x}と重みベクトル\boldsymbol{w}

\bo...]]></summary>
        <author>
            <name>mory22k</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spotifyデータの可視化から新しいアーティストを探す]]></title>
        <id>https://zenn.dev/nayuta9999/articles/781d2f2ba045c9</id>
        <link href="https://zenn.dev/nayuta9999/articles/781d2f2ba045c9"/>
        <updated>2022-07-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[概要

あるアーティストが、どのようなアーティストから影響を受けているのかわかる可視化を作成。
SpotifyAPIを使用し、データ収集。
popularityを重回帰分析で再計算
グラフ作成。


 背景
最近、Oasisにドはまりしまして、Oasisの音楽からライブ映像、インタビュー等の動画を見漁っていいました。ボーカルのリアムや、リードギターのノエルは、他のバンドのことを結構ボロクソいうのですが、どうやら、The Beatlesのジョンレノンやポールマッカートニーのことを崇拝しているのが分かりました。ここからThe Beatlesに興味を持ち、音楽を聴いてドはまりしました。
こ...]]></summary>
        <author>
            <name>田中勇太</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Package] Pulp (Python) と JuMP (Julia) の記法比較アンチョコ (2022年7月版)]]></title>
        <id>https://zenn.dev/takilog/articles/c0c52c608be465</id>
        <link href="https://zenn.dev/takilog/articles/c0c52c608be465"/>
        <updated>2022-07-29T13:47:20.000Z</updated>
        <summary type="html"><![CDATA[はじめに
タイトルの通りですが、Pythonのpulpでモデルを書くときと、JuliaのJuMPでモデルを書くときの両方があります。毎回pulpとJuMPのドキュメントを見に行くのが大変になってきたので、自分のために比較を書いておくことにしました。
以下はこの記事を書くために使用したバージョンです。




バージョン
備考




Python
3.7.13
Google colaboratory上


pulp
2.6.0
Google colaboratory上


Julia
1.6.7
macOS (Apple M1/Memory 8GBマシン上)


JuMP
1.1.1...]]></summary>
        <author>
            <name>たきろぐ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【さくらレンタルサーバー】Pythonのseleniumで定期実行する]]></title>
        <id>https://zenn.dev/eito_blog/articles/bbc6b8510be3b2</id>
        <link href="https://zenn.dev/eito_blog/articles/bbc6b8510be3b2"/>
        <updated>2022-07-29T11:03:00.000Z</updated>
        <summary type="html"><![CDATA[さくらレンタルサーバーでPythonのプログラムを定期実行することが可能です。
本記事ではさくらレンタルサーバーにPythonプログラムをデプロイ、定期実行までの設定を行う方法を解説します。

 コマンドプロンプトでさくらサーバーにログイン
下記コマンドを実行
ssh [ユーザー名]@[IPアドレス]
パスワードの入力が求められるのでパスワードを入力

 Python3.6.8をインストール

 Pythonのアーカイブファイルをダウンロード
ダウンロード用のフォルダ作成
mkdir -p ~/workspace/python3
カレントディレクトリを変更
cd ~/workspace...]]></summary>
        <author>
            <name>エイト</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[サクッとDocker+SQL+Pythonをローカルで実行する方法]]></title>
        <id>https://zenn.dev/aokkey/articles/7bdc79e1f5d096</id>
        <link href="https://zenn.dev/aokkey/articles/7bdc79e1f5d096"/>
        <updated>2022-07-29T05:52:56.000Z</updated>
        <summary type="html"><![CDATA[背景
AWSのバックエンドをlambda + RDS構成で行おうとした時に、PythonスクリプトでSQLをいじる必要があるので、ローカルでスクリプトの検証をサクッとやりたいなと思った次第です。

 前提条件
Dockerのインストールが済んでいること。

 SQLの立ちあげ
DockerでMySQLインスタンスを立ち上げてPythonからアクセスしましょう。
作業ディレクトリをよしなに作り、Dockerfileとdocker-compose.ymlを以下のように書いてあげます。
Dockerfile
FROM mysql:5.7

RUN apt-get update &&...]]></summary>
        <author>
            <name>Aokkey</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[個人的に最強のパーサジェネレータLarkについて]]></title>
        <id>https://zenn.dev/tbsten/articles/d922514e548518</id>
        <link href="https://zenn.dev/tbsten/articles/d922514e548518"/>
        <updated>2022-07-28T22:30:00.000Z</updated>
        <summary type="html"><![CDATA[パーサとは?
文字列を一定のルールをもとに解析するプログラムのことです。
例えば各OSのターミナルアプリは入力された文字列をシェルスクリプトというルールに基づいて解析・実行します。

入力
# 入力
ls -l -a  
⏬ ⏬ ⏬
# 解析
- コマンドは「ls」  # コマンドを解析
- オプションは「-l」と「-a」  # オプションを解析
⏬ ⏬ ⏬
# 実行
- lsはファイルの一覧を探すコマンドだからファイル一覧を表示
- -lオプションがあるからリスト形式で表示する
- -aオプションがあるから隠しファイルも表示する


 パーサジェネレータとは?
パーサを作るためのプ...]]></summary>
        <author>
            <name>てべすてん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[機械学習で因果推論~Meta-LearnerとEconML~]]></title>
        <id>https://zenn.dev/s1ok69oo/articles/1eeebe75842a50</id>
        <link href="https://zenn.dev/s1ok69oo/articles/1eeebe75842a50"/>
        <updated>2022-07-28T16:55:09.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Meta-LearnerとEconMLについて、Pythonによる実装を交えてまとめました。内容について誤り等ございましたら、コメントにてご指摘いただけますと幸いです。

 機械学習を用いた因果推論
機械学習を用いた因果推論手法は大きく分けて下記の2通りが存在します。

Meta-Learner系
Causal-Tree系

この中でも今回は1つ目のMeta-Learnerについて紹介します。

 Meta-Leanrerとは
Meta-Learnerとは、機械学習と因果推論の考え方を掛け合わせて条件付き平均処置効果(CATE: Conditional Average Tr...]]></summary>
        <author>
            <name>うとしん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】MariaDB連携]]></title>
        <id>https://zenn.dev/ringotabetai/articles/19369244a2318c</id>
        <link href="https://zenn.dev/ringotabetai/articles/19369244a2318c"/>
        <updated>2022-07-28T14:53:42.000Z</updated>
        <summary type="html"><![CDATA[mariaDBでの動作確認
参照:
https://mariadb.org/download/
sudo apt-get install apt-transport-https curl
sudo curl -o /etc/apt/trusted.gpg.d/mariadb_release_signing_key.asc 'https://mariadb.org/mariadb_release_signing_key.asc'
sudo sh -c "echo 'deb https://mirrors.xtom.jp/mariadb//ubuntu focal main' >&...]]></summary>
        <author>
            <name>ringotabetai</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【AWS】AWS CDKで書いたLambdaをLambda LayerとあわせてAPI Gatewayにデプロイ【CDK】]]></title>
        <id>https://zenn.dev/yosemat/articles/01c83132a0c705</id>
        <link href="https://zenn.dev/yosemat/articles/01c83132a0c705"/>
        <updated>2022-07-28T13:45:12.000Z</updated>
        <summary type="html"><![CDATA[AWS CDK in Typescript + Lambda in Python
最近個人的にも世間的にもかなり来てるAWS CDKをTypescriptで実装します。CDKは型セーフで簡単にかけるスクリプト言語としてTypescriptを、Lambdaは柔軟にかけるPythonで採用します。
Lambdaはライブラリを複数のコードで使い回せるLambda Layerとあわせて実装します。
これによって

Lambda Layerにnumpyをインストール
Lambda Function AからLambda Layerのnumpyを呼び出し
Lambda Function BからLa...]]></summary>
        <author>
            <name>Yosemat</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonでQRコードを塗りつぶす]]></title>
        <id>https://zenn.dev/ijiwarunahello/articles/e1d26d393a02ec</id>
        <link href="https://zenn.dev/ijiwarunahello/articles/e1d26d393a02ec"/>
        <updated>2022-07-28T12:55:36.000Z</updated>
        <summary type="html"><![CDATA[はじめに
とある日のイベントにて、会場のパネルに写っているQRコードをその場で読み取って記録していくデジタルスタンプラリーを体験してきました。
推しのパネルはSNSに上げたい！けど、会場に来ないと見れないパネルなのでそのままアップするのには抵抗がある…
なので手作業でQRコードを塗りつぶしていました。
推しだけならまだしも全メンバー手作業で塗りつぶすの大変だな…と思い、QRコードを塗りつぶすプログラムを作成しました。


 ソースコード
さくっとソースを見たい方はこちら→ ijiwarunahello/qrcode_hidden
やってることはシンプルで、

画像からQRコードを検出...]]></summary>
        <author>
            <name>ijiwarunahello</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[M1MacにDocker, Python, Django, MySQLの環境構築をする]]></title>
        <id>https://zenn.dev/masaruxstudy/articles/4b05694c2760d2</id>
        <link href="https://zenn.dev/masaruxstudy/articles/4b05694c2760d2"/>
        <updated>2022-07-28T08:16:22.000Z</updated>
        <summary type="html"><![CDATA[Docker環境構築
参考: 【M1 Pro/Max対応】M1 Mac環境構築ベストプラクティス
こちらのDocker環境構築を参考にさせて頂きます。
無事bashが立ち上がればOKです。
あくまでもテスト的に行っただけなので、実際のDocker環境構築は次に書いていくものを行っていきます
作成したディレクトリごと削除してしまっても構いません。

 DockerでPythonの環境構築
参考: 【Python入門・応用】MacにPythonができる環境をつくろう｜02.Pythonの環境構築
YOUTUBE版: 【2022最新版】M1MacにPythonの環境構築｜通常のインストール...]]></summary>
        <author>
            <name>Masaru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[郵便番号から住所を取得する]]></title>
        <id>https://zenn.dev/hasegawasatoshi/articles/0d8b7cb9f73527</id>
        <link href="https://zenn.dev/hasegawasatoshi/articles/0d8b7cb9f73527"/>
        <updated>2022-07-28T07:31:05.000Z</updated>
        <summary type="html"><![CDATA[運用保守に携わっているシステムで、利用者の居住地の分析をしたい要件があったので、郵便番号から都道府県や住所を取得する方法について調べてみました。

 郵便番号 → 住所への変換
http://zipcloud.ibsnet.co.jp/doc/api のように、 Web API を提供してくれているサービスもありますが、今回は件数が多いため、ローカルで検索できるようにします。
日本郵便のサイトから CSV 形式の郵便番号一覧を取得します。「都道府県一覧」から「全国一括」をダウンロードします。
https://www.post.japanpost.jp/zipcode/dl/oogaki-...]]></summary>
        <author>
            <name>Satoshi Hasegawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのロギング:loggingを用いたロガー作成方法]]></title>
        <id>https://zenn.dev/kwashizzz/articles/python-logger-v2</id>
        <link href="https://zenn.dev/kwashizzz/articles/python-logger-v2"/>
        <updated>2022-07-28T06:35:07.000Z</updated>
        <summary type="html"><![CDATA[こんにちは、わっしーです。
個人的にPythonでログを取る方法は、常に迷っています。簡単のため、余計なライブラリは使用せず、デフォルトで入っているloggingを使用したり、ファイルごとに分けたロガーを設定したいなどやりたいことはたくさんあります。この記事では、現在使用しているロギングの方法を紹介します。

 ファイル構成
今回は、以下のような構成にし、src/app.py, src/module.pyにて、utils/logger.pyからログの設定を読み出して使用することを想定します。
-src
 |- app.py
 |- module.py

-utils
 |-logger....]]></summary>
        <author>
            <name>わっしー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python-Fire】サブコマンド作成し、暗号化したファイルの出力、復号化]]></title>
        <id>https://zenn.dev/ringotabetai/articles/4d4e43e318fbc6</id>
        <link href="https://zenn.dev/ringotabetai/articles/4d4e43e318fbc6"/>
        <updated>2022-07-27T15:41:53.000Z</updated>
        <summary type="html"><![CDATA[Pythonの仮想環境 venvに入り
Python-Fireをインストールします。
$ pip install fire

RSA のアルゴリズムを Python で実装し、実際に平文 (テキスト) を暗号化して、さらに暗号文を復号してみます。

my_rsa.py
from math import gcd

def lcm(p, q):
    return (p * q) // gcd(p, q)


def generate_keys(p, q):
    N = p * q
    L = lcm(p - 1, q - 1)

    for i in range(2, L):...]]></summary>
        <author>
            <name>ringotabetai</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[anyenvを用いてCleanなMac開発環境(pyenv, nodenv, jenv)を構築する]]></title>
        <id>https://zenn.dev/duke13/articles/9c74dd595823cbd</id>
        <link href="https://zenn.dev/duke13/articles/9c74dd595823cbd"/>
        <updated>2022-07-27T10:35:17.000Z</updated>
        <summary type="html"><![CDATA[重度の Windows ユーザーの私ですが、最近やっと Apple の良さがわかり、 Mac を使い始めました。折角なので 綺麗な Mac 開発環境を構築します。
とりあえず、Pyhton , Node.js , Java を入れます。

 anyenv
anyenv とは何かの説明は他のサイトで腐るほどあるので、ここで特に説明しません。
おいおい、じゃなんでこの記事を書くんだよ！って言われそうですが、自分の備忘録だよww
手順は[anyenv公式ドキュメント]見ればOKだが、以下のコマンドインストールします。
そそ、Homebrew は事前に入れておいてね。

 1. brew で a...]]></summary>
        <author>
            <name>duke13</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows11でStyleGAN3を試してみる]]></title>
        <id>https://zenn.dev/ryu2021/articles/9cb3e3c7913bf4</id>
        <link href="https://zenn.dev/ryu2021/articles/9cb3e3c7913bf4"/>
        <updated>2022-07-27T10:28:38.000Z</updated>
        <summary type="html"><![CDATA[概要
Windows11でStyleGAN3の画像生成や学習を試してみる。
GitHub - NVlabs/stylegan3: Official PyTorch implementation of StyleGAN3

 環境

OS : Windows11
GPU : RTX 3080Ti
Anaconda3


 StyleGAN3を試す

 準備

 プロジェクトのダウンロード
git clone https://github.com/NVlabs/stylegan3.git
cd stylegan3

 仮想環境作成
「environment.yml」を以下のように変更する...]]></summary>
        <author>
            <name>Ryu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[「大相撲の決まり手って傾向あるの？」をpandasとmatplotlibで調べたよ]]></title>
        <id>https://zenn.dev/terrrry0404/articles/13ae2282c8d4c4</id>
        <link href="https://zenn.dev/terrrry0404/articles/13ae2282c8d4c4"/>
        <updated>2022-07-27T08:57:39.000Z</updated>
        <summary type="html"><![CDATA[背景

データサイエンスを学ぶことにしたので、「どんなことができるのだろうか？」とまずは色々いじってみた感じです。なので分析自体は全然深くないです。
学ぶにあたり、Preferred Networks社のChainerのチュートリアルを一通りやってみました（難しい！！...でもこれ無料、すごい）
せっかくなので自分の興味がある領域でまずは色々調べてみようということで、「大相撲の決まり手傾向」をみてみることにしました。


 やったこと

対象データの取得
データの保存
データをいじって傾向をみる

この3点です。
環境はGoogle Colaboratoryを使いました。便利！

 ...]]></summary>
        <author>
            <name>terrrry0404</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[J-Quant APIを使ってペアトレード向きな銘柄を抽出してみた #2]]></title>
        <id>https://zenn.dev/wannabebotter/articles/70804028148d87</id>
        <link href="https://zenn.dev/wannabebotter/articles/70804028148d87"/>
        <updated>2022-07-27T02:45:21.000Z</updated>
        <summary type="html"><![CDATA[今回やったこと
J-Quant APIを使ってペアトレード向きな銘柄を抽出してみた #1 で行ったペアトレード向き銘柄の抽出は、業種セクターそのものの値動きに対して、各銘柄がどの程度の値動きをするかを考えずに、銘柄Aロング、銘柄Bショートを同額ずつ行う想定をしていた。
この場合、例えば、食料品セクターの平均価格がx%変化すると、銘柄Aは2x%変化し、銘柄Bは0.5x%変化するような銘柄AとBがある場合、食料品セクター全体が上昇し続けたり、下降し続けるトレンドがある場合には銘柄Aと銘柄Bの価格差はどんどん広がっていく。結果として価格差の系列は定常性検定を通過できず、銘柄Aと銘柄Bはペア...]]></summary>
        <author>
            <name>WannabeBotter</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python diagrams を触ってみた]]></title>
        <id>https://zenn.dev/lovegorira/articles/bdf28486eccbdd</id>
        <link href="https://zenn.dev/lovegorira/articles/bdf28486eccbdd"/>
        <updated>2022-07-26T16:22:30.000Z</updated>
        <summary type="html"><![CDATA[システム構成図のお絵描き用に Python diagrams を触ってみました。
本当に少しだけ。お触り程度です・・・

 環境


python 3.7


diagrams


https://diagrams.mingrammer.com/docs/getting-started/installation

graphviz

http://www.graphviz.org/download/

 各用語


Diagram
描画する図のクラス。図の全体的な設定を行う。


Nodes
ノードのクラス。サーバやサービスのアイコン図等の描画を行う。


Cluster
ノードをグルー...]]></summary>
        <author>
            <name>へっぽこエンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】sqlite3の操作]]></title>
        <id>https://zenn.dev/ringotabetai/articles/e68d1f91cf738b</id>
        <link href="https://zenn.dev/ringotabetai/articles/e68d1f91cf738b"/>
        <updated>2022-07-26T16:18:05.000Z</updated>
        <summary type="html"><![CDATA[Python venvインストール
cdで作業ディレクトリに移動
python3 -m venv venv
venvに入る
source venv/bin/activate
sqlite3をpipでインストールする
pip install pysqlite3 
# sqlite3をインポートする
import sqlite3

# TEST.dbを作成する

dbname = 'TEST.db'
conn = sqlite3.connect(dbname)

cur = conn.cursor()

# データを入れる
# cur.execute('INSERT INTO fruits(...]]></summary>
        <author>
            <name>ringotabetai</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonでthreadの処理を待たせる]]></title>
        <id>https://zenn.dev/lovegorira/articles/095e2c6b9500f5</id>
        <link href="https://zenn.dev/lovegorira/articles/095e2c6b9500f5"/>
        <updated>2022-07-26T16:17:53.000Z</updated>
        <summary type="html"><![CDATA[threading　を使ったマルチスレッド処理は「join」関数で終了を待つことができます。
https://docs.python.org/ja/3/library/threading.html

 例
テスト用のコード
import datetime
import threading
from time import sleep

def hoge(num):
    start_time = datetime.datetime.now()
    print(f'{num}' + '-'*10 + ' start ' + '-'*10 + f'{start_time}')
    ...]]></summary>
        <author>
            <name>へっぽこエンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Ubuntu】SQLiteBrowserをインストール]]></title>
        <id>https://zenn.dev/ringotabetai/articles/00975b0df6610d</id>
        <link href="https://zenn.dev/ringotabetai/articles/00975b0df6610d"/>
        <updated>2022-07-26T16:11:52.000Z</updated>
        <summary type="html"><![CDATA[SQLiteを使用するにあたりSQLiteBrowserをインストールする
sudo apt install sqlitebrowser]]></summary>
        <author>
            <name>ringotabetai</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[制限ボルツマンマシンの基礎 ～概念編～]]></title>
        <id>https://zenn.dev/kaityo256/articles/bolzmann_machine</id>
        <link href="https://zenn.dev/kaityo256/articles/bolzmann_machine"/>
        <updated>2022-07-26T08:29:18.000Z</updated>
        <summary type="html"><![CDATA[はじめに
機械学習で用いられるボルツマンマシン、特に制限ボルツマンマシン(Restricted Boltzmann Machine, RBM)は非常に面白い概念ですが、その中身の理解は他のニューラルネットワークに比べて難しく、「数式はわかったが、結局何をやっているのか」が分かりにくい印象です。以下では、なるべく平易な言葉で制限ボルツマンマシンが何をしているのか説明してみようと思います。

 問題設定

とある大学に通うDaveは、お昼はいつも学食の前のテラスでお弁当を食べます。そして、何の気なしに学食を眺めていると、同じクラスのAliceとBobが学食をよく利用していることに気が付き...]]></summary>
        <author>
            <name>ロボ太</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【交差エントロピー】ラベル表現とone-hot表現の違い]]></title>
        <id>https://zenn.dev/kazuma_soon/articles/7e0e15fff71c48</id>
        <link href="https://zenn.dev/kazuma_soon/articles/7e0e15fff71c48"/>
        <updated>2022-07-26T01:32:11.000Z</updated>
        <summary type="html"><![CDATA[結論
# tのone-hot表現
t = np.array([
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0], 
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0], 
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0]
])

# tのラベル表現
t = np.argmax(t, axis=1)
print(t)
# -> [2, 8, 2]
# -> t[0][2], t[1][8], t[2][2]：行番号が記載されない]]></summary>
        <author>
            <name>kazuma-soon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【交差エントロピー】y[np.arange(batch_size), t] の意味]]></title>
        <id>https://zenn.dev/kazuma_soon/articles/3d448a78cdb282</id>
        <link href="https://zenn.dev/kazuma_soon/articles/3d448a78cdb282"/>
        <updated>2022-07-26T01:17:43.000Z</updated>
        <summary type="html"><![CDATA[交差エントロピーを学習しています。
『ゼロから作るDeep Learning』の中で詰まったところがあるので、まとめておきます。

 前提
こちら の内容を理解するにあたっての話です。

 疑問
これの意味がわからん、、、
# 出力データ
y = np.array([
    [0.1, 0.05, 0.6, 0.0, 0.05, 0.1, 0.0, 0.1, 0.0, 0.0], 
    [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], 
    [0.1, 0.05, 0.1, 0.0, 0.05, 0.1, 0.0, 0.6,...]]></summary>
        <author>
            <name>kazuma-soon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[surpriseにある全レコメンドモデルを試す]]></title>
        <id>https://zenn.dev/yosashusaku/articles/surprise-recommend</id>
        <link href="https://zenn.dev/yosashusaku/articles/surprise-recommend"/>
        <updated>2022-07-25T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[surpriseとは
surpriseとは明示的な評価データ(explicit feedback)を処理する推薦システムを構築/分析するためのPythonライブラリです。
※暗黙の評価(implicit feedback)やコンテンツベースの推薦をサポートしていません。
この記事では、surpriseライブラリを使って用意されている全てのレコメンドモデルを試します。この結果をもとに、どんなレコメンドモデルが優勢なのか、あるいは実運用しやすいのか理解が深まるのではないかと思います。

 事前準備
本記事の実装は、Google Colaboratory上で行います。
まずはsurpris...]]></summary>
        <author>
            <name>よさ</name>
        </author>
    </entry>
</feed>