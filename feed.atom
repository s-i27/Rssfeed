<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://s-i27.github.io/Rssfeed/index.html</id>
    <title>osmos::feed</title>
    <updated>2022-08-26T02:36:27.198Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="https://s-i27.github.io/Rssfeed/index.html"/>
    <link rel="self" href="https://s-i27.github.io/Rssfeed/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[道路中心線と道路縁から道幅をもった道路中心線データをつくる]]></title>
        <id>https://zenn.dev/kymok/articles/b976e67a874277</id>
        <link href="https://zenn.dev/kymok/articles/b976e67a874277"/>
        <updated>2022-08-25T19:30:55.000Z</updated>
        <summary type="html"><![CDATA[概要
この記事では，道路中心線と道路縁の線データを用い，道路中心線ごとに道幅を計算する方法について述べます．以下3つの図で，太らせた領域の端と道路縁がおおむね一致していることから，方法は単純ですがそれっぽいデータが得られていることがわかります．

入力：シアン色の一点鎖線は道路中心線．黒い細線は道路縁．

出力：道幅つきの道路中心線

入力と出力を重ねたもの

 使用するデータ
本稿では以下のデータを用います．

道路中心線：国土地理院ベクトルタイル提供実験のデータを用います．タイル番号は {z, x, y} = {16, 58211, 25803} です．
道路縁：国土地理院の基盤...]]></summary>
        <author>
            <name>kymok</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[matplotlibのboxplotで箱ひげ図の横に数値を表記する]]></title>
        <id>https://zenn.dev/mayuco/articles/2565ebb14e1752</id>
        <link href="https://zenn.dev/mayuco/articles/2565ebb14e1752"/>
        <updated>2022-08-25T13:08:38.000Z</updated>
        <summary type="html"><![CDATA[概要
matplotlibのboxplotで箱ひげ図を出した際に、具体的な四分位数や最小値、最大値の値がわからず困っていました。
今回は、boxplotで出した画像内に具体的な数値を表示させるコードを書いたので記事にしたいと思います。

 実行環境
python 3.9.0
matplotlib 3.5.3
numpy 1.23.2

 やったこと

 numpyで四分位数を計算
今回は、numpyで標準正規分布に従うランダムなリストを使って、目標の箱ひげ図を作ります。
四分位数はnp.percentile()で簡単に計算できます。
import numpy as np

# ランダ...]]></summary>
        <author>
            <name>mayuco</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonでCLIツールを作ってみた]]></title>
        <id>https://zenn.dev/u_tan/articles/dca8c4539b4e13</id>
        <link href="https://zenn.dev/u_tan/articles/dca8c4539b4e13"/>
        <updated>2022-08-24T13:09:06.000Z</updated>
        <summary type="html"><![CDATA[PythonでCLIツールを作成しました。
LT会でも発表しました。
▼発表したLT会
https://yumenosora.connpass.com/event/255075/
▼スライド

▼ソースコード
https://github.com/OHMORIYUSUKE/grech

 概要
このツールを実行させることで、YAMLで定義されたテストを実行させることができます。
YAMLファイルにはshellが記載されており、shellの実行結果が正規表現にマッチするかどうかで正誤判定を行います。
▼テストを実行した様子



 工夫した点

 YAMLファイル
# このチェック項目の名...]]></summary>
        <author>
            <name>うーたん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CompVis/stable-diffusionの環境をApple Siliconで構築する]]></title>
        <id>https://zenn.dev/laiso/articles/7af434269ffa1b</id>
        <link href="https://zenn.dev/laiso/articles/7af434269ffa1b"/>
        <updated>2022-08-24T12:06:12.000Z</updated>
        <summary type="html"><![CDATA[Macで画像を生成したいだけだったらGoogle Colab で はじめる Stable Diffusion v1.4｜npaka｜noteのColabで実行していることをローカルに持ってきて、CUDAのかわりにCPU使ってやればできると思う。

main.py
from diffusers import StableDiffusionPipeline

pipe = StableDiffusionPipeline.from_pretrained("CompVis/stable-diffusion-v1-4", use_auth_token=YOUR_TOKEN)
pipe.to("cp...]]></summary>
        <author>
            <name>laiso</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WSL2とDocker Desktopでtensorflow-gpu 1.X系の環境構築をする]]></title>
        <id>https://zenn.dev/uekou/articles/522e58e98014a2</id>
        <link href="https://zenn.dev/uekou/articles/522e58e98014a2"/>
        <updated>2022-08-24T10:00:52.000Z</updated>
        <summary type="html"><![CDATA[普段はtensorflow 2.X系を使っているのですが、どうしてもtensorflow 1.X系を使わないといけない状況になり、Docker Desktop(WSL2バックエンド)で環境構築したのでその手順を記載します。

 ①WindowsにGPUドライバをインストール
まず、Windowsにドライバ(CUDA)のインストールを行います。
既にCUDAをWindowsにインストール済みの方はこの手順を飛ばして頂いて構いません。
https://www.nvidia.com/Download/index.aspx?lang=en-us
ちなみに、NVIDIAの公式のドキュメントに記載が...]]></summary>
        <author>
            <name>uekou</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Poetryでsys.path.appendを回避する]]></title>
        <id>https://zenn.dev/hpp/articles/6307447e5a037d</id>
        <link href="https://zenn.dev/hpp/articles/6307447e5a037d"/>
        <updated>2022-08-24T09:27:30.000Z</updated>
        <summary type="html"><![CDATA[まとめ
pyproject.tomlの[tool.poetry]のpackagesに以下のようにモジュールを追加しましょう。

pyproject.toml
packages = [
    { include = "hoge" },
    { include = "fuga" },
]


gist
GitHub


 背景から詳しく
Pythonのモジュールシステムは他の言語と結構な違いがあり、どのファイルからどのモジュールをimportできるのかで頭を悩ませることが多々あります。
例えば、次のようなディレクトリ階層を持つプロジェクトについて考えてみましょう。
.
├── py...]]></summary>
        <author>
            <name>hpp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【自然言語処理】Python初心者でも文章要約タスクが実装できた]]></title>
        <id>https://zenn.dev/robes/articles/b97e3ac0c0b7da</id>
        <link href="https://zenn.dev/robes/articles/b97e3ac0c0b7da"/>
        <updated>2022-08-24T08:51:11.000Z</updated>
        <summary type="html"><![CDATA[はじめに
わたくし、Python歴1年の初心者ですが、このたび、苦労に苦労を重ねて、自然言語処理タスクの文章要約を実装できました。
自然言語処理に興味のあるPython初心者のお役に立てればと、記事に残したいと思います。
 
実装にあたっては、ネットの記事も手あたり次第調べましたが、最終的には、以下の本が大変参考になりました。
ただし、バージョンの変更により、この本の通りに実装しても、2022年8月時点ではエラーになる箇所があります。出版社経由で著者の方にお聞きして一部コードを修正したほか、自分なりに工夫をして実装しました。
https://www.borndigital.co.jp...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Stable Diffusion を M2 Macのpipenvで動かす]]></title>
        <id>https://zenn.dev/ryoma310/articles/63bc3d20a8746c</id>
        <link href="https://zenn.dev/ryoma310/articles/63bc3d20a8746c"/>
        <updated>2022-08-24T07:00:31.000Z</updated>
        <summary type="html"><![CDATA[Stable Diffusionがオープンソースで公開されたので、色々できそうだと思って試してみました。
とはいえ、手元にNvidiaのGPUなんて持っておらず、最近だとpytorchでApple Silicon搭載のGPUが使えるというのも耳にしていたのでそれでうまいことできないかと考えながらやっていきました。
また、個人的にpipenvが好きなのでcondaの代わりにこれを使ってます。
とりあえず無事コードが動くようになるまで。

 1. 環境

M2のMacBook Air

cpu: 8コア
memory: 16GB
GPU: 10コア


pipenv


 2. 環境構築の前...]]></summary>
        <author>
            <name>ryoma310</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[例のコードじゃMacbook(M1 pro) + stable diffusion の環境構築ができなかったので、修正点メモ]]></title>
        <id>https://zenn.dev/hellohazime/articles/543fcaf862008b</id>
        <link href="https://zenn.dev/hellohazime/articles/543fcaf862008b"/>
        <updated>2022-08-24T03:43:56.000Z</updated>
        <summary type="html"><![CDATA[流行りのstable diffusionですが、M1macで動かす手順が
https://github.com/CompVis/stable-diffusion/issues/25#issuecomment-1224040740
これで8割くらいはあってるけど、ここに書いてある通りじゃ動かなかったので
手順を忘れないようメモとして書いておきます。
なお 22/8/24時点の話なんで、近いうちに治ってると思います。

 環境


Macbook Pro(M1 pro)
Memory 16GB
OS X Moterey(12.3.1)


 必要資材のインストール
git-lfs conda...]]></summary>
        <author>
            <name>hellohazime</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DRF(django-rest-framework)のAPIViewでページネーションを使う]]></title>
        <id>https://zenn.dev/nelsia/articles/7918a01c407907</id>
        <link href="https://zenn.dev/nelsia/articles/7918a01c407907"/>
        <updated>2022-08-23T07:46:43.000Z</updated>
        <summary type="html"><![CDATA[概要
DRFのAPIViewでページネーションを使うときに思ったより苦戦したでその時のメモ。
動くコードは以下にコミットしてあります。（ファイル名が雑なのは気にしないでください）
https://github.com/nelsia/drf_pagination_apiview_sample

 注意事項
以下のライブラリバージョンで動作確認しています。
Django==4.1
djangorestframework==3.13.1

 djangoプロジェクトの作成
まずは、djangoのプロジェクト作成をします。
ここのやり方はそれぞれの環境に合わせて適宜作成してください。
以下の...]]></summary>
        <author>
            <name>nelsia</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【PyTorch】データをテスト用・学習用に分割する]]></title>
        <id>https://zenn.dev/kazuma_soon/articles/f4be358fba4767</id>
        <link href="https://zenn.dev/kazuma_soon/articles/f4be358fba4767"/>
        <updated>2022-08-23T00:55:44.000Z</updated>
        <summary type="html"><![CDATA[大昔に scikit-learn を触ったとき、データの分割が引数だけで完結しました。
PyTorchにもあると持っていたけど、ないっぽいので分割するコードを書いてみました。
※ディープラーニングやPyTorchの初学者です。間違い・勘違いが含まれているかもしれません。

 データ
データ数は89行, 13列のものです。
# 0行目はid
# 1行目がターゲット
# 2行目〜は特徴量
array([[0.000e+00, 3.000e+00, 1.236e+01, ..., 5.600e-01, 1.580e+00,
        5.200e+02],
       [1.000e+...]]></summary>
        <author>
            <name>kazuma-soon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[話題のStable Diffusionがオープンソース化されたのでローカルで動かしてみる]]></title>
        <id>https://zenn.dev/koyoarai_/articles/02f3ed864c6127bb2049</id>
        <link href="https://zenn.dev/koyoarai_/articles/02f3ed864c6127bb2049"/>
        <updated>2022-08-22T23:52:38.000Z</updated>
        <summary type="html"><![CDATA[話題のStableDiffusionがオープンソースで8/23に公開されたので、手元のマシンで動かすまで試したいと思います🖼
(下記に記載していますが、自分の環境だとエラーが出てしまったのでイレギュラーな対応をしています🙏)
https://twitter.com/EMostaque/status/1561777122082824192
StableDiffusionがどんなものかは、深津さんの記事が参考になります。
https://twitter.com/fladdict/status/1561406014540640256

 1. 環境
Razer Blade (RTX 2070)...]]></summary>
        <author>
            <name>koyoarai_</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ドドスコPythonワンライナー]]></title>
        <id>https://zenn.dev/kzm4269/articles/9493d29fdc0eb1</id>
        <link href="https://zenn.dev/kzm4269/articles/9493d29fdc0eb1"/>
        <updated>2022-08-22T23:03:02.000Z</updated>
        <summary type="html"><![CDATA[元ネタ
https://twitter.com/Sheeeeepla/status/1554028833942441984?s=20&t=CcCYp7Bzw2A24Dwj6V7vAw

 回答
112文字。
exec("p=print;i=-1\nwhile(i:=i*2|(__import__('random').random()<.5))&8190^3822:p(['ドド','スコ'][i&1])\np('ラブ注入♡')")

 補足

execの中身
p = print
i = -1
while (i := i * 2 | (__import__(...]]></summary>
        <author>
            <name>kzm4269</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonでも(Oneshot) Algebraic Effectsがしたい]]></title>
        <id>https://zenn.dev/catminusminus/articles/a417b8ee7cf1f6</id>
        <link href="https://zenn.dev/catminusminus/articles/a417b8ee7cf1f6"/>
        <updated>2022-08-22T17:40:08.000Z</updated>
        <summary type="html"><![CDATA[成果物
ひとまずこれが動くようになりました。
NotInteger = Effect()
FiveInteger = Effect()


def parse_int(s: str) -> Result[int, str]:
    try:
        return Ok(int(s))
    except:
        return Err("Could not parse int")


def sum_lines(s: str):
    lines = s.split()
    sum = 0
    for line in lines:
        ...]]></summary>
        <author>
            <name>Catminusminus</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sphinx によるドキュメント生成と docstring のスタイル]]></title>
        <id>https://zenn.dev/utahka/articles/df9713f4ac990d</id>
        <link href="https://zenn.dev/utahka/articles/df9713f4ac990d"/>
        <updated>2022-08-22T15:13:18.000Z</updated>
        <summary type="html"><![CDATA[この記事では、Python におけるドキュメンテーション用のコメントを、どのように書くかといった内容を書いていきます。
ドキュメントの重要性をここで説明するまでもありませんが、誰かが使うコードを書くならドキュメントを充実させる必要があります。そして、この誰かには未来の自分も含まれています。

 docstring
Python における docstring とは、関数やクラスの処理が開始する前に書いておくヒアドキュメントのことです。たとえば、NumPy の np.fft.fft 関数の docstring をみてみましょう。
def fft(a, n=None, axis=-1, no...]]></summary>
        <author>
            <name>utahka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Solafuneのマルチ解像度画像の車両検出コンペ - MMDetectionでやってみた]]></title>
        <id>https://zenn.dev/kwashizzz/articles/solafune-vehicle-det-mmdet</id>
        <link href="https://zenn.dev/kwashizzz/articles/solafune-vehicle-det-mmdet"/>
        <updated>2022-08-22T14:59:39.000Z</updated>
        <summary type="html"><![CDATA[こんにちは！鷲崎(@kwashizzz)です。今回は、Solafuneという衛星データ解析コンテストプラットフォームのマルチ解像度画像の車両検出のコンペティションに挑戦してみました。本記事では、データのダウンロードから、結果の提出まで解説しています。物体検出にはMMDetectionを使用し、今回のコンペの評価指標であるOC-cost(Optimal Correction Cost)の導入方法も解説しています。
OC-Costに関しては、日本語のこの記事がわかりやすかったです。
なんと8月22日時点で1位(スコア:0.3090)です！提出しているのが一人なので、当たり前ですが...
この...]]></summary>
        <author>
            <name>わっしー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ABC265] AtCoder Beginner Contest 265（A-E 問題 Python）]]></title>
        <id>https://zenn.dev/kiwamachan/articles/2229be3ae0131e</id>
        <link href="https://zenn.dev/kiwamachan/articles/2229be3ae0131e"/>
        <updated>2022-08-22T13:50:30.000Z</updated>
        <summary type="html"><![CDATA[AtCoder Beginner Contest 265 の復習記録です。難易度が青色レベル以下の、A問題からE問題までをやります。使用言語はPythonです。

 A問題
https://atcoder.jp/contests/abc265/tasks/abc265_a

 考え方
N 個のりんごを買うとき、 3 で割った余りの端数分は 1 個ずつ購入するしか方法がありませんが、3 で割った商の分だけ、3 個セットで購入することができます。ただし 3 個セットで買うときは、セットを使わないで 1 個ずつ X×3 円で購入するのと、3 個セットの Y 円で購入するので、どちらが得か比較す...]]></summary>
        <author>
            <name>kiwamachan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pyppeteerを使ってfoliumの地図を画像に保存する最小限の構成を試す]]></title>
        <id>https://zenn.dev/takilog/articles/540c2975de99cc</id>
        <link href="https://zenn.dev/takilog/articles/540c2975de99cc"/>
        <updated>2022-08-22T12:36:27.000Z</updated>
        <summary type="html"><![CDATA[はじめに
以前、Pythonの地図可視化ライブラリとしてよく利用されているFoliumと、ルート検索APIであるOSRM (Open Source Routing Machine)の連携について紹介しました。
https://zenn.dev/takilog/articles/2be029ccd35972
Foliumは大変よく使われているのですが、地図をHTMLとして出力することが多いため、画像にしたいなという気持ちになります。
画像に出力する方法としては、内部で地図のオブジェクト m に対して、 m._to_png() を実行する方法があります（ 実装はこちらですね）。要するに、...]]></summary>
        <author>
            <name>たきろぐ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【ABC265】AtCoder Beginner Contest 265 A-D メモ【python】]]></title>
        <id>https://zenn.dev/tmori/articles/349eabcba98e49</id>
        <link href="https://zenn.dev/tmori/articles/349eabcba98e49"/>
        <updated>2022-08-22T11:17:00.000Z</updated>
        <summary type="html"><![CDATA[https://atcoder.jp/contests/abc265

 A - Apple

 解法1
x円を3回払ってりんごを3個買う代金(=x*3) とY円払ってりんご3個買う代金 (=y) を比較して場合分けする。

もし、x円を3回払ってりんごを3個買う代金の方が安い場合、y円払ってりんご3個を買う必要がないので、必要個数分をx円1個のりんごで買う。
もし、y円払ってりんごを3個買う代金の方が安い場合、このりんご3個セットをできるだけ多く買い、残った必要個数をx円1個で買う (ex: 20個の場合, y円3個セットを6セット買い、残り2個をx円で買う)

x, y, n = m...]]></summary>
        <author>
            <name>tmori</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【案件ガチャ対策】Linuxでバージョンを一覧するシェルスクリプト]]></title>
        <id>https://zenn.dev/shimada_print/articles/48fec0758dd6b0</id>
        <link href="https://zenn.dev/shimada_print/articles/48fec0758dd6b0"/>
        <updated>2022-08-22T04:03:28.000Z</updated>
        <summary type="html"><![CDATA[IT派遣などに行った直後に、まず最初に何をするか？というと大企業などの派遣先の顧客であるエンドユーザーのシステム環境を知る必要があります。多くのエンドユーザーは高性能を求めます。
バージョンを知るというのは、インストールされているのか？を最初に知る定番な方法です。またバージョンが古いと、高性能なシステムは作れないなどの判断材料になります。

 案件ガチャは調査不足で起きる
案件ガチャとは求職者はプログラミングがしたいのに、顧客はシステム構築や営業仕事などを求める、昔に言われた雇用のミスマッチです。入社してからこれが分かると揉めます。
エンドユーザーはITシステム初心者が多いのに対し、IT...]]></summary>
        <author>
            <name>嶋田印刷@Web・UI/UXデザインとプログラミングと仮想通貨FXをする人</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】AI にナンプレ・数独を解かせよう]]></title>
        <id>https://zenn.dev/a5chin/articles/let_ai_solve_sudoku</id>
        <link href="https://zenn.dev/a5chin/articles/let_ai_solve_sudoku"/>
        <updated>2022-08-21T16:30:09.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Pythonを使ってナンプレ・数独の画像から自動で解答を導き出す AI (人工知能) を作ったので記事にします．
概要としては，PyTorchで作成した CNN を用いて画像認識をさせて文字を獲得したのちに深さ優先探索 (DFS) を行っています．
下記にてソースコードを公開しているのでぜひ見ていってください！
Star 等つけていただけるとやる気やモチベーションが上がります↓


 成果物
下記の様にナンプレ・数独の写真から一瞬で答えを導き出すことができます．


 背景
ある週末に，家族で新聞のナンプレ・数独を解いていた時のことです．
どれだけ時間をかけてもあまり空白が...]]></summary>
        <author>
            <name>a5chin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Webスクレイピング(selenium)]]></title>
        <id>https://zenn.dev/en2enzo2/articles/06f8e8388fcfd0</id>
        <link href="https://zenn.dev/en2enzo2/articles/06f8e8388fcfd0"/>
        <updated>2022-08-21T12:41:34.000Z</updated>
        <summary type="html"><![CDATA[はじめに
データ収集のためにWebサイトをWebスクレイピングすることがありますが、今回は動的サイトにも対応しているseleniumの使い方をまとめました。

 やりたいこと
試しにYahooのファイナンス FX・為替の情報を取得します。
以下の画像の赤枠部分の数値を取得してみましょう。

https://finance.yahoo.co.jp/quote/USDJPY=FX



 実行結果
先に実行結果ですが、以下のように欲しい情報だけを抽出します。
$ python3 ./scraiping_fx.py
=====================================...]]></summary>
        <author>
            <name>enzo | IT engineer (IT Archtect)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【phython】FastAPI作成]]></title>
        <id>https://zenn.dev/tomofyro/articles/3b94e5ce17bd6e</id>
        <link href="https://zenn.dev/tomofyro/articles/3b94e5ce17bd6e"/>
        <updated>2022-08-21T12:00:37.000Z</updated>
        <summary type="html"><![CDATA[はじめに
記事を書くのがずいぶん久しぶりになってしまった。
週に一回は記事を書くと決めていたのだが、怠けてしまった。まとめて書こうとしているとついつい先延ばしにしがちです。
今週からは週に一回書くようにします

 内容
前回記事を書いたのはだいぶ前になるが、以前の意地ではDBの作成について書きました。
今回は、作ったDBから APIを作るところになる。
結論としては以下のライブラリを使用することにした。
https://fastapi.tiangolo.com/ja/

 Docker

 フォルダ階層
-- mysql
 　　∟ data
 　　∟ init.d
 　　∟ my.c...]]></summary>
        <author>
            <name>tomofyro / トモフィロー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[fluentui-emojiの絵文字をUnityで読み込む]]></title>
        <id>https://zenn.dev/fumo/articles/9f101ce4b47ad7</id>
        <link href="https://zenn.dev/fumo/articles/9f101ce4b47ad7"/>
        <updated>2022-08-21T11:02:03.000Z</updated>
        <summary type="html"><![CDATA[マイクロソフトが提供しているオープンソースの絵文字データのFluent Emojiを、UnityのTextMeshProで読み込むための手順をご紹介します。
大まかな流れは以下の通りです。


Fluent EmojiをClone
SVG画像をPNG画像に変換
Pythonスクリプトを実行してアトラスを作成

Full Emoji Support Apiの変換ツールで、TextMeshPro用のSpriteAssetを作成
SpriteAssetを修正して、TMP_Emoji Text UGUI コンポーネントにアタッチ


 1. fluentui-emojiをClone
以下のサイト...]]></summary>
        <author>
            <name>Fumo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VSCode : Pythonのコーディング規約を守るようにする設定]]></title>
        <id>https://zenn.dev/sotahi/articles/438a5b733e7331</id>
        <link href="https://zenn.dev/sotahi/articles/438a5b733e7331"/>
        <updated>2022-08-21T10:05:13.000Z</updated>
        <summary type="html"><![CDATA[良いものがあったら、追記します。
自分用のメモです。

 Linter, Formatterとは
https://zenn.dev/naiq112/articles/df1b32fc08d383

 Linter, Formatter, Auto Documentation

この通りに設定すれば、Linter、Formatter、Auto DocumentaionはOK

https://qiita.com/firedfly/items/00c34018581c6cec9b84

 Linter, Formatter

pipでインストール

pip3 install flake8
p...]]></summary>
        <author>
            <name>sotahi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sobol'列の Python 実装]]></title>
        <id>https://zenn.dev/wsuzume/articles/b59531fc32c6d4</id>
        <link href="https://zenn.dev/wsuzume/articles/b59531fc32c6d4"/>
        <updated>2022-08-21T06:08:23.000Z</updated>
        <summary type="html"><![CDATA[Sobol'列
準モンテカルロ法による数値積分に用いる一様乱数列のひとつに Sobol'列がある。数値積分の話は以下の解説記事が参考になる。
https://qiita.com/convexineq/items/b9629183d2a5fd426991
機械学習（最適化）の分野では効率的に空間を網羅して近似誤差を速やかに減少させるために用いられる。Sobol'列は以下に実装が公開されている。
https://people.sc.fsu.edu/~jburkardt/py_src/sobol/sobol.html

 使いやすくした
この公開されているプログラムがあまり Python ...]]></summary>
        <author>
            <name>Josh Nobus</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonコードの一時的な秘匿にはCythonを使おう]]></title>
        <id>https://zenn.dev/ykesamaru/articles/a1c9d4502a0c35</id>
        <link href="https://zenn.dev/ykesamaru/articles/a1c9d4502a0c35"/>
        <updated>2022-08-21T02:34:19.000Z</updated>
        <summary type="html"><![CDATA[環境
Cython==0.29.30
Python 3.8.10
(FACE01) 
$ inxi -SCGxx --filter
System:    Kernel: 5.15.0-46-generic x86_64 bits: 64 compiler: N/A Desktop: Unity wm: gnome-shell dm: GDM3 
           Distro: Ubuntu 20.04.4 LTS (Focal Fossa) 
CPU:       Topology: Quad Core model: AMD Ryzen 5 1400 bits: 64 typ...]]></summary>
        <author>
            <name>yKesamaru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[terraform使ってECS Fargateでlocustを動かしてみた]]></title>
        <id>https://zenn.dev/dl10yr/articles/practice-ecs-locust</id>
        <link href="https://zenn.dev/dl10yr/articles/practice-ecs-locust"/>
        <updated>2022-08-21T02:33:14.000Z</updated>
        <summary type="html"><![CDATA[負荷テストツールのLocustをECS Fargateで構築し動かしてみました。
インフラ環境の構築にはterraformを使いました。

 コードはこちらに
https://github.com/dl10yr/aws-practice/tree/main/ecs-locust

 参考記事
こちらの記事を参考にさせていただきました。
https://qiita.com/neilli-sable/items/b17dfba5eabfcafccaf8

 動かすまで

 環境構築
cd terraform/envs/dev
terraform init
terraform plan
ter...]]></summary>
        <author>
            <name>dl10yr</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[poetryでprivateなリポジトリをaddする。]]></title>
        <id>https://zenn.dev/takashiaihara/articles/cf0cf180076073</id>
        <link href="https://zenn.dev/takashiaihara/articles/cf0cf180076073"/>
        <updated>2022-08-21T02:15:40.000Z</updated>
        <summary type="html"><![CDATA[予備知識
やり方は複数ありそうだが、簡単そうなのは。。

ssh経由 → 秘密鍵 or パスワード入力が必要
https経由 → アクセストークン or ユーザー名＋パスワードが必要

2.のアクセストークン利用が良さそうなので、これでいく。

 実行
下記の形式でコマンド実行するだけ。
poetry add git+https://${ACCESS_TOKEN}@github.com/TakashiAihara/${REPO_NAME}#main

 注意点

アクセストークンが有効であること。（リポジトリ閲覧権限）
末尾ブランチ名つけること（無いとなぜか失敗した）

あと、com...]]></summary>
        <author>
            <name>takashiaihara</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[django Hello Worldと表示する]]></title>
        <id>https://zenn.dev/akaneiy/articles/3808eb5c62838a</id>
        <link href="https://zenn.dev/akaneiy/articles/3808eb5c62838a"/>
        <updated>2022-08-20T23:56:29.000Z</updated>
        <summary type="html"><![CDATA[備忘録です。

 環境
anaconda3 4.12.0
django　4.1

 作成
プロジェクトのフォルダ内で下記コマンド実行
python manage.py startapp アプリ名
!
djangoプロジェクト内には最低1つのアプリが必要
１つ作れば大体大丈夫らしい

プロジェクトを最初に作成した際に生成されたファイル郡の内、使用するのは基本的に下記二つ
\プロジェクト名\urlse.py
\プロジェクト名\settings.py
また、manage.pyは全てのトリガーとなるファイルらしいです。
アプリ追加する時にコマンドに登場しているのもこのファイルです。

 sett...]]></summary>
        <author>
            <name>akane</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【PyTorch】TypeError: 'method' object is not iterableを解決]]></title>
        <id>https://zenn.dev/kazuma_soon/articles/b390457e507445</id>
        <link href="https://zenn.dev/kazuma_soon/articles/b390457e507445"/>
        <updated>2022-08-20T16:58:12.000Z</updated>
        <summary type="html"><![CDATA[多分PyTorchに限った問題ではないと思うのですが、
残しておきます。
違いは以下だけです。
optimizer = torch.optim.SGD(params = model.parameters, lr = 0.01)
# type(model.parameters) ->  <class 'method'>

optimizer = torch.optim.SGD(params = model.parameters(), lr = 0.01)
# type(model.parameters) ->  <class 'generator'>
p...]]></summary>
        <author>
            <name>kazuma-soon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Lambda×FastAPI環境にMQからのメッセージを受信し、処理する方法]]></title>
        <id>https://zenn.dev/taiyou/articles/380de1571437c3</id>
        <link href="https://zenn.dev/taiyou/articles/380de1571437c3"/>
        <updated>2022-08-20T12:43:57.000Z</updated>
        <summary type="html"><![CDATA[概要
以下の図のようにAPI GatewayのトリガーでLambdaが起動し、FastAPIを利用したアプリケーションが実行されるシステムがあります。この既存の構成にAmazon SQSをトリガーとして追加し、送信されたメッセージを処理する方法をまとめました。
※Flaskでも大丈夫なはずです。



現状の構成
実現したい構成










AWS Lambda
Amazon SQS
FastAPI


 現状

 環境

FastAPI(バージョン0.78.0)を利用
API Gateway×Lambda環境でFastAPIを動かすために、Mangum(バージョン0.15....]]></summary>
        <author>
            <name>たいよう</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[YOLOv7でオレンジさん判別機を作る]]></title>
        <id>https://zenn.dev/lettucefry/articles/d8787ac13267e1</id>
        <link href="https://zenn.dev/lettucefry/articles/d8787ac13267e1"/>
        <updated>2022-08-20T11:28:48.000Z</updated>
        <summary type="html"><![CDATA[やりたいこと
オレンジさんが本物か偽物か判別したいと思ったこと一度はありますよね？
環境はGoogle Colabを使います
画像認識にはYOLOv7を使用します

 準備
Google Colabは以下からgoogleにログインすれば使えます
https://colab.research.google.com
ファイルからノートブックを新規作成すればOKです
今回はGoogleドライブにデータを置くようにしたので先にマウントしておきます
Google Colabにも置けますが時間がたつと削除されるようです
マウントはGoogle Colabからドライブのマウントボタンを押すだけです...]]></summary>
        <author>
            <name>LettuceFry</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FastAPI 超実用的テンプレート(国内トップクラスの充実情報！)]]></title>
        <id>https://zenn.dev/tk_resilie/books/bd5708c54a8a0a</id>
        <link href="https://zenn.dev/tk_resilie/books/bd5708c54a8a0a"/>
        <updated>2022-08-20T09:48:11.000Z</updated>
        <summary type="html"><![CDATA[Pythonの人気バックエンドフレームワークのFastAPIを使った現場のプロジェクトにすぐに活用できる、超実用的なテンプレートの紹介です。]]></summary>
        <author>
            <name>米谷 昂(Python/FastAPIプロフェッショナル)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[範囲制約付き総和一定の連続値のランダムサンプリング]]></title>
        <id>https://zenn.dev/wsuzume/articles/0c89c723df62cc</id>
        <link href="https://zenn.dev/wsuzume/articles/0c89c723df62cc"/>
        <updated>2022-08-20T04:39:54.000Z</updated>
        <summary type="html"><![CDATA[問題
x = (x _ 1, \ldots, x _ n) \in \mathbb{R} ^ nでx _ i \in [a _ i, b _ i]\,\,(i = 1, \ldots, n)という制約条件のもと、さらにS \in \mathbb{R}が与えられて

\sum _ {i=1} ^ n x _ i = S

を満たすランダムなベクトルxを生成せよ（条件を満たすならばどんな確率分布でもよいが、可能ならば空間に一様に分布してほしい）。


 考察
\forall i, a _ i = 0, b _ i = 1で、かつS=1ならばこれはディリクレ分布からサンプリングすればよいの...]]></summary>
        <author>
            <name>Josh Nobus</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pyppeteer をプロキシ環境下で使う]]></title>
        <id>https://zenn.dev/ettsu/articles/db2cb8a56f5e25</id>
        <link href="https://zenn.dev/ettsu/articles/db2cb8a56f5e25"/>
        <updated>2022-08-18T07:08:13.000Z</updated>
        <summary type="html"><![CDATA[※ローカルな環境にメモしてた内容を転記
認証無しプロキシを使う。パッケージマネージャは poetry を使用。

プロキシ設定を OS で実施


Windows ならネットワーク設定 + 環境変数（下記）

http_proxy=http(s)://host:port
https_proxy=http(s)://host:port
no_proxy=localhost, 127.0.0.1



アプリ側で pyppeteer.launch() を呼び出すときにプロキシ URL を渡す
pyppeteer.launch({"args": ["--proxy-server=http(s)...]]></summary>
        <author>
            <name>えっつ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AI環境の設定手順 Part_III : 独自データの学習 (Windows 10編)]]></title>
        <id>https://zenn.dev/dsl_gunma/articles/f056317ab512e2</id>
        <link href="https://zenn.dev/dsl_gunma/articles/f056317ab512e2"/>
        <updated>2022-08-18T04:08:08.000Z</updated>
        <summary type="html"><![CDATA[0.　記事の内容
群馬県産業技術センターではエッジコンピュータを用いたAI技術による物体検出の検討を行い成果を報告書にまとめ、公開 [pdfファイル: 2,594kB] しています。そして、さらにその内容を広く県内企業の方にも活用できるようにソフトウェアの設定をはじめとした環境設定から動作確認までの一連の操作を手順書としてまとめました。
ここでは、その手順書の概要を示し、より具体的な手順書の電子ファイルにつきましては群馬産業技術センター デジタルソリューションラボ に問い合わせ [外部リンク] 頂ければと思います。

 1.　目的
本手順書のPart Iでは、「AI環境の設定手順書 ...]]></summary>
        <author>
            <name>群馬産業技術センター デジタルソリューションラボ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AI環境の設定手順   Part_II  : 独自データの学習 (Jetson Xavier NX編)]]></title>
        <id>https://zenn.dev/dsl_gunma/articles/2b2a63545a3f9f</id>
        <link href="https://zenn.dev/dsl_gunma/articles/2b2a63545a3f9f"/>
        <updated>2022-08-18T04:06:20.000Z</updated>
        <summary type="html"><![CDATA[0． 記事の内容
群馬県産業技術センターではエッジコンピュータを用いたAI技術による物体検出の検討を行い成果を報告書にまとめ、公開 [pdfファイル: 2,594kB] しています。そして、さらにその内容を広く県内企業の方にも活用できるようにソフトウェアの設定をはじめとした環境設定から動作確認までの一連の操作を手順書としてまとめました。
ここでは、その手順書の概要を示し、より具体的な手順書の電子ファイルにつきましては群馬産業技術センター デジタルソリューションラボ に問い合わせ [外部リンク] 頂ければと思います。

 1． 目的
本手順書のPart Ⅰでは、「AI環境の設定手順書 ...]]></summary>
        <author>
            <name>群馬産業技術センター デジタルソリューションラボ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WSL2 上の PyTorch に GPU を認識させて深層学習環境をつくる]]></title>
        <id>https://zenn.dev/utahka/articles/ed881a568246f4</id>
        <link href="https://zenn.dev/utahka/articles/ed881a568246f4"/>
        <updated>2022-08-17T07:51:17.000Z</updated>
        <summary type="html"><![CDATA[本記事では、WSL2 上の PyTorch から GPU を使用できる深層学習用の環境を構築していきます。環境は下記の通りです。

OS : Windows 11 Home (21H2)
CPU : AMD Ryzen 7 3700X 8 コア
RAM : 16 GB
GPU : NVIDIA GeForce RTX 2080 Ti


 作業フロー
GPU を利用して PyTorch で記述したモデルの学習をするまでの道のりはこんな感じ。

Windows に NVIDIA ドライバーをインストール
WSL (Ubuntu) に CUDA Toolkit をインストール
WSL (Ub...]]></summary>
        <author>
            <name>utahka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AlmaLinux9でMySQL connector for unixODBCをビルドする]]></title>
        <id>https://zenn.dev/kn64872/articles/85fb88dd8b8372</id>
        <link href="https://zenn.dev/kn64872/articles/85fb88dd8b8372"/>
        <updated>2022-08-17T02:36:39.000Z</updated>
        <summary type="html"><![CDATA[はじめに
AlmaLinux9でunixODBCを利用する必要が発生しました。
しかしrpmではel8までしかなかったのでソースからビルドすることにしました。
その際の手順となります。

 ソースのダウンロード

mysql-connector-odbc-8.0.30-src.tar.gz
以下のURLから取得

https://dev.mysql.com/downloads/connector/odbc/

Oracleからダウンロードなのでアカウントが必要
「Source Code」を選択
「All Operating Systems (Generic) (Architectur...]]></summary>
        <author>
            <name>O.Yazaki-213</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python3エンジニア認定基礎試験対策(Python チュートリアル 1章~14章)]]></title>
        <id>https://zenn.dev/masaruxstudy/books/74bbdba78366c3</id>
        <link href="https://zenn.dev/masaruxstudy/books/74bbdba78366c3"/>
        <updated>2022-08-16T12:26:33.000Z</updated>
        <summary type="html"><![CDATA[[オライリー Pythonチュートリアル 第4版](https://www.oreilly.co.jp/books/9784873119359/)

データサイエンティストgepuroさんの
[Python3エンジニア認定基礎試験 合格への勉強方法](https://www.youtube.com/channel/UCrBuptlVwBwToZSqwVhO-sw) の動画を参考に内容をまとめてました。]]></summary>
        <author>
            <name>Masaru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonによるX-Learnerの実装]]></title>
        <id>https://zenn.dev/s1ok69oo/articles/58580b8f4fbdf8</id>
        <link href="https://zenn.dev/s1ok69oo/articles/58580b8f4fbdf8"/>
        <updated>2022-08-16T09:05:58.000Z</updated>
        <summary type="html"><![CDATA[はじめに
X-Learnerについて、Pythonによる実装を交えてまとめました。内容について誤り等ございましたら、コメントにてご指摘いただけますと幸いです。

 機械学習を用いた因果推論
機械学習を用いた因果推論手法は大きく分けて下記の2通りが存在します。

Meta-Learner系
Causal-Tree系

今回はMeta-Learner系の手法の1つであるX-Learnerについて紹介します。

 Meta-Leanrerとは
Meta-Learnerとは、機械学習と因果推論の考え方を掛け合わせて条件付き平均処置効果(CATE: Conditional Average Tr...]]></summary>
        <author>
            <name>うとしん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[中学生にAtCoderでプログラミングを教える記録 7回目 〜 ABC081A - Placing Marbles を for文を使って解く]]></title>
        <id>https://zenn.dev/aromarious/articles/enjoy-atcoder-07</id>
        <link href="https://zenn.dev/aromarious/articles/enjoy-atcoder-07"/>
        <updated>2022-08-16T08:33:25.000Z</updated>
        <summary type="html"><![CDATA[この記事の内容
ソフトウェアエンジニアが中学生の子にプログラミングを教えていく様子を記録する。この記事は7回目。一度提出した問題を、forを使って解いてみる。
【前回の記事】

配列（リスト）とfor文のお勉強回。for文はこんな風に書きます、というところまでやった。
list = [0, 1, 2]
for value in list:
  print(value)

結果
0
1
2


 今回の達成目標


for文を使って (ABC081A - Placing Marblesをもう一度解く。


 Placing Marbles 問題概要
ABC081A - Placing ...]]></summary>
        <author>
            <name>aromarious</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[中学生にAtCoderでプログラミングを教える記録 6回目 〜 Pythonのlist（配列）と for 文を教える]]></title>
        <id>https://zenn.dev/aromarious/articles/enjoy-atcoder-06</id>
        <link href="https://zenn.dev/aromarious/articles/enjoy-atcoder-06"/>
        <updated>2022-08-16T08:28:03.000Z</updated>
        <summary type="html"><![CDATA[この記事の内容
ソフトウェアエンジニアが中学生の子にプログラミングを教えていく様子を記録する。この記事は6回目。一度提出した問題を、forを使って解いてみる。
【前回の記事】

過去問(ABC081A - Placing Marblesを解いた回。list, mapなどを使う解き方。

 今回の達成目標


Pythonの配列（list）を理解する
配列をfor文で処理する

B問題に進むにあたり、繰り返しによる全探索を知っておく必要がある。このあたりでfor文の使い方を教えたい。
今まで、データ型や配列について明確に教えたわけではない。「こう書けばこう動く」もないまま文法を教えても...]]></summary>
        <author>
            <name>aromarious</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ガウス過程によって分類問題を解く]]></title>
        <id>https://zenn.dev/thimblee/articles/ml_prml_gp-classification</id>
        <link href="https://zenn.dev/thimblee/articles/ml_prml_gp-classification"/>
        <updated>2022-08-16T08:27:19.000Z</updated>
        <summary type="html"><![CDATA[はじめに
PRML(Pattern Recognition and Machine Learning)でガウス過程回帰について学んだ内容をまとめて、実際のデータを使って学習しました。主に6章の内容です。予測分布の導出が個人的に複雑だと思ったので、Step0からStep7に分けて書きました。

 ガウス過程分類の予測分布を導出

 Step0: 問題設定
N個の既知のデータの組((\mathbf{x}_1, t_1), ... (\mathbf{x}_N, t_N)), t_i \in \{0, 1\}があります。今、新しく\mathbf{x}_{N+1}を知った時、t_{N+1}を予...]]></summary>
        <author>
            <name>Thimblee</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Virtuoso RDFストアに対して、curlおよびpythonを用いてRDFファイルを登録・削除する方法]]></title>
        <id>https://zenn.dev/nakamura196/articles/7d4ac7556e2b21</id>
        <link href="https://zenn.dev/nakamura196/articles/7d4ac7556e2b21"/>
        <updated>2022-08-16T08:00:43.000Z</updated>
        <summary type="html"><![CDATA[概要
Virtuoso RDFストアに対して、curlおよびpythonを用いてRDFファイルを登録・削除する方法の備忘録です。
以下を参考にしています。
https://vos.openlinksw.com/owiki/wiki/VOS/VirtRDFInsert#HTTP PUT

 curl
上記のページの通りです。まず、登録用のサンプルデータとして、myfoaf.rdfを作成します。
<rdf:RDF xmlns:foaf="http://xmlns.com/foaf/0.1/">
    <foaf:Person rdf:about="http://www...]]></summary>
        <author>
            <name>nakamura196</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ABC264] AtCoder Beginner Contest 264（A-F 問題 Python）]]></title>
        <id>https://zenn.dev/kiwamachan/articles/e54e0a67a18dae</id>
        <link href="https://zenn.dev/kiwamachan/articles/e54e0a67a18dae"/>
        <updated>2022-08-15T10:03:51.000Z</updated>
        <summary type="html"><![CDATA[AtCoder Beginner Contest 264 の復習記録です。難易度が青色レベル以下の、A問題からF問題までをやります。使用言語はPythonです。

 A問題
https://atcoder.jp/contests/abc264/tasks/abc264_a

 考え方
indexの始まりを気にして実装するだけです。pythonは 0-indexedなので -1 します。
終わりの文字は、その文字まで出力対象なので +1 するため、打ち消しあいます。

 提出コード
S = "atcoder"
L,R = map(int,input().split())
ans = S[L...]]></summary>
        <author>
            <name>kiwamachan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonでSpring Bootの@Profileみたいにアノテーション&環境変数だけで実装クラスをDIできるようにするには？]]></title>
        <id>https://zenn.dev/taiyou/articles/7c39edffb0c3e0</id>
        <link href="https://zenn.dev/taiyou/articles/7c39edffb0c3e0"/>
        <updated>2022-08-14T13:07:23.000Z</updated>
        <summary type="html"><![CDATA[なにこれ
表題の通り、PythonでSpring BootのようにDIするにはどうしたら良いか？の考えをまとめました。

 理想像

 こんなことをしたい

抽象クラスを継承した実装クラスにProfileアノテーションを付与するだけで、DIコンテナに登録されること

DIしたいクラスが増えるたびに、https://github.com/alecthomas/injector みたいにConfigurationクラスを用意して、bindする記述をしなくともよい
少なくともパッケージ側で自動登録して欲しい


環境変数の値に応じて、DIする実装クラスを切り替えられること

切り替え先クラ...]]></summary>
        <author>
            <name>たいよう</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Arduinoで温度を計測 & chart.jsでリアルタイム表示]]></title>
        <id>https://zenn.dev/taro0079/articles/6124c9b33c0748</id>
        <link href="https://zenn.dev/taro0079/articles/6124c9b33c0748"/>
        <updated>2022-08-14T10:51:13.000Z</updated>
        <summary type="html"><![CDATA[初投稿です。
Arduino で温度計測し、取得した温度をブラウザにリアルタイムでプロットできるようなものを作ります。

 Requirements

Arduino
サーミスタ (MCP9700/9700A) : 秋月電子で購入しました。
1 \muF のコンデンサ
ブレッドボード


 Arduino の設定

 サーミスタと Arduino を接続する


arduino、コンデンサ、サーミスタを図のように接続します。
Arduino を PC と接続し、Arduino IDE で次のようなプログラムを Arduino に書き込みます。

const int vOutPin = 0...]]></summary>
        <author>
            <name>taro0079</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【自然言語処理】BERTを使って歌詞をベクトルに変換し可視化する]]></title>
        <id>https://zenn.dev/robes/articles/fd3315881f8874</id>
        <link href="https://zenn.dev/robes/articles/fd3315881f8874"/>
        <updated>2022-08-14T07:43:08.000Z</updated>
        <summary type="html"><![CDATA[自然言語処理モデルの王様と言われるBERTを使って、文章をベクトルに変換し可視化しましたので、それらのタスクについて示したいと思います。
 
これは 「BERTによる自然言語処理入門」 を参考にしたものですが、本では、livedoorのニュースコーパスが用いられていました。
 
ここでは、文章コーパスとして、女性シンガー（後述）の歌詞を使ってみたいと思います。
https://www.ohmsha.co.jp/book/9784274227264/
 
 

 ライブラリーのインストール
BERTが格納されているtransformersのほか、matplotlibで日本語を可視化するため...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Python] キーワードの配列から、キーワード2つずつの配列を作る]]></title>
        <id>https://zenn.dev/noa/articles/4c27f7d8554717</id>
        <link href="https://zenn.dev/noa/articles/4c27f7d8554717"/>
        <updated>2022-08-14T03:07:28.000Z</updated>
        <summary type="html"><![CDATA[このようなキーワードの配列から
LIST = ["りんご", "みかん", "ばなな", "めろん"]
キーワード2つずつの配列を作る。
ルール1 同じキーワード同士も可。
['みかん', 'みかん']
ルール2 順番違いはまとめる。
[ ['みかん','りんご'], ['りんご','みかん'] ] 👉 [ ['みかん','りんご'] ]
出来上がりはこちら
LIST = ["りんご", "みかん", "ばなな", "めろん"]
word_group = []
for word1 in LIST:
  for word2 in LIST:
    # グループを作成
    _group...]]></summary>
        <author>
            <name>らっく</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SoXで無音部分を削除する]]></title>
        <id>https://zenn.dev/piruty/articles/2022-08-13_remove-silence-by-sox</id>
        <link href="https://zenn.dev/piruty/articles/2022-08-13_remove-silence-by-sox"/>
        <updated>2022-08-13T14:28:00.000Z</updated>
        <summary type="html"><![CDATA[音声ファイルから無音部分を削除したくて、Pythonでスクリプトを書いてみた
環境

Hostマシン: M1 Macbook Air
OS: macOS Monterey(12.5)
python 3.10.0


インストール

soxというツールが必要なので、brewでインストール

brew install sox


Pythonで実行するためのライブラリを入れる

pip install sox




実装

import sox


tfm = sox.Transformer()
# silence: 無音部分を削除。デフォルトだとファイル内の無音部分をすべて削除する
#...]]></summary>
        <author>
            <name>piruty</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonスクリプトの中でtyoutube-dlを使う]]></title>
        <id>https://zenn.dev/piruty/articles/2022-08-13_youtube-dl-for-script</id>
        <link href="https://zenn.dev/piruty/articles/2022-08-13_youtube-dl-for-script"/>
        <updated>2022-08-13T14:12:02.000Z</updated>
        <summary type="html"><![CDATA[音声ファイルを集めるため、youtube-dlを使ってみようと考えた

自己責任でお願いします


環境

Hostマシン: M1 Macbook Air
OS: macOS Monterey(12.5)
python 3.10.0


インストール

pip install youtube_dl


実装

import youtube_dl


options = {
  'format': 'bestaudio/best',
  'outtmpl': './%(id)s.%(ext)s',
  'postprocessors': [
    {
      'key': 'FFm...]]></summary>
        <author>
            <name>piruty</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonの自動フォーマッター「black」を入れようとしたら苦戦した話]]></title>
        <id>https://zenn.dev/masaruxstudy/articles/6ebe32ed5490e0</id>
        <link href="https://zenn.dev/masaruxstudy/articles/6ebe32ed5490e0"/>
        <updated>2022-08-13T08:53:28.000Z</updated>
        <summary type="html"><![CDATA[blackとは何か
参考: もうPythonの細かい書き方で議論しない。blackで自動フォーマットしよう

pythonのコードフォーマッター
自動的にPythonプログラムの書き方を修正してくれる
PEP8のコード規約に準拠したフォーマッター
制限が多く、他人数でpythonのコードを書く際に統一された書き方ができる(メリット)

!
特徴をまとめると、
blackは自動フォーマッターというよりも制限のきついPEP8であるということのようです。


 1. blackのinstall
適用させたいのはVScodeです。
拡張機能にBlack Fomatterというのがありますが、...]]></summary>
        <author>
            <name>Masaru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows11にPyOpenGLをインストールする]]></title>
        <id>https://zenn.dev/zgw426/articles/2619722626bf23</id>
        <link href="https://zenn.dev/zgw426/articles/2619722626bf23"/>
        <updated>2022-08-13T08:24:13.000Z</updated>
        <summary type="html"><![CDATA[Windows11にPyOpenGLをインストールする手順
Windows11にPyOpenGLをインストールする手順メモです。
pip install xxxでインストールできたのですが、スクリプトを実行するとgluがうんたら(←忘れた)とエラーがでてスクリプトが実行できない現象が発生。ネットをさまよいようやくエラーの発生しない方法がわかったのでその手順を忘れる前にメモします。

 参考
手順はこちらの動画で紹介されていました。私は英語力ゼロですが自動翻訳でなんとかなりました。
https://www.youtube.com/watch?v=a4NVQC_2S2U

 環境
Win...]]></summary>
        <author>
            <name>suo-takefumi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[中学生にAtCoderでプログラミングを教える記録 5回目 〜 ABC081A  - Placing Marbles]]></title>
        <id>https://zenn.dev/aromarious/articles/enjoy-atcoder-05</id>
        <link href="https://zenn.dev/aromarious/articles/enjoy-atcoder-05"/>
        <updated>2022-08-13T06:45:28.000Z</updated>
        <summary type="html"><![CDATA[この記事の内容
ソフトウェアエンジニアが中学生の子にプログラミングを教えていく様子を記録する。この記事は5回目。前回は自分の手でコードを書いて、初めての提出までの流れをこなした。今回は別の問題で同じように提出までやってみる。
【前回の記事】 過去問(ABC086A - Product)を1題解き、初めて提出した回。


 今回の達成目標
今回のタスクはABC081A - Placing Marbles。このタスクを題材に、前回と同じ流れをもう一度おさらいする。
https://atcoder.jp/contests/abc081/tasks/abc081_a

書く、動かす、確認する...]]></summary>
        <author>
            <name>aromarious</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【ドメイン駆動設計】ドメインイベントの実装方法 - 1.概要編]]></title>
        <id>https://zenn.dev/taiyou/articles/7b0325591bf1f8</id>
        <link href="https://zenn.dev/taiyou/articles/7b0325591bf1f8"/>
        <updated>2022-08-13T02:35:42.000Z</updated>
        <summary type="html"><![CDATA[なにこれ
この記事では、「実践ドメイン駆動設計」(IDDD本)の「ドメインイベント」の具体的な実装方法をまとめています。
すでにIDDD本でドメインイベントの解説がされていますが、実務に活用できるだけの詳細な実装方法を示していなかったり、または理解できなかったり、そもそも例題で扱っているアジャイルプロジェクトがよくわからなかったりしました。そのため、本記事では、IDDD本を引用しながら分かりやすい例題でドメインイベントの実装方法を記載しました。
質問や感想、要望、ツッコミどころなどありましたら、コメントしてもらえると嬉しいです！

 対象読者

ドメインイベントの実装方法を知りたい...]]></summary>
        <author>
            <name>たいよう</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonでRDBMSのNested-Loop Joinを実装して2つのCSVを外部結合して射影してみた]]></title>
        <id>https://zenn.dev/harukaeru/articles/207812eb1fc7ef</id>
        <link href="https://zenn.dev/harukaeru/articles/207812eb1fc7ef"/>
        <updated>2022-08-12T14:37:51.000Z</updated>
        <summary type="html"><![CDATA[はじめに

 ベン図と結合(JOIN)
RDBMSの結合は、よくベン図を用いて説明されますが、逆に混乱を招いておりたいへん難しいのではないかと思います（すくなくともぼくには難しかった）
なぜならわれわれは、テーブル（表）という概念で考えるからです。
ベン図はみたまんまテーブルではないので、テーブルから集合へどのように変化するのかイメージがつきにくいと思います。ベン図を見せられて、OUTERとかINNERとかLEFTとかRIGHTとか言われても、なんだかよくわかりません。とくにOUTERはいちばんわかりにくいと思います。
そういうわけで、テーブルの結合を考えるにあたっては、それを実装し...]]></summary>
        <author>
            <name>かえる</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Bloch ベクトルを眺めてみる (2)]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-bloch-vector02</id>
        <link href="https://zenn.dev/derwind/articles/dwd-bloch-vector02"/>
        <updated>2022-08-12T13:52:44.000Z</updated>
        <summary type="html"><![CDATA[目的
前回は R_X ゲートの場合のみ計算したので、残りの R_Y, R_Z ゲートの場合を確認したい。と言っても、もう手計算はつらいので、sympy を活用する。

 準備
以下のように計算に必要なシンボル類を定義する。
import sympy

theta = sympy.Symbol('θ', real=True)
phi = sympy.Symbol('φ', real=True)
lam = sympy.Symbol('λ', real=True)

I = sympy.Matrix([
    [1, 0],
    [0, 1]
])
X = sympy.Matrix...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[デプロイをzappaで1年間運用した所感]]></title>
        <id>https://zenn.dev/ytdrep/articles/27e8593fbed6f6</id>
        <link href="https://zenn.dev/ytdrep/articles/27e8593fbed6f6"/>
        <updated>2022-08-12T13:51:01.000Z</updated>
        <summary type="html"><![CDATA[概要
zappaは、wsgiアプリケーションのAWS Lambdaへのpython製CLIデプロイツールです。
少ない記述でAPIGateway,Lambda等をデプロイでき、手軽にデプロイしたいときはAWS SAMやServerless Frameworkより便利だと感じます。
実際に開発環境〜本番環境のデプロイをzappaで1年間ほど運用したのですが、その中で得られた所感をまとめようと思います。
https://github.com/zappa/Zappa

 環境

zappa: v0.54.1
APIGateway,Lambda,EventBridgeイベントルールのデプロイ...]]></summary>
        <author>
            <name>ytdrep</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python互換の静的型付け言語「Erg」]]></title>
        <id>https://zenn.dev/mtshiba/articles/a38c9fcd9646d4</id>
        <link href="https://zenn.dev/mtshiba/articles/a38c9fcd9646d4"/>
        <updated>2022-08-12T11:44:05.000Z</updated>
        <summary type="html"><![CDATA[承前
Ergは私が数年前から開発を始め、つい一昨日公開したばかりのプログラミング言語です。
https://github.com/erg-lang/erg
のはずですが、
https://zenn.dev/qnighy/articles/bda50fe4dda4d6#wishlist
早速、qnighyさんに捕捉していただきました。ありがとうございます。
この記事ではそのErgがどのような言語なのかざっくりと解説していきたいと思います。なお、紹介した機能の一部は未実装です。実装途中の機能を含むコードには*を、完全に未実装の機能を含むコードには**をつけておきます。

 はじめに
Py...]]></summary>
        <author>
            <name>mtshiba</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Herokuへデプロイするのに、ポート番号まわりで失敗した話]]></title>
        <id>https://zenn.dev/yutorse/articles/0f7eba0640c79c</id>
        <link href="https://zenn.dev/yutorse/articles/0f7eba0640c79c"/>
        <updated>2022-08-12T11:08:06.000Z</updated>
        <summary type="html"><![CDATA[問題
LINE Messaging API SDK for Python を利用して LINE CHAT BOT を開発し、Herokuへデプロイしたときに生じた問題。
ボットサーバのエンドポイントとして設定したURLにPOSTリクエストを投げても反応がない。
localhostでテストしたときは問題なく動いていたのに...

 ログ
heroku logs --tailでログを見てみると、
2022-08-12T04:44:19.942449+00:00 heroku[router]: at=error code=H10 desc="App crashed" method=POST...]]></summary>
        <author>
            <name>yutorse</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Bloch ベクトルを眺めてみる]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-bloch-vector</id>
        <link href="https://zenn.dev/derwind/articles/dwd-bloch-vector"/>
        <updated>2022-08-12T09:20:39.000Z</updated>
        <summary type="html"><![CDATA[目的
Bloch 球の上に状態ベクトルをマッピングした Bloch ベクトルという概念がある。よく見かけるのは計算基底 \ket{0}, \ket{1} や X 基底 \ket{+}, \ket{-} をマッピングしたものだが、回転ゲートを適用した場合に、Bloch ベクトルとしてはどのような影響を受けるのかを見てみたい。
回転ゲート自体は Bloch ベクトルではなく、対応する状態ベクトル \in \mathbb{C}^2\!/\!\!\sim\ \simeq \mathbb{C}P^1 に対する演算なので、結果はそれほど自明ではない。

 Bloch ベクトル

\begin{a...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[NumPy] 簡単なガウス過程回帰モデルをゼロから実装する (ハイパーパラメータチューニングなしver.)]]></title>
        <id>https://zenn.dev/mory22k/articles/1186466adfbe6f</id>
        <link href="https://zenn.dev/mory22k/articles/1186466adfbe6f"/>
        <updated>2022-08-12T07:30:00.000Z</updated>
        <summary type="html"><![CDATA[簡易的なガウス過程回帰モデルをnumpyで実装してみます。
import numpy as np
import matplotlib.pyplot as plt

 元の関数

 元の関数を設定
元の関数として、適当な1変数関数を設定しておきます。

f(x) = 3\sin(x) + 4\cos(2x) + \frac{1}{9}\exp\!\left(\frac{1}{3}x\right)

x_min = 0
x_max = 10

def func(x):
    return 3 * np.sin(x) + 4 * np.cos(2 * x) + 1/9 * np.exp(1/...]]></summary>
        <author>
            <name>mory22k</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[再帰呼び出しでネストした辞書（dict）を生成する]]></title>
        <id>https://zenn.dev/awtnb/articles/8c771d09046b9f</id>
        <link href="https://zenn.dev/awtnb/articles/8c771d09046b9f"/>
        <updated>2022-08-12T05:58:54.000Z</updated>
        <summary type="html"><![CDATA[やりたいこと


あいうえお と A という文字列から、 {'あ': {'い': {'う': {'え': {'お': 'A'}}}}} という辞書を作る

整形するとこんな感じ：{
    'あ': {
        'い': {
            'う': {
                'え': {
                    'お': 'A'
                }
            }
        }
    }
}




生成した辞書に対して、同様に あいういあ と B という文字列を渡すと、共通する部分を整理して {'あ':...]]></summary>
        <author>
            <name>AWtnb</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【第2回】Make STG with Pygame Zero]]></title>
        <id>https://zenn.dev/onimen/articles/cc677f7897c935</id>
        <link href="https://zenn.dev/onimen/articles/cc677f7897c935"/>
        <updated>2022-08-12T03:33:16.000Z</updated>
        <summary type="html"><![CDATA[!
この記事は中学生向けです。表現はあえて簡単にしています。


 What is a function - 関数とはなにか
この章は難しめです。眠くなってきたら飛ばして次の章に行ってみましょう。
数学における関数は、ある入力に対して出力を決める関係のことです。
中学や高校では、y = x^2のことを関数と言ったりしますが、プログラミングではちょっと違うので気を付けてください。
プログラミングでの、関数もある入力に対して出力を決定します。入力するデータのことを引数 と言います。また、出力するデータのことを返り値または戻り値と言います。（返り血じゃないよ！！）。さらに、関数が値を出力するこ...]]></summary>
        <author>
            <name>Onimen</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[とりあえず手順だけでも理解する Twitter ログイン認証]]></title>
        <id>https://zenn.dev/minato_seagull/articles/116ca1b58a6f73</id>
        <link href="https://zenn.dev/minato_seagull/articles/116ca1b58a6f73"/>
        <updated>2022-08-12T02:11:03.000Z</updated>
        <summary type="html"><![CDATA[コードベースでとりあえず手順だけでも Twitter の認証方式を理解したい
本記事は Twitter アカウントによるログイン認証フローをどうにか自前のアプリケーションで実装するために調べた内容の記録です。主にこちら の記事とコードを参考にさせていただきました。
手順だけでも、と書いているのは認証の仕組みそのものやセキュリティの担保などについては触れないからです。

 Twitter の認証方式について
https://developer.twitter.com/ja/docs/authentication/overview
Twitter の認証方式は様々で、開発者が自分のアカウ...]]></summary>
        <author>
            <name>Minato_seagull</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【第1回】Make STG with Pygame Zero]]></title>
        <id>https://zenn.dev/onimen/articles/7c934460c54367</id>
        <link href="https://zenn.dev/onimen/articles/7c934460c54367"/>
        <updated>2022-08-12T01:32:34.000Z</updated>
        <summary type="html"><![CDATA[!
この記事は中学生向けです。表現はあえて簡単にしています。


 Let's create the new file - 新しいファイルを作成する
Muを起動したら、左上のほうにある「＋」マークの新規と書かれたアイコンをクリックしてください。すると、新しいファイルが作成されます。しかし、この時点ではファイルが保存されていません。新規ボタンのちょっと右側にある「保存」ボタンを押してファイルを保存しましょう。
まず、ファイルの保存場所を決めます。どこに保存しても大丈夫なのですが、フォルダを作って関連するファイルをそのフォルダの中にまとめるのが良いでしょう。なので、まずフォルダを作成しましょ...]]></summary>
        <author>
            <name>Onimen</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[体感ゲームを自作しよう]]></title>
        <id>https://zenn.dev/kotaproj/articles/pi_microbit_game</id>
        <link href="https://zenn.dev/kotaproj/articles/pi_microbit_game"/>
        <updated>2022-08-11T22:36:25.000Z</updated>
        <summary type="html"><![CDATA[💡やること
micro:bit + ラズパイ + pyxel　を組み合わせて、体感ゲームを自作します。
ゲームを自体は単純で、ジャンプして障害物をよけるものです。

 🏁デモ
https://twitter.com/tw_kotatu/status/1557665176648036352
!
説明のために、手で揺らしていますが、micro:bitをポケットにいれても大丈夫です


 つくるもの


ゲームを開始する

この時点でマイクロビットは加速度データをラズパイに定期送信


障害物(サボテン)がプレイヤー(キャラクタ)に迫ってくる
操作者(Actor)は、タイミングよくリアルな...]]></summary>
        <author>
            <name>kotaproj</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CloudWatch Synthetic Canaryの検証を通してユーザビリティを学んだ]]></title>
        <id>https://zenn.dev/koya6565/articles/7a10a1ee745ac0</id>
        <link href="https://zenn.dev/koya6565/articles/7a10a1ee745ac0"/>
        <updated>2022-08-11T14:51:20.000Z</updated>
        <summary type="html"><![CDATA[Amazon CloudWatchに統合されているSyntethic Canary、E2Eテストに相当するアプリケーション・モニタリングですが職場のシステム環境でも使い始めたら思った以上に有用だったので記事にまとめようと思い立ちました。
＊システムに関わる情報は適宜ボカしてます
＊今回のCanaryスクリプトはPythonランタイムです

 導入編：ランタイム環境
この時点で簡単さがないと有用さも感じられないので重要ですが、AWS Lambdaを使ったことがある人であれば違和感なく使い始めることができそうです。ざっと必要なものは次の通り。

Canaryスクリプトのコード
コード内容の実...]]></summary>
        <author>
            <name>T.S</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[中学生にAtCoderでプログラミングを教える記録 4回目 〜 初めての提出（後半）]]></title>
        <id>https://zenn.dev/aromarious/articles/enjoy-atcoder-04</id>
        <link href="https://zenn.dev/aromarious/articles/enjoy-atcoder-04"/>
        <updated>2022-08-11T14:27:33.000Z</updated>
        <summary type="html"><![CDATA[この記事の内容
ソフトウェアエンジニアが中学生の子にプログラミングを教えていく様子を記録する。この記事は4回目。子本人が自分のマシンを操作し、初めて解答をひとつ提出する。前半では、文をひとつ書いては動かすことを覚えた。続いて、後半では設問に沿ったコードを書いて提出までを書く。
【前回の記事】
前フリが長かったが、3回目、いよいよ自分で初めてコードを書きはじめる回。


 3行で、と思ったけど1行で

スモールステップでひとつひとつ進め、提出までやる。


 前回のあらすじ
ABC 086 A - Product を題材に書き始めて、スモールステップを踏んできた。
https://at...]]></summary>
        <author>
            <name>aromarious</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【第0回】Make STG with using Pygame Zero]]></title>
        <id>https://zenn.dev/onimen/articles/ca447227b65c88</id>
        <link href="https://zenn.dev/onimen/articles/ca447227b65c88"/>
        <updated>2022-08-11T13:30:52.000Z</updated>
        <summary type="html"><![CDATA[!
この記事は中学生向けです。表現はあえて簡単にしています。


 Let's get started - はじめてみましょう！
第0回では環境構築をしていきます。
プログラミングで何かを作ったり、動かしたりするとき、まず初めにすることが環境構築です。
このチュートリアルで使うことになるPythonはPythonを動かす環境がないと動きません。プログラムのファイルだけあっても、それ単体では動かないのです。（これが当たり前に感じるなら、ちょっとセンスあるかもしれないですヨ！）
じゃあ、どうやったらPythonが動くかというと、Pythonを動かすソフトをインストールするだけです。そして、「...]]></summary>
        <author>
            <name>Onimen</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[中学生にAtCoderでプログラミングを教える記録 3回目 〜 初めての提出（前半）]]></title>
        <id>https://zenn.dev/aromarious/articles/enjoy-atcoder-03</id>
        <link href="https://zenn.dev/aromarious/articles/enjoy-atcoder-03"/>
        <updated>2022-08-11T13:12:24.000Z</updated>
        <summary type="html"><![CDATA[この記事の内容
ソフトウェアエンジニアが中学生の子にプログラミングを教えていく様子を記録する。この記事は3回目。いよいよ子本人が自分のマシンを操作し、解答をひとつ提出する。前半。
【前回の記事】
2回目はAtCoderの説明と、環境した環境で過去問を1問解いて提出するデモをやった回。


 3行で

いよいよ過去問を1題解いてみよう。
先輩が「ここから始めるといいよ」という説明をしてくれている。これをやってみよう。
スモールステップでひとつひとつ進め、提出までやる。（長くなったため後半に続く）


 進め方の参考にした記事
先輩が「ここから始めるといいよ」という説明をしてくれている、...]]></summary>
        <author>
            <name>aromarious</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[中学生にAtCoderでプログラミングを教える記録 2回目 〜 AtCoder自体の説明]]></title>
        <id>https://zenn.dev/aromarious/articles/enjoy-atcoder-02</id>
        <link href="https://zenn.dev/aromarious/articles/enjoy-atcoder-02"/>
        <updated>2022-08-11T07:04:21.000Z</updated>
        <summary type="html"><![CDATA[この記事の内容
ソフトウェアエンジニアが中学生の子にプログラミングを教えていく様子を記録する。この記事は2回目。コードを書く前にAtCoderとは何だという説明をした。
【前回の記事】
1回目は子の特性からのAtCoder選定への流れと、事前の環境設定の回。


 3行で

AtCoderでは毎週、コンテストが実施される。土曜21時。キミは初心者向けのコンテストに参加すればいい。
コンテストに参加すると問題が出される。参加者は制限時間内にコードを書いて提出する。提出したものは採点される。いい点数を取るとランクが上がっていく。
急にコンテストに参加すると玉砕一択。まず過去問を解くことか...]]></summary>
        <author>
            <name>aromarious</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AtCoderでプログラミングを教える記録 1回目 背景と環境概要]]></title>
        <id>https://zenn.dev/aromarious/articles/enjoy-atcoder-01</id>
        <link href="https://zenn.dev/aromarious/articles/enjoy-atcoder-01"/>
        <updated>2022-08-10T20:46:01.000Z</updated>
        <summary type="html"><![CDATA[この記事の内容
ソフトウェアエンジニアが中学生の子にプログラミングを教えていく様子を記録する。この記事は1回目。これまでやってきたことと、今回AtCoderにチャレンジするための環境について概要を記す。

 3行で

10歳頃にScratchとSwiftPlayground、HumanResourceMachineでプログラミングに触れる
現在13歳。自由に作るより、問題を解くほうが好きとのこと。AtCoderをやってみては、ということに。
MacBookAirにVSCode等の環境を構築した。


 子が小学生時代に学んだこと
Scratchの猫やSwiftPlaygroundのバ...]]></summary>
        <author>
            <name>aromarious</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[コーディングテストに必要なアルゴリズムを図でやさしく説明してみた！]]></title>
        <id>https://zenn.dev/yutohub/articles/b53c20a6e6a9bc</id>
        <link href="https://zenn.dev/yutohub/articles/b53c20a6e6a9bc"/>
        <updated>2022-08-10T14:21:19.000Z</updated>
        <summary type="html"><![CDATA[導入
コーディングテストを突破するために、大切なアルゴリズムやデータ構造を解説しています。
以下のような人を対象にしています。


 最低限の数学についての知識がある

 使い慣れているプログラミング言語がある

 基本的なアルゴリズムを理解している

 練習問題を解き慣れている


コーディングテストを受ける前に必要最低限のアルゴリズムを知っておきたい人に向けたもので、
競技プログラミングに参加したい人や、厳密な解説を期待する人に向けたものではないのでご了承ください。

コーディングテストに求められる2つのスキルがあると思います。

コーディングの速度と精度
データ構造やアルゴリズ...]]></summary>
        <author>
            <name>yutohub</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[anaconda3 Django環境構築]]></title>
        <id>https://zenn.dev/akaneiy/articles/56e4df01144475</id>
        <link href="https://zenn.dev/akaneiy/articles/56e4df01144475"/>
        <updated>2022-08-10T13:09:43.000Z</updated>
        <summary type="html"><![CDATA[anacondaでDjangoの環境構築しました。
備忘録です。

 環境
anaconda3

 仮想環境つくる
anacondaプロンプトで
conda create -n 仮想環境名

 作成した環境にアクティベートする
conda activate 仮想環境

 Djangoをインストール
conda install django
ではエラーでした。
出力されていたanacondaのページでDjangoのインストールコマンドを検索した結果下記が正解でした。
conda install -c conda-forge django

 プロジェクト作成
プロジェクト作りたい場所にcd...]]></summary>
        <author>
            <name>akane</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[micro:bitの情報をラズパイで取得しよう]]></title>
        <id>https://zenn.dev/kotaproj/articles/pi_microbit_kiso</id>
        <link href="https://zenn.dev/kotaproj/articles/pi_microbit_kiso"/>
        <updated>2022-08-10T09:45:08.000Z</updated>
        <summary type="html"><![CDATA[💡はじめに
micro:bitには、加速度センサーやボタンが搭載されています。

加速度センサー
ボタンA/B



 🔧パーツ一覧



no
部品名
個数
備考




1
ラズベリーパイ
1
今回は4Bで確認


2
マイクロビットＶ２
1
秋月電子通商



!
micro:bit v2を使用します。
v1では、メモリ不足により起動ができないなどの問題が発生します。
v1を使用する場合は、使用するサービスを減らす必要があります。


 接続図
回路図はありません。ble経由でデータを受信します。

 💻環境

 開発環境

ラズベリーパイ

Linux 5.15.32-v8+...]]></summary>
        <author>
            <name>kotaproj</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ABC263 D - Left Right Operation Python解答例]]></title>
        <id>https://zenn.dev/fjnkt98/articles/6fa5083148bfe5</id>
        <link href="https://zenn.dev/fjnkt98/articles/6fa5083148bfe5"/>
        <updated>2022-08-10T02:45:35.000Z</updated>
        <summary type="html"><![CDATA[AtCoder Beginner Contest 263 D - Left Right OperationをPythonで解きます。

 問題
問題文をAtCoderのページより引用します。


 問題文
長さNの整数列A=(A_1,A_2,\ldots,A_N)が与えられます。
あなたは以下の連続する操作をちょうど一度だけ行います。

整数x\ (0\leq x \leq N)を選ぶ。xとして0を選んだ場合何もしない。xとして1以上の整数を選んだ場合、A_1,A_2,\ldots,A_xをそれぞれLで置き換える。

整数y\ (0\leq y \leq N)を選ぶ。yとして0を選んだ場...]]></summary>
        <author>
            <name>藤那花多</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonでLU分解と連立一次方程式の数値解法]]></title>
        <id>https://zenn.dev/3w36zj6/articles/c42099755b81d0</id>
        <link href="https://zenn.dev/3w36zj6/articles/c42099755b81d0"/>
        <updated>2022-08-09T16:51:51.000Z</updated>
        <summary type="html"><![CDATA[問題
N次元の正方行列Aと列ベクトルB, Xについて、AX=BをXについて解きたい。

\begin{pmatrix}
a_{11} & a_{12} & \dots  & a_{1N} \\
a_{21} & a_{22} & \dots  & a_{2N} \\
\vdots & \vdots & \ddots & \vdots \\
a_{N1} & a_{N2} & \dots  & a_{NN}
\end{pmatrix}
\begin{pmatrix}
x_{1}\\
x_{2...]]></summary>
        <author>
            <name>3w36zj6</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ラズパイ上でpyxelをビルドする]]></title>
        <id>https://zenn.dev/kotaproj/articles/pi_pyxel_install</id>
        <link href="https://zenn.dev/kotaproj/articles/pi_pyxel_install"/>
        <updated>2022-08-09T13:55:55.000Z</updated>
        <summary type="html"><![CDATA[💡やること
ラズパイ上でpyxelのサンプルゲームを動作させます。
!
自身でビルドが必要なため、備忘録として残しておきます。


 Pyxelとは
Python向けのレトロゲームエンジンです。
公式の説明が充実しているので、↓を参照のこと
https://github.com/kitao/pyxel

 手順
pipでのインストールができないため、セルフビルドを行う必要があります。

 💻環境 - 64bit版 - Linux rpi 5.15.32

ラズベリーパイ

Linux raspberrypi 5.15.32-v8+ #1538 SMP PREEMPT Thu Mar ...]]></summary>
        <author>
            <name>kotaproj</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】ちがう階層にある、すべてのzipファイルを解凍したい！]]></title>
        <id>https://zenn.dev/namiki_i/articles/c3aa64420e937f</id>
        <link href="https://zenn.dev/namiki_i/articles/c3aa64420e937f"/>
        <updated>2022-08-09T13:42:49.000Z</updated>
        <summary type="html"><![CDATA[こんにちはnamiki_iです！
データ圧縮やアーカイブのフォーマット形式として広く普及しているzip形式のファイルを一度に解凍する方法Pythonで実装したのでご紹介します!

 実現したいこと
今回実現したいことは以下になります.

 1. 任意のフォルダーに含まれているすべてのzipファイルの一括解凍

 2. 解凍した中身は元のzipファイルと同階層に新しくフォルダーを作り格納する

 
同じ階層に含まれているzipファイルを解凍する方法はネット上で解決方法が紹介されていますが、
複数の階層を持つフォルダーの中のzipファイルを探索して解凍する方法が簡単には見つからなかったので実...]]></summary>
        <author>
            <name>namiki_i</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで実装する非再帰抽象化セグメント木]]></title>
        <id>https://zenn.dev/fjnkt98/articles/1324f0ef26a093</id>
        <link href="https://zenn.dev/fjnkt98/articles/1324f0ef26a093"/>
        <updated>2022-08-09T03:13:06.000Z</updated>
        <summary type="html"><![CDATA[競技プログラミングでよく使われるデータ構造「セグメント木」をPythonで実装し、仕組みや実装方法を理解します。

 セグメント木の概要

 セグメント木とは
区間に対するクエリを高速に処理できるデータ構造の1つです。各ノードが区間に対応付けられた完全二分木として表現されます。
根は区間全体を表し、各ノードの子は親の区間を二等分した区間を表現します。
具体的には、以下のようなクエリを\mathcal{O}(\log{N})で処理することができます。


i番目の要素の値を取得する

i番目の要素を任意の値で更新する
区間[l, r)に対する演算結果を求める


 セグメント木の構成要素
...]]></summary>
        <author>
            <name>藤那花多</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub ActionsでPR時にPythonのLinterとテストツールを実行したかった]]></title>
        <id>https://zenn.dev/hironobuu/articles/a7684fcf61231e</id>
        <link href="https://zenn.dev/hironobuu/articles/a7684fcf61231e"/>
        <updated>2022-08-09T02:42:10.000Z</updated>
        <summary type="html"><![CDATA[mainブランチへのプルリク作成・同期時にPythonのLinter (flake8)とテストツール (pytest)を実行できるようにしました。エラー時は、GitHubのAnnotetionにエラー内容を表示、Slackに通知されるようにしました。
コードは、下記。
Slack通知は、ワークフロービルダーのWebhookを利用しています。そのため、新しいワークフロー公開し、取得したWebhook URLをGitHub ActionsのSecretに「SLACK_WEBHOOK_URL」という名前で保存しておく必要があります。
.github/workflows/python-lint-...]]></summary>
        <author>
            <name>hironobuu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AI環境の設定手順   Part_I  : 物体検出入門 (Jetson Xavier NX編)]]></title>
        <id>https://zenn.dev/dsl_gunma/articles/8b3e4c5b69cf1f</id>
        <link href="https://zenn.dev/dsl_gunma/articles/8b3e4c5b69cf1f"/>
        <updated>2022-08-09T01:45:20.000Z</updated>
        <summary type="html"><![CDATA[0． 記事の内容
群馬県産業技術センターではエッジコンピュータを用いたAI技術による物体検出の検討を行い成果を報告書にまとめ、公開[リンク] しています。そして、さらにその内容を広く県内企業の方にも活用できるようにソフトウェアの設定をはじめとした環境設定から動作確認までの一連の操作を手順書としてまとめました。
ここでは、その手順書の概要を示し、より具体的な手順書の電子ファイルにつきましては群馬産業技術センター デジタルソリューションラボ に問い合わせ[リンク] 頂ければと思います。

 1． 目的
この手順書は、近年、Deep Learningとして様々なところでその成果が活用されて...]]></summary>
        <author>
            <name>群馬産業技術センター デジタルソリューションラボ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pyppeteer-チュートリアル]]></title>
        <id>https://zenn.dev/mook_jp/articles/pyppeteer-simple-tutorial</id>
        <link href="https://zenn.dev/mook_jp/articles/pyppeteer-simple-tutorial"/>
        <updated>2022-08-08T15:20:31.000Z</updated>
        <summary type="html"><![CDATA[pyppeteer とは、 puppeteer (パッペッティア: 人形遣い) と呼ばれるGoogle製のJavaScriptのパッケージを、Pythonに移植[1]したものです。
Puppeteer は Chromium をヘッドレスモードでプログラムが操作することを目的としたパッケージで、 Puppeteer または、 Pyppeteer を使うことで以下のようなことができます。

WebPageを表示する
フォーム送信の自動化
ブラウザ操作の自動化
自動化テスト
画面のスクリーンショットやPDFの生成
シングルページアプリケーションのテスト

ブラウザで手動でできることのほとんどの...]]></summary>
        <author>
            <name>mook</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのフォーマッターとリンターについての備忘録]]></title>
        <id>https://zenn.dev/teasy/articles/python-development-environment</id>
        <link href="https://zenn.dev/teasy/articles/python-development-environment"/>
        <updated>2022-08-08T15:09:06.000Z</updated>
        <summary type="html"><![CDATA[概要
Python開発環境、主にフォーマッターとリンターについての備忘録です。
類似の記事も多数あり何番煎じかも分かりませんが、自分でまとめないと毎回ツールや設定方法を検索する羽目になりそうなので、未来の自分のためにメモを残します。


 フォーマッター
フォーマッターを導入した理由は、コーディングスタイルで悩みたくないからです。
私は細かい部分を修正したくなる神経質な面があります。
その割に好みのスタイルが数カ月で変わり、過去書いたソースコードをその時の気分で直したくなり、スタイルを混在させてしまうことがあります。
他にも時間を置いて機能を追加する場合などは、元々のものを忘れ違うス...]]></summary>
        <author>
            <name>teasy</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dartについて学んだことをまとめておく①【今後追記します！】]]></title>
        <id>https://zenn.dev/mihorin1729/articles/3c8049f17c1e44</id>
        <link href="https://zenn.dev/mihorin1729/articles/3c8049f17c1e44"/>
        <updated>2022-08-08T14:01:11.000Z</updated>
        <summary type="html"><![CDATA[どうもこんにちは。本日はDart使いです。
Flutterでスマホアプリを作るために学習しております。
学習に使っているのは、次のふたつです。
https://www.youtube.com/channel/UCReuARgZI-BFjioA8KBpjsw
こちらで流れを学習したり
https://runverse-oficial-site-flutter-study.studio.site/
こちらでコードレビューをしていただいたりします。
RUNVERSEに関しては、こちらにレビューを書かせていただいています。
https://note.com/taro_design_m/n/n6f...]]></summary>
        <author>
            <name>みほりん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DDD Pythonの記事集め]]></title>
        <id>https://zenn.dev/shimo_s3/articles/4332b2a9648746</id>
        <link href="https://zenn.dev/shimo_s3/articles/4332b2a9648746"/>
        <updated>2022-08-08T13:42:49.000Z</updated>
        <summary type="html"><![CDATA[これから勉強したいのでメモとしてリンク

 Python DDD
https://www.slideshare.net/hiromu1996/python-3webddd-205794956
https://www.slideshare.net/ledmonster/python-79561227
https://qiita.com/kotmats/items/97dab7518f3ce3ae8355
https://zenn.dev/mym/articles/99ed544e5f8fa5
https://speakerdeck.com/iktakahiro/ddd-and-onion-...]]></summary>
        <author>
            <name>shimo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWSのComprehendで5,000bytes制限に困った話]]></title>
        <id>https://zenn.dev/krap/articles/a8d2680f497c69</id>
        <link href="https://zenn.dev/krap/articles/a8d2680f497c69"/>
        <updated>2022-08-08T12:38:57.000Z</updated>
        <summary type="html"><![CDATA[今回はAWSのComprehendの5000bytes制限に困った話です。
文字数減らしたはずなのに、制限引っかかるぞという人は是非読んでください。

 エラー内容
AWSのComprehendを利用して感情分析をしようとした際に、下記のようなエラーが出ました。
[ERROR] TextSizeLimitExceededException: An error occurred (TextSizeLimitExceededException) when calling the DetectSentiment operation: Input text size exceeds limit....]]></summary>
        <author>
            <name>倉嶋将矢</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ABC262 D - I Hate Non-Integer Number Python解答例]]></title>
        <id>https://zenn.dev/fjnkt98/articles/851e2f6171d470</id>
        <link href="https://zenn.dev/fjnkt98/articles/851e2f6171d470"/>
        <updated>2022-08-08T12:11:55.000Z</updated>
        <summary type="html"><![CDATA[AtCoder Beginner Contest 262 D - I Hate Non-Integer NumberをPythonで解きます。

 問題
問題文をAtCoderのページより引用します。


 問題文
項数がNの正整数列A=(a_1,\ldots,a_N)が与えられます。
Aの項を1個以上選ぶ方法は2^N-1通りありますが、そのうち選んだ項の平均値が整数であるものが何通りかを998244353で割った余りを求めてください。

 制約

1 \leq N \leq 100
1 \leq a_i \leq 10^9
入力はすべて整数



 解答例

 動的計画法
Aの項からk...]]></summary>
        <author>
            <name>藤那花多</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonから実行ファイルの生成 ~pyinstaller]]></title>
        <id>https://zenn.dev/timoneko/articles/b978f846171074</id>
        <link href="https://zenn.dev/timoneko/articles/b978f846171074"/>
        <updated>2022-08-08T09:00:00.000Z</updated>
        <summary type="html"><![CDATA[インストール
pip install pyinstaller
インストールすると(環境によるが)Scriptsフォルダの下にpyinstaller.exeが生成されていることがわかります。
※直接インストールしたなら...AppData\Local\Programs\Python\Python〇〇\Scripts
※venvなら venvフォルダの直下

 実行
yourscript.pyを作成してみよう

yourscript.py
if __name__ == '__main__':
    print('こんにちは')


実行コマンド
pyinstaller yourscri...]]></summary>
        <author>
            <name>timoneko</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[自然言語処理 -spaCy & GiNZA モデル比較-]]></title>
        <id>https://zenn.dev/akimen/articles/8d818ca704f079</id>
        <link href="https://zenn.dev/akimen/articles/8d818ca704f079"/>
        <updated>2022-08-08T06:46:05.000Z</updated>
        <summary type="html"><![CDATA[前回は、自然言語処理のspaCy,GiNZAについての概要を記載しました。
かなり時間が空いてしましましたが、今回はLanguageモデルと、ルールベースでのエンティティ抽出についてまとめていきたいと思います。

 今回比較するLanguageモデル



Languageモデル
説明
タイプ
備考




ja_core_news_sm
spaCyの日本語標準モデル（小）
語彙、構文、エンティティ
軽量でエンティティ注出可能なモデル。単語ベクトルはないため、類似度の算出はできない。ファイル名のnewsは、ニュース記事のデータで学習したことを示す。


ja_core_news_md
s...]]></summary>
        <author>
            <name>akimen</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[RDKit: 空白のmolオブジェクトを返す]]></title>
        <id>https://zenn.dev/pejpo/articles/2f22ea1bd08a46</id>
        <link href="https://zenn.dev/pejpo/articles/2f22ea1bd08a46"/>
        <updated>2022-08-07T23:51:51.000Z</updated>
        <summary type="html"><![CDATA[はじめに
RDKitで、分子をグリッドに配置して構造描画する際、見た目を整えるために、空白を入れたくなりました。空白のmolオブジェクトを作ろうとしたのですが、どうもRDKitのバージョンによって、与えるSMILESの内容が違うようなので、まとめました。

 概要
SMILESとして ' ' または '' を与え、Chem.MolFromSMILES()でmolオブジェクトにすると空白のmolオブジェクトが得られたが、RDKitのバージョンにより挙動が異なる。可能な範囲での検証結果を表1にまとめた。
SMILESからmolオブジェクトへ変換する代わりに、SMILESが空白の場合にNo...]]></summary>
        <author>
            <name>Dr_O</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[J-Quantとペアトレと戯れる #3]]></title>
        <id>https://zenn.dev/wannabebotter/articles/3c28db8812dc95</id>
        <link href="https://zenn.dev/wannabebotter/articles/3c28db8812dc95"/>
        <updated>2022-08-07T16:16:54.000Z</updated>
        <summary type="html"><![CDATA[今回やったこと
J-Quantとペアトレと戯れる #2 では、東証が決めた業種と言うクラスタを利用して、その中の銘柄ペアで、特に価格系列の差分に定常性がありそうなものを探していた。
今回は、値動きが似たような銘柄群をクラスタリングで抜き出してみて、様子を見てみることにする。

 やりかた
tslearnというPythonパッケージには、時系列の波形を類似度でクラスタリングする機能があるので、それを使うだけ。

クラスタ数は30
東証プライムの銘柄から、分散が大きい上位20％を取り除いたものをクラスタ化対象とした。銘柄数は1,445銘柄となった
Dynamic Time Warp法とユ...]]></summary>
        <author>
            <name>WannabeBotter</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[streamlit]表情判定アプリを作ろう（クラウドサービス使わない）]]></title>
        <id>https://zenn.dev/littledarwin/articles/34fc64822f2e9d</id>
        <link href="https://zenn.dev/littledarwin/articles/34fc64822f2e9d"/>
        <updated>2022-08-07T11:57:59.000Z</updated>
        <summary type="html"><![CDATA[はじめに
これまで機械学習などをテーマにstreamlitを試してきましたが、もう少し肩の力を抜いたギミック的なこともしたいなと思い今回は表情判定WEBアプリを作ります。
streamlitで表情解析となると王道となるのはクラウドサービスのAPIを用いるパターンだと思いますが、ここではpy-featと言うライブラリを用いてローカルだけで完結させますので気軽に試せるのではないかなと思います。

 参考）py-feat
顔画像を入力すると、"anger", "disgust", "fear", "happiness", "sadness", "surprise", "neutral"とい...]]></summary>
        <author>
            <name>まっつん@データサイエンス</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ABC263] AtCoder Beginner Contest 263（A-E 問題 Python）]]></title>
        <id>https://zenn.dev/kiwamachan/articles/b813124b1cc509</id>
        <link href="https://zenn.dev/kiwamachan/articles/b813124b1cc509"/>
        <updated>2022-08-07T09:37:44.000Z</updated>
        <summary type="html"><![CDATA[AtCoder Beginner Contest 263 の復習記録です。
A問題からE問題までやります。使用言語はPythonです。

 A問題
https://atcoder.jp/contests/abc263/tasks/abc263_a

 考え方
カードの番号ごとに、枚数をカウントしておき、降順に並び替えます。
1番目に多い枚数 =3 , 2番目に多い枚数 =2  を満たせば、フルハウスになります。

 提出コード
num = list(map(int,input().split()))
card = [0]*13
for n in num:
    card[n-1] +=...]]></summary>
        <author>
            <name>kiwamachan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonによるS-Learnerの実装]]></title>
        <id>https://zenn.dev/s1ok69oo/articles/491fbaf2092cd5</id>
        <link href="https://zenn.dev/s1ok69oo/articles/491fbaf2092cd5"/>
        <updated>2022-08-07T05:46:09.000Z</updated>
        <summary type="html"><![CDATA[はじめに
S-Learnerについて、Pythonによる実装を交えてまとめました。内容について誤り等ございましたら、コメントにてご指摘いただけますと幸いです。

 機械学習を用いた因果推論
機械学習を用いた因果推論手法は大きく分けて下記の2通りが存在します。

Meta-Learner系
Causal-Tree系

今回はMeta-Learner系の手法の1つであるS-Learnerについて紹介します。

 Meta-Leanrerとは
Meta-Learnerとは、機械学習と因果推論の考え方を掛け合わせて条件付き平均処置効果(CATE: Conditional Average Tr...]]></summary>
        <author>
            <name>うとしん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ModuleNotFoundError: No module named 'dotenv']]></title>
        <id>https://zenn.dev/nek0n0mimi/articles/1ae0a977c62e18</id>
        <link href="https://zenn.dev/nek0n0mimi/articles/1ae0a977c62e18"/>
        <updated>2022-08-06T10:28:01.000Z</updated>
        <summary type="html"><![CDATA[実行環境

MacOS M1
Python 3.9
Anaconda


 状況
python-dotenvをインストールしたはずなのに、そんなモジュール見つからないよと言われる。

 原因
Python3でインストールしていなかった。

 解決
pip3 install python-dotenv
Anacondaの場合↓
conda install -c conda-forge python-dotenv

 参考文献
https://bobbyhadz.com/blog/python-no-module-named-dotenv]]></summary>
        <author>
            <name>calcifer</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[shutil.unpack_archiveで展開されないファイル名]]></title>
        <id>https://zenn.dev/mima_ita/articles/ff1df8c2d3e79d</id>
        <link href="https://zenn.dev/mima_ita/articles/ff1df8c2d3e79d"/>
        <updated>2022-08-06T01:27:28.000Z</updated>
        <summary type="html"><![CDATA[はじめに
pythonのshutil.unpack_archive関数はお手軽にzipを展開してくれます。
しかしながら、展開結果が常に正しいとは限りません。
例えば、以下のようなファイル名に「..」を含むファイルの展開がされていません。
testzip_content
└── hoge
    ├── testOK.txt
    └── testNG..txt

 原因
これは、shutil.unpack_archive中のzipの展開処理を確認すれば簡単にわかります。
https://github.com/python/cpython/blob/main/Lib/shutil....]]></summary>
        <author>
            <name>mima_ita</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python Larkでインタプリタを作る（四則演算、変数定義、if、whileまで）]]></title>
        <id>https://zenn.dev/ookuwab/articles/9137f640a88bd8</id>
        <link href="https://zenn.dev/ookuwab/articles/9137f640a88bd8"/>
        <updated>2022-08-05T18:58:38.000Z</updated>
        <summary type="html"><![CDATA[Pythonの構文解析ライブラリLarkを使って、簡単なインタプリタを作成する。
実装は四則演算、変数定義、if、whileまで。
引数の実装がやや面倒だったので関数定義は実装していない。
Lark Document

 install
Larkでは、.lark拡張子の文法ファイルに文法を定義すると構文解析を自動で行なってくれる。文法ファイルはBNFの一種と言えるEBNGという記法で表記できる他、正規表現を用いることもできる。かなり簡単にparserが書ける印象。
pip install Lark-parser --upgrade

 文法定義
grammar.larkというファイルを作...]]></summary>
        <author>
            <name>ookuwab</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[JAX で遊んでみる (1) — 線形回帰]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-jax-linear-regression</id>
        <link href="https://zenn.dev/derwind/articles/dwd-jax-linear-regression"/>
        <updated>2022-08-05T12:50:20.000Z</updated>
        <summary type="html"><![CDATA[目的
JAX をインストールして少し触ってみたという記録。大体 Linear Regression with JAX に書いているのと同じような内容で、普通に線形回帰をしましたという備忘録。
これだけだと記事がすぐに終わってしまうので、統計学による直接計算や scikit-learn の使用例も交えて水増ししてみた。

 おさらい
ディープラーニングは画像分類、画像生成、画像認識や物体検出、自然言語処理など色々ジャンルはあると思うが、基本的には何かしら入力データの空間 \mathcal{X} = \R^n から出力データの空間 \mathcal{Y} = \R^m への可微分写像 f...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[テスト]]></title>
        <id>https://zenn.dev/chopirol/articles/8e69c4c8a3b0e7</id>
        <link href="https://zenn.dev/chopirol/articles/8e69c4c8a3b0e7"/>
        <updated>2022-08-05T11:31:26.000Z</updated>
        <summary type="html"><![CDATA[てsつお]]></summary>
        <author>
            <name>chopirol</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS SDKとGoogle Cloud SDKにおけるページネーションの違い]]></title>
        <id>https://zenn.dev/shimat/articles/844563d50800e8</id>
        <link href="https://zenn.dev/shimat/articles/844563d50800e8"/>
        <updated>2022-08-05T03:19:11.000Z</updated>
        <summary type="html"><![CDATA[概要
ストレージ内のファイルを列挙する等の、結果が膨大かもしれない処理では、結果を小分けにして返してくれるページネーション処理が用いられます。AWSとGoogle CloudのSDKでは、その作りが逆と言えます。まとめておきます。

AWS SDKは、素朴に使うと(低級APIでは)ページネーション無し

Google Cloud SDKは、既定でページネーション有り


本記事の説明ではC#とPythonを使いました。全部は把握していないのですがおそらく、低級なAPIを使う限りは言語問わず同じ結論が言えるはずです。例題として、ストレージ (Amazon S3 / Google Clo...]]></summary>
        <author>
            <name>shimat</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonが入ってないPCで実行ファイルを動かす  -cx_Freezeを使ってexeファイルに変換してインストーラーを作成する-]]></title>
        <id>https://zenn.dev/musashi26629/articles/c8aae7d3f6f863</id>
        <link href="https://zenn.dev/musashi26629/articles/c8aae7d3f6f863"/>
        <updated>2022-08-04T22:22:09.000Z</updated>
        <summary type="html"><![CDATA[はじめに
自身で作成したPythonの実行ファイルをPythonをPCにインストールしていない方々へ配布する為にcx_Freezeを使ってexeファイルのインストーラーを作成したので、自信もメモも兼ねて作成方法を紹介します。
公式はこちら↓
https://cx-freeze.readthedocs.io/en/latest/setup_script.html

 実行環境

Windows10
Python 3.9.6
仮想環境 venv


 バージョン
cx_Freezeのバージョンと対応しているPythonのバージョンになります。



cx_Freeze version
P...]]></summary>
        <author>
            <name>musashi26629</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python の DI コンテナ実装の紹介と活用例]]></title>
        <id>https://zenn.dev/515hikaru/articles/python-injector-module</id>
        <link href="https://zenn.dev/515hikaru/articles/python-injector-module"/>
        <updated>2022-08-04T17:07:06.000Z</updated>
        <summary type="html"><![CDATA[※この投稿は、Python の DI コンテナ実装の紹介と活用例 - All You Need Is Writingという 2021年 5 月 23 日に公開した記事の再掲です。
最近 fukabori.fm という Podcast で DI(Dependency Injection) の話を聞いた。
https://fukabori.fm/episode/48
この Podcast 内では DI に関しては PHP や Java の情報が多い、みたいな話があった。筆者はそれらの言語に疎いのであまり知らないが、Python にも DI コンテナのライブラリ[1]がある。
ということで、今...]]></summary>
        <author>
            <name>こじま</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Notion APIとPythonを使ってページを作成する ～Slackへの通知を添えて～]]></title>
        <id>https://zenn.dev/najo/articles/117424abb5605b</id>
        <link href="https://zenn.dev/najo/articles/117424abb5605b"/>
        <updated>2022-08-04T11:01:18.000Z</updated>
        <summary type="html"><![CDATA[チームで仕事やプロジェクトを行っていると定例MTGを実施することがあると思います。
その際に議事録のテンプレを作成したり、チームメンバーへ事前に議題の記載を展開するのをたまに忘れてしまうことってありませんか？
私はよくあります。人間がうっかり忘れてしまうような定型的な業務は自動化がピッタリです。ということで、今回はPythonとNotion APIを使って議事録の作成を自動化してみました。
ソースコードはページ後半で公開しているので、 内容とか別に良いからソース見たい！！って方は後半部分をご参照ください。

 Notion APIの取得(事前準備)

NotionのAPIを利用するために...]]></summary>
        <author>
            <name>najo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python3】@propaty, setter, deleterはアクセスの仕方が異なる]]></title>
        <id>https://zenn.dev/kazuma_soon/articles/e8210b5826ed92</id>
        <link href="https://zenn.dev/kazuma_soon/articles/e8210b5826ed92"/>
        <updated>2022-08-03T15:45:34.000Z</updated>
        <summary type="html"><![CDATA[変数を書き換える的な〜？ という理解でしたが、コードを読んでいて深まりました。
普通の関数と同じようにアクセスすると、エラーが発生する。これは知りませんでした。
アクセスの仕方が大きく変わリます。

 結論
# @propatyのfull_urlでurlを取得
# 実行を意味する「かっこ」が不要
request = Request(url="https://www.google.com/")
print(request.full_url) -> https://www.google.com/

× print(request.full_url()) -> ERROR!!!

...]]></summary>
        <author>
            <name>kazuma-soon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Wav2Vec2による日本語音声認識を試してみる]]></title>
        <id>https://zenn.dev/itsuki9180/articles/f0f5e409a9c808</id>
        <link href="https://zenn.dev/itsuki9180/articles/f0f5e409a9c808"/>
        <updated>2022-08-03T12:44:32.000Z</updated>
        <summary type="html"><![CDATA[0. はじめに

 0-1. 3行でこの記事をまとめると

Transformerという言語モデルがDeep Learning界隈で猛威を奮っているよ
音声認識にもTransformerが使われ始めているよ
日本語×Transformerの音声認識の記事が少ないから書いてみたよ


 0-2. 必要な前提知識や物

大学初等相当の数学をベースとする深層学習の知識
プログラミング言語Python及び深層学習フレームワークPytorchとその周辺に関する知識と開発環境
深層学習モデルのTransformerに対する興味
VRAMが6GB（？）以上内蔵されているNVIDIA製GPUを搭載し...]]></summary>
        <author>
            <name>ITSUKI</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[python スクレイピングとブラウザ操作]]></title>
        <id>https://zenn.dev/akaneiy/articles/2caa2bb9f71c34</id>
        <link href="https://zenn.dev/akaneiy/articles/2caa2bb9f71c34"/>
        <updated>2022-08-03T07:14:16.000Z</updated>
        <summary type="html"><![CDATA[外部のプラットフォームを経由したお問い合わせに自動返信するRPAを作って欲しいと要望がありました。
RPAと言われましたが、Uipathで夜間ずっとそのサイトを監視するためにライセンスとPCを占領するのもなんかもったいないと思い、Pythonで実装することにしました。
去年の年末くらいに作ったのでほとんど忘れていますが思い出しながらまとめたいと思います。
主にスクレイピングについてですが、GmailAPIを使用しているのでコード内にGmail関係もだいぶ登場します。

 やりたいこと
お問い合わせがあると担当者にメールが届くらしいですが、今回は直接会員向けサイトでお問い合わせの有無を確認...]]></summary>
        <author>
            <name>akane</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[「大相撲の決まり手って傾向あるの？」をpandasとmatplotlibで調べたよ。vol.2]]></title>
        <id>https://zenn.dev/terrrry0404/articles/f47f6debaf44bd</id>
        <link href="https://zenn.dev/terrrry0404/articles/f47f6debaf44bd"/>
        <updated>2022-08-03T03:59:42.000Z</updated>
        <summary type="html"><![CDATA[背景


7月末からデータサイエンスの領域を学ぶことにして、先日「ちょっとやってみたこと（大相撲の決まり手分析）」をzennで書いたところ、コアな相撲ファンからフィードバックをもらいました。
前回の記事：「大相撲の決まり手って傾向あるの？」をpandasとmatplotlibで調べたよ


そのコアな相撲ファンからもらったフィードバックをもとに新たな仮説を立てたので今回分析した結果をメモとして残します。



 前回の結論とコアな相撲ファンからのフィードバック

 前回の結論
詳しくは前回の記事を見てもらえればと思いますが、

押し出しが決まり手として一番多くて、「押し出し/寄り切り...]]></summary>
        <author>
            <name>terrrry0404</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ReactとPythonでAPI販売サービスを作ろう]]></title>
        <id>https://zenn.dev/sikkim/books/how_to_create_api_sales_service</id>
        <link href="https://zenn.dev/sikkim/books/how_to_create_api_sales_service"/>
        <updated>2022-08-03T01:15:17.000Z</updated>
        <summary type="html"><![CDATA[API販売サービスの開発を通して実践的なReactアプリケーションの開発手順を学べる本です。

フロントエンドにReact、バックエンドにPythonを用いて、認証やDB接続、クレジットカード決済機能を備えたWebアプリケーションを作り、デプロイします。

本書の対象者
・ReactやPythonで簡単なプログラムを作ったことがある方
・AWSを使ったことのある方
・ある程度自分で調べることができる方

注意事項
本書は技術書典13で頒布予定です。
紙の本やPDF版がほしい方は技術書典13までお待ち下さい。

以下の技術を使用しています。

フロントエンド
・React 18
・TypeScript 4.6
・Vite 2.9
・Tailwind CSS 3.0
・React Router 6.3

バックエンド
・Cognito（認証）
・Chalice（APIフレームワーク）
　（中身はPython、AWS Lambda、API Gateway、IAM）
・DynamoDB（データベース）
・Stripe（決済）]]></summary>
        <author>
            <name>TAKAHASHI Taro</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【FastAPI＋MySQL】alembicでマイグレーションファイルを自動生成して実行する]]></title>
        <id>https://zenn.dev/shimi7o/articles/39a2b62fd7b1ac</id>
        <link href="https://zenn.dev/shimi7o/articles/39a2b62fd7b1ac"/>
        <updated>2022-08-02T16:11:58.000Z</updated>
        <summary type="html"><![CDATA[はじめに
alembicはSQLAlchemyの著者によって作成されたデータベースマイグレーションツールです。PythonのWebフレームワークであるFastAPIがDBのマイグレーションの仕組みを持っていないため、DBのマイグレーションをするためにalembicを使います。
alembicはマイグレーションファイルを自分で書く方法のほかに、テーブル定義の変更を自動で読み取ってマイグレーションファイルを自動生成することができます。とても便利な機能なのですが、実際にやってみようとしたところ苦戦したので、備忘録として残しておきます。

 環境

MySQL 5.7
Python 3.9....]]></summary>
        <author>
            <name>shimi7o</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】classmethodからプライベートのメソッドを呼び出したい]]></title>
        <id>https://zenn.dev/someone7140/articles/fe3d2cf6c03447</id>
        <link href="https://zenn.dev/someone7140/articles/fe3d2cf6c03447"/>
        <updated>2022-08-02T15:46:09.000Z</updated>
        <summary type="html"><![CDATA[概要
Pythonではインタンス化していないクラスから呼び出されるメソッドである、classmethodの機能があります。classmethodの詳細はPythonのクラスメソッド（@classmethod）とは？使いどころとメソッドとの違いを解説の記事を参照ください。
今回はこのclassmethodからプライベートで設定したメソッドを呼び出す場合、どうすれば良いのかというのをメモ書きします。

 対応
classmethodでは自クラスを表すclsを引数に取ります。このclsから、プライベートメソッドを呼び出すことが出来ます。プライベートメソッドを呼び出すときは自身（cls）を引...]]></summary>
        <author>
            <name>なかつがわ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[機械学習で因果推論~T-Learner~]]></title>
        <id>https://zenn.dev/s1ok69oo/articles/4a36fee0297234</id>
        <link href="https://zenn.dev/s1ok69oo/articles/4a36fee0297234"/>
        <updated>2022-08-02T14:53:05.000Z</updated>
        <summary type="html"><![CDATA[はじめに
T-Learnerについて、Pythonによる実装を交えてまとめました。内容について誤り等ございましたら、コメントにてご指摘いただけますと幸いです。

 機械学習を用いた因果推論
機械学習を用いた因果推論手法は大きく分けて下記の2通りが存在します。

Meta-Learner系
Causal-Tree系

今回はMeta-Learner系の手法の1つであるT-Learnerについて紹介します。

 Meta-Leanrerとは
Meta-Learnerとは、機械学習と因果推論の考え方を掛け合わせて条件付き平均処置効果(CATE: Conditional Average Tr...]]></summary>
        <author>
            <name>うとしん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonでkintone APIを使用して育児記録を可視化する（POST／GET）]]></title>
        <id>https://zenn.dev/mnmnmmmn/articles/python_kintone_api</id>
        <link href="https://zenn.dev/mnmnmmmn/articles/python_kintone_api"/>
        <updated>2022-08-01T22:02:55.000Z</updated>
        <summary type="html"><![CDATA[概要
kintoneとはサイボウズ株式会社が提供している、ノーコードでビジネスアプリを開発できるクラウドサービスです。REST APIも用意されているので外部からのデータ授受もできます。
https://kintone.cybozu.co.jp/
今後仕事で使用することが多くなるので、自習用に開発用アカウントを取得して使ってみました。
本記事ではこちらのAPIを利用して、kintoneへデータをPOST／kintoneからデータをGETするPythonスクリプトを作成します。

 使用するデータ
せっかくなら意味のあるデータを扱ってみたいので、今年2歳になる息子の育児記録を拝借するこ...]]></summary>
        <author>
            <name>mnmnmmmn</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【SQLAlchemy】MariaDBに接続する]]></title>
        <id>https://zenn.dev/ringotabetai/articles/5756ebfbd20dfc</id>
        <link href="https://zenn.dev/ringotabetai/articles/5756ebfbd20dfc"/>
        <updated>2022-08-01T15:39:04.000Z</updated>
        <summary type="html"><![CDATA[必要なものインストール
Pythonの仮想環境に入る
pip install SQLAlchemy
pip install mysql-connector-python
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.schema import Column
from sqlalchemy.types import Integer, Stri...]]></summary>
        <author>
            <name>ringotabetai</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pywin32を利用してwindowsを操ろう]]></title>
        <id>https://zenn.dev/timoneko/articles/c289e23dc997da</id>
        <link href="https://zenn.dev/timoneko/articles/c289e23dc997da"/>
        <updated>2022-08-01T15:34:31.000Z</updated>
        <summary type="html"><![CDATA[↓　すでに入っている場合は不要
pip install pywin32
※windows11で下記は検証を行っております。

 1.windowsの画面にメッセージを表示
import win32api

win32api.MessageBox(None, "メッセージの表示", "タイトル")

メッセージの表示

 2.「メモ帳」を自動で開く
import win32api

win32api.WinExec("C://Windows/System32/notepad.exe")


 2.1 メモ帳でメッセージを表示させる
import win32api
import win32g...]]></summary>
        <author>
            <name>timoneko</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】FastAPI MariaDBに接続し、テキストで出力]]></title>
        <id>https://zenn.dev/ringotabetai/articles/600b249d7270f4</id>
        <link href="https://zenn.dev/ringotabetai/articles/600b249d7270f4"/>
        <updated>2022-08-01T15:29:44.000Z</updated>
        <summary type="html"><![CDATA[Python強化期間
Pythonの仮想環境に入る
python3 -m venv venv
FastAPIインストール
pip install fastapi
dotenvインストール
pip install python-dotenv
mysqlclientインストール
pip install mysqlclient
uvicorn インストール
pip install uvicorn
.env
HOST = '127.0.0.1'
DATABASE = 'test_db'
USER_AA = 'root'
PASSWORD = '0123'
test_maria.py
from...]]></summary>
        <author>
            <name>ringotabetai</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ABC262] AtCoder Beginner Contest 262（A-E 問題 Python）]]></title>
        <id>https://zenn.dev/kiwamachan/articles/c2d3d77b6faa34</id>
        <link href="https://zenn.dev/kiwamachan/articles/c2d3d77b6faa34"/>
        <updated>2022-08-01T15:04:31.000Z</updated>
        <summary type="html"><![CDATA[AtCoder Beginner Contest 262 の復習記録です。
A問題からE問題までやります。使用言語はPythonです。

 A問題
https://atcoder.jp/contests/abc262/tasks/abc262_a

 考え方
こういう問題は、何の数字が何に変化してほしいかを考えると分かりやすいです。



元の数字(Y)
2018
2019
2020
2021
2022
2023




変化後の数字（出力値）
2018
2022
2022
2022
2022
2026



4ごとに変わりますので、4で割って整数切り捨てを行い、4をかけると上手くいきそ...]]></summary>
        <author>
            <name>kiwamachan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ERAlchemyでＥＲ図 自動作成]]></title>
        <id>https://zenn.dev/ringotabetai/articles/63e400b14e65f2</id>
        <link href="https://zenn.dev/ringotabetai/articles/63e400b14e65f2"/>
        <updated>2022-08-01T14:53:08.000Z</updated>
        <summary type="html"><![CDATA[環境:Ubuntu20.04
どちらかでインストールする。
私はbrewでしました。
pipでするときは、Pythonの仮想環境に入ります。
$ brew install eralchemy
$ pip install eralchemy
ファイル作成する
example.er
[users]
*id
name
age

[emails]
*id
address
user_id

users 1--* emails
EOF
下記を実行する
$ eralchemy -i example.er -o example.png
ディレクトリに _example.png_ができてる
中身を確認する...]]></summary>
        <author>
            <name>ringotabetai</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CycleGANを試す]]></title>
        <id>https://zenn.dev/ryu2021/articles/833574759b3031</id>
        <link href="https://zenn.dev/ryu2021/articles/833574759b3031"/>
        <updated>2022-08-01T11:56:11.000Z</updated>
        <summary type="html"><![CDATA[概要
Windows11でCycleGANの学習を試してみた。

 環境

OS : Windows11
GPU : NVIDIA RTX 3080Ti
Anaconda3


 CycleGANを試す

 ダウンロード
ソースコードをダウンロード
git clone https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix
cd pytorch-CycleGAN-and-pix2pix
GitHub - junyanz/pytorch-CycleGAN-and-pix2pix: Image-to-Image Translatio...]]></summary>
        <author>
            <name>Ryu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[boto3] NextTokenを使って情報取得]]></title>
        <id>https://zenn.dev/isseeeeey55/articles/52e0435b9a4340</id>
        <link href="https://zenn.dev/isseeeeey55/articles/52e0435b9a4340"/>
        <updated>2022-08-01T09:15:29.000Z</updated>
        <summary type="html"><![CDATA[このページについて
boto3で NextToken を使う場面があったので、 NextToken とは？について簡単にメモします。

 経緯
このGlueジョブ実行履歴取得スクリプトを作成している際に、 NextToken の使い方を確認しました。
https://zenn.dev/isseeeeey55/articles/e46c0e4cbd89bd
boto3の get_job_runs を使用していますが、実際のジョブ実行履歴数とスクリプトで取得したジョブ実行履歴数に乖離がありました。
そこで確認したところ、最大で取得できる結果( MaxResults )が200件までで、そ...]]></summary>
        <author>
            <name>Issei Matsuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Glueジョブ実行履歴取得]]></title>
        <id>https://zenn.dev/isseeeeey55/articles/e46c0e4cbd89bd</id>
        <link href="https://zenn.dev/isseeeeey55/articles/e46c0e4cbd89bd"/>
        <updated>2022-08-01T08:53:30.000Z</updated>
        <summary type="html"><![CDATA[このページについて
AWS Glueのコストが気になるため、ジョブごとのコストを確認したく、そのために必要な情報をcsvに出力するスクリプトをPythonで作成しました。

 AWS Glue Studio
AWS Glue Studioの Monitoring ページで、ジョブ実行状況を確認することはできます。
ただ、いくつか制限があります。

表示対象の日付指定が30日間まで
ジョブ実行履歴の件数が1,000件まで


https://docs.aws.amazon.com/ja_jp/glue/latest/ug/what-is-glue-studio.html

 boto3...]]></summary>
        <author>
            <name>Issei Matsuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[多倍長整数の実装7（XbyakライクなPython DSLによるasmコード生成）]]></title>
        <id>https://zenn.dev/herumi/articles/bitint-07-gen-asm</id>
        <link href="https://zenn.dev/herumi/articles/bitint-07-gen-asm"/>
        <updated>2022-08-01T08:03:48.000Z</updated>
        <summary type="html"><![CDATA[初めに
前回多倍長整数の実装6（乗算後加算とintrinsicの限界）では、コンパイラのintrinsic関数の限界を紹介しました。
仕方がないのでアセンブリ言語（以下asmと表記）で実装しなければなりません。
今回はその作業を手助けするPythonでアセンブリコードを生成する簡単なDSLを作ったのでそれを紹介します。
記事全体の一覧は多倍長整数の実装1（C/C++）参照。

 動機
私はC++でアセンブリ言語(以下asm)レベルでの実行時コード生成をやりたくてXbyakを開発しています。
これはもちろんJITコード生成がメインの機能なのですが、自分の慣れているC++の文法でasmコ...]]></summary>
        <author>
            <name>herumi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Zennはじめました！こんな記事を書きます紹介]]></title>
        <id>https://zenn.dev/mihorin1729/articles/cb21e968e02863</id>
        <link href="https://zenn.dev/mihorin1729/articles/cb21e968e02863"/>
        <updated>2022-07-31T22:56:32.000Z</updated>
        <summary type="html"><![CDATA[こんにちは。エンジニアに転職してもうすぐ2ヶ月になります、みほりんと申します。
Zennでは、これまで身につけたことや、今後新たに学ぶことの備忘録のようなまとめを書きたいと思っています。
新参者で勝手もあまりわかっておりませんが、何卒よろしくお願い致します。

 現在取り組んでいること

 Vue.js
現在のお仕事はVue.js（Nuxt.js)を使うので、この2ヶ月必死に勉強しました。
検索とかすると、「時代はReactなのでは」と思わせられる情報が多いですが、
わたしはVue使いとして頑張っていく所存です。こちらで学習。
現在は、「Vue2からVue3に変えていく」ことに関して勉強...]]></summary>
        <author>
            <name>みほりん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【PyTorch】CenterNet を実装してみた]]></title>
        <id>https://zenn.dev/a5chin/articles/centernet_pytorch</id>
        <link href="https://zenn.dev/a5chin/articles/centernet_pytorch"/>
        <updated>2022-07-31T16:14:29.000Z</updated>
        <summary type="html"><![CDATA[はじめに
前回の SimSiam に続き，CenterNet も実際の論文を読んで自分で実装してみました．

CenterNet についての軽い説明と筆者が用いている環境について話します．
本記事の詳細については以下の GitHub にコードを載せているのでよければ見てください．Star や Pull Request 等頂けるとやる気が出ます↓


 CenterNet とは
CenterNet とは，アンカーレスな物体検出を行う機械学習モデルで 2019 年にECCV で発表されました．アルゴリズムとしては

物体の中心座標のヒートマップ
中心座標のオフセット
物体のサイズ


の...]]></summary>
        <author>
            <name>a5chin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】 カラーハーフトーンの作り方]]></title>
        <id>https://zenn.dev/baroqueengine/articles/1fa7c9d5e906d3</id>
        <link href="https://zenn.dev/baroqueengine/articles/1fa7c9d5e906d3"/>
        <updated>2022-07-31T12:08:52.000Z</updated>
        <summary type="html"><![CDATA[元画像

Cyan + Magenta + Yellow

Cyan + Magenta
この記事では、画像をカラーモデルのCMYKに分離してハーフトーンを生成する、カラーハーフトーンの作り方について解説する。ただし、見よう見まねの我流で作ったものなので、出力のクォリティについては大目に見てほしい。

 そもそもハーフトーンとは？

ハーフトーンは画像内の範囲ピクセル、たとえば10x10ピクセルのような範囲の明るさ平均を算出し、その値をもとに特定の形で描画し直す処理である。上記画像では明るさが大きいほど、大きい白円を描く仕組みになっている。
これから作るカラーハーフトーンも基本的には同...]]></summary>
        <author>
            <name>miku</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PDMによるPythonのプロジェクト管理]]></title>
        <id>https://zenn.dev/lucidfrontier45/articles/a9601aa94b7c29</id>
        <link href="https://zenn.dev/lucidfrontier45/articles/a9601aa94b7c29"/>
        <updated>2022-07-31T10:05:35.000Z</updated>
        <summary type="html"><![CDATA[PDMとは
PDMはPythonのプロジェクト、依存関係のマネージメントツールです。私は以前までPoetryを利用していましたが以下の点からPDMに乗り換えました。


pyproject.tomlを利用する点はPoetryと同じだが、よりPEP準拠になっている。
Poetryよりも依存解決が速い
Poetryはいつまで経ってもv1.2がリリースされない。
単体でタスクランナー機能を有している。(Poetryはプラグインが必要)
指定したファイルの__version__を読み込んでくれる。
プロジェクトごとにvenvを作るが、インストールされるライブラリは中央管理されていてシンボリッ...]]></summary>
        <author>
            <name>lucidfrontier45</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonのコマンドラインパーサーTyper浅煎り]]></title>
        <id>https://zenn.dev/tos_kamiya/articles/5920f43ddb2e92</id>
        <link href="https://zenn.dev/tos_kamiya/articles/5920f43ddb2e92"/>
        <updated>2022-07-31T09:45:54.000Z</updated>
        <summary type="html"><![CDATA[PythonのコマンドラインパーサーであるTyperの記事が、日本語では見つからな日本語の解説記事が少なかったので、メモがてら書いてみました。
Typerは次のような特徴を持つ新進気鋭のコマンドラインパーサーです。

出力が今風でファンシー
タイプヒントも利用しつつ、直感的にコマンドラインの仕様を書き下せる
コマンドライン補完機能を標準装備

※ 記事の執筆時点、2022.07.31現在ではベータであるため、正式リリースまでには機能の変更があるかもしません。

 インストール
python3 -m pip install "typer[all]"

 最小限のコマンドライン仕様の定義
使...]]></summary>
        <author>
            <name>tos_kamiya</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python 】学習済みモデルのWord2Vecを使って「人生」から「愛」を引いたら何が残るかを計算してみた]]></title>
        <id>https://zenn.dev/robes/articles/c251dd89a0e47f</id>
        <link href="https://zenn.dev/robes/articles/c251dd89a0e47f"/>
        <updated>2022-07-31T08:28:45.000Z</updated>
        <summary type="html"><![CDATA[はじめに
ドイツの詩人シラーは言いました。
「愛の光なき人生は無価値である」 語録より
シラーに限らず、人類史において、「人生」と「愛」の関係をどれだけの人たちが論じてきたことでしょう。
ここでは、そのような先人たちの営みに敬意を表しながらも、現代の偉業Word2Vecを使って、**「人生」から「愛」を引いたら何が残るのか？を解明したいと思います。*

 Word2Vecについてはコチラを参照
https://zenn.dev/robes/articles/61847e68587b98
!
Word2Vecのほかに、fastTextでも計算してみます


 ライブラリのインストール
...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[色んなレコメンドアルゴリズムを一瞬で構築できるRecBoleを触る]]></title>
        <id>https://zenn.dev/sugasuga/articles/3ae12610d2a90b</id>
        <link href="https://zenn.dev/sugasuga/articles/3ae12610d2a90b"/>
        <updated>2022-07-31T06:22:36.000Z</updated>
        <summary type="html"><![CDATA[(公式ドキュメントより拝借)

 RecBoleとは
統一されたインターフェースで、機械学習アルゴリズムの中身をほぼ意識せず、複数のレコメンドアルゴリズムを構築できるライブラリ
モデル名、データセットの設定、その他学習の設定などを渡して実行するだけ。
run_recbole(
            model=model_name,
            dataset=dataset_name,
            config_file_list=[config_files],
            config_dict=parameter_dict,
        ...]]></summary>
        <author>
            <name>sugasuga</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】Word2Vecで単語の分散表現を体感する]]></title>
        <id>https://zenn.dev/robes/articles/61847e68587b98</id>
        <link href="https://zenn.dev/robes/articles/61847e68587b98"/>
        <updated>2022-07-31T03:19:01.000Z</updated>
        <summary type="html"><![CDATA[Word2Vecとは
Word2Vecは2013年にトマス・ミコロフにより提案された自然言語の数値化の手法です。
トマス・ミコロフはGoogle在籍のエンジニアで、Word2Vecの発明により、Google翻訳の性能が著しく向上したと言われています。

 Word2Vecの何がすごいか
Word2Vecは単語の分散表現を取り入れたモデルです。
単語の分散表現とは、単語を固定長のベクトルで表すことです。
単語の一つ一つを、ベクトル空間における点として表現することで、単語同士の距離（類似度）を測ったり、演算（足し算・引き算）したりすることが可能なモデルになっています。
Word2Vecは...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[拡散生成モデルで学ぶJax/Flaxによる深層学習プログラミング]]></title>
        <id>https://zenn.dev/dhirooka/articles/af80381a2cb6b0</id>
        <link href="https://zenn.dev/dhirooka/articles/af80381a2cb6b0"/>
        <updated>2022-07-31T00:34:13.000Z</updated>
        <summary type="html"><![CDATA[はじめに
深層学習モデルやその学習を実装する際には、多くの場合でPyTorchやKerasなどのフレームワークが使われます。本記事では、Googleより公開されているJaxというフレームワークを用いた深層学習プログラミングを紹介します。
コードは以下に配置しています。
https://github.com/daigo0927/jax-ddim

 Jaxとは
JaxはGoogleから公開されている、自動微分を備えた数値計算ライブラリと言えます。Numpyとほぼ同じように計算処理を実装でき、またGPUやTPUによって高速に演算を実行することもできます。これによって深層学習モデルを実装し...]]></summary>
        <author>
            <name>dhirooka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【TF-IDF】Adoの「過学習」はどのあたりが過学習なのか？]]></title>
        <id>https://zenn.dev/robes/articles/48cb25ee29a110</id>
        <link href="https://zenn.dev/robes/articles/48cb25ee29a110"/>
        <updated>2022-07-30T22:48:41.000Z</updated>
        <summary type="html"><![CDATA[過学習。機械学習やディープラーニングが世の中に広まる中、この言葉の認知度が増してきたところですが、Adoが「過学習」をリリースしたことで一気に市民権を得た感じがします。
一方で、この「過学習」の歌詞。 ざっと読んでみても、どのあたりが過学習なのか、よく分かりません。
そこで、今回は、自然言語処理の基本的技術の一つTF-IDFを使って何が過学習なのかを突き止めたいと思います。

 TF-IDFとは
ざっくり言うと、その文書を特徴づける重要な単語を抽出する手法になります。
以下のように、単語の出現頻度とレア度の積で表されます。単語の出現頻度が高く、かつ、他の文章にはあまり出てこない単語が重要...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonの標準ライブラリを使ってWebサーバーを起動する]]></title>
        <id>https://zenn.dev/masaruxstudy/articles/55668c093d184a</id>
        <link href="https://zenn.dev/masaruxstudy/articles/55668c093d184a"/>
        <updated>2022-07-30T22:44:06.000Z</updated>
        <summary type="html"><![CDATA[PythonでWebサーバーを構築する

 どうやって？


Pythonに付属している標準ライブラリにシンプルなWebサーバーとして機能するモジュールがあるので、これを使って構築する


ゴールはHTMLファイルをレスポンスとして返す
以下は手順(Pythonの環境構築は済んでいるものとする)



index.htmlファイルを用意する
PythonコマンドでWebサーバーの起動
index.htmlファイルを編集し、反映されるかを確認する


 前提知識
モジュール > パッケージ > ライブラリ


モジュール


.py などのファイル全てがモジュール



パ...]]></summary>
        <author>
            <name>Masaru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【自然言語処理】GoogleColaboratoryでGiNZAがロードできない時の解決策]]></title>
        <id>https://zenn.dev/robes/articles/7ee135605bdb8e</id>
        <link href="https://zenn.dev/robes/articles/7ee135605bdb8e"/>
        <updated>2022-07-30T21:54:13.000Z</updated>
        <summary type="html"><![CDATA[日本語NLPライブラリーであるGiNZAをGoogleColaboratoryで使おうとした場合、バージョンによってはエラーが出て、うまくロードできないケースがあります。
ここでは、以下のようなエラーが出た場合の解決策を記載します。

 GiNZAをインストールし、SpacyでLoadする
!pip install ginza==4.0.6 ja-ginza==4.0.0 
import spacy
nlp = spacy.load('ja_ginza')

 出現するエラー
Can't find model 'ja_ginza'. It doesn't seem to be a sh...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Slackのフリープラン変更対策、履歴テキストとファイルをpythonでバックアップ]]></title>
        <id>https://zenn.dev/oskgw_log/articles/slack_backup_py</id>
        <link href="https://zenn.dev/oskgw_log/articles/slack_backup_py"/>
        <updated>2022-07-30T20:49:12.000Z</updated>
        <summary type="html"><![CDATA[Slackのフリープランの変更
2022年9月1日より、Slackフリープランのメッセージ履歴が1万から過去90日に変更になるようです。

 では、現時点でバックアップは？
フリープランでやってる人のバックアップで、各チャンネルの過去ログとファイルを
ローカルPCにバックアップするものがあるのかよく分からなかったです。

 手動でバックアップ？？
いやー、、それはキツイです。
最後の手段かもしれませんが、あんまり人間的な仕事としては違うます。

 流行りのヘビに任せるか、、
最近流行りのヘビでお馴染み 邪神ちゃ・・・ではなく、pythonがあれば、なんとかできるかな、、、

 pyt...]]></summary>
        <author>
            <name>oskgw log</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Djangoにおけるテーブル内データの移行方法について]]></title>
        <id>https://zenn.dev/miyaji26/books/a530e44f826710</id>
        <link href="https://zenn.dev/miyaji26/books/a530e44f826710"/>
        <updated>2022-07-30T15:57:01.000Z</updated>
        <summary type="html"><![CDATA[Djangoを利用してアプリケーションを作っている際に、長く運用されているものほど適切なテーブル構造となっていないことが多々あります。

本書では記事とラベルを利用した誤ったテーブル構造を例として、データの移行方法について対応方法を紹介します。]]></summary>
        <author>
            <name>miyaji_26</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Qiskit で遊んでみる (6) — QGSS2022 より]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-qiskit06</id>
        <link href="https://zenn.dev/derwind/articles/dwd-qiskit06"/>
        <updated>2022-07-30T14:36:14.000Z</updated>
        <summary type="html"><![CDATA[目的
前回 に引き続き Qiskit Global Summer School 2022: Quantum Simulations で興味を持ったテーマを復習する。
今回はハードウェアノイズのシミュレーションを題材にする。

 準備
以下を import しているとする。
import numpy as np
from qiskit import QuantumCircuit, QuantumRegister
from qiskit.providers.aer import AerSimulator
from qiskit.providers.aer.noise import Noi...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ubuntu20.04に機械学習(GPU)環境を設定する方法]]></title>
        <id>https://zenn.dev/kwashizzz/articles/ubunt2004-setup-mlenv</id>
        <link href="https://zenn.dev/kwashizzz/articles/ubunt2004-setup-mlenv"/>
        <updated>2022-07-30T13:56:21.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは、わっしーです。
本記事では、Ubuntu20.04にGPUありの機械学習環境を設定する方法を紹介します。一応、AzureのVMで動作確認しました。
よく躓く、CUDA、pythonの導入部分も記載しています。
早速、方法を紹介します。

 1. sshでサーバ接続
ssh -i ./*.cer azureuser@xx.xxx.xxx.xxx
もし、Permissions 0644 for ‘xxx.key’ are too open.がでる場合は、
chmod 600 xxx.key
で権限を変更してください。
もし、Vscodeでサーバに入りたい場合は、以下...]]></summary>
        <author>
            <name>わっしー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Qiskit で遊んでみる (5) — QGSS2022 より]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-qiskit05</id>
        <link href="https://zenn.dev/derwind/articles/dwd-qiskit05"/>
        <updated>2022-07-30T09:28:35.000Z</updated>
        <summary type="html"><![CDATA[目的
Qiskit Global Summer School 2022: Quantum Simulations に参加した。その中で興味を持った題材について忘れないうちにまとめてみたい。
具体的には Quantum computers as universal quantum simulators: state-of-art and perspectives を参考にする形でハミルトニアン H = X \otimes X の時間発展についてまとめる。

 おさらい
次回の記事の伏線の形で、ハミルトニアン H = X の時間発展について考えてみる。これは U(t) = \exp(-i...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【MAYA・Python】hlslを利用してモデルチェックを行うツール]]></title>
        <id>https://zenn.dev/kuru_teo/articles/9a968a5d1b8512</id>
        <link href="https://zenn.dev/kuru_teo/articles/9a968a5d1b8512"/>
        <updated>2022-07-30T07:20:32.000Z</updated>
        <summary type="html"><![CDATA[今回はmayaのrender setup機能を用いて、シェーダ(hlsl)モデルのエラーチェックを視覚的に行うツールを作成しました。以下の動画ではポリゴンの裏面が見えてしまっていないか、ポリゴンの法線がおかしくないかを確認しています。
https://youtu.be/1qnJTBh56KU
https://github.com/Kuru-teo/PythonCollection/tree/master/ChangeMatByRenderSetUp

 【できること】
ポリゴンの裏面が見えてしまっていないか、ポリゴンの法線がおかしくないかを確認できます。またShaderを追加してデバッグ...]]></summary>
        <author>
            <name>kuruteo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[numpyでGPMLの線形回帰モデルを学ぶ]]></title>
        <id>https://zenn.dev/mory22k/articles/429ce4ad3208d7</id>
        <link href="https://zenn.dev/mory22k/articles/429ce4ad3208d7"/>
        <updated>2022-07-30T02:04:27.000Z</updated>
        <summary type="html"><![CDATA[GPML第2章前半部分を、自分なりに解釈しつつnumpyで実装します。
import numpy as np
import matplotlib.pyplot as plt
注: この記事はもともとQiitaに投稿していたものの焼き直しです。元の記事はこちらでご確認いただけます:https://qiita.com/mory22k/items/2491f2cfce345bbd805c

 単純な線形回帰モデル
まずは、バイアスを含む単純な線形回帰モデルを実装してみます。

 元の関数
もとの関数は、入力ベクトル\boldsymbol{x}と重みベクトル\boldsymbol{w}

\bo...]]></summary>
        <author>
            <name>mory22k</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spotifyデータの可視化から新しいアーティストを探す]]></title>
        <id>https://zenn.dev/nayuta9999/articles/781d2f2ba045c9</id>
        <link href="https://zenn.dev/nayuta9999/articles/781d2f2ba045c9"/>
        <updated>2022-07-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[概要

あるアーティストが、どのようなアーティストから影響を受けているのかわかる可視化を作成。
SpotifyAPIを使用し、データ収集。
popularityを重回帰分析で再計算
グラフ作成。


 背景
最近、Oasisにドはまりしまして、Oasisの音楽からライブ映像、インタビュー等の動画を見漁っていいました。ボーカルのリアムや、リードギターのノエルは、他のバンドのことを結構ボロクソいうのですが、どうやら、The Beatlesのジョンレノンやポールマッカートニーのことを崇拝しているのが分かりました。ここからThe Beatlesに興味を持ち、音楽を聴いてドはまりしました。
こ...]]></summary>
        <author>
            <name>田中勇太</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Package] Pulp (Python) と JuMP (Julia) の記法比較アンチョコ (2022年7月版)]]></title>
        <id>https://zenn.dev/takilog/articles/c0c52c608be465</id>
        <link href="https://zenn.dev/takilog/articles/c0c52c608be465"/>
        <updated>2022-07-29T13:47:20.000Z</updated>
        <summary type="html"><![CDATA[はじめに
タイトルの通りですが、Pythonのpulpでモデルを書くときと、JuliaのJuMPでモデルを書くときの両方があります。毎回pulpとJuMPのドキュメントを見に行くのが大変になってきたので、自分のために比較を書いておくことにしました。
以下はこの記事を書くために使用したバージョンです。




バージョン
備考




Python
3.7.13
Google colaboratory上


pulp
2.6.0
Google colaboratory上


Julia
1.6.7
macOS (Apple M1/Memory 8GBマシン上)


JuMP
1.1.1...]]></summary>
        <author>
            <name>たきろぐ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【さくらレンタルサーバー】Pythonのseleniumで定期実行する]]></title>
        <id>https://zenn.dev/eito_blog/articles/bbc6b8510be3b2</id>
        <link href="https://zenn.dev/eito_blog/articles/bbc6b8510be3b2"/>
        <updated>2022-07-29T11:03:00.000Z</updated>
        <summary type="html"><![CDATA[さくらレンタルサーバーでPythonのプログラムを定期実行することが可能です。
本記事ではさくらレンタルサーバーにPythonプログラムをデプロイ、定期実行までの設定を行う方法を解説します。

 コマンドプロンプトでさくらサーバーにログイン
下記コマンドを実行
ssh [ユーザー名]@[IPアドレス]
パスワードの入力が求められるのでパスワードを入力

 Python3.6.8をインストール

 Pythonのアーカイブファイルをダウンロード
ダウンロード用のフォルダ作成
mkdir -p ~/workspace/python3
カレントディレクトリを変更
cd ~/workspace...]]></summary>
        <author>
            <name>エイト</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[サクッとDocker+SQL+Pythonをローカルで実行する方法]]></title>
        <id>https://zenn.dev/aokkey/articles/7bdc79e1f5d096</id>
        <link href="https://zenn.dev/aokkey/articles/7bdc79e1f5d096"/>
        <updated>2022-07-29T05:52:56.000Z</updated>
        <summary type="html"><![CDATA[背景
AWSのバックエンドをlambda + RDS構成で行おうとした時に、PythonスクリプトでSQLをいじる必要があるので、ローカルでスクリプトの検証をサクッとやりたいなと思った次第です。

 前提条件
Dockerのインストールが済んでいること。

 SQLの立ちあげ
DockerでMySQLインスタンスを立ち上げてPythonからアクセスしましょう。
作業ディレクトリをよしなに作り、Dockerfileとdocker-compose.ymlを以下のように書いてあげます。
Dockerfile
FROM mysql:5.7

RUN apt-get update &&...]]></summary>
        <author>
            <name>Aokkey</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[個人的に最強のパーサジェネレータLarkについて]]></title>
        <id>https://zenn.dev/tbsten/articles/d922514e548518</id>
        <link href="https://zenn.dev/tbsten/articles/d922514e548518"/>
        <updated>2022-07-28T22:30:00.000Z</updated>
        <summary type="html"><![CDATA[パーサとは?
文字列を一定のルールをもとに解析するプログラムのことです。
例えば各OSのターミナルアプリは入力された文字列をシェルスクリプトというルールに基づいて解析・実行します。

入力
# 入力
ls -l -a  
⏬ ⏬ ⏬
# 解析
- コマンドは「ls」  # コマンドを解析
- オプションは「-l」と「-a」  # オプションを解析
⏬ ⏬ ⏬
# 実行
- lsはファイルの一覧を探すコマンドだからファイル一覧を表示
- -lオプションがあるからリスト形式で表示する
- -aオプションがあるから隠しファイルも表示する


 パーサジェネレータとは?
パーサを作るためのプ...]]></summary>
        <author>
            <name>てべすてん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[機械学習で因果推論~Meta-LearnerとEconML~]]></title>
        <id>https://zenn.dev/s1ok69oo/articles/1eeebe75842a50</id>
        <link href="https://zenn.dev/s1ok69oo/articles/1eeebe75842a50"/>
        <updated>2022-07-28T16:55:09.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Meta-LearnerとEconMLについて、Pythonによる実装を交えてまとめました。内容について誤り等ございましたら、コメントにてご指摘いただけますと幸いです。

 機械学習を用いた因果推論
機械学習を用いた因果推論手法は大きく分けて下記の2通りが存在します。

Meta-Learner系
Causal-Tree系

この中でも今回は1つ目のMeta-Learnerについて紹介します。

 Meta-Leanrerとは
Meta-Learnerとは、機械学習と因果推論の考え方を掛け合わせて条件付き平均処置効果(CATE: Conditional Average Tr...]]></summary>
        <author>
            <name>うとしん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】MariaDB連携]]></title>
        <id>https://zenn.dev/ringotabetai/articles/19369244a2318c</id>
        <link href="https://zenn.dev/ringotabetai/articles/19369244a2318c"/>
        <updated>2022-07-28T14:53:42.000Z</updated>
        <summary type="html"><![CDATA[mariaDBでの動作確認
参照:
https://mariadb.org/download/
sudo apt-get install apt-transport-https curl
sudo curl -o /etc/apt/trusted.gpg.d/mariadb_release_signing_key.asc 'https://mariadb.org/mariadb_release_signing_key.asc'
sudo sh -c "echo 'deb https://mirrors.xtom.jp/mariadb//ubuntu focal main' >&...]]></summary>
        <author>
            <name>ringotabetai</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【AWS】AWS CDKで書いたLambdaをLambda LayerとあわせてAPI Gatewayにデプロイ【CDK】]]></title>
        <id>https://zenn.dev/yosemat/articles/01c83132a0c705</id>
        <link href="https://zenn.dev/yosemat/articles/01c83132a0c705"/>
        <updated>2022-07-28T13:45:12.000Z</updated>
        <summary type="html"><![CDATA[AWS CDK in Typescript + Lambda in Python
最近個人的にも世間的にもかなり来てるAWS CDKをTypescriptで実装します。CDKは型セーフで簡単にかけるスクリプト言語としてTypescriptを、Lambdaは柔軟にかけるPythonで採用します。
Lambdaはライブラリを複数のコードで使い回せるLambda Layerとあわせて実装します。
これによって

Lambda Layerにnumpyをインストール
Lambda Function AからLambda Layerのnumpyを呼び出し
Lambda Function BからLa...]]></summary>
        <author>
            <name>Yosemat</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonでQRコードを塗りつぶす]]></title>
        <id>https://zenn.dev/ijiwarunahello/articles/e1d26d393a02ec</id>
        <link href="https://zenn.dev/ijiwarunahello/articles/e1d26d393a02ec"/>
        <updated>2022-07-28T12:55:36.000Z</updated>
        <summary type="html"><![CDATA[はじめに
とある日のイベントにて、会場のパネルに写っているQRコードをその場で読み取って記録していくデジタルスタンプラリーを体験してきました。
推しのパネルはSNSに上げたい！けど、会場に来ないと見れないパネルなのでそのままアップするのには抵抗がある…
なので手作業でQRコードを塗りつぶしていました。
推しだけならまだしも全メンバー手作業で塗りつぶすの大変だな…と思い、QRコードを塗りつぶすプログラムを作成しました。


 ソースコード
さくっとソースを見たい方はこちら→ ijiwarunahello/qrcode_hidden
やってることはシンプルで、

画像からQRコードを検出...]]></summary>
        <author>
            <name>ijiwarunahello</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[M1MacにDocker, Python, Django, MySQLの環境構築をする]]></title>
        <id>https://zenn.dev/masaruxstudy/articles/4b05694c2760d2</id>
        <link href="https://zenn.dev/masaruxstudy/articles/4b05694c2760d2"/>
        <updated>2022-07-28T08:16:22.000Z</updated>
        <summary type="html"><![CDATA[Docker環境構築
参考: 【M1 Pro/Max対応】M1 Mac環境構築ベストプラクティス
こちらのDocker環境構築を参考にさせて頂きます。
無事bashが立ち上がればOKです。
あくまでもテスト的に行っただけなので、実際のDocker環境構築は次に書いていくものを行っていきます
作成したディレクトリごと削除してしまっても構いません。

 DockerでPythonの環境構築
参考: 【Python入門・応用】MacにPythonができる環境をつくろう｜02.Pythonの環境構築
YOUTUBE版: 【2022最新版】M1MacにPythonの環境構築｜通常のインストール...]]></summary>
        <author>
            <name>Masaru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[郵便番号から住所を取得する]]></title>
        <id>https://zenn.dev/hasegawasatoshi/articles/0d8b7cb9f73527</id>
        <link href="https://zenn.dev/hasegawasatoshi/articles/0d8b7cb9f73527"/>
        <updated>2022-07-28T07:31:05.000Z</updated>
        <summary type="html"><![CDATA[運用保守に携わっているシステムで、利用者の居住地の分析をしたい要件があったので、郵便番号から都道府県や住所を取得する方法について調べてみました。

 郵便番号 → 住所への変換
http://zipcloud.ibsnet.co.jp/doc/api のように、 Web API を提供してくれているサービスもありますが、今回は件数が多いため、ローカルで検索できるようにします。
日本郵便のサイトから CSV 形式の郵便番号一覧を取得します。「都道府県一覧」から「全国一括」をダウンロードします。
https://www.post.japanpost.jp/zipcode/dl/oogaki-...]]></summary>
        <author>
            <name>Satoshi Hasegawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのロギング:loggingを用いたロガー作成方法]]></title>
        <id>https://zenn.dev/kwashizzz/articles/python-logger-v2</id>
        <link href="https://zenn.dev/kwashizzz/articles/python-logger-v2"/>
        <updated>2022-07-28T06:35:07.000Z</updated>
        <summary type="html"><![CDATA[こんにちは、わっしーです。
個人的にPythonでログを取る方法は、常に迷っています。簡単のため、余計なライブラリは使用せず、デフォルトで入っているloggingを使用したり、ファイルごとに分けたロガーを設定したいなどやりたいことはたくさんあります。この記事では、現在使用しているロギングの方法を紹介します。

 ファイル構成
今回は、以下のような構成にし、src/app.py, src/module.pyにて、utils/logger.pyからログの設定を読み出して使用することを想定します。
-src
 |- app.py
 |- module.py

-utils
 |-logger....]]></summary>
        <author>
            <name>わっしー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python-Fire】サブコマンド作成し、暗号化したファイルの出力、復号化]]></title>
        <id>https://zenn.dev/ringotabetai/articles/4d4e43e318fbc6</id>
        <link href="https://zenn.dev/ringotabetai/articles/4d4e43e318fbc6"/>
        <updated>2022-07-27T15:41:53.000Z</updated>
        <summary type="html"><![CDATA[Pythonの仮想環境 venvに入り
Python-Fireをインストールします。
$ pip install fire

RSA のアルゴリズムを Python で実装し、実際に平文 (テキスト) を暗号化して、さらに暗号文を復号してみます。

my_rsa.py
from math import gcd

def lcm(p, q):
    return (p * q) // gcd(p, q)


def generate_keys(p, q):
    N = p * q
    L = lcm(p - 1, q - 1)

    for i in range(2, L):...]]></summary>
        <author>
            <name>ringotabetai</name>
        </author>
    </entry>
</feed>