<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://s-i27.github.io/Rssfeed/index.html</id>
    <title>osmos::feed</title>
    <updated>2022-08-06T02:07:06.725Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="https://s-i27.github.io/Rssfeed/index.html"/>
    <link rel="self" href="https://s-i27.github.io/Rssfeed/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[shutil.unpack_archiveで展開されないファイル名]]></title>
        <id>https://zenn.dev/mima_ita/articles/ff1df8c2d3e79d</id>
        <link href="https://zenn.dev/mima_ita/articles/ff1df8c2d3e79d"/>
        <updated>2022-08-06T01:27:28.000Z</updated>
        <summary type="html"><![CDATA[はじめに
pythonのshutil.unpack_archive関数はお手軽にzipを展開してくれます。
しかしながら、展開結果が常に正しいとは限りません。
例えば、以下のようなファイル名に「..」を含むファイルの展開がされていません。
testzip_content
└── hoge
    ├── testOK.txt
    └── testNG..txt

 原因
これは、shutil.unpack_archive中のzipの展開処理を確認すれば簡単にわかります。
https://github.com/python/cpython/blob/main/Lib/shutil....]]></summary>
        <author>
            <name>mima_ita</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python Larkでインタプリタを作る（四則演算、変数定義、if、whileまで）]]></title>
        <id>https://zenn.dev/ookuwab/articles/9137f640a88bd8</id>
        <link href="https://zenn.dev/ookuwab/articles/9137f640a88bd8"/>
        <updated>2022-08-05T18:58:38.000Z</updated>
        <summary type="html"><![CDATA[Pythonの構文解析ライブラリLarkを使って、簡単なインタプリタを作成する。
実装は四則演算、変数定義、if、whileまで。
引数の実装がやや面倒だったので関数定義は実装していない。
Lark Document

 install
Larkでは、.lark拡張子の文法ファイルに文法を定義すると構文解析を自動で行なってくれる。文法ファイルはBNFの一種と言えるEBNGという記法で表記できる他、正規表現を用いることもできる。かなり簡単にparserが書ける印象。
pip install Lark-parser --upgrade

 文法定義
grammar.larkというファイルを作...]]></summary>
        <author>
            <name>ookuwab</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[JAX で遊んでみる (1) — 線形回帰]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-jax-linear-regression</id>
        <link href="https://zenn.dev/derwind/articles/dwd-jax-linear-regression"/>
        <updated>2022-08-05T12:50:20.000Z</updated>
        <summary type="html"><![CDATA[目的
JAX をインストールして少し触ってみたという記録。大体 Linear Regression with JAX に書いているのと同じような内容で、普通に線形回帰をしましたという備忘録。
これだけだと記事がすぐに終わってしまうので、統計学による直接計算や scikit-learn の使用例も交えて水増ししてみた。

 おさらい
ディープラーニングは画像分類、画像生成、画像認識や物体検出、自然言語処理など色々ジャンルはあると思うが、基本的には何かしら入力データの空間 \mathcal{X} = \R^n から出力データの空間 \mathcal{Y} = \R^m への可微分写像 f...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[テスト]]></title>
        <id>https://zenn.dev/chopirol/articles/8e69c4c8a3b0e7</id>
        <link href="https://zenn.dev/chopirol/articles/8e69c4c8a3b0e7"/>
        <updated>2022-08-05T11:31:26.000Z</updated>
        <summary type="html"><![CDATA[てsつお]]></summary>
        <author>
            <name>chopirol</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS SDKとGoogle Cloud SDKにおけるページネーションの違い]]></title>
        <id>https://zenn.dev/shimat/articles/844563d50800e8</id>
        <link href="https://zenn.dev/shimat/articles/844563d50800e8"/>
        <updated>2022-08-05T03:19:11.000Z</updated>
        <summary type="html"><![CDATA[概要
ストレージ内のファイルを列挙する等の、結果が膨大かもしれない処理では、結果を小分けにして返してくれるページネーション処理が用いられます。AWSとGoogle CloudのSDKでは、その作りが逆と言えます。まとめておきます。

AWS SDKは、素朴に使うと(低級APIでは)ページネーション無し

Google Cloud SDKは、既定でページネーション有り


本記事の説明ではC#とPythonを使いました。全部は把握していないのですがおそらく、低級なAPIを使う限りは言語問わず同じ結論が言えるはずです。例題として、ストレージ (Amazon S3 / Google Clo...]]></summary>
        <author>
            <name>shimat</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonが入ってないPCで実行ファイルを動かす  -cx_Freezeを使ってexeファイルに変換してインストーラーを作成する-]]></title>
        <id>https://zenn.dev/musashi26629/articles/c8aae7d3f6f863</id>
        <link href="https://zenn.dev/musashi26629/articles/c8aae7d3f6f863"/>
        <updated>2022-08-04T22:22:09.000Z</updated>
        <summary type="html"><![CDATA[はじめに
自身で作成したPythonの実行ファイルをPythonをPCにインストールしていない方々へ配布する為にcx_Freezeを使ってexeファイルのインストーラーを作成したので、自信もメモも兼ねて作成方法を紹介します。
公式はこちら↓
https://cx-freeze.readthedocs.io/en/latest/setup_script.html

 実行環境

Windows10
Python 3.9.6
仮想環境 venv


 バージョン
cx_Freezeのバージョンと対応しているPythonのバージョンになります。



cx_Freeze version
P...]]></summary>
        <author>
            <name>musashi26629</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python の DI コンテナ実装の紹介と活用例]]></title>
        <id>https://zenn.dev/515hikaru/articles/python-injector-module</id>
        <link href="https://zenn.dev/515hikaru/articles/python-injector-module"/>
        <updated>2022-08-04T17:07:06.000Z</updated>
        <summary type="html"><![CDATA[※この投稿は、Python の DI コンテナ実装の紹介と活用例 - All You Need Is Writingという 2021年 5 月 23 日に公開した記事の再掲です。
最近 fukabori.fm という Podcast で DI(Dependency Injection) の話を聞いた。
https://fukabori.fm/episode/48
この Podcast 内では DI に関しては PHP や Java の情報が多い、みたいな話があった。筆者はそれらの言語に疎いのであまり知らないが、Python にも DI コンテナのライブラリ[1]がある。
ということで、今...]]></summary>
        <author>
            <name>こじま</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Notion APIとPythonを使ってページを作成する ～Slackへの通知を添えて～]]></title>
        <id>https://zenn.dev/najo/articles/117424abb5605b</id>
        <link href="https://zenn.dev/najo/articles/117424abb5605b"/>
        <updated>2022-08-04T11:01:18.000Z</updated>
        <summary type="html"><![CDATA[チームで仕事やプロジェクトを行っていると定例MTGを実施することがあると思います。
その際に議事録のテンプレを作成したり、チームメンバーへ事前に議題の記載を展開するのをたまに忘れてしまうことってありませんか？
私はよくあります。人間がうっかり忘れてしまうような定型的な業務は自動化がピッタリです。ということで、今回はPythonとNotion APIを使って議事録の作成を自動化してみました。
ソースコードはページ後半で公開しているので、 内容とか別に良いからソース見たい！！って方は後半部分をご参照ください。

 Notion APIの取得(事前準備)

NotionのAPIを利用するために...]]></summary>
        <author>
            <name>najo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python3】@propaty, setter, deleterはアクセスの仕方が異なる]]></title>
        <id>https://zenn.dev/kazuma_soon/articles/e8210b5826ed92</id>
        <link href="https://zenn.dev/kazuma_soon/articles/e8210b5826ed92"/>
        <updated>2022-08-03T15:45:34.000Z</updated>
        <summary type="html"><![CDATA[変数を書き換える的な〜？ という理解でしたが、コードを読んでいて深まりました。
普通の関数と同じようにアクセスすると、エラーが発生する。これは知りませんでした。
アクセスの仕方が大きく変わリます。

 結論
# @propatyのfull_urlでurlを取得
# 実行を意味する「かっこ」が不要
request = Request(url="https://www.google.com/")
print(request.full_url) -> https://www.google.com/

× print(request.full_url()) -> ERROR!!!

...]]></summary>
        <author>
            <name>kazuma-soon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Wav2Vec2による日本語音声認識を試してみる]]></title>
        <id>https://zenn.dev/itsuki9180/articles/f0f5e409a9c808</id>
        <link href="https://zenn.dev/itsuki9180/articles/f0f5e409a9c808"/>
        <updated>2022-08-03T12:44:32.000Z</updated>
        <summary type="html"><![CDATA[0. はじめに

 0-1. 3行でこの記事をまとめると

Transformerという言語モデルがDeep Learning界隈で猛威を奮っているよ
音声認識にもTransformerが使われ始めているよ
日本語×Transformerの音声認識の記事が少ないから書いてみたよ


 0-2. 必要な前提知識や物

大学初等相当の数学をベースとする深層学習の知識
プログラミング言語Python及び深層学習フレームワークPytorchとその周辺に関する知識と開発環境
深層学習モデルのTransformerに対する興味
VRAMが6GB（？）以上内蔵されているNVIDIA製GPUを搭載し...]]></summary>
        <author>
            <name>ITSUKI</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[python スクレイピングとブラウザ操作]]></title>
        <id>https://zenn.dev/akaneiy/articles/2caa2bb9f71c34</id>
        <link href="https://zenn.dev/akaneiy/articles/2caa2bb9f71c34"/>
        <updated>2022-08-03T07:14:16.000Z</updated>
        <summary type="html"><![CDATA[外部のプラットフォームを経由したお問い合わせに自動返信するRPAを作って欲しいと要望がありました。
RPAと言われましたが、Uipathで夜間ずっとそのサイトを監視するためにライセンスとPCを占領するのもなんかもったいないと思い、Pythonで実装することにしました。
去年の年末くらいに作ったのでほとんど忘れていますが思い出しながらまとめたいと思います。
主にスクレイピングについてですが、GmailAPIを使用しているのでコード内にGmail関係もだいぶ登場します。

 やりたいこと
お問い合わせがあると担当者にメールが届くらしいですが、今回は直接会員向けサイトでお問い合わせの有無を確認...]]></summary>
        <author>
            <name>akane</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[「大相撲の決まり手って傾向あるの？」をpandasとmatplotlibで調べたよ。vol.2]]></title>
        <id>https://zenn.dev/terrrry0404/articles/f47f6debaf44bd</id>
        <link href="https://zenn.dev/terrrry0404/articles/f47f6debaf44bd"/>
        <updated>2022-08-03T03:59:42.000Z</updated>
        <summary type="html"><![CDATA[背景


7月末からデータサイエンスの領域を学ぶことにして、先日「ちょっとやってみたこと（大相撲の決まり手分析）」をzennで書いたところ、コアな相撲ファンからフィードバックをもらいました。
前回の記事：「大相撲の決まり手って傾向あるの？」をpandasとmatplotlibで調べたよ


そのコアな相撲ファンからもらったフィードバックをもとに新たな仮説を立てたので今回分析した結果をメモとして残します。



 前回の結論とコアな相撲ファンからのフィードバック

 前回の結論
詳しくは前回の記事を見てもらえればと思いますが、

押し出しが決まり手として一番多くて、「押し出し/寄り切り...]]></summary>
        <author>
            <name>terrrry0404</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ReactとPythonでAPI販売サービスを作ろう]]></title>
        <id>https://zenn.dev/sikkim/books/how_to_create_api_sales_service</id>
        <link href="https://zenn.dev/sikkim/books/how_to_create_api_sales_service"/>
        <updated>2022-08-03T01:15:17.000Z</updated>
        <summary type="html"><![CDATA[API販売サービスの開発を通して実践的なReactアプリケーションの開発手順を学べる本です。

フロントエンドにReact、バックエンドにPythonを用いて、認証やDB接続、クレジットカード決済機能を備えたWebアプリケーションを作り、デプロイします。

本書の対象者
・ReactやPythonで簡単なプログラムを作ったことがある方
・AWSを使ったことのある方
・ある程度自分で調べることができる方

注意事項
本書は技術書典13で頒布予定です。
紙の本やPDF版がほしい方は技術書典13までお待ち下さい。

以下の技術を使用しています。

フロントエンド
・React 18
・TypeScript 4.6
・Vite 2.9
・Tailwind CSS 3.0
・React Router 6.3

バックエンド
・Cognito（認証）
・Chalice（APIフレームワーク）
　（中身はPython、AWS Lambda、API Gateway、IAM）
・DynamoDB（データベース）
・Stripe（決済）]]></summary>
        <author>
            <name>TAKAHASHI Taro</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【FastAPI＋MySQL】alembicでマイグレーションファイルを自動生成して実行する]]></title>
        <id>https://zenn.dev/shimi7o/articles/39a2b62fd7b1ac</id>
        <link href="https://zenn.dev/shimi7o/articles/39a2b62fd7b1ac"/>
        <updated>2022-08-02T16:11:58.000Z</updated>
        <summary type="html"><![CDATA[はじめに
alembicはSQLAlchemyの著者によって作成されたデータベースマイグレーションツールです。PythonのWebフレームワークであるFastAPIがDBのマイグレーションの仕組みを持っていないため、DBのマイグレーションをするためにalembicを使います。
alembicはマイグレーションファイルを自分で書く方法のほかに、テーブル定義の変更を自動で読み取ってマイグレーションファイルを自動生成することができます。とても便利な機能なのですが、実際にやってみようとしたところ苦戦したので、備忘録として残しておきます。

 環境

MySQL 5.7
Python 3.9....]]></summary>
        <author>
            <name>shimi7o</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】classmethodからプライベートのメソッドを呼び出したい]]></title>
        <id>https://zenn.dev/someone7140/articles/fe3d2cf6c03447</id>
        <link href="https://zenn.dev/someone7140/articles/fe3d2cf6c03447"/>
        <updated>2022-08-02T15:46:09.000Z</updated>
        <summary type="html"><![CDATA[概要
Pythonではインタンス化していないクラスから呼び出されるメソッドである、classmethodの機能があります。classmethodの詳細はPythonのクラスメソッド（@classmethod）とは？使いどころとメソッドとの違いを解説の記事を参照ください。
今回はこのclassmethodからプライベートで設定したメソッドを呼び出す場合、どうすれば良いのかというのをメモ書きします。

 対応
classmethodでは自クラスを表すclsを引数に取ります。このclsから、プライベートメソッドを呼び出すことが出来ます。プライベートメソッドを呼び出すときは自身（cls）を引...]]></summary>
        <author>
            <name>なかつがわ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[機械学習で因果推論~T-Learner~]]></title>
        <id>https://zenn.dev/s1ok69oo/articles/4a36fee0297234</id>
        <link href="https://zenn.dev/s1ok69oo/articles/4a36fee0297234"/>
        <updated>2022-08-02T14:53:05.000Z</updated>
        <summary type="html"><![CDATA[はじめに
T-Learnerについて、Pythonによる実装を交えてまとめました。内容について誤り等ございましたら、コメントにてご指摘いただけますと幸いです。

 機械学習を用いた因果推論
機械学習を用いた因果推論手法は大きく分けて下記の2通りが存在します。

Meta-Learner系
Causal-Tree系

今回はMeta-Learner系の手法の1つであるT-Learnerについて紹介します。

 Meta-Leanrerとは
Meta-Learnerとは、機械学習と因果推論の考え方を掛け合わせて条件付き平均処置効果(CATE: Conditional Average Tr...]]></summary>
        <author>
            <name>うとしん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonでkintone APIを使用して育児記録を可視化する（POST／GET）]]></title>
        <id>https://zenn.dev/mnmnmmmn/articles/python_kintone_api</id>
        <link href="https://zenn.dev/mnmnmmmn/articles/python_kintone_api"/>
        <updated>2022-08-01T22:02:55.000Z</updated>
        <summary type="html"><![CDATA[概要
kintoneとはサイボウズ株式会社が提供している、ノーコードでビジネスアプリを開発できるクラウドサービスです。REST APIも用意されているので外部からのデータ授受もできます。
https://kintone.cybozu.co.jp/
今後仕事で使用することが多くなるので、自習用に開発用アカウントを取得して使ってみました。
本記事ではこちらのAPIを利用して、kintoneへデータをPOST／kintoneからデータをGETするPythonスクリプトを作成します。

 使用するデータ
せっかくなら意味のあるデータを扱ってみたいので、今年2歳になる息子の育児記録を拝借するこ...]]></summary>
        <author>
            <name>mnmnmmmn</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【SQLAlchemy】MariaDBに接続する]]></title>
        <id>https://zenn.dev/ringotabetai/articles/5756ebfbd20dfc</id>
        <link href="https://zenn.dev/ringotabetai/articles/5756ebfbd20dfc"/>
        <updated>2022-08-01T15:39:04.000Z</updated>
        <summary type="html"><![CDATA[必要なものインストール
Pythonの仮想環境に入る
pip install SQLAlchemy
pip install mysql-connector-python
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.schema import Column
from sqlalchemy.types import Integer, Stri...]]></summary>
        <author>
            <name>ringotabetai</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pywin32を利用してwindowsを操ろう]]></title>
        <id>https://zenn.dev/timoneko/articles/c289e23dc997da</id>
        <link href="https://zenn.dev/timoneko/articles/c289e23dc997da"/>
        <updated>2022-08-01T15:34:31.000Z</updated>
        <summary type="html"><![CDATA[↓　すでに入っている場合は不要
pip install pywin32
※windows11で下記は検証を行っております。

 1.windowsの画面にメッセージを表示
import win32api

win32api.MessageBox(None, "メッセージの表示", "タイトル")

メッセージの表示

 2.「メモ帳」を自動で開く
import win32api

win32api.WinExec("C://Windows/System32/notepad.exe")


 2.1 メモ帳でメッセージを表示させる
import win32api
import win32g...]]></summary>
        <author>
            <name>timoneko</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】FastAPI MariaDBに接続し、テキストで出力]]></title>
        <id>https://zenn.dev/ringotabetai/articles/600b249d7270f4</id>
        <link href="https://zenn.dev/ringotabetai/articles/600b249d7270f4"/>
        <updated>2022-08-01T15:29:44.000Z</updated>
        <summary type="html"><![CDATA[Python強化期間
Pythonの仮想環境に入る
python3 -m venv venv
FastAPIインストール
pip install fastapi
dotenvインストール
pip install python-dotenv
mysqlclientインストール
pip install mysqlclient
uvicorn インストール
pip install uvicorn
.env
HOST = '127.0.0.1'
DATABASE = 'test_db'
USER_AA = 'root'
PASSWORD = '0123'
test_maria.py
from...]]></summary>
        <author>
            <name>ringotabetai</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ABC262] AtCoder Beginner Contest 262（A-E 問題 Python）]]></title>
        <id>https://zenn.dev/kiwamachan/articles/c2d3d77b6faa34</id>
        <link href="https://zenn.dev/kiwamachan/articles/c2d3d77b6faa34"/>
        <updated>2022-08-01T15:04:31.000Z</updated>
        <summary type="html"><![CDATA[AtCoder Beginner Contest 262 の復習記録です。
A問題からE問題までやります。使用言語はPythonです。

 A問題
https://atcoder.jp/contests/abc262/tasks/abc262_a

 考え方
こういう問題は、何の数字が何に変化してほしいかを考えると分かりやすいです。



元の数字(Y)
2018
2019
2020
2021
2022
2023




変化後の数字（出力値）
2018
2022
2022
2022
2022
2026



4ごとに変わりますので、4で割って整数切り捨てを行い、4をかけると上手くいきそ...]]></summary>
        <author>
            <name>kiwamachan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ERAlchemyでＥＲ図 自動作成]]></title>
        <id>https://zenn.dev/ringotabetai/articles/63e400b14e65f2</id>
        <link href="https://zenn.dev/ringotabetai/articles/63e400b14e65f2"/>
        <updated>2022-08-01T14:53:08.000Z</updated>
        <summary type="html"><![CDATA[環境:Ubuntu20.04
どちらかでインストールする。
私はbrewでしました。
pipでするときは、Pythonの仮想環境に入ります。
$ brew install eralchemy
$ pip install eralchemy
ファイル作成する
example.er
[users]
*id
name
age

[emails]
*id
address
user_id

users 1--* emails
EOF
下記を実行する
$ eralchemy -i example.er -o example.png
ディレクトリに _example.png_ができてる
中身を確認する...]]></summary>
        <author>
            <name>ringotabetai</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CycleGANを試す]]></title>
        <id>https://zenn.dev/ryu2021/articles/833574759b3031</id>
        <link href="https://zenn.dev/ryu2021/articles/833574759b3031"/>
        <updated>2022-08-01T11:56:11.000Z</updated>
        <summary type="html"><![CDATA[概要
Windows11でCycleGANの学習を試してみた。

 環境

OS : Windows11
GPU : NVIDIA RTX 3080Ti
Anaconda3


 CycleGANを試す

 ダウンロード
ソースコードをダウンロード
git clone https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix
cd pytorch-CycleGAN-and-pix2pix
GitHub - junyanz/pytorch-CycleGAN-and-pix2pix: Image-to-Image Translatio...]]></summary>
        <author>
            <name>Ryu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[boto3] NextTokenを使って情報取得]]></title>
        <id>https://zenn.dev/isseeeeey55/articles/52e0435b9a4340</id>
        <link href="https://zenn.dev/isseeeeey55/articles/52e0435b9a4340"/>
        <updated>2022-08-01T09:15:29.000Z</updated>
        <summary type="html"><![CDATA[このページについて
boto3で NextToken を使う場面があったので、 NextToken とは？について簡単にメモします。

 経緯
このGlueジョブ実行履歴取得スクリプトを作成している際に、 NextToken の使い方を確認しました。
https://zenn.dev/isseeeeey55/articles/e46c0e4cbd89bd
boto3の get_job_runs を使用していますが、実際のジョブ実行履歴数とスクリプトで取得したジョブ実行履歴数に乖離がありました。
そこで確認したところ、最大で取得できる結果( MaxResults )が200件までで、そ...]]></summary>
        <author>
            <name>Issei Matsuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Glueジョブ実行履歴取得]]></title>
        <id>https://zenn.dev/isseeeeey55/articles/e46c0e4cbd89bd</id>
        <link href="https://zenn.dev/isseeeeey55/articles/e46c0e4cbd89bd"/>
        <updated>2022-08-01T08:53:30.000Z</updated>
        <summary type="html"><![CDATA[このページについて
AWS Glueのコストが気になるため、ジョブごとのコストを確認したく、そのために必要な情報をcsvに出力するスクリプトをPythonで作成しました。

 AWS Glue Studio
AWS Glue Studioの Monitoring ページで、ジョブ実行状況を確認することはできます。
ただ、いくつか制限があります。

表示対象の日付指定が30日間まで
ジョブ実行履歴の件数が1,000件まで


https://docs.aws.amazon.com/ja_jp/glue/latest/ug/what-is-glue-studio.html

 boto3...]]></summary>
        <author>
            <name>Issei Matsuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[多倍長整数の実装7（XbyakライクなPython DSLによるasmコード生成）]]></title>
        <id>https://zenn.dev/herumi/articles/bitint-07-gen-asm</id>
        <link href="https://zenn.dev/herumi/articles/bitint-07-gen-asm"/>
        <updated>2022-08-01T08:03:48.000Z</updated>
        <summary type="html"><![CDATA[初めに
前回多倍長整数の実装6（乗算後加算とintrinsicの限界）では、コンパイラのintrinsic関数の限界を紹介しました。
仕方がないのでアセンブリ言語（以下asmと表記）で実装しなければなりません。
今回はその作業を手助けするPythonでアセンブリコードを生成する簡単なDSLを作ったのでそれを紹介します。
記事全体の一覧は多倍長整数の実装1（C/C++）参照。

 動機
私はC++でアセンブリ言語(以下asm)レベルでの実行時コード生成をやりたくてXbyakを開発しています。
これはもちろんJITコード生成がメインの機能なのですが、自分の慣れているC++の文法でasmコ...]]></summary>
        <author>
            <name>herumi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Zennはじめました！こんな記事を書きます紹介]]></title>
        <id>https://zenn.dev/mihorin1729/articles/cb21e968e02863</id>
        <link href="https://zenn.dev/mihorin1729/articles/cb21e968e02863"/>
        <updated>2022-07-31T22:56:32.000Z</updated>
        <summary type="html"><![CDATA[こんにちは。エンジニアに転職してもうすぐ2ヶ月になります、みほりんと申します。
Zennでは、これまで身につけたことや、今後新たに学ぶことの備忘録のようなまとめを書きたいと思っています。
新参者で勝手もあまりわかっておりませんが、何卒よろしくお願い致します。

 現在取り組んでいること

 Vue.js
現在のお仕事はVue.js（Nuxt.js)を使うので、この2ヶ月必死に勉強しました。
検索とかすると、「時代はReactなのでは」と思わせられる情報が多いですが、
わたしはVue使いとして頑張っていく所存です。こちらで学習。
現在は、「Vue2からVue3に変えていく」ことに関して勉強...]]></summary>
        <author>
            <name>みほりん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【PyTorch】CenterNet を実装してみた]]></title>
        <id>https://zenn.dev/a5chin/articles/centernet_pytorch</id>
        <link href="https://zenn.dev/a5chin/articles/centernet_pytorch"/>
        <updated>2022-07-31T16:14:29.000Z</updated>
        <summary type="html"><![CDATA[はじめに
前回の SimSiam に続き，CenterNet も実際の論文を読んで自分で実装してみました．

CenterNet についての軽い説明と筆者が用いている環境について話します．
本記事の詳細については以下の GitHub にコードを載せているのでよければ見てください．Star や Pull Request 等頂けるとやる気が出ます↓


 CenterNet とは
CenterNet とは，アンカーレスな物体検出を行う機械学習モデルで 2019 年にECCV で発表されました．アルゴリズムとしては

物体の中心座標のヒートマップ
中心座標のオフセット
物体のサイズ


の...]]></summary>
        <author>
            <name>a5chin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】 カラーハーフトーンの作り方]]></title>
        <id>https://zenn.dev/baroqueengine/articles/1fa7c9d5e906d3</id>
        <link href="https://zenn.dev/baroqueengine/articles/1fa7c9d5e906d3"/>
        <updated>2022-07-31T12:08:52.000Z</updated>
        <summary type="html"><![CDATA[元画像

Cyan + Magenta + Yellow

Cyan + Magenta
この記事では、画像をカラーモデルのCMYKに分離してハーフトーンを生成する、カラーハーフトーンの作り方について解説する。ただし、見よう見まねの我流で作ったものなので、出力のクォリティについては大目に見てほしい。

 そもそもハーフトーンとは？

ハーフトーンは画像内の範囲ピクセル、たとえば10x10ピクセルのような範囲の明るさ平均を算出し、その値をもとに特定の形で描画し直す処理である。上記画像では明るさが大きいほど、大きい白円を描く仕組みになっている。
これから作るカラーハーフトーンも基本的には同...]]></summary>
        <author>
            <name>miku</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PDMによるPythonのプロジェクト管理]]></title>
        <id>https://zenn.dev/lucidfrontier45/articles/a9601aa94b7c29</id>
        <link href="https://zenn.dev/lucidfrontier45/articles/a9601aa94b7c29"/>
        <updated>2022-07-31T10:05:35.000Z</updated>
        <summary type="html"><![CDATA[PDMとは
PDMはPythonのプロジェクト、依存関係のマネージメントツールです。私は以前までPoetryを利用していましたが以下の点からPDMに乗り換えました。


pyproject.tomlを利用する点はPoetryと同じだが、よりPEP準拠になっている。
Poetryよりも依存解決が速い
Poetryはいつまで経ってもv1.2がリリースされない。
単体でタスクランナー機能を有している。(Poetryはプラグインが必要)
指定したファイルの__version__を読み込んでくれる。
プロジェクトごとにvenvを作るが、インストールされるライブラリは中央管理されていてシンボリッ...]]></summary>
        <author>
            <name>lucidfrontier45</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonのコマンドラインパーサーTyper浅煎り]]></title>
        <id>https://zenn.dev/tos_kamiya/articles/5920f43ddb2e92</id>
        <link href="https://zenn.dev/tos_kamiya/articles/5920f43ddb2e92"/>
        <updated>2022-07-31T09:45:54.000Z</updated>
        <summary type="html"><![CDATA[PythonのコマンドラインパーサーであるTyperの記事が、日本語では見つからな日本語の解説記事が少なかったので、メモがてら書いてみました。
Typerは次のような特徴を持つ新進気鋭のコマンドラインパーサーです。

出力が今風でファンシー
タイプヒントも利用しつつ、直感的にコマンドラインの仕様を書き下せる
コマンドライン補完機能を標準装備

※ 記事の執筆時点、2022.07.31現在ではベータであるため、正式リリースまでには機能の変更があるかもしません。

 インストール
python3 -m pip install "typer[all]"

 最小限のコマンドライン仕様の定義
使...]]></summary>
        <author>
            <name>tos_kamiya</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python 】学習済みモデルのWord2Vecを使って「人生」から「愛」を引いたら何が残るかを計算してみた]]></title>
        <id>https://zenn.dev/robes/articles/c251dd89a0e47f</id>
        <link href="https://zenn.dev/robes/articles/c251dd89a0e47f"/>
        <updated>2022-07-31T08:28:45.000Z</updated>
        <summary type="html"><![CDATA[はじめに
ドイツの詩人シラーは言いました。
「愛の光なき人生は無価値である」 語録より
シラーに限らず、人類史において、「人生」と「愛」の関係をどれだけの人たちが論じてきたことでしょう。
ここでは、そのような先人たちの営みに敬意を表しながらも、現代の偉業Word2Vecを使って、**「人生」から「愛」を引いたら何が残るのか？を解明したいと思います。*

 Word2Vecについてはコチラを参照
https://zenn.dev/robes/articles/61847e68587b98
!
Word2Vecのほかに、fastTextでも計算してみます


 ライブラリのインストール
...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[色んなレコメンドアルゴリズムを一瞬で構築できるRecBoleを触る]]></title>
        <id>https://zenn.dev/sugasuga/articles/3ae12610d2a90b</id>
        <link href="https://zenn.dev/sugasuga/articles/3ae12610d2a90b"/>
        <updated>2022-07-31T06:22:36.000Z</updated>
        <summary type="html"><![CDATA[(公式ドキュメントより拝借)

 RecBoleとは
統一されたインターフェースで、機械学習アルゴリズムの中身をほぼ意識せず、複数のレコメンドアルゴリズムを構築できるライブラリ
モデル名、データセットの設定、その他学習の設定などを渡して実行するだけ。
run_recbole(
            model=model_name,
            dataset=dataset_name,
            config_file_list=[config_files],
            config_dict=parameter_dict,
        ...]]></summary>
        <author>
            <name>sugasuga</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】Word2Vecで単語の分散表現を体感する]]></title>
        <id>https://zenn.dev/robes/articles/61847e68587b98</id>
        <link href="https://zenn.dev/robes/articles/61847e68587b98"/>
        <updated>2022-07-31T03:19:01.000Z</updated>
        <summary type="html"><![CDATA[Word2Vecとは
Word2Vecは2013年にトマス・ミコロフにより提案された自然言語の数値化の手法です。
トマス・ミコロフはGoogle在籍のエンジニアで、Word2Vecの発明により、Google翻訳の性能が著しく向上したと言われています。

 Word2Vecの何がすごいか
Word2Vecは単語の分散表現を取り入れたモデルです。
単語の分散表現とは、単語を固定長のベクトルで表すことです。
単語の一つ一つを、ベクトル空間における点として表現することで、単語同士の距離（類似度）を測ったり、演算（足し算・引き算）したりすることが可能なモデルになっています。
Word2Vecは...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[拡散生成モデルで学ぶJax/Flaxによる深層学習プログラミング]]></title>
        <id>https://zenn.dev/dhirooka/articles/af80381a2cb6b0</id>
        <link href="https://zenn.dev/dhirooka/articles/af80381a2cb6b0"/>
        <updated>2022-07-31T00:34:13.000Z</updated>
        <summary type="html"><![CDATA[はじめに
深層学習モデルやその学習を実装する際には、多くの場合でPyTorchやKerasなどのフレームワークが使われます。本記事では、Googleより公開されているJaxというフレームワークを用いた深層学習プログラミングを紹介します。
コードは以下に配置しています。
https://github.com/daigo0927/jax-ddim

 Jaxとは
JaxはGoogleから公開されている、自動微分を備えた数値計算ライブラリと言えます。Numpyとほぼ同じように計算処理を実装でき、またGPUやTPUによって高速に演算を実行することもできます。これによって深層学習モデルを実装し...]]></summary>
        <author>
            <name>dhirooka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【TF-IDF】Adoの「過学習」はどのあたりが過学習なのか？]]></title>
        <id>https://zenn.dev/robes/articles/48cb25ee29a110</id>
        <link href="https://zenn.dev/robes/articles/48cb25ee29a110"/>
        <updated>2022-07-30T22:48:41.000Z</updated>
        <summary type="html"><![CDATA[過学習。機械学習やディープラーニングが世の中に広まる中、この言葉の認知度が増してきたところですが、Adoが「過学習」をリリースしたことで一気に市民権を得た感じがします。
一方で、この「過学習」の歌詞。 ざっと読んでみても、どのあたりが過学習なのか、よく分かりません。
そこで、今回は、自然言語処理の基本的技術の一つTF-IDFを使って何が過学習なのかを突き止めたいと思います。

 TF-IDFとは
ざっくり言うと、その文書を特徴づける重要な単語を抽出する手法になります。
以下のように、単語の出現頻度とレア度の積で表されます。単語の出現頻度が高く、かつ、他の文章にはあまり出てこない単語が重要...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonの標準ライブラリを使ってWebサーバーを起動する]]></title>
        <id>https://zenn.dev/masaruxstudy/articles/55668c093d184a</id>
        <link href="https://zenn.dev/masaruxstudy/articles/55668c093d184a"/>
        <updated>2022-07-30T22:44:06.000Z</updated>
        <summary type="html"><![CDATA[PythonでWebサーバーを構築する

 どうやって？


Pythonに付属している標準ライブラリにシンプルなWebサーバーとして機能するモジュールがあるので、これを使って構築する


ゴールはHTMLファイルをレスポンスとして返す
以下は手順(Pythonの環境構築は済んでいるものとする)



index.htmlファイルを用意する
PythonコマンドでWebサーバーの起動
index.htmlファイルを編集し、反映されるかを確認する


 前提知識
モジュール > パッケージ > ライブラリ


モジュール


.py などのファイル全てがモジュール



パ...]]></summary>
        <author>
            <name>Masaru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【自然言語処理】GoogleColaboratoryでGiNZAがロードできない時の解決策]]></title>
        <id>https://zenn.dev/robes/articles/7ee135605bdb8e</id>
        <link href="https://zenn.dev/robes/articles/7ee135605bdb8e"/>
        <updated>2022-07-30T21:54:13.000Z</updated>
        <summary type="html"><![CDATA[日本語NLPライブラリーであるGiNZAをGoogleColaboratoryで使おうとした場合、バージョンによってはエラーが出て、うまくロードできないケースがあります。
ここでは、以下のようなエラーが出た場合の解決策を記載します。

 GiNZAをインストールし、SpacyでLoadする
!pip install ginza==4.0.6 ja-ginza==4.0.0 
import spacy
nlp = spacy.load('ja_ginza')

 出現するエラー
Can't find model 'ja_ginza'. It doesn't seem to be a sh...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Slackのフリープラン変更対策、履歴テキストとファイルをpythonでバックアップ]]></title>
        <id>https://zenn.dev/oskgw_log/articles/slack_backup_py</id>
        <link href="https://zenn.dev/oskgw_log/articles/slack_backup_py"/>
        <updated>2022-07-30T20:49:12.000Z</updated>
        <summary type="html"><![CDATA[Slackのフリープランの変更
2022年9月1日より、Slackフリープランのメッセージ履歴が1万から過去90日に変更になるようです。

 では、現時点でバックアップは？
フリープランでやってる人のバックアップで、各チャンネルの過去ログとファイルを
ローカルPCにバックアップするものがあるのかよく分からなかったです。

 手動でバックアップ？？
いやー、、それはキツイです。
最後の手段かもしれませんが、あんまり人間的な仕事としては違うます。

 流行りのヘビに任せるか、、
最近流行りのヘビでお馴染み 邪神ちゃ・・・ではなく、pythonがあれば、なんとかできるかな、、、

 pyt...]]></summary>
        <author>
            <name>oskgw log</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Djangoにおけるテーブル内データの移行方法について]]></title>
        <id>https://zenn.dev/miyaji26/books/a530e44f826710</id>
        <link href="https://zenn.dev/miyaji26/books/a530e44f826710"/>
        <updated>2022-07-30T15:57:01.000Z</updated>
        <summary type="html"><![CDATA[Djangoを利用してアプリケーションを作っている際に、長く運用されているものほど適切なテーブル構造となっていないことが多々あります。

本書では記事とラベルを利用した誤ったテーブル構造を例として、データの移行方法について対応方法を紹介します。]]></summary>
        <author>
            <name>miyaji_26</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Qiskit で遊んでみる (6) — QGSS2022 より]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-qiskit06</id>
        <link href="https://zenn.dev/derwind/articles/dwd-qiskit06"/>
        <updated>2022-07-30T14:36:14.000Z</updated>
        <summary type="html"><![CDATA[目的
前回 に引き続き Qiskit Global Summer School 2022: Quantum Simulations で興味を持ったテーマを復習する。
今回はハードウェアノイズのシミュレーションを題材にする。

 準備
以下を import しているとする。
import numpy as np
from qiskit import QuantumCircuit, QuantumRegister
from qiskit.providers.aer import AerSimulator
from qiskit.providers.aer.noise import Noi...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ubuntu20.04に機械学習(GPU)環境を設定する方法]]></title>
        <id>https://zenn.dev/kwashizzz/articles/ubunt2004-setup-mlenv</id>
        <link href="https://zenn.dev/kwashizzz/articles/ubunt2004-setup-mlenv"/>
        <updated>2022-07-30T13:56:21.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは、わっしーです。
本記事では、Ubuntu20.04にGPUありの機械学習環境を設定する方法を紹介します。一応、AzureのVMで動作確認しました。
よく躓く、CUDA、pythonの導入部分も記載しています。
早速、方法を紹介します。

 1. sshでサーバ接続
ssh -i ./*.cer azureuser@xx.xxx.xxx.xxx
もし、Permissions 0644 for ‘xxx.key’ are too open.がでる場合は、
chmod 600 xxx.key
で権限を変更してください。
もし、Vscodeでサーバに入りたい場合は、以下...]]></summary>
        <author>
            <name>わっしー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Qiskit で遊んでみる (5) — QGSS2022 より]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-qiskit05</id>
        <link href="https://zenn.dev/derwind/articles/dwd-qiskit05"/>
        <updated>2022-07-30T09:28:35.000Z</updated>
        <summary type="html"><![CDATA[目的
Qiskit Global Summer School 2022: Quantum Simulations に参加した。その中で興味を持った題材について忘れないうちにまとめてみたい。
具体的には Quantum computers as universal quantum simulators: state-of-art and perspectives を参考にする形でハミルトニアン H = X \otimes X の時間発展についてまとめる。

 おさらい
次回の記事の伏線の形で、ハミルトニアン H = X の時間発展について考えてみる。これは U(t) = \exp(-i...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【MAYA・Python】hlslを利用してモデルチェックを行うツール]]></title>
        <id>https://zenn.dev/kuru_teo/articles/9a968a5d1b8512</id>
        <link href="https://zenn.dev/kuru_teo/articles/9a968a5d1b8512"/>
        <updated>2022-07-30T07:20:32.000Z</updated>
        <summary type="html"><![CDATA[今回はmayaのrender setup機能を用いて、シェーダ(hlsl)モデルのエラーチェックを視覚的に行うツールを作成しました。以下の動画ではポリゴンの裏面が見えてしまっていないか、ポリゴンの法線がおかしくないかを確認しています。
https://youtu.be/1qnJTBh56KU
https://github.com/Kuru-teo/PythonCollection/tree/master/ChangeMatByRenderSetUp

 【できること】
ポリゴンの裏面が見えてしまっていないか、ポリゴンの法線がおかしくないかを確認できます。またShaderを追加してデバッグ...]]></summary>
        <author>
            <name>kuruteo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[numpyでGPMLの線形回帰モデルを学ぶ]]></title>
        <id>https://zenn.dev/mory22k/articles/429ce4ad3208d7</id>
        <link href="https://zenn.dev/mory22k/articles/429ce4ad3208d7"/>
        <updated>2022-07-30T02:04:27.000Z</updated>
        <summary type="html"><![CDATA[GPML第2章前半部分を、自分なりに解釈しつつnumpyで実装します。
import numpy as np
import matplotlib.pyplot as plt
注: この記事はもともとQiitaに投稿していたものの焼き直しです。元の記事はこちらでご確認いただけます:https://qiita.com/mory22k/items/2491f2cfce345bbd805c

 単純な線形回帰モデル
まずは、バイアスを含む単純な線形回帰モデルを実装してみます。

 元の関数
もとの関数は、入力ベクトル\boldsymbol{x}と重みベクトル\boldsymbol{w}

\bo...]]></summary>
        <author>
            <name>mory22k</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spotifyデータの可視化から新しいアーティストを探す]]></title>
        <id>https://zenn.dev/nayuta9999/articles/781d2f2ba045c9</id>
        <link href="https://zenn.dev/nayuta9999/articles/781d2f2ba045c9"/>
        <updated>2022-07-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[概要

あるアーティストが、どのようなアーティストから影響を受けているのかわかる可視化を作成。
SpotifyAPIを使用し、データ収集。
popularityを重回帰分析で再計算
グラフ作成。


 背景
最近、Oasisにドはまりしまして、Oasisの音楽からライブ映像、インタビュー等の動画を見漁っていいました。ボーカルのリアムや、リードギターのノエルは、他のバンドのことを結構ボロクソいうのですが、どうやら、The Beatlesのジョンレノンやポールマッカートニーのことを崇拝しているのが分かりました。ここからThe Beatlesに興味を持ち、音楽を聴いてドはまりしました。
こ...]]></summary>
        <author>
            <name>田中勇太</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Package] Pulp (Python) と JuMP (Julia) の記法比較アンチョコ (2022年7月版)]]></title>
        <id>https://zenn.dev/takilog/articles/c0c52c608be465</id>
        <link href="https://zenn.dev/takilog/articles/c0c52c608be465"/>
        <updated>2022-07-29T13:47:20.000Z</updated>
        <summary type="html"><![CDATA[はじめに
タイトルの通りですが、Pythonのpulpでモデルを書くときと、JuliaのJuMPでモデルを書くときの両方があります。毎回pulpとJuMPのドキュメントを見に行くのが大変になってきたので、自分のために比較を書いておくことにしました。
以下はこの記事を書くために使用したバージョンです。




バージョン
備考




Python
3.7.13
Google colaboratory上


pulp
2.6.0
Google colaboratory上


Julia
1.6.7
macOS (Apple M1/Memory 8GBマシン上)


JuMP
1.1.1...]]></summary>
        <author>
            <name>たきろぐ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【さくらレンタルサーバー】Pythonのseleniumで定期実行する]]></title>
        <id>https://zenn.dev/eito_blog/articles/bbc6b8510be3b2</id>
        <link href="https://zenn.dev/eito_blog/articles/bbc6b8510be3b2"/>
        <updated>2022-07-29T11:03:00.000Z</updated>
        <summary type="html"><![CDATA[さくらレンタルサーバーでPythonのプログラムを定期実行することが可能です。
本記事ではさくらレンタルサーバーにPythonプログラムをデプロイ、定期実行までの設定を行う方法を解説します。

 コマンドプロンプトでさくらサーバーにログイン
下記コマンドを実行
ssh [ユーザー名]@[IPアドレス]
パスワードの入力が求められるのでパスワードを入力

 Python3.6.8をインストール

 Pythonのアーカイブファイルをダウンロード
ダウンロード用のフォルダ作成
mkdir -p ~/workspace/python3
カレントディレクトリを変更
cd ~/workspace...]]></summary>
        <author>
            <name>エイト</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[サクッとDocker+SQL+Pythonをローカルで実行する方法]]></title>
        <id>https://zenn.dev/aokkey/articles/7bdc79e1f5d096</id>
        <link href="https://zenn.dev/aokkey/articles/7bdc79e1f5d096"/>
        <updated>2022-07-29T05:52:56.000Z</updated>
        <summary type="html"><![CDATA[背景
AWSのバックエンドをlambda + RDS構成で行おうとした時に、PythonスクリプトでSQLをいじる必要があるので、ローカルでスクリプトの検証をサクッとやりたいなと思った次第です。

 前提条件
Dockerのインストールが済んでいること。

 SQLの立ちあげ
DockerでMySQLインスタンスを立ち上げてPythonからアクセスしましょう。
作業ディレクトリをよしなに作り、Dockerfileとdocker-compose.ymlを以下のように書いてあげます。
Dockerfile
FROM mysql:5.7

RUN apt-get update &&...]]></summary>
        <author>
            <name>Aokkey</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[個人的に最強のパーサジェネレータLarkについて]]></title>
        <id>https://zenn.dev/tbsten/articles/d922514e548518</id>
        <link href="https://zenn.dev/tbsten/articles/d922514e548518"/>
        <updated>2022-07-28T22:30:00.000Z</updated>
        <summary type="html"><![CDATA[パーサとは?
文字列を一定のルールをもとに解析するプログラムのことです。
例えば各OSのターミナルアプリは入力された文字列をシェルスクリプトというルールに基づいて解析・実行します。

入力
# 入力
ls -l -a  
⏬ ⏬ ⏬
# 解析
- コマンドは「ls」  # コマンドを解析
- オプションは「-l」と「-a」  # オプションを解析
⏬ ⏬ ⏬
# 実行
- lsはファイルの一覧を探すコマンドだからファイル一覧を表示
- -lオプションがあるからリスト形式で表示する
- -aオプションがあるから隠しファイルも表示する


 パーサジェネレータとは?
パーサを作るためのプ...]]></summary>
        <author>
            <name>てべすてん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[機械学習で因果推論~Meta-LearnerとEconML~]]></title>
        <id>https://zenn.dev/s1ok69oo/articles/1eeebe75842a50</id>
        <link href="https://zenn.dev/s1ok69oo/articles/1eeebe75842a50"/>
        <updated>2022-07-28T16:55:09.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Meta-LearnerとEconMLについて、Pythonによる実装を交えてまとめました。内容について誤り等ございましたら、コメントにてご指摘いただけますと幸いです。

 機械学習を用いた因果推論
機械学習を用いた因果推論手法は大きく分けて下記の2通りが存在します。

Meta-Learner系
Causal-Tree系

この中でも今回は1つ目のMeta-Learnerについて紹介します。

 Meta-Leanrerとは
Meta-Learnerとは、機械学習と因果推論の考え方を掛け合わせて条件付き平均処置効果(CATE: Conditional Average Tr...]]></summary>
        <author>
            <name>うとしん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】MariaDB連携]]></title>
        <id>https://zenn.dev/ringotabetai/articles/19369244a2318c</id>
        <link href="https://zenn.dev/ringotabetai/articles/19369244a2318c"/>
        <updated>2022-07-28T14:53:42.000Z</updated>
        <summary type="html"><![CDATA[mariaDBでの動作確認
参照:
https://mariadb.org/download/
sudo apt-get install apt-transport-https curl
sudo curl -o /etc/apt/trusted.gpg.d/mariadb_release_signing_key.asc 'https://mariadb.org/mariadb_release_signing_key.asc'
sudo sh -c "echo 'deb https://mirrors.xtom.jp/mariadb//ubuntu focal main' >&...]]></summary>
        <author>
            <name>ringotabetai</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【AWS】AWS CDKで書いたLambdaをLambda LayerとあわせてAPI Gatewayにデプロイ【CDK】]]></title>
        <id>https://zenn.dev/yosemat/articles/01c83132a0c705</id>
        <link href="https://zenn.dev/yosemat/articles/01c83132a0c705"/>
        <updated>2022-07-28T13:45:12.000Z</updated>
        <summary type="html"><![CDATA[AWS CDK in Typescript + Lambda in Python
最近個人的にも世間的にもかなり来てるAWS CDKをTypescriptで実装します。CDKは型セーフで簡単にかけるスクリプト言語としてTypescriptを、Lambdaは柔軟にかけるPythonで採用します。
Lambdaはライブラリを複数のコードで使い回せるLambda Layerとあわせて実装します。
これによって

Lambda Layerにnumpyをインストール
Lambda Function AからLambda Layerのnumpyを呼び出し
Lambda Function BからLa...]]></summary>
        <author>
            <name>Yosemat</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonでQRコードを塗りつぶす]]></title>
        <id>https://zenn.dev/ijiwarunahello/articles/e1d26d393a02ec</id>
        <link href="https://zenn.dev/ijiwarunahello/articles/e1d26d393a02ec"/>
        <updated>2022-07-28T12:55:36.000Z</updated>
        <summary type="html"><![CDATA[はじめに
とある日のイベントにて、会場のパネルに写っているQRコードをその場で読み取って記録していくデジタルスタンプラリーを体験してきました。
推しのパネルはSNSに上げたい！けど、会場に来ないと見れないパネルなのでそのままアップするのには抵抗がある…
なので手作業でQRコードを塗りつぶしていました。
推しだけならまだしも全メンバー手作業で塗りつぶすの大変だな…と思い、QRコードを塗りつぶすプログラムを作成しました。


 ソースコード
さくっとソースを見たい方はこちら→ ijiwarunahello/qrcode_hidden
やってることはシンプルで、

画像からQRコードを検出...]]></summary>
        <author>
            <name>ijiwarunahello</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[M1MacにDocker, Python, Django, MySQLの環境構築をする]]></title>
        <id>https://zenn.dev/masaruxstudy/articles/4b05694c2760d2</id>
        <link href="https://zenn.dev/masaruxstudy/articles/4b05694c2760d2"/>
        <updated>2022-07-28T08:16:22.000Z</updated>
        <summary type="html"><![CDATA[Docker環境構築
参考: 【M1 Pro/Max対応】M1 Mac環境構築ベストプラクティス
こちらのDocker環境構築を参考にさせて頂きます。
無事bashが立ち上がればOKです。
あくまでもテスト的に行っただけなので、実際のDocker環境構築は次に書いていくものを行っていきます
作成したディレクトリごと削除してしまっても構いません。

 DockerでPythonの環境構築
参考: 【Python入門・応用】MacにPythonができる環境をつくろう｜02.Pythonの環境構築
YOUTUBE版: 【2022最新版】M1MacにPythonの環境構築｜通常のインストール...]]></summary>
        <author>
            <name>Masaru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[郵便番号から住所を取得する]]></title>
        <id>https://zenn.dev/hasegawasatoshi/articles/0d8b7cb9f73527</id>
        <link href="https://zenn.dev/hasegawasatoshi/articles/0d8b7cb9f73527"/>
        <updated>2022-07-28T07:31:05.000Z</updated>
        <summary type="html"><![CDATA[運用保守に携わっているシステムで、利用者の居住地の分析をしたい要件があったので、郵便番号から都道府県や住所を取得する方法について調べてみました。

 郵便番号 → 住所への変換
http://zipcloud.ibsnet.co.jp/doc/api のように、 Web API を提供してくれているサービスもありますが、今回は件数が多いため、ローカルで検索できるようにします。
日本郵便のサイトから CSV 形式の郵便番号一覧を取得します。「都道府県一覧」から「全国一括」をダウンロードします。
https://www.post.japanpost.jp/zipcode/dl/oogaki-...]]></summary>
        <author>
            <name>Satoshi Hasegawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのロギング:loggingを用いたロガー作成方法]]></title>
        <id>https://zenn.dev/kwashizzz/articles/python-logger-v2</id>
        <link href="https://zenn.dev/kwashizzz/articles/python-logger-v2"/>
        <updated>2022-07-28T06:35:07.000Z</updated>
        <summary type="html"><![CDATA[こんにちは、わっしーです。
個人的にPythonでログを取る方法は、常に迷っています。簡単のため、余計なライブラリは使用せず、デフォルトで入っているloggingを使用したり、ファイルごとに分けたロガーを設定したいなどやりたいことはたくさんあります。この記事では、現在使用しているロギングの方法を紹介します。

 ファイル構成
今回は、以下のような構成にし、src/app.py, src/module.pyにて、utils/logger.pyからログの設定を読み出して使用することを想定します。
-src
 |- app.py
 |- module.py

-utils
 |-logger....]]></summary>
        <author>
            <name>わっしー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python-Fire】サブコマンド作成し、暗号化したファイルの出力、復号化]]></title>
        <id>https://zenn.dev/ringotabetai/articles/4d4e43e318fbc6</id>
        <link href="https://zenn.dev/ringotabetai/articles/4d4e43e318fbc6"/>
        <updated>2022-07-27T15:41:53.000Z</updated>
        <summary type="html"><![CDATA[Pythonの仮想環境 venvに入り
Python-Fireをインストールします。
$ pip install fire

RSA のアルゴリズムを Python で実装し、実際に平文 (テキスト) を暗号化して、さらに暗号文を復号してみます。

my_rsa.py
from math import gcd

def lcm(p, q):
    return (p * q) // gcd(p, q)


def generate_keys(p, q):
    N = p * q
    L = lcm(p - 1, q - 1)

    for i in range(2, L):...]]></summary>
        <author>
            <name>ringotabetai</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[anyenvを用いてCleanなMac開発環境(pyenv, nodenv, jenv)を構築する]]></title>
        <id>https://zenn.dev/duke13/articles/9c74dd595823cbd</id>
        <link href="https://zenn.dev/duke13/articles/9c74dd595823cbd"/>
        <updated>2022-07-27T10:35:17.000Z</updated>
        <summary type="html"><![CDATA[重度の Windows ユーザーの私ですが、最近やっと Apple の良さがわかり、 Mac を使い始めました。折角なので 綺麗な Mac 開発環境を構築します。
とりあえず、Pyhton , Node.js , Java を入れます。

 anyenv
anyenv とは何かの説明は他のサイトで腐るほどあるので、ここで特に説明しません。
おいおい、じゃなんでこの記事を書くんだよ！って言われそうですが、自分の備忘録だよww
手順は[anyenv公式ドキュメント]見ればOKだが、以下のコマンドインストールします。
そそ、Homebrew は事前に入れておいてね。

 1. brew で a...]]></summary>
        <author>
            <name>duke13</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows11でStyleGAN3を試してみる]]></title>
        <id>https://zenn.dev/ryu2021/articles/9cb3e3c7913bf4</id>
        <link href="https://zenn.dev/ryu2021/articles/9cb3e3c7913bf4"/>
        <updated>2022-07-27T10:28:38.000Z</updated>
        <summary type="html"><![CDATA[概要
Windows11でStyleGAN3の画像生成や学習を試してみる。
GitHub - NVlabs/stylegan3: Official PyTorch implementation of StyleGAN3

 環境

OS : Windows11
GPU : RTX 3080Ti
Anaconda3


 StyleGAN3を試す

 準備

 プロジェクトのダウンロード
git clone https://github.com/NVlabs/stylegan3.git
cd stylegan3

 仮想環境作成
「environment.yml」を以下のように変更する...]]></summary>
        <author>
            <name>Ryu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[「大相撲の決まり手って傾向あるの？」をpandasとmatplotlibで調べたよ]]></title>
        <id>https://zenn.dev/terrrry0404/articles/13ae2282c8d4c4</id>
        <link href="https://zenn.dev/terrrry0404/articles/13ae2282c8d4c4"/>
        <updated>2022-07-27T08:57:39.000Z</updated>
        <summary type="html"><![CDATA[背景

データサイエンスを学ぶことにしたので、「どんなことができるのだろうか？」とまずは色々いじってみた感じです。なので分析自体は全然深くないです。
学ぶにあたり、Preferred Networks社のChainerのチュートリアルを一通りやってみました（難しい！！...でもこれ無料、すごい）
せっかくなので自分の興味がある領域でまずは色々調べてみようということで、「大相撲の決まり手傾向」をみてみることにしました。


 やったこと

対象データの取得
データの保存
データをいじって傾向をみる

この3点です。
環境はGoogle Colaboratoryを使いました。便利！

 ...]]></summary>
        <author>
            <name>terrrry0404</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[J-Quant APIを使ってペアトレード向きな銘柄を抽出してみた #2]]></title>
        <id>https://zenn.dev/wannabebotter/articles/70804028148d87</id>
        <link href="https://zenn.dev/wannabebotter/articles/70804028148d87"/>
        <updated>2022-07-27T02:45:21.000Z</updated>
        <summary type="html"><![CDATA[今回やったこと
J-Quant APIを使ってペアトレード向きな銘柄を抽出してみた #1 で行ったペアトレード向き銘柄の抽出は、業種セクターそのものの値動きに対して、各銘柄がどの程度の値動きをするかを考えずに、銘柄Aロング、銘柄Bショートを同額ずつ行う想定をしていた。
この場合、例えば、食料品セクターの平均価格がx%変化すると、銘柄Aは2x%変化し、銘柄Bは0.5x%変化するような銘柄AとBがある場合、食料品セクター全体が上昇し続けたり、下降し続けるトレンドがある場合には銘柄Aと銘柄Bの価格差はどんどん広がっていく。結果として価格差の系列は定常性検定を通過できず、銘柄Aと銘柄Bはペア...]]></summary>
        <author>
            <name>WannabeBotter</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python diagrams を触ってみた]]></title>
        <id>https://zenn.dev/lovegorira/articles/bdf28486eccbdd</id>
        <link href="https://zenn.dev/lovegorira/articles/bdf28486eccbdd"/>
        <updated>2022-07-26T16:22:30.000Z</updated>
        <summary type="html"><![CDATA[システム構成図のお絵描き用に Python diagrams を触ってみました。
本当に少しだけ。お触り程度です・・・

 環境


python 3.7


diagrams


https://diagrams.mingrammer.com/docs/getting-started/installation

graphviz

http://www.graphviz.org/download/

 各用語


Diagram
描画する図のクラス。図の全体的な設定を行う。


Nodes
ノードのクラス。サーバやサービスのアイコン図等の描画を行う。


Cluster
ノードをグルー...]]></summary>
        <author>
            <name>へっぽこエンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】sqlite3の操作]]></title>
        <id>https://zenn.dev/ringotabetai/articles/e68d1f91cf738b</id>
        <link href="https://zenn.dev/ringotabetai/articles/e68d1f91cf738b"/>
        <updated>2022-07-26T16:18:05.000Z</updated>
        <summary type="html"><![CDATA[Python venvインストール
cdで作業ディレクトリに移動
python3 -m venv venv
venvに入る
source venv/bin/activate
sqlite3をpipでインストールする
pip install pysqlite3 
# sqlite3をインポートする
import sqlite3

# TEST.dbを作成する

dbname = 'TEST.db'
conn = sqlite3.connect(dbname)

cur = conn.cursor()

# データを入れる
# cur.execute('INSERT INTO fruits(...]]></summary>
        <author>
            <name>ringotabetai</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonでthreadの処理を待たせる]]></title>
        <id>https://zenn.dev/lovegorira/articles/095e2c6b9500f5</id>
        <link href="https://zenn.dev/lovegorira/articles/095e2c6b9500f5"/>
        <updated>2022-07-26T16:17:53.000Z</updated>
        <summary type="html"><![CDATA[threading　を使ったマルチスレッド処理は「join」関数で終了を待つことができます。
https://docs.python.org/ja/3/library/threading.html

 例
テスト用のコード
import datetime
import threading
from time import sleep

def hoge(num):
    start_time = datetime.datetime.now()
    print(f'{num}' + '-'*10 + ' start ' + '-'*10 + f'{start_time}')
    ...]]></summary>
        <author>
            <name>へっぽこエンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Ubuntu】SQLiteBrowserをインストール]]></title>
        <id>https://zenn.dev/ringotabetai/articles/00975b0df6610d</id>
        <link href="https://zenn.dev/ringotabetai/articles/00975b0df6610d"/>
        <updated>2022-07-26T16:11:52.000Z</updated>
        <summary type="html"><![CDATA[SQLiteを使用するにあたりSQLiteBrowserをインストールする
sudo apt install sqlitebrowser]]></summary>
        <author>
            <name>ringotabetai</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[制限ボルツマンマシンの基礎 ～概念編～]]></title>
        <id>https://zenn.dev/kaityo256/articles/bolzmann_machine</id>
        <link href="https://zenn.dev/kaityo256/articles/bolzmann_machine"/>
        <updated>2022-07-26T08:29:18.000Z</updated>
        <summary type="html"><![CDATA[はじめに
機械学習で用いられるボルツマンマシン、特に制限ボルツマンマシン(Restricted Boltzmann Machine, RBM)は非常に面白い概念ですが、その中身の理解は他のニューラルネットワークに比べて難しく、「数式はわかったが、結局何をやっているのか」が分かりにくい印象です。以下では、なるべく平易な言葉で制限ボルツマンマシンが何をしているのか説明してみようと思います。

 問題設定

とある大学に通うDaveは、お昼はいつも学食の前のテラスでお弁当を食べます。そして、何の気なしに学食を眺めていると、同じクラスのAliceとBobが学食をよく利用していることに気が付き...]]></summary>
        <author>
            <name>ロボ太</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【交差エントロピー】ラベル表現とone-hot表現の違い]]></title>
        <id>https://zenn.dev/kazuma_soon/articles/7e0e15fff71c48</id>
        <link href="https://zenn.dev/kazuma_soon/articles/7e0e15fff71c48"/>
        <updated>2022-07-26T01:32:11.000Z</updated>
        <summary type="html"><![CDATA[結論
# tのone-hot表現
t = np.array([
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0], 
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0], 
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0]
])

# tのラベル表現
t = np.argmax(t, axis=1)
print(t)
# -> [2, 8, 2]
# -> t[0][2], t[1][8], t[2][2]：行番号が記載されない]]></summary>
        <author>
            <name>kazuma-soon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【交差エントロピー】y[np.arange(batch_size), t] の意味]]></title>
        <id>https://zenn.dev/kazuma_soon/articles/3d448a78cdb282</id>
        <link href="https://zenn.dev/kazuma_soon/articles/3d448a78cdb282"/>
        <updated>2022-07-26T01:17:43.000Z</updated>
        <summary type="html"><![CDATA[交差エントロピーを学習しています。
『ゼロから作るDeep Learning』の中で詰まったところがあるので、まとめておきます。

 前提
こちら の内容を理解するにあたっての話です。

 疑問
これの意味がわからん、、、
# 出力データ
y = np.array([
    [0.1, 0.05, 0.6, 0.0, 0.05, 0.1, 0.0, 0.1, 0.0, 0.0], 
    [0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1], 
    [0.1, 0.05, 0.1, 0.0, 0.05, 0.1, 0.0, 0.6,...]]></summary>
        <author>
            <name>kazuma-soon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[surpriseにある全レコメンドモデルを試す]]></title>
        <id>https://zenn.dev/yosashusaku/articles/surprise-recommend</id>
        <link href="https://zenn.dev/yosashusaku/articles/surprise-recommend"/>
        <updated>2022-07-25T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[surpriseとは
surpriseとは明示的な評価データ(explicit feedback)を処理する推薦システムを構築/分析するためのPythonライブラリです。
※暗黙の評価(implicit feedback)やコンテンツベースの推薦をサポートしていません。
この記事では、surpriseライブラリを使って用意されている全てのレコメンドモデルを試します。この結果をもとに、どんなレコメンドモデルが優勢なのか、あるいは実運用しやすいのか理解が深まるのではないかと思います。

 事前準備
本記事の実装は、Google Colaboratory上で行います。
まずはsurpris...]]></summary>
        <author>
            <name>よさ</name>
        </author>
    </entry>
</feed>