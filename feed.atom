<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://s-i27.github.io/Rssfeed/index.html</id>
    <title>osmos::feed</title>
    <updated>2023-09-25T01:13:59.500Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="https://s-i27.github.io/Rssfeed/index.html"/>
    <link rel="self" href="https://s-i27.github.io/Rssfeed/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[1番手早く自社サービスのソリューションエンジニアを作る方法(OpenAI.functions + IPython+ SlashGPT)]]></title>
        <id>https://zenn.dev/singularity/articles/40dd07f9f3da2b</id>
        <link href="https://zenn.dev/singularity/articles/40dd07f9f3da2b"/>
        <updated>2023-09-24T22:43:04.000Z</updated>
        <summary type="html"><![CDATA[特定サービスを深く熟知していて、APIも自在に使いこなし、お客さんの必要としているソリューションをつくるのを手伝ってくれるソリューションエンジニアって素敵ですよね。いままでそんな素敵なソリューションエンジニアは、雇用するのも養成するのも大変で、超大手のクラウドベンダーぐらいしか十分に用意するのは難しかったです。
この記事では、OpenAI.functions+IPython+SlashGPTを活用することで、自社サービス専用のソリューションエンジニア(ボット)を手早く起ち上げる方法を解説します。
言い換えると、自然言語での要求に応じて独自APIを呼び出すコードを実装、実行してくれるCod...]]></summary>
        <author>
            <name>kozayupapa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CloudTrailを使ってリソース作成者を自動的にタグ付けしてみた]]></title>
        <id>https://zenn.dev/strix/articles/290fed1c2a5665</id>
        <link href="https://zenn.dev/strix/articles/290fed1c2a5665"/>
        <updated>2023-09-24T14:43:19.000Z</updated>
        <summary type="html"><![CDATA[概要
コストを最適化するために、定期的なリソースの棚卸はかかせません。
例えば検証用やPoCで一時的に作成したEC2を目的が達成したとしても何故かしばらく残しておくことが多々あると思います。そして、消し忘れると後に誰が作ったのかわからず消したいけど消せないと悶々とした気持ちになるのです。
誰が作ったのかが一目瞭然となれば、すぐ連絡をすることができスムーズにアクションができますよね。例えばCloudTrailとLambdaを使って作成者（Author）のタグ情報を自動的につける設定できないか考えてみました。

 大まかな流れ
CloudTrailでは誰が・いつ・何をしたかが記録されるの...]]></summary>
        <author>
            <name>Masayuki Harano</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker + FastAPI + nginxで環境構築]]></title>
        <id>https://zenn.dev/hiromichi1729/articles/e1d4fd87484ceb</id>
        <link href="https://zenn.dev/hiromichi1729/articles/e1d4fd87484ceb"/>
        <updated>2023-09-24T14:29:10.000Z</updated>
        <summary type="html"><![CDATA[背景
業務で今まで触ったことのなかったpythonでapi開発をする必要になったので、同じような人がいた場合参考になればと思い自分が行った環境構築の手順をここに残します。

 Pythonのフレームワーク
pythonのどのフレームワークを使って開発をするかからまず決めないといけなかったので、参考までにどういう基準でFastAPIを選んだのか書いておきます。
一応、候補として

Django
Flask
FastAPI

の3種類がありました。
Djangoはフルスタックなフレームワークなので、必要なものが全部揃っているのがメリットですが、今回はサーバーが立てられればいいのでオーバー...]]></summary>
        <author>
            <name>百木拓迪</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django開発環境構築（pyenv・venv）]]></title>
        <id>https://zenn.dev/zaruju_za/articles/a3194e528592b7</id>
        <link href="https://zenn.dev/zaruju_za/articles/a3194e528592b7"/>
        <updated>2023-09-24T07:15:10.000Z</updated>
        <summary type="html"><![CDATA[はじめに
開発時の個人的なメモです。
デプロイ時などには変更が必要だと思います。

 ＜最終的なディレクトリ構成＞
最終的に
プロジェクト名/
├─ project/
│  ├─ config/
│  ├─ myapp/
│  ├─ static/
│  ├─ manage.py
├─ .python-version
├─ README.md
├─ requirements.txt

 プロジェクトフォルダの作成
mkdir {プロジェクト名}
cd {プロジェクト名}

 仮想環境の整備

 Python のバージョン選択と固定
pyenv vesions
pyenv local ...]]></summary>
        <author>
            <name>zaruju</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DuckDB爆速すぎてGISに使ったりChatGPTと組み合わせてみる]]></title>
        <id>https://zenn.dev/otwn/articles/f11d37685caf93</id>
        <link href="https://zenn.dev/otwn/articles/f11d37685caf93"/>
        <updated>2023-09-24T00:34:33.000Z</updated>
        <summary type="html"><![CDATA[この記事ではDuckDBを使用した地理分析や、Python上でDuckdbのデータを基にLangchainを使ったモデルを利用することで話し言葉でSQLを実行させる例を紹介します。

 SQLの価値
2023年も残り数ヶ月ですが、2022年では最も人気あるプログラミング言語のアンケートでSQLはPythonを抑えて3位でありました(参照)。今年はどうなるでしょうか。ただSQLがここに位置するのは必要性が上昇しているからでしょう。同僚もデータサイエンス分野ではPythonかRで良かった(はずな)のに、SQL学びなおすのかと笑いながら話していました。軽く聞いたアンケートでも、多くの人がSQ...]]></summary>
        <author>
            <name>otwn</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django上でCeleryの環境を構築するための細かい設定項目]]></title>
        <id>https://zenn.dev/shimakaze_soft/articles/93d6d3eb90221f</id>
        <link href="https://zenn.dev/shimakaze_soft/articles/93d6d3eb90221f"/>
        <updated>2023-09-24T00:12:31.000Z</updated>
        <summary type="html"><![CDATA[Django上でCeleryの環境を構築する
Django上でCeleryの環境の構築方法は以下の記事でまとめています。
https://zenn.dev/shimakaze_soft/articles/bbd859803c63a6

 Workerのプリフェッチ
CeleryのWorkerがタスクを実行する際、効率的なタスク処理のためにプリフェッチという機能を活用します。
プリフェッチとは、Workerが一度に複数のタスクをキューから事前に先読みして、タスクを保持しておく機能のことを指します。
これにより、前のタスクが終了した瞬間に直ちに次のタスクを開始することができ、Worker...]]></summary>
        <author>
            <name>shimakaze_soft</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DjangoのCeleryで非同期タスクを定期実行するBeatの環境を構築する]]></title>
        <id>https://zenn.dev/shimakaze_soft/articles/3d099fd6f08142</id>
        <link href="https://zenn.dev/shimakaze_soft/articles/3d099fd6f08142"/>
        <updated>2023-09-23T22:01:59.000Z</updated>
        <summary type="html"><![CDATA[Django上でCeleryの実行結果をDBに保存する構築方法は以下の記事で紹介しました。
https://zenn.dev/shimakaze_soft/articles/b925594a2235b0
今回はCeleryを定期実行する機能であるBeatの設定を適用して、Django上でバッチなどの定期実行の機能を設定していきます。
今回はDjango上でCeleryのBeatを使いやすくするためのライブラリとしてのdjango-celery-beatの使い方についても紹介していきます。

 インストール
まずは上記の記事を最初に読んで、Docker上でDjangoとCeleryの環境構...]]></summary>
        <author>
            <name>shimakaze_soft</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DjangoのCeleryで非同期タスクの実行結果をDBに保存する]]></title>
        <id>https://zenn.dev/shimakaze_soft/articles/b925594a2235b0</id>
        <link href="https://zenn.dev/shimakaze_soft/articles/b925594a2235b0"/>
        <updated>2023-09-23T10:32:52.000Z</updated>
        <summary type="html"><![CDATA[Django上でCelery環境の構築方法は以下の記事で紹介しました。
https://zenn.dev/shimakaze_soft/articles/bbd859803c63a6
今回はそのCeleryの実行結果をDBに自動で保存してくれたり、Django-ORMを介して実行結果を取得したりできるdjango-celery-resultsというライブラリがあり、そちらの使い方について紹介します。
https://github.com/celery/django-celery-results

 インストール
まずは上記の記事を最初に読んで、Docker上でDjangoとCeleryの...]]></summary>
        <author>
            <name>shimakaze_soft</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DjangoのCeleryで非同期でタスクを実行して、モニタリングする環境をDockerで構築する]]></title>
        <id>https://zenn.dev/shimakaze_soft/articles/bbd859803c63a6</id>
        <link href="https://zenn.dev/shimakaze_soft/articles/bbd859803c63a6"/>
        <updated>2023-09-23T06:24:33.000Z</updated>
        <summary type="html"><![CDATA[Pythonで非同期処理をやる場合はCeleryを使うのが定番です。
今回はceleryを試しに動作させるための環境をdocker-composeを使って簡単に作る方法をご紹介し、Django上で動作するように環境構築します。
以前、昔にnoteに書いた以下の記事の応用や焼き直しのような内容です。（随分昔に書いた懐かしい記事）
https://note.com/shimakaze_soft/n/n4a2b63d320ed

 基本的に使用するツール類
今回は以下の4つを使用します。
それぞれ別なコンテナで動作させるため、本番の運用などでは、別々なサーバーで動作させることを想定しています。...]]></summary>
        <author>
            <name>shimakaze_soft</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[NumPyからCuPyへ：高速化の一例]]></title>
        <id>https://zenn.dev/ykesamaru/articles/f5b41a67523302</id>
        <link href="https://zenn.dev/ykesamaru/articles/f5b41a67523302"/>
        <updated>2023-09-22T12:21:57.000Z</updated>
        <summary type="html"><![CDATA[はじめに
環境
インストール

CuPyについて

NumPyのサンプルコード
CuPyによる高速化
性能比較



CuPyの苦手な処理

NumPyのサンプルコード
CuPyのサンプルコード
性能比較


まとめ


 はじめに
Pythonで数値計算を行う際によく使われるライブラリがNumPyです。しかし、GPUを活用することで計算速度を向上させたい場面も多いでしょう。そこでCuPyが登場します。この記事では、NumPyのコードをCuPyに置き換える一例とその性能比較について解説します。一方でCuPyの苦手な処理についても触れますので、使いどころを間違えないようにしましょう。
...]]></summary>
        <author>
            <name>yKesamaru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PydanticのRootModelを使いこなす]]></title>
        <id>https://zenn.dev/yosemat/articles/637f84c579d0b7</id>
        <link href="https://zenn.dev/yosemat/articles/637f84c579d0b7"/>
        <updated>2023-09-22T07:47:57.000Z</updated>
        <summary type="html"><![CDATA[PydanticのBaseModelの恩恵をlistやdictにも与えたい
こんにちは、極論モンスターのYosematです。
PydanticはTypeSafeにPythonをかけて最高ですよね。特に私が好きなのはmodel_validateのようなSerialize/Deserializeの機能です。しかしPydanticのBaseModelはうまいことdictやjsonへのSerialize/Deserializeができますがlist[MyModel]はPydanticのクラスではないのでmodel_validateのようなクラスメソッドにアクセスできません。
ダサい方法を先に書...]]></summary>
        <author>
            <name>Yosemat</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-310｜B - Strictly Superior]]></title>
        <id>https://zenn.dev/hyperdb/articles/5a1fb5c71078c2</id>
        <link href="https://zenn.dev/hyperdb/articles/5a1fb5c71078c2"/>
        <updated>2023-09-22T07:03:25.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-310 B - Strictly Superior



 提出結果
def getIntMap():
    return map(int, input().split())


def getIntListRow(N):
    return [list(map(int, input().split())) for _ in range(N)]


def main():
    n, m = getIntMap()
    pl = getIntListRow(n)

    fl = [pl[i][2:] for i in range(n)]  # p...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-310｜A - Order Something Else]]></title>
        <id>https://zenn.dev/hyperdb/articles/0cbb4c118e2ca4</id>
        <link href="https://zenn.dev/hyperdb/articles/0cbb4c118e2ca4"/>
        <updated>2023-09-22T07:03:24.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-310 A - Order Something Else



 提出結果
def getIntMap():
    return map(int, input().split())


def getIntList():
    return list(map(int, input().split()))


def main():
    n, p, q = getIntMap()
    a = getIntList()
    b = min([q + a[i] for i in range(n)])

    print(b if b < p ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQLとSQLAlchemyで詰まった話]]></title>
        <id>https://zenn.dev/chapi/articles/c50a050549faf7</id>
        <link href="https://zenn.dev/chapi/articles/c50a050549faf7"/>
        <updated>2023-09-22T04:13:06.000Z</updated>
        <summary type="html"><![CDATA[MySQLとPythonを利用して自社サービスを開発しています。開発していく中で解決に時間がかかったので原因と解決方法をまとめました。

 環境
MYSQL: 8.0
Python: 3.9
SQLAlchemy: 1.4.36
開発環境の構築にはDockerを利用しています。

 エラーになったコード
要件上、idとsystem_timestampというtimestamp型を複合主キーにする必要がありました。

models.py
from sqlalchemy import create_engine
from sqlalchemy.orm import declarative_ba...]]></summary>
        <author>
            <name>ちゃぴ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[カメラ情報を用いてリアルタイムで状況をテキストに起こしたい (Ros2) part2]]></title>
        <id>https://zenn.dev/iasl/articles/371968a2f31e32</id>
        <link href="https://zenn.dev/iasl/articles/371968a2f31e32"/>
        <updated>2023-09-22T04:05:20.000Z</updated>
        <summary type="html"><![CDATA[前回は、使いたいモデル(BLIP-2)を見つけることができ、それらがAIプラットフォームであるHugging Faceにたくさんあることが分かりました。今回はまずHugging Faceについてまとめたいと思います。

 Hugging Faceについて
前述のとおりAIプラットフォームであり、特に自然言語生成モデルがたくさんあります。

Hugging Faceの主な目的は、AIコミュニティの協力と共有を促進することです。プラットフォームは、AIモデルやデータセットをユーザーがアップロードし、共有することができるようになっています。また、他のユーザーがアップロードしたモデルやデータセッ...]]></summary>
        <author>
            <name>toky</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[カメラ情報を用いてリアルタイムで状況をテキストに起こしたい (Ros2) part1]]></title>
        <id>https://zenn.dev/iasl/articles/3fb2b018044232</id>
        <link href="https://zenn.dev/iasl/articles/3fb2b018044232"/>
        <updated>2023-09-22T04:02:47.000Z</updated>
        <summary type="html"><![CDATA[今まで深く機械学習や深層学習を学んでいなかったので触れてみようと思いました。今回はとにかく実装することをメインに進めていきたいと思います。

 深層学習モデルを扱うにあたって
まず、目的を明確にする必要があります。今回は動画像の状況を文章に起こしたいと考えています。また、１からモデルを組み立てる技術はないので、構築済みのモデルを使いたいと考えています。

 大規模言語モデル(LLM)について
今回は入力動画像を大規模言語モデルに入れて、現在の状況を説明するものを作りたいなと考えています。そもそも、大規模言語モデル(LLM)とは以下のようなものです。

大規模言語モデル（Large Lan...]]></summary>
        <author>
            <name>toky</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PowerShellスクリプトを実行できるように設定する]]></title>
        <id>https://zenn.dev/ricmsd/articles/7f2ceade6581db</id>
        <link href="https://zenn.dev/ricmsd/articles/7f2ceade6581db"/>
        <updated>2023-09-22T03:54:10.000Z</updated>
        <summary type="html"><![CDATA[WindowsでPythonの仮想環境（virtual environments）を有効にしようとしたところ以下のエラーに遭遇したので回避方法をメモしておきます。

 Activate.ps1
PS C:\project> & c:/project/venv/Scripts/Activate.ps1
& : このシステムではスクリプトの実行が無効になっているため、ファイル C:\project\venv\Scripts\Activate.ps1 を読み込むことができません。詳細については、「about_Execution_Policies」(https://go.m...]]></summary>
        <author>
            <name>ricmsd</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pytestで非同期関数をテストする]]></title>
        <id>https://zenn.dev/fhmn/articles/2ca12d989dd505</id>
        <link href="https://zenn.dev/fhmn/articles/2ca12d989dd505"/>
        <updated>2023-09-22T01:05:02.000Z</updated>
        <summary type="html"><![CDATA[FastAPIを使っていると非同期関数を扱うことが増えます。
非同期関数のテストの書き方をメモとして記載します。
!
記載のコード例では単純化のため一部コードを省略しています。


 コード
下記のコードをテストするケースを考える。

repo.py
from sqlalchemy import select
from sqlalchemy.orm import Session


class UsersRepository:
    async def find_by_id(session: Session, id: int) -> User:
        result = ...]]></summary>
        <author>
            <name>fhmn</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【中級者向け】Streamlitで作るデータ解析Webアプリ]]></title>
        <id>https://zenn.dev/labcode/books/cf772007ca5335</id>
        <link href="https://zenn.dev/labcode/books/cf772007ca5335"/>
        <updated>2023-09-21T13:14:34.000Z</updated>
        <summary type="html"><![CDATA[📰 概要

データファイルをドラッグ&ドロップするだけで、解析が自動で行われるようなアプリを作りたいと思ったことはありませんか？

自分が作った解析コードを他の人にも使ってもらいたいと思ったことはありませんか？

本書では、これらの望みを叶えてくれるデータ解析用のWebアプリの作成方法をご紹介しています。
PythonのライブラリであるStreamlitを用いることで、HTML / CSS / JavaScriptなどの言語不要で簡単に作成できます。

本書では種類の異なる4つのオリジナルアプリの作り方をご紹介しています。
ソースコードもすべて公開しているので、お手元のPCでアプリを動かしながら学習することができます。

👍 Webアプリの利点
・ ブラウザを使って簡単に操作可能になる
・ 他の人にも使ってもらいやすくなる
・ 公開すれば、全世界の人が使えるようになる

👫 対象とする読者
・ データ解析用のオリジナルのWebアプリを作りたい人
・ GUIの操作で解析を半自動化したい人
・ 研究室の他のメンバーにも自分の解析コードを使ってほしいと思っている人
・ Streamlitを使ってWebアプリを作りたい人
・ 手を動かしながらPythonを習得したい人

【販売価格】
期間限定で ¥2000→¥1000 (50% OFF!!)で販売しております！

📰アップデート情報
2023/09/21：技術書初版がリリースされました。

本技術書は随時アップデートされていきます。
一度購入された方はアップデートされたとしても追加料金は発生しませんのでご安心ください。]]></summary>
        <author>
            <name>LabCode（ラボコード）</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonの学習におすすめ技術書5選【高校生エンジニアが解説】]]></title>
        <id>https://zenn.dev/raio/articles/da804721b33850</id>
        <link href="https://zenn.dev/raio/articles/da804721b33850"/>
        <updated>2023-09-21T11:22:26.000Z</updated>
        <summary type="html"><![CDATA[はじめに
みなさん、こんにちは。高校生エンジニアのRaioです🙌
公立高校に通いながら、放課後や休日はIT企業のエンジニアとして働いています。
今回の記事では、Pythonの学習におすすめ技術書5選について解説します！

 技術書を無料で読む方法
KindleUnlimitedを使うことで、沢山の技術書を無料で何冊でも読むことが可能です🙌

200万冊以上の書籍が何冊でも読み放題
月額980円が今なら1ヶ月無料
場所に囚われず、様々な端末で使用可能

勿論、技術書以外にもビジネス書や漫画など種類豊富です！
↓入会したい方は画像をクリック↓
https://amzn.to/3rv5CZ...]]></summary>
        <author>
            <name>Raio｜高校生エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChromeバージョンアップによるSeleniumエラーのトラブルシューティング]]></title>
        <id>https://zenn.dev/ykesamaru/articles/a1a4fd5eae8563</id>
        <link href="https://zenn.dev/ykesamaru/articles/a1a4fd5eae8563"/>
        <updated>2023-09-21T11:06:50.000Z</updated>
        <summary type="html"><![CDATA[はじめに
環境
問題の発生
エラーメッセージ
解決手順
まとめ


 はじめに
この記事は、ChromeのバージョンアップによってSeleniumで発生する一般的なエラーとその解決手順について解説するものです。
この記事は主に自分用の備忘録として書かれており、今後同様の問題に遭遇した際にすぐに対処できるようにすることを目的としています。

 環境
$ uname -a
Linux user 5.15.0-83-generic #92~20.04.1-Ubuntu SMP Mon Aug 21 14:00:49 UTC 2023 x86_64 x86_64 x86_64 GNU/Lin...]]></summary>
        <author>
            <name>yKesamaru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python の環境構築をやってみた]]></title>
        <id>https://zenn.dev/harukinguu/articles/641a84f5f53987</id>
        <link href="https://zenn.dev/harukinguu/articles/641a84f5f53987"/>
        <updated>2023-09-21T09:22:39.000Z</updated>
        <summary type="html"><![CDATA[今日、とあるYoutubeにのってたAmazon価格追跡アプリを真似して作ってみようと思ったのですが、せっかくなのでAnacondaで仮想環境を作って取り組みたいと考え、様々な記事を見ながら環境構築に取り組んでみたので、その経緯についてまとめます。

 前提

Anacondaはインストール済み
vscodeもインストール済み


 やり方


pythonの拡張機能のインストール


Anacondaでの仮想環境の構築
https://ai-inter1.com/python-vscode/
createした。


環境変数の設定
https://blog.beachside.dev/...]]></summary>
        <author>
            <name>はるき</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python で RC4 暗号を実装する]]></title>
        <id>https://zenn.dev/fikastudio/articles/3ff628c031af52</id>
        <link href="https://zenn.dev/fikastudio/articles/3ff628c031af52"/>
        <updated>2023-09-21T05:30:07.000Z</updated>
        <summary type="html"><![CDATA[この記事では、Python を使用して RC4 暗号を実装します。
Python のライブラリを使用すれば RC4 暗号なんて簡単に利用することができます。
しかし、RC4 暗号の中身を理解するという意味で、スクラッチで実装します。

 RC4 概要
RC4 暗号の歴史などは、他の記事に譲ります。ここでは、RC4 の仕組みについてのみ着目します。RC4 はストリーム暗号の１種です。ストリーム暗号は、平文をビットもしくはバイト単位で暗号化・復号処理を行います。しかし、これらの処理は独立して行われるものではなく、例えばあるバイトの暗号化処理は、前のバイトの暗号化処理に依存します。
RC4 は...]]></summary>
        <author>
            <name>情報工学入門チャンネル</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-309｜A - Nine]]></title>
        <id>https://zenn.dev/hyperdb/articles/91e153865fdc9a</id>
        <link href="https://zenn.dev/hyperdb/articles/91e153865fdc9a"/>
        <updated>2023-09-21T05:06:30.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-309 A - Nine



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    a, b = getIntMap()

    print('Yes' if b - a == 1 and a % 3 != 0 else 'No')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-309｜B - Rotate]]></title>
        <id>https://zenn.dev/hyperdb/articles/1a9448bb9fc2c2</id>
        <link href="https://zenn.dev/hyperdb/articles/1a9448bb9fc2c2"/>
        <updated>2023-09-21T05:06:29.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-309 B - Rotate



 提出結果
def getInt():
    return int(input())


def getStringListRow(N):
    return [list(input()) for _ in range(N)]


def cp(x, y):
    z = []
    for i in range(y):
        z.append([x[i][j] for j in range(y)])
    return z


def main():
    n = getInt()
    a = g...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【個人開発 #1-1】レコメンドシステムを作ってみた vol.1　〜サービス概要〜]]></title>
        <id>https://zenn.dev/waka07/articles/development-diary_1-1</id>
        <link href="https://zenn.dev/waka07/articles/development-diary_1-1"/>
        <updated>2023-09-20T23:31:02.000Z</updated>
        <summary type="html"><![CDATA[作りたいシステム
忙しい人のためのギフト提案型AI「AiSAP!(エイサップ)」

 コンセプト
忙しい社会人のために、AIが可能な限り素早く（ASAP: As Soon As Possible）、最適なギフトを提案してくれるWebサービス。

 作ろうと思ったきっかけ
友達や彼女への誕プレとか、お世話になっている会社の人へのお返しとか、何あげたらいいか毎回悩む！しかも直前になって気づくから買いに行っている時間もない！
という自分の悩みから作りたいなーとなんとなく思っていたのですが、
「何か新サービスを提案してください」と会社に言われて、締め切りが急に出現。
2ヶ月足らずで作ることに...]]></summary>
        <author>
            <name>Waka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Qiskit で遊んでみる (21) — QAOA でお絵描き]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-qiskit21</id>
        <link href="https://zenn.dev/derwind/articles/dwd-qiskit21"/>
        <updated>2023-09-20T17:39:36.000Z</updated>
        <summary type="html"><![CDATA[目的
TYTAN tutorial おすすめ5（お絵かきロジック） という TYTANSDK のチュートリアルがある。原理的には QAOA でいけるはずなので試してみたい。
cuTensorNet での実験は使われたし、何だかんだで時間がかかっていつ解けるのであろうかという感じであったので、今回は思い切って cuStateVec を用いる。
以下の内容は Google Colab の T4 を用いて計算した。

 今回解きたい問題
必要なモジュールを import する。
from __future__ import annotations

import time
from col...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Python] FirestoreにJSONでデータをアップロードする]]></title>
        <id>https://zenn.dev/410/articles/64b7c0d3e46609</id>
        <link href="https://zenn.dev/410/articles/64b7c0d3e46609"/>
        <updated>2023-09-20T15:41:06.000Z</updated>
        <summary type="html"><![CDATA[環境

MacOS Ventura 13.5.2
Python 3.9.6


 秘密鍵を用意する
Firebaseのコンソールにアクセスし、「プロジェクトの設定」 > 「サービス　アカウント」を開きます。
ボタンをクリックして、新しい秘密鍵をダウンロードします。


 コード
mykey.json　- 秘密鍵　
sample_data.json - サンプルデータ
サンプルデータ
{
    "data": {
        "K2Kjm3x6": {
            "name": "Taro",
            "age": 25,
          ...]]></summary>
        <author>
            <name>ようてん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのthreadを復習してみた。[個人的メモ]]]></title>
        <id>https://zenn.dev/kaba777/articles/084d09bbd17160</id>
        <link href="https://zenn.dev/kaba777/articles/084d09bbd17160"/>
        <updated>2023-09-20T14:29:50.000Z</updated>
        <summary type="html"><![CDATA[Pythonはシングルスレッドだ。
例えば実行に１秒かかる関数taskがあるとする。
def task():
  print('Starting a task...')
  sleep(1)
  print('done')
以下のように2回taskを呼べば、pythonはシングルスレッドのため、１回目のtaskの終了を待ってから２回目のtaskを開始するため、全体では２秒かかる。
task()
task()
これを解決するのがThreadだ。処理を並行して走らせることで１秒で処理を終わらせることが出来る。
pythonでthreadを使用するにはまずThreadをインポートする。
fro...]]></summary>
        <author>
            <name>カバ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【2023円9月】0円で読めるオススメ技術書5選]]></title>
        <id>https://zenn.dev/raio/articles/712bc82e5b8faf</id>
        <link href="https://zenn.dev/raio/articles/712bc82e5b8faf"/>
        <updated>2023-09-20T11:42:27.000Z</updated>
        <summary type="html"><![CDATA[はじめに
みなさん、こんにちは。高校生エンジニアのRaioです！
平日は公立高校に通いながら、放課後や休日はIT企業のエンジニアとして働いています🧑🏻‍💻
↓筆者について↓
https://qiita.com/Raio14f/items/ef0fb67685b36298bcb0
今回の記事では、0円で読めるオススメ技術書5選を紹介します！
無料で読む方法も紹介してるので、是非最後まで見て頂けると幸いです👍🏻

 技術書を無料で読む方法
KindleUnlimitedを使うことで、沢山の技術書を無料で何冊でも読むことが可能です🙌

200万冊以上の書籍が何冊でも読み放題
月額980円が...]]></summary>
        <author>
            <name>Raio｜高校生エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-308｜B - Default Price]]></title>
        <id>https://zenn.dev/hyperdb/articles/ffd44d2aefd55c</id>
        <link href="https://zenn.dev/hyperdb/articles/ffd44d2aefd55c"/>
        <updated>2023-09-20T08:15:02.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-308 B - Default Price



 提出結果
def getIntMap():
    return map(int, input().split())


def getStringList():
    return list(input().split())


def getIntList():
    return list(map(int, input().split()))


def main():
    n, m = getIntMap()
    c = getStringList()
    d = [''] + get...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-308｜A - New Scheme]]></title>
        <id>https://zenn.dev/hyperdb/articles/0ca903939b174c</id>
        <link href="https://zenn.dev/hyperdb/articles/0ca903939b174c"/>
        <updated>2023-09-20T08:15:02.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-308 A - New Scheme



 提出結果
def getIntList():
    return list(map(int, input().split()))


def main():
    a = getIntList()
    b = [1 for i in range(1, len(a)) if a[i] < a[i - 1]]
    c = [a[i] % 25 for i in range(len(a))]

    r = True
    if min(a) < 100 or max(a) > 675:...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonの標準ライブラリであるreを使ったHTML文書からのHTMLタグの消去]]></title>
        <id>https://zenn.dev/blueman/articles/fd92ff0ba496cb</id>
        <link href="https://zenn.dev/blueman/articles/fd92ff0ba496cb"/>
        <updated>2023-09-20T07:26:20.000Z</updated>
        <summary type="html"><![CDATA[この記事はQiitaの記事の転載です!!
Qiitaの記事はこちら!!
https://qiita.com/blueman/items/b8b9bc29c9e059b30517

!
OpenCV の不調( cv2.imshow() が使えない症状が発生)により投稿が遅れてしまいました。
記事を楽しみにしていただいている方は、お待たせしてしまい大変申し訳ございませんでした🙇‍♂️
現在は、 cv2.imshow() が問題なく使えています。
今後は、このようなこと(記事の投稿が遅れる)が無いよう最善を尽くします。
策としては、

事前にプログラムデータを作成
記事を投稿する直前にはあまり...]]></summary>
        <author>
            <name>ブルーマン</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[我想学漢字（汉字）子供の漢字学習]]></title>
        <id>https://zenn.dev/manyan3/articles/e913d0cd7fc64c</id>
        <link href="https://zenn.dev/manyan3/articles/e913d0cd7fc64c"/>
        <updated>2023-09-20T07:09:00.000Z</updated>
        <summary type="html"><![CDATA[勉強してくれない子供に字を読ませたい

 儿童不喜欢学习。太难了。怎么办 怎麼辦.

一応、日本語と中国語が話せるといいなぁって会社で働いている。
でも、みんな日本語かカスタム英語だけど～

!
どちらかというと作者の勉強という感じですね。


 Game 画面


那自己造成吧!
几天，终于完成了。太好了。
!
日本の漢字、簡体字、繁体字、拼音 注音ランダム出題のゲーム

必要に応じてExcelファイルで拡張可能
中文読めない方も2分間遊んでみてください（デフォルト）


日語、中文学習のお子様用。
https://github.com/mi-kaneyon/man-yard/bl...]]></summary>
        <author>
            <name>Manyan3</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Replacement Markerをカスタマイズ]]></title>
        <id>https://zenn.dev/gz/articles/92d610f63dbb1e</id>
        <link href="https://zenn.dev/gz/articles/92d610f63dbb1e"/>
        <updated>2023-09-20T02:31:01.000Z</updated>
        <summary type="html"><![CDATA[背景情報
Pythonによくあるopen関数でファイルを開く、
例えば、cp932で、あるCSVファイルを開くは以下のようにお書きします。
open(csv_file_path, encoding="cp932", errors='replace')
errors='replace'というのは、エラーが発生する場合、replace処理が実行されます。
例えば、utf8のファイル、をcp932で開く場合、cp932に存在しない文字があった場合、エラーになるので、置換処理が実行されます。
何に置換される？
デフォルトでは、"?"という文字に置換されます。

 何をやりたい
今回は置換用の...]]></summary>
        <author>
            <name>gz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VSCode: Python GUI アプリのライブリロードをするメモ]]></title>
        <id>https://zenn.dev/syoyo/articles/547c490fd94184</id>
        <link href="https://zenn.dev/syoyo/articles/547c490fd94184"/>
        <updated>2023-09-19T17:40:38.000Z</updated>
        <summary type="html"><![CDATA[背景
機械学習や CG 系で Python(tkinter, PyQt など)で GUI 作る必要がある.
React とか Streamlit みたいに GUI のリロードしたい...
最近だと VS Code で LiveCode for Python で行けました!
https://www.youtube.com/watch?v=28jxTjk2QJM

 設定

で GUI ライブラリのモジュール名を指定します.
tkinter などよく使われているものはすでに登録されていましたが, PySide6 などはありませんでした(2023/09 時点)

 リロードのタイミング
G...]]></summary>
        <author>
            <name>syoyo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[特定の用語が含まれているSendGridテンプレートを抽出する方法]]></title>
        <id>https://zenn.dev/okun/articles/6959aa8be04a7f</id>
        <link href="https://zenn.dev/okun/articles/6959aa8be04a7f"/>
        <updated>2023-09-19T12:30:37.000Z</updated>
        <summary type="html"><![CDATA[課題
会社の電話番号やサービス名の変更時、もしくは特定のキャンペーンフレーズが含まれているテンプレートを特定したい時、SendGridダッシュボードでテンプレートを1つ1つ開いてサーチすると時間が掛かる上に事故が起こりやすい。

 要約
Pythonプログラムを用意して上記手順を自動実行する。

 必要なもの

SendGrid API キーの値（SG.xxxxxxx.xxxxxxxxxxxxxx）
サーチしたい用語（例 06-1234-5678、早期登録キャンペーン、プレミアム会員など）


 手順

 以下のシェルスクリプトを実行してローカル環境に全テンプレート情報を取得する。
...]]></summary>
        <author>
            <name>t_tomo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[特定の用語が含まれているSendGridテンプレートを抽出する方法]]></title>
        <id>https://zenn.dev/t_tomo/articles/6959aa8be04a7f</id>
        <link href="https://zenn.dev/t_tomo/articles/6959aa8be04a7f"/>
        <updated>2023-09-19T12:30:37.000Z</updated>
        <summary type="html"><![CDATA[課題
会社の電話番号やサービス名の変更時、もしくは特定のキャンペーンフレーズが含まれているテンプレートを特定したい時、SendGridダッシュボードでテンプレートを1つ1つ開いてサーチすると時間が掛かる上に事故が起こりやすい。

 要約
Pythonプログラムを用意して上記手順を自動実行する。

 必要なもの

SendGrid API キーの値（SG.xxxxxxx.xxxxxxxxxxxxxx）
サーチしたい用語（例 06-1234-5678、早期登録キャンペーン、プレミアム会員など）


 手順

 以下のシェルスクリプトを実行してローカル環境に全テンプレート情報を取得する。
...]]></summary>
        <author>
            <name>t_tomo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[未使用のSendGridテンプレートを抽出する方法]]></title>
        <id>https://zenn.dev/t_tomo/articles/6d3893820db2b6</id>
        <link href="https://zenn.dev/t_tomo/articles/6d3893820db2b6"/>
        <updated>2023-09-19T12:24:42.000Z</updated>
        <summary type="html"><![CDATA[課題
SendGridテンプレートを整理する際、テンプレートIDを1つ1つクリップボードにコピーしてプロジェクトディレクトリ内で参照されているかサーチすると時間が掛かる上に事故が起こりやすい。

 要約
Pythonプログラムを用意して上記手順を自動実行する。

 必要なもの

SendGrid API キーの値（SG.xxxxxxx.xxxxxxxxxxxxxx）
プロジェクトディレクトリ


 手順

 以下のシェルスクリプトを実行してローカル環境に全テンプレート情報を取得する。
% curl -X GET "https://api.sendgrid.com/v3/templat...]]></summary>
        <author>
            <name>t_tomo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[RecBoleを使ってみよう5　推論]]></title>
        <id>https://zenn.dev/kentoo1/articles/592272d3a1a28d</id>
        <link href="https://zenn.dev/kentoo1/articles/592272d3a1a28d"/>
        <updated>2023-09-19T11:04:12.000Z</updated>
        <summary type="html"><![CDATA[前回は、モデルの学習方法について解説しました。
今回は、次のテストデータについて、学習済みモデルのレコメンド先を推論します。

 test.csv
user_id
5
1
2222
3333


 最終コード
まずコードの全体を載せます。
テストファイルは ./data/processed/anime/test.csv、モデルファイルは ./saved/BPR-Sep-15-2023_16-55-36.pth に入っているとします。
predict.py
 ./predict.py
from __future__ import annotations

import logging

i...]]></summary>
        <author>
            <name>ケントゥ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[頭部姿勢推定を簡易実装する]]></title>
        <id>https://zenn.dev/ykesamaru/articles/025b0eabf24e20</id>
        <link href="https://zenn.dev/ykesamaru/articles/025b0eabf24e20"/>
        <updated>2023-09-19T10:20:28.000Z</updated>
        <summary type="html"><![CDATA[はじめに
アルゴリズム
実装
出力結果


 はじめに
頭部姿勢推定は、顔の向きや角度を計算する技術です。
この記事では、複雑なパラメーターを使用せず、簡易的な方法を用いて頭部姿勢を推定する方法を紹介します。具体的には、顔のランドマークを利用して三角形をつくり、その重心から顔の向きを2D平面上で推定します。

通常、頭部姿勢推定にはカメラの

内部パラメーター
外部パラメーター

が必要となります。内部パラメーターは、カメラの焦点距離や画像の中心点などを表すパラメーターで、カメラごとに異なります。外部パラメーターは、カメラの位置や向きを表すパラメーターで、カメラの位置や向きが変わると...]]></summary>
        <author>
            <name>yKesamaru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[HaskellからPythonに翻訳して何かを味わう]]></title>
        <id>https://zenn.dev/4ergfbv547uezdf/articles/74647c626d8155</id>
        <link href="https://zenn.dev/4ergfbv547uezdf/articles/74647c626d8155"/>
        <updated>2023-09-19T09:59:04.000Z</updated>
        <summary type="html"><![CDATA[概要
このPDF資料において、プロトタイプを作る上でのHaskellの優位性が書かれています。
具体的なコードの全体が示されていないので実際に書いてみました。また上記資料にはPythonについて検証されていないので、Pythonバージョンのコードも書いてみて比較考察してみました。その際はラムダ式を使うようにしています。
私はもともとC/C++やPythonをメインに使っていました。見識を広げるためにHaskellを勉強していまして、それがどれほど手続き型言語(の関数型的書き方)に応用できるのか知りたく思っていました。

 課題
以下図は上記で示したPDF資料から取っています。
軍事系...]]></summary>
        <author>
            <name>bunnyhopper_isolated</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Datadog Fowarder のアップグレード]]></title>
        <id>https://zenn.dev/htnk128/articles/20c16b70f59b50</id>
        <link href="https://zenn.dev/htnk128/articles/20c16b70f59b50"/>
        <updated>2023-09-19T07:35:54.000Z</updated>
        <summary type="html"><![CDATA[これはなに？
Datadog Fowarder はログを Datadog に転送する Lambda 関数だが、使用しているバージョンが古いため AWS Lambda における Python 3.7 ランタイムのサポート終了ともなう対応が必要なためその対応方法をまとめたものである

 手順
基本的に公式の通り実施する

 事前確認

以下のコマンドにて datadog-forwarder が存在することを確認する    $ aws lambda list-functions --function-version ALL --region {リージョン} --output text --...]]></summary>
        <author>
            <name>htnk128</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-307｜B - racecar]]></title>
        <id>https://zenn.dev/hyperdb/articles/f5a319586ffcf0</id>
        <link href="https://zenn.dev/hyperdb/articles/f5a319586ffcf0"/>
        <updated>2023-09-19T04:42:09.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-307 B - racecar



 提出結果
def getInt():
    return int(input())


def getStringRow(N):
    return [input() for _ in range(N)]


def chk(x, y):
    z = x + y
    if z == z[::-1]:
        return True

    z = y + x
    if z == z[::-1]:
        return True
    return False


def main():...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-307｜A - Weekly Records]]></title>
        <id>https://zenn.dev/hyperdb/articles/8903e896f6e2a2</id>
        <link href="https://zenn.dev/hyperdb/articles/8903e896f6e2a2"/>
        <updated>2023-09-19T04:42:09.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-307 A - Weekly Records



 提出結果
def getInt():
    return int(input())


def getIntList():
    return list(map(int, input().split()))


def main():
    n = getInt()
    a = getIntList()

    sw = []
    for i in range(n):
        s = i * 7
        e = s + 7
        sw.append(sum(a[s:...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【AnimateDiff】animatediff-cli-prompt-travelを試してみた！]]></title>
        <id>https://zenn.dev/toki_mwc/articles/84ce8d3abdbc54</id>
        <link href="https://zenn.dev/toki_mwc/articles/84ce8d3abdbc54"/>
        <updated>2023-09-19T03:40:49.000Z</updated>
        <summary type="html"><![CDATA[1. はじめに
animatediff-cli-prompt-travelは、GitHub上で公開されているツールで、アニメーションの差分を生成するためのCLIツールです。この記事では、このツールのインストール方法から使い方、実際の使用結果までを紹介します。

 2. animatediff-cli-prompt-travelとは？
このツールは、neggles/animatediff-cliをベースにしており、特にフレームの中間でプロンプトを変更する実験的な機能が追加されています。

 3. インストール方法
Windows環境を前提として、Python 3.10とgitクライアン...]]></summary>
        <author>
            <name>toki_mwc</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonの__repr__メソッドを理解する]]></title>
        <id>https://zenn.dev/nakurei/articles/understand-python-repr-method</id>
        <link href="https://zenn.dev/nakurei/articles/understand-python-repr-method"/>
        <updated>2023-09-18T22:56:43.000Z</updated>
        <summary type="html"><![CDATA[これはなに
Pythonのオブジェクトが持つ特殊メソッド__repr__について調べたメモ。

 特殊メソッド__repr__とは
__repr__は、objectクラスで定義されている、オブジェクトの「公式な（official）」文字列表現を返すための特殊メソッドである。
__repr__はobjectクラスで定義されており、すべてのクラスは暗黙的にobjectクラスを継承する。そのため、すべてのクラスに__repr__メソッドは定義（継承）されている。

 __repr__の目的
このメソッドの目的は、そのオブジェクトの「公式な（official）」文字列表現を返し、オブジェクト...]]></summary>
        <author>
            <name>NakuRei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python基礎講座・連載1回目 】Google Colaboratory とは？ Google Colab の環境構築編]]></title>
        <id>https://zenn.dev/aiq_dev/articles/78cde201571ae7</id>
        <link href="https://zenn.dev/aiq_dev/articles/78cde201571ae7"/>
        <updated>2023-09-18T13:32:33.000Z</updated>
        <summary type="html"><![CDATA[こんにちは、AIQ株式会社のフロントエンドエンジニアのまさぴょんです！
今回は、社内向けの『Python基礎講座』の連載1回目になります。
今回のテーマは、「Google Colaboratory とは？ Google Colab の環境構築編」です。

 Google Colaboratory (通称:Colab) とは？
Google Colaboratory (通称:Colab)は、ブラウザから Python を実行できるサービス(実行環境でありEditor)です。
Google Colab では、Google アカウントがあれば、簡単にPython の実行環境を構築できます。
ま...]]></summary>
        <author>
            <name>まさぴょん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ネットワークカメラの映像をRTSP経由でMacの画面に表示する]]></title>
        <id>https://zenn.dev/tsujino/articles/d0ca3c9b847b66</id>
        <link href="https://zenn.dev/tsujino/articles/d0ca3c9b847b66"/>
        <updated>2023-09-18T13:27:34.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事ではTapo C310という種類のネットワークカメラの映像をRTSP経由でMacPCの画面に表示する手順を解説します。
Tapoシリーズのネットワークカメラは、映像をスマホアプリで閲覧するのが公式の方法のようですが、仕様外の機能でRTSPのプロトコルを開放しているため自力で設定をすればパソコンでも表示できるようになっています。私の環境で使っているルーターの関係でルーター側の設定が少しトリッキーでしたが、手順自体はとても簡単です。
今回使用した機器や環境は以下の通りです。

Network camera: Tapo C310
Router: docomo home5g...]]></summary>
        <author>
            <name>Tsujino</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【2023年9月】0円で読めるJavaScript技術書5選]]></title>
        <id>https://zenn.dev/raio/articles/a6a5f6d698341e</id>
        <link href="https://zenn.dev/raio/articles/a6a5f6d698341e"/>
        <updated>2023-09-18T12:57:29.000Z</updated>
        <summary type="html"><![CDATA[はじめに
みなさん、こんにちは。高校生エンジニアのRaioです！
平日は公立高校に通いながら、放課後や休日はIT企業のエンジニアとして働いています🧑🏻‍💻
↓筆者について↓
https://qiita.com/Raio14f/items/ef0fb67685b36298bcb0
今回の記事では、0円で読めるJavaScriptの技術書5選を紹介します！
無料で読む方法も紹介してるので、是非最後まで見て頂けると幸いです👍🏻

 技術書を無料で読む方法
KindleUnlimitedを使うことで、沢山の技術書を無料で何冊でも読むことが可能です🙌

200万冊以上の書籍が何冊でも読み放題
...]]></summary>
        <author>
            <name>Raio｜高校生エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ファイル編集（＋画像生成＋音声生成）Slackアプリを作ってみた話]]></title>
        <id>https://zenn.dev/straydog/articles/5753c72fa9bd03</id>
        <link href="https://zenn.dev/straydog/articles/5753c72fa9bd03"/>
        <updated>2023-09-18T12:14:32.000Z</updated>
        <summary type="html"><![CDATA[はじめに
ファイル編集 Slack アプリを作成を作成したので、そのアプリについて記事にしてみました。気分で機能追加しているので、もしかすると記事更新するかもしれないです。
作成した経緯は、最近 Slack アプリをいじる事が増えたので、自分の今まで積んできたスキルスタック、触ってきたサービスで作ってみるかぁというモチベーション。そもそもラッパーライブラリが用意されている RDB ではなくて、 NoSQL DB を使うのはバグってる気がする。仕事じゃないからできることですね。
作ってみた感じとしては、やはりフロントエンドを実装しない分、工数はそれほどかからないし、OpenAI（Fun...]]></summary>
        <author>
            <name>stray dog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【個人開発】Noteでおすすめされているビジネス書のランキングサイトを作ってみた]]></title>
        <id>https://zenn.dev/daysooon/articles/9091bd87054be1</id>
        <link href="https://zenn.dev/daysooon/articles/9091bd87054be1"/>
        <updated>2023-09-18T08:55:12.000Z</updated>
        <summary type="html"><![CDATA[アプリについて
https://wavook.net/
サービスの内容としては、Note上で紹介されているビジネス書をスキの数が多い順にランキング化したものです。各書籍には紹介しているNote記事へのリンクと、Amazonへのリンクを添付しています。現在では全体ランキングのみですが、今後は金融・ITなどのカテゴリ分けや、月間ランキングなどの機能を追加予定です。

 アプリ画面


 使用技術

 フロントエンド

Next.js
TypeScript
Tailwind CSS
Prisma

tremor ダッシュボードを簡単に作成できるUIライブラリです


 インフラ


Net...]]></summary>
        <author>
            <name>D-suke</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[スマホの画面注視認識機能を簡易実装する]]></title>
        <id>https://zenn.dev/ykesamaru/articles/6e2098dbef148e</id>
        <link href="https://zenn.dev/ykesamaru/articles/6e2098dbef148e"/>
        <updated>2023-09-18T08:17:38.000Z</updated>
        <summary type="html"><![CDATA[はじめに
寝顔でスマホの顔認証ロックを解除　50万円の不正送金被害も　どう防ぐ?専門家に聞いたというニュースがあり驚きました。悪い人はいろんなこと考えるんですね。

あなたの個人情報や資産に関する情報などが詰まったスマートフォン。普段はロックをかけているが、もし寝ている間にロックが解除されてしまったら?
そんな恐ろしい事件が実際に起きた。警視庁は、飲食店で知り合った男性が寝た後に、男性の寝顔でスマホやネットバンキングの顔認証ロックを解除し、不正に50万円を送金した疑いで、チュニジア人の男を逮捕したのだ。9/14(木) 15:54配信

このニュースで出てきた「画面注視認識機能」。要は...]]></summary>
        <author>
            <name>yKesamaru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Pandas入門】Pandasとは？Pandasの基本の使い方・Pandasチートシート]]></title>
        <id>https://zenn.dev/aiq_dev/articles/dbc01683625524</id>
        <link href="https://zenn.dev/aiq_dev/articles/dbc01683625524"/>
        <updated>2023-09-18T07:38:13.000Z</updated>
        <summary type="html"><![CDATA[こんにちは、AIQ株式会社のフロントエンドエンジニアのまさぴょんです！
今回は、Pandas入門講座です。「Pandasとは何か？」や、Pandasの基本の使い方をまとめて、チートシートとして使えるようにしています。ぜひご活用ください。
以前書いたスクラップ記事はこちら。
(これをベースに記事作成しました)
https://zenn.dev/manase/scraps/2e430d208596dd

 Pandasとは？
Pandasとは、

Pandas(パンダス)とは、データ解析を容易にする機能を提供するPythonのデータ解析ライブラリです。
Pandasの特徴には、データフレーム...]]></summary>
        <author>
            <name>まさぴょん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[passlibを使うLambdaをWindowsでデプロイしてpasslib.exc.MissingBackendErrorとなったら]]></title>
        <id>https://zenn.dev/go_furu93/articles/lambda_bcrypt_no_backends_available</id>
        <link href="https://zenn.dev/go_furu93/articles/lambda_bcrypt_no_backends_available"/>
        <updated>2023-09-18T06:18:05.000Z</updated>
        <summary type="html"><![CDATA[先に結論
Windows(WSL)でデプロイ時、Lambdaのアーキテクチャがx86_64だと、bcryptが使用できないというエラーが発生しました。Lambdaのアーキテクチャにarm64を使うと、エラーが発生しなくなりました。

 現象
WindowsのWSLを使って開発しています。
passlib経由でbcryptを動かすFunctionを作成して、ローカルでは正しく動作しました。
ただし、Serverless Frameworkでデプロイして、Functionを動かすとpasslib.exc.MissingBackendError: bcrypt: no backends a...]]></summary>
        <author>
            <name>ふるはうす</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonでガウス過程回帰をやってみよう]]></title>
        <id>https://zenn.dev/tirimen/articles/0c70e82df4add4</id>
        <link href="https://zenn.dev/tirimen/articles/0c70e82df4add4"/>
        <updated>2023-09-18T05:14:57.000Z</updated>
        <summary type="html"><![CDATA[今回もベイズ最適化の記事を書くための前段階記事。回帰というと、線形回帰を思い浮かべるかもしれないが、ベイズ最適化ではガウス過程回帰を用いている。そこで自分用にまとめてみた。

 ガウス過程回帰とは
ガウス過程という言葉についてまず考えてみる。こちらのサイトが詳しく書いてあるので、参考にしてほしい。
https://www.jstage.jst.go.jp/article/isciesci/62/10/62_390/_pdf
また、こちらの書籍も参考にした。（amazonに飛ぶのでご注意ください）
https://www.amazon.co.jp/ウェブ最適化ではじめる機械学習-―-Bテス...]]></summary>
        <author>
            <name>tirimen</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[MYDNS.JPのサブドメイン用SSL証明書取得に、Docker版PHPでLet's EncryptのDNS-01を用いた際にエラー]]></title>
        <id>https://zenn.dev/nondescript/articles/c43d7fb850555f</id>
        <link href="https://zenn.dev/nondescript/articles/c43d7fb850555f"/>
        <updated>2023-09-18T04:58:36.000Z</updated>
        <summary type="html"><![CDATA[TL;DR

エラー内容
/bin/sh: 1: txtregist.php: not found
対策
#!/usr/local/phpに変更 or hookオプションを"php ファイル名"にする
その他
PHPにこだわる必要はない


 背景

MYDNS.JPのサブドメインに対するSSL証明書をLet's Encryptから自動で取得したかった
CertbotのHTTP-01のために80や443ポートは使いたくなかった
ホスト環境は汚したくなかったのでDockerで実行したかった
MYDNS.JP公式でDNS-01用のphpスクリプトが公開されているので、それを使おうとした
...]]></summary>
        <author>
            <name>素人の戯言</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Alexaで追加した買い物リストをもとにAmazon系以外のECサイトでも音声ショッピングしてみる]]></title>
        <id>https://zenn.dev/wmoto_ai/articles/c7ad0b897aca3d</id>
        <link href="https://zenn.dev/wmoto_ai/articles/c7ad0b897aca3d"/>
        <updated>2023-09-18T03:04:54.000Z</updated>
        <summary type="html"><![CDATA[はじめに
どうも、趣味で機械学習関連を勉強中の生ビールと申します。備忘録がてら初めてのZenn記事投稿します。
モチベーション湧かない家事はやりたくないめんどくさがり屋です。家事する暇あったらその時間ビールを飲んで過ごしていたいです。

 動機
結婚したことをきっかけに、互いの時間を増やすべく家事の時短化を進めていました。初めの一歩として、音声操作のAlexaやSwitchbotを導入。これで少しは楽になったのですが、子供が生まれたのを機にもっと家事の時間を減らすべくトライしてみました。
例えば、「たこ焼きソースないな」て思った”その場で”買い物リストに追加して、それをネット内で自動...]]></summary>
        <author>
            <name>生ビール</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[__init__(self) -> None:って何？]]></title>
        <id>https://zenn.dev/yuto_mo/articles/5c4d165330c5ab</id>
        <link href="https://zenn.dev/yuto_mo/articles/5c4d165330c5ab"/>
        <updated>2023-09-18T02:13:36.000Z</updated>
        <summary type="html"><![CDATA[今回は__init__(self) -> None:について解説していきます。

 __ init__(self) -> None:って何？
__ init__(self) -> None:は

returnで何も返さない

ことを示しています。

 説明
-> None は型ヒントと呼ばれるもので、読み手や開発者に対して関数のインターフェース（入力と出力の型）を示すことができます。
このコードがあることで、この関数は何も返さないことが理解しやすくなります。
__init__は初期化関数で基本的にreturnを行わないため、エディタによっては自動で入力されることが...]]></summary>
        <author>
            <name>pomu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[random.sample()について]]></title>
        <id>https://zenn.dev/yuto_mo/articles/3afdcfba6c8b8c</id>
        <link href="https://zenn.dev/yuto_mo/articles/3afdcfba6c8b8c"/>
        <updated>2023-09-18T00:39:33.000Z</updated>
        <summary type="html"><![CDATA[今回はrandom.sample()について解説します。

 random.sample()とは？
random.sample()は

ランダムな要素を指定した数だけ取り出して、新しいリストとして返す

操作です。
指定は random.sample(元の配列, 取り出す個数) の形式です。
具体的な使い方をコードで見ていきましょう。

 使い方
例コード
import random

# サンプルとなるリスト
data_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# data_listからランダムに3つの要素を取り出す
sampled_list = ...]]></summary>
        <author>
            <name>pomu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[USBカメラとGoogle Sitesを使ったリモートモニタリングの実装]]></title>
        <id>https://zenn.dev/kamorei/articles/cloudcam-googlesite</id>
        <link href="https://zenn.dev/kamorei/articles/cloudcam-googlesite"/>
        <updated>2023-09-17T21:20:34.000Z</updated>
        <summary type="html"><![CDATA[概略
USBカメラで定期的に撮影した画像をGoogle Driveにアップロードし、Google Sitesで表示することで、リモートモニタリングを実現します。
Google Sitesであればアクセス制限も利用でき、スマホからも確認できるため、セキュリティカメラとしても利用できます。

 システム構成
システムの流れは以下の通りです。


USBカメラを利用し画像を撮影し、保存する
撮影した画像をPyDrive2を利用しGoogle Driveにアップロードする
Google Sites内にHTMLを埋め込み、Google Driveにアップロードした画像を表示する
Google ...]]></summary>
        <author>
            <name>Kamorei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[aws lambda(python)に最適なlogging classの作成]]></title>
        <id>https://zenn.dev/matsua_ant/articles/5665cea0cb04ee</id>
        <link href="https://zenn.dev/matsua_ant/articles/5665cea0cb04ee"/>
        <updated>2023-09-17T12:37:03.000Z</updated>
        <summary type="html"><![CDATA[概要・背景
aws lambda(python)で関数をいくつか作成しています。
毎度、関数の作成時にloggingの処理を入れるのが面倒でclass化したい思いが膨らんできました。
でもaws lambdaはcloud watch logsへのログ出力があるためfile出力はできません。
webでの参考になるサイトなどから学習し個人的にいい感じの範囲で共通化＆class化しました。

 作成したクラス

Logging_Class.py
import logging

#コメントアウトのフォーマットは全項目出力版フォーマット
#LOG_FORMAT = '%(asctime)s -...]]></summary>
        <author>
            <name>ちゃーて松島</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[エンジニアなのにAudible入ってないの？]]></title>
        <id>https://zenn.dev/raio/articles/685a2cf40df840</id>
        <link href="https://zenn.dev/raio/articles/685a2cf40df840"/>
        <updated>2023-09-17T11:21:38.000Z</updated>
        <summary type="html"><![CDATA[はじめに
みなさん、こんにちは。高校生エンジニアのRaioです🧑🏻‍💻
平日は公立高校に通いながら、休日は放課後はIT企業のエンジニアとして働いています。
今回の記事では、エンジニアがAudible入るべき理由を詳しく解説していきます。
僕も実際に使ってみて、飛躍的に技術に関する知識が増えたのでおすすめです👍🏻
ご興味ある方は、是非最後までご覧ください！

 Audibleとは？
Audible（オーディブル）は、書籍を朗読した音声コンテンツを配信しているサービスで、一般的には「聴く読書 」などとも呼ばれています。
通常の読書とは異なり、書籍の内容を音声によって聞くことができるため、...]]></summary>
        <author>
            <name>Raio｜高校生エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Next.js の静的サイトのビルド時に Python で外部 API から最新情報を取得する]]></title>
        <id>https://zenn.dev/yuta_extend/articles/c928d1d32d3f36</id>
        <link href="https://zenn.dev/yuta_extend/articles/c928d1d32d3f36"/>
        <updated>2023-09-17T03:39:39.000Z</updated>
        <summary type="html"><![CDATA[Next.js の静的サイトのビルド時に外部 API からデータを取り込んで加工してから、それをサイトのデータソースとして使うサンプルです。ホスティングサービスとして Cloudflare Pages を使っています。
1 日 1 回大規模データを取り込んで加工してその日のデータを静的サイトで高速表示したい、みたいなパターンを想定しています。

 1. Next.js のプロジェクトを作成する
まずは以下のコマンドで Next.js のプロジェクトを作成します。TypeScript オプションをつけておきます。
npx create-next-app --ts mysite
cd mys...]]></summary>
        <author>
            <name>YuTa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google Colaboratory 提出ファイルの管理]]></title>
        <id>https://zenn.dev/mkymdk/articles/5c369e6e74c606</id>
        <link href="https://zenn.dev/mkymdk/articles/5c369e6e74c606"/>
        <updated>2023-09-17T03:00:28.000Z</updated>
        <summary type="html"><![CDATA[Google Colaboratoryでの、提出ファイルの管理についてメモ書きとして残しておきます。
コンペ主催者が提供しているサンプルコードそのままだと、
'submission.csv'等の名前でcsvが生成されます。
しかし、csvが何を指しているのか忘れてしまったり、
いちいち書くのが少し手間というデメリットがあったりするので、
下記のようなコードで処理しています。
filenameにメモとして、残したい内容を記載してください。
メモには、model名や追加した特徴量等を書いています。
メモ_時間.csv(例：lgb_0917_1234.csv)という名前で、PCにダウンロードし...]]></summary>
        <author>
            <name>Mukaiyama</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[newaxisを解説]]></title>
        <id>https://zenn.dev/yuto_mo/articles/b5805f912bf549</id>
        <link href="https://zenn.dev/yuto_mo/articles/b5805f912bf549"/>
        <updated>2023-09-17T01:23:44.000Z</updated>
        <summary type="html"><![CDATA[今回はnumpyのnewaxisについて解説します。

 newaxisとは？
newaxisは

配列に次元を追加するためのインデックス

です。
具体的な使い方をコードで見ていきましょう。

 使い方
少し難しいですが、まずは「次元を追加する」という意味を掴みましょう。
import numpy as np

# 1次元配列
arr1 = np.array([1, 2, 3])
print(arr1)
print("Shape:", arr1.shape)
Shape: (3,)
# [1 2 3]
# Shape: (3,)

# 行ベクトルに変換（次元を追加）
row_vecto...]]></summary>
        <author>
            <name>pomu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[numpyのスライスについて解説]]></title>
        <id>https://zenn.dev/yuto_mo/articles/cb7ce477d70153</id>
        <link href="https://zenn.dev/yuto_mo/articles/cb7ce477d70153"/>
        <updated>2023-09-16T12:07:55.000Z</updated>
        <summary type="html"><![CDATA[今回はnumpyのスライスについて解説します。

 スライスとは？
スライスは

配列データなどから条件に一致する部分を抜き出す


操作です。
PythonのリストやNumPyの配列に対して、[start:stop:step] といった形でスライスを指定することができます。
コードで使い方を見ていきましょう。

 コード
numpyのスライスは多次元データにも適用できます。まずは1次元から見ていきます。
・1次元配列のスライス
import numpy as np

# 1次元配列
arr1 = np.array([0, 1, 2, 3, 4, 5])

# インデックス1から3までの...]]></summary>
        <author>
            <name>pomu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[エンジニアなのにKindleUnlimited入ってないの？]]></title>
        <id>https://zenn.dev/raio/articles/f22d767531fbc0</id>
        <link href="https://zenn.dev/raio/articles/f22d767531fbc0"/>
        <updated>2023-09-16T11:20:22.000Z</updated>
        <summary type="html"><![CDATA[皆さん、こんにちは。高校生エンジニアのRaioです🙌
公立高校に通いながら、放課後や休日はIT企業のエンジニアとして働いています。
https://zenn.dev/raio/articles/2478a66537c685
今回の記事では、日々進化する技術を追うエンジニアがKidnleUnlimitedに入るメリットを３つ解説しようと思います。
ご興味あれば、是非最後までご覧ください👀
↓KindleUnlimitedに入会したい方は画像をクリック↓
https://amzn.to/3OJt26v

 1ヶ月無料で技術書が読み放題
KindleUnlimitedを使えば、1ヶ月間無料で沢...]]></summary>
        <author>
            <name>Raio｜高校生エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[メタ強化学習を搭載したChatbotの実装方法]]></title>
        <id>https://zenn.dev/sumeragi_0258/articles/e20bed20533612</id>
        <link href="https://zenn.dev/sumeragi_0258/articles/e20bed20533612"/>
        <updated>2023-09-16T09:28:29.000Z</updated>
        <summary type="html"><![CDATA[GPT4を利用して、プロンプトエンジニアリングを中心としたなんちゃって実装をしました。
なお、記事の執筆は一部ChatGPTに手伝ってもらっています。

 メタ強化学習とは？
メタ強化学習（Meta-Reinforcement Learning、Meta-RL）は、AIモデルが新しいタスクや環境に対して迅速に適応できるように学習する技術です。伝統的な強化学習アプローチでは、モデルは特定のタスクに特化して学習しますが、新しいタスクに遭遇したとき、ゼロから学習しなければなりません。これに対して、メタ強化学習ではモデルは複数のタスクにわたって「学習する方法を学習」します。
このアプローチの利点...]]></summary>
        <author>
            <name>すめらぎ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Open InterpreterをローカルモデルでWSL上で使ってみる]]></title>
        <id>https://zenn.dev/bathtimefish/articles/4988990670ee7d</id>
        <link href="https://zenn.dev/bathtimefish/articles/4988990670ee7d"/>
        <updated>2023-09-16T08:45:38.000Z</updated>
        <summary type="html"><![CDATA[はじめに
やばいと評判のOpen Interpreter。GPT4で使うのが鉄板だと思いますがローカルPCにモデルをロードして使うこともできます。
ここではWindows11のWSL上にOpen InterpreterをインストールしてローカルのCode Llamaを使う方法を紹介します。
試した環境は以下のとおりです

Core i9-13900
64GB RAM
GeForce RTX 4090
Windows 11 Pro
WSL (Ubuntu 22.04 LTS)


 セットアップする
こちらのようにWSL上でCUDAが利用できるようになっているのが前提です。
Open ...]]></summary>
        <author>
            <name>bathtimefish</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】NumPyのmemmap()を使って、OpenCVの画像を他プロセスに受け渡すメモ]]></title>
        <id>https://zenn.dev/kazuhito/articles/800e1176270c43</id>
        <link href="https://zenn.dev/kazuhito/articles/800e1176270c43"/>
        <updated>2023-09-16T08:23:23.000Z</updated>
        <summary type="html"><![CDATA[NumPyのmemmap()を使って、OpenCVの画像を他プロセスに受け渡すメモです🦔
以下のようなイメージ↓

書き込み側のスクリプトからメモリマップドファイルに書き込んで、別スクリプトから読み込む↓

画像の受け渡しデータはメモリマップドファイルに書き込まれているので、書き込み側のスクリプトを終了しても、最後に書き込まれた画像が参照できる↓

再度、書き込み側のスクリプトを実行すればメモリマップドファイルに書き込みが再開するので、読み取り側の表示も更新が再開する↓

それぞれのスクリプトは以下です。
メモリマップドファイル書き込み側↓

cv-np-memmap-writer.py...]]></summary>
        <author>
            <name>kazuhito</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[selfについて解説]]></title>
        <id>https://zenn.dev/yuto_mo/articles/9fcf1089c0aade</id>
        <link href="https://zenn.dev/yuto_mo/articles/9fcf1089c0aade"/>
        <updated>2023-09-16T08:11:22.000Z</updated>
        <summary type="html"><![CDATA[今回はpythonのクラスで使用するselfについて解説します。

 selfとは
selfとは

インスタンス自体を指す特殊な変数

です。

 インスタンスとは？
インスタンスはクラスから生成されたオブジェクトのことを指します
これはコードで見た方が理解しやすいと思います。
class Car:
    # クラス内の関数をメソッドと呼ぶ
    # コンストラクタ（初期化メソッド）
    def __init__(self, color, size):
        self.color = color  # インスタンス変数colorを設定
        self.size...]]></summary>
        <author>
            <name>pomu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[東工大機械系院試をpythonで解いてみた[材料力学編]]]></title>
        <id>https://zenn.dev/porphyrio/articles/b687a5c757fe75</id>
        <link href="https://zenn.dev/porphyrio/articles/b687a5c757fe75"/>
        <updated>2023-09-16T08:02:47.000Z</updated>
        <summary type="html"><![CDATA[はじめに
東工大の機械系の院試の問題をpythonを使って解いてみます。今回は令和1年度 材料力学 を解いていきます。過去問は以下のページにあります。
https://www.titech.ac.jp/admissions/prospective-students/admissions/past-exam-papers

 問題



 問1
pythonを使う必要がないので普通に解きます。
(1)
①

\alpha L \Delta T

②

\alpha L \Delta T
(2)

\lambda=\varepsilon L=\frac{\sigma}{E}L=\frac...]]></summary>
        <author>
            <name>porphyrio</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ブラウザを作ろう]]></title>
        <id>https://zenn.dev/ninnin324/books/64557f0881ce31</id>
        <link href="https://zenn.dev/ninnin324/books/64557f0881ce31"/>
        <updated>2023-09-16T04:30:08.000Z</updated>
        <summary type="html"><![CDATA[短いコードで簡単なブラウザを作ります]]></summary>
        <author>
            <name>にんにん324</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[自社開発したい人必見！自社開発企業に転職できるサイトを紹介]]></title>
        <id>https://zenn.dev/raio/articles/5aa3d6f268cbbd</id>
        <link href="https://zenn.dev/raio/articles/5aa3d6f268cbbd"/>
        <updated>2023-09-15T11:25:33.000Z</updated>
        <summary type="html"><![CDATA[はじめに
みなさん、こんにちは。高校生エンジニアのRaioです🧑🏻‍💻
平日は公立高校に通いながら、放課後や休日はIT企業のエンジニアとして働いています！
今回の記事では、自社開発したい人に向けた自社開発企業に転職出来るサイトを紹介します🗣️

自社開発したい
IT転職したい
今より収入を上げたい

こんな方には、おすすめの記事です🥳
ご興味のある方は、是非最後までご覧ください！

 クラウドリンクとは？
みなさん、クラウドリンクはご存知ですか？
クラウドリンクは株式会社Cloud Linkが運営している転職エージェントです。
特に自社開発系の求人に特化しています。
自社開発といえば...]]></summary>
        <author>
            <name>Raio｜高校生エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ryeでととのう]]></title>
        <id>https://zenn.dev/killy/articles/fc44464c6eb62e</id>
        <link href="https://zenn.dev/killy/articles/fc44464c6eb62e"/>
        <updated>2023-09-15T08:51:57.000Z</updated>
        <summary type="html"><![CDATA[Pythonととのってない
Pythonってライブラリとpython自体の管理が非常に大変です
これまでに数多のパッケージングツールや仮想環境ツールが作られてきました
その度に我々は新しいものに飛びついては, 裏切られ...
とにかくPythonのエコシステムは無秩序に発展してきたといっても過言ではない

 Rye
上記のPythonのエコシステムを統一したいという気持ちで生まれた、らしい
Flaskなどで有名な@mitsuhiko氏が作者である。
https://github.com/mitsuhiko/rye?ref=ground-reality.ghost.io
Rust製なの...]]></summary>
        <author>
            <name>代理構成体</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[RecBoleを使ってみよう4　モデルの学習]]></title>
        <id>https://zenn.dev/kentoo1/articles/7bc48cb54c55a2</id>
        <link href="https://zenn.dev/kentoo1/articles/7bc48cb54c55a2"/>
        <updated>2023-09-15T08:34:45.000Z</updated>
        <summary type="html"><![CDATA[概要
今回はモデルの学習と精度の検証を行います。
データセットは第2回で用意したAnimeにします。複数のモデルの学習を行い、精度を比較することを目標とします。

 run_recbole関数
初回にも使ったrun_recboleは、次の全てを実行してくれるオールインワンな関数です。

データの読み込み
データの分割（デフォルトでは8:1:1に分割します）

学習データ
検証データ
テストデータ


学習データと検証データを用いたモデルの学習
（学習データで学習し、検証データの精度を見て、改善が見られなくなってきたら学習を早期停止します）
テストデータの精度を算出

今回はただ動かす...]]></summary>
        <author>
            <name>ケントゥ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-306｜B - Base 2]]></title>
        <id>https://zenn.dev/hyperdb/articles/b75844912efd6e</id>
        <link href="https://zenn.dev/hyperdb/articles/b75844912efd6e"/>
        <updated>2023-09-15T04:09:36.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-306 B - Base 2



 提出結果
def getIntList():
    return list(map(int, input().split()))


def main():
    a = getIntList()

    r = 0
    for i in range(len(a)):
        if a[i] == 0:
            continue
        r += (2 ** i)

    print(r)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-306｜A - Echo]]></title>
        <id>https://zenn.dev/hyperdb/articles/6bf2e05726cd46</id>
        <link href="https://zenn.dev/hyperdb/articles/6bf2e05726cd46"/>
        <updated>2023-09-15T04:09:36.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-306 A - Echo



 提出結果
def getInt():
    return int(input())


def getString():
    return input()


def main():
    n = getInt()
    s = list(getString())
    t = ''

    for c in s:
        t += (c * 2)

    print(t)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub Pages で Sphinxしたい]]></title>
        <id>https://zenn.dev/shotakaha/articles/1df7d807137f61</id>
        <link href="https://zenn.dev/shotakaha/articles/1df7d807137f61"/>
        <updated>2023-09-14T14:50:32.000Z</updated>
        <summary type="html"><![CDATA[GitHub Actions
Poetry + SphinxでGitHub PagesできるGitHub Actionsです。

 .github/workflows/static.yml
# Simple workflow for deploying static content to GitHub Pages
name: Deploy Sphinx Document to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you...]]></summary>
        <author>
            <name>shotakaha</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Raspberry Pi 4でのlibrosaのインストールエラー回避方法]]></title>
        <id>https://zenn.dev/bathtimefish/articles/401519803660bb</id>
        <link href="https://zenn.dev/bathtimefish/articles/401519803660bb"/>
        <updated>2023-09-14T13:37:02.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Pythonの音声処理ライブラリlibrosaがRaspberry Pi 4でインストールエラーが発生したので回避方法を模索。いろいろやってたらなんとかなったのでメモっときます。

 環境

Raspberry Pi 4B 8GB
uname -a
Linux raspberrypi 6.1.21-v8+ #1642 SMP PREEMPT Mon Apr  3 17:24:16 BST 2023 aarch64 GNU/Linux
Python 3.9.2
pip 20.3.4


 回避方法
sudo apt install -y llvm libatlas3-base...]]></summary>
        <author>
            <name>bathtimefish</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Qiskit で遊んでみる (20) — Qiskit Optimization での QAOA]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-qiskit20</id>
        <link href="https://zenn.dev/derwind/articles/dwd-qiskit20"/>
        <updated>2023-09-14T12:01:49.000Z</updated>
        <summary type="html"><![CDATA[目的
この記事は大分昔に書いた記事 がベースだったりする[1]。
この時はちょっと Qiskit の古い API を使ったのだが、今回はそれも含めて最新の API にまでアップデートしたい。なお、実用性は狙いではない。
量子コンピューティングの基礎を手を使って学ぶ上での良書に「IBM Quantumで学ぶ量子コンピュータ」があるが、同書 pp.203-210 に掲載された QAOA のコードは新しい Qiskit では動かない。Qiskit Aqua という Deprecated になってしまったパッケージを使っているからである。このコードをQiskit 0.44.0 以降で動くとこ...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【2023年9月】0円で読めるPythonの技術書5選]]></title>
        <id>https://zenn.dev/raio/articles/bcdacfbf43bcc8</id>
        <link href="https://zenn.dev/raio/articles/bcdacfbf43bcc8"/>
        <updated>2023-09-14T11:52:30.000Z</updated>
        <summary type="html"><![CDATA[はじめに
みなさん、こんにちは。高校生エンジニアのRaioです！
平日は公立高校に通いながら、放課後や休日はIT企業のエンジニアとして働いています🧑🏻‍💻
↓筆者について↓
https://qiita.com/Raio14f/items/ef0fb67685b36298bcb0
今回の記事では、0円で読めるPythonの技術書5選を紹介します！
無料で読む方法も紹介してるので、是非最後まで見て頂けると幸いです👍🏻

 技術書を無料で読む方法
KindleUnlimitedを使うことで、沢山の技術書を無料で何冊でも読むことが可能です🙌

200万冊以上の書籍が何冊でも読み放題
月額98...]]></summary>
        <author>
            <name>Raio｜高校生エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[matplotlibの fig, axで凡例がはみ出る時の対処法]]></title>
        <id>https://zenn.dev/apo_zenn/articles/1c2a9c0a92a6c6</id>
        <link href="https://zenn.dev/apo_zenn/articles/1c2a9c0a92a6c6"/>
        <updated>2023-09-14T08:58:58.000Z</updated>
        <summary type="html"><![CDATA[このように凡例がはみ出してしまう場合

以下を最後に追加する。
fig.tight_layout() 

 修正後

無事、凡例がFigure内に収められる

 plot.を使っている人 (pyplot使用者の場合)
plt.tihgt_layout()
でいけます。

 例
import numpy as np
import matplotlib.pyplot as plt

x = np.arange(0,10,0.1)
y = np.sin(x)

# 表示
fig, ax = plt.subplots(1,1,figsize=(6,4))
ax.set_title("SIN", ...]]></summary>
        <author>
            <name>apo_zenn</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pyenvとvenvを利用したPython環境の構築（Windows、macOS対応）]]></title>
        <id>https://zenn.dev/ryotajin/articles/19-build-python-by-pyenv-venv</id>
        <link href="https://zenn.dev/ryotajin/articles/19-build-python-by-pyenv-venv"/>
        <updated>2023-09-14T07:23:56.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Pythonを始める上で最初につまずくのは実行環境の構築だと思います。私もずいぶん苦労した思い出があります。
さらに頭を悩ませるのがバージョン管理です。ライブラリのバージョンはもちろん、Python自体のバージョンも管理の必要が出てきます。自分でライブラリを作るようになるとこの必要性を強く感じます。
そこで今回はpyenvとvenvを併用して、Pythonとライブラリのバージョンを管理しつつ環境を構築する方法について解説します。
本記事の想定はPythonはある程度使ったことがあって、バージョン管理をきちんとやりたくなってきた人です。また、GitHubの操作がたびたび出てく...]]></summary>
        <author>
            <name>riu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-305｜A - Water Station]]></title>
        <id>https://zenn.dev/hyperdb/articles/f9734172210f8e</id>
        <link href="https://zenn.dev/hyperdb/articles/f9734172210f8e"/>
        <updated>2023-09-14T04:40:39.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-305 A - Water Station



 提出結果
def getInt():
    return int(input())


def main():
    n = getInt()

    p = n // 5

    print(p * 5 if n % 5 < 3 else (p + 1) * 5)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-305｜B - ABCDEFG]]></title>
        <id>https://zenn.dev/hyperdb/articles/d1e5c40c4ea5ac</id>
        <link href="https://zenn.dev/hyperdb/articles/d1e5c40c4ea5ac"/>
        <updated>2023-09-14T04:40:38.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-305 B - ABCDEFG



 提出結果
def getStringMap():
    return input().split()


def main():
    p, q = getStringMap()
    d = [3, 1, 4, 1, 5, 9]
    s = ord(p) - ord('A')
    e = ord(q) - ord('A')

    print(abs(sum(d[:s]) - sum(d[:e])))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CAEのためのpython5(6面視画像をエクセルに貼り付け)]]></title>
        <id>https://zenn.dev/cae_taka/articles/421352fa73d4c7</id>
        <link href="https://zenn.dev/cae_taka/articles/421352fa73d4c7"/>
        <updated>2023-09-14T02:51:54.000Z</updated>
        <summary type="html"><![CDATA[動機
CAEの結果（形状やコンター図など）から資料を作成する機会6面視の画像を作成することが、
多くあると思います。（僕は多かったです。）
この作業、やってることは単純ですが案外やってみるとめんどくさいです。
こういう作業は、自動化ですね。
ちょっと長くなりそうなので2回に分けて書いていきます。

 今回やること
1回目では、6面視の画像を作成しました。今回は作成した画像を新規作成したエクセルに貼り付けていきます。

 プログラムの説明

まずは、エクセルを操作するために。openpyxlとPillowをインストールします。

pip install openpyxl
pip ins...]]></summary>
        <author>
            <name>Taka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[LLMのファインチューニングで事実の学習ができないのは本当か？ちょっと実験してみた]]></title>
        <id>https://zenn.dev/ohtaman/articles/llm_finetune_lora</id>
        <link href="https://zenn.dev/ohtaman/articles/llm_finetune_lora"/>
        <updated>2023-09-13T21:19:25.000Z</updated>
        <summary type="html"><![CDATA[三行要約

LLM のファインチューニングでは事実の学習ができないという話があったので、事実の学習の例として、シェイクスピアのRomeoをBobに置き換える実験を行った
実験では、訓練対象とする層による結果の違いを確認した。アテンション層のみを訓練した場合は、Bobへの置き換えはできなかった。一方、全結合層を含めて訓練した場合は、学習率を調整するとBobへの置き換えができた
ファインチューニングが事実の学習に向いているかはさておき、工夫次第でファインチューニングも事実の学習に利用できる可能性はある


 背景
先月 ChatGPT(GPT-3.5 Turbo) のファインチューニング...]]></summary>
        <author>
            <name>ohtaman</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[poetryでpythonのpackageを管理する]]></title>
        <id>https://zenn.dev/knao124/articles/230913-poetry</id>
        <link href="https://zenn.dev/knao124/articles/230913-poetry"/>
        <updated>2023-09-13T15:02:45.000Z</updated>
        <summary type="html"><![CDATA[poetryとは

venv + .lockでバージョン統一できるpip
高速（遅くない）
https://python-poetry.org/docs/


 install
以下参考

https://python-poetry.org/docs/


 使い方
projectでpoetryを使い始める

$ poetry init

なにかpackageをinstallしたいとき

$ poetry add <package_name>

dev環境のみでいいとき

$ poetry add --dev <package_name>

.lockファイル...]]></summary>
        <author>
            <name>knao124</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python、英文引用】機械学習用ライブラリ10選]]></title>
        <id>https://zenn.dev/tunaproducts/articles/5e30986540bbca</id>
        <link href="https://zenn.dev/tunaproducts/articles/5e30986540bbca"/>
        <updated>2023-09-13T12:27:43.000Z</updated>
        <summary type="html"><![CDATA[!
気になる英文記事を引用して記事を書いてみました。

機械学習、ディープラーニングには、
よくPython言語が用いられますが、
その理由の一つとして、
「豊富なライブラリが存在する」 ということが、
挙げられると思います。
引用元の記事は、
タイトルが
「Top 10 Python Machine Learning Libraries in 2022
(2022年のPythonの機械学習ライブラリ１０選)」
とありましたので、
引用しながら2023年の機械学習のライブラリについて考えてみます。

With a Python-based machine learning librar...]]></summary>
        <author>
            <name>tunaProductsTech(つなぷろテック)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pandas 演習 100]]></title>
        <id>https://zenn.dev/bbled/books/pandas_book_2023</id>
        <link href="https://zenn.dev/bbled/books/pandas_book_2023"/>
        <updated>2023-09-13T10:52:52.000Z</updated>
        <summary type="html"><![CDATA[Pandas を使ったデータ処理の演習問題とその回答集です。 対象の読者としては、python の基本的な文法を理解しており、Google Colabolatory もしくはローカルの python 実行環境を使って python のコードを実行することができる方を 想定しています]]></summary>
        <author>
            <name>超Ｌチカ団編集局</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-304｜A - First Player]]></title>
        <id>https://zenn.dev/hyperdb/articles/b042faf0eb933f</id>
        <link href="https://zenn.dev/hyperdb/articles/b042faf0eb933f"/>
        <updated>2023-09-13T07:44:20.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-304 A - First Player



 提出結果
def getInt():
    return int(input())


def getStringListRow(N):
    return [list(input().split()) for _ in range(N)]


def main():
    n = getInt()
    sa = getStringListRow(n)

    s = []
    a = []
    for x, y in sa:
        s.append(x)
        a.ap...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-304｜B - Subscribers]]></title>
        <id>https://zenn.dev/hyperdb/articles/937d0041cfeffe</id>
        <link href="https://zenn.dev/hyperdb/articles/937d0041cfeffe"/>
        <updated>2023-09-13T07:44:19.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-304 B - Subscribers



 提出結果
def getInt():
    return int(input())


def main():
    n = getInt()
    s = str(n)

    print(s[0:3] + '0' * (len(s) - 3))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Azure Databricks で English SDK for Apache Spark を使ってデータ分析を効率化する]]></title>
        <id>https://zenn.dev/microsoft/articles/8f77b3d3dd1a12</id>
        <link href="https://zenn.dev/microsoft/articles/8f77b3d3dd1a12"/>
        <updated>2023-09-13T06:06:16.000Z</updated>
        <summary type="html"><![CDATA[はじめに
2023 年 6 月の Data + AI Summit で発表された English SDK for Apache Spark (pyspark-ai) の概要と、Azure Databricks で pyspark-ai のエンジンに Azure OpenAI Service を指定してデータ分析を行う方法をまとめました。

 English SDK for Apache Spark (pyspark-ai) とは

 概要
English SDK for Apache Spark (pyspark-ai) は Spark 開発をアシストしてくれる、Copilot 的な...]]></summary>
        <author>
            <name>ryohtaka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Microsoftの小型で高性能なLLM「phi-1.5」を試す]]></title>
        <id>https://zenn.dev/roboin/articles/a02e784daa0fde</id>
        <link href="https://zenn.dev/roboin/articles/a02e784daa0fde"/>
        <updated>2023-09-13T04:11:13.000Z</updated>
        <summary type="html"><![CDATA[phi-1.5とは？
phi-1.5は、Microsoftがリリースした13億（1.3B）パラメーターのLLMです。Microsoftは6月に、phi-1を発表しており、phi-1.5はその進化版です。
https://huggingface.co/microsoft/phi-1_5
たったの13億パラメーターしかないにも関わらず、常識、言語理解、論理的推論をテストするベンチマークで、100億パラメーター以下のモデルの中でほぼ最先端の性能を示すそうです。
学習に「教科書品質」のデータを用いることで、少ないパラメーター数で高い性能を実現しています。
phi-1.5は、安全性に関わる重要...]]></summary>
        <author>
            <name>ろぼいん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】緯度・経度から距離を算出する]]></title>
        <id>https://zenn.dev/robes/articles/b48d48aa2869fa</id>
        <link href="https://zenn.dev/robes/articles/b48d48aa2869fa"/>
        <updated>2023-09-12T21:53:57.000Z</updated>
        <summary type="html"><![CDATA[Pythonで緯度・経度から距離を算出する方法についてご紹介します。
機械学習でも役にたつスキルだと思います。

 1.計算式
弧度法のラジアンを単位とした緯度を\phi、経度を\lambdaとします。
地点Aの緯度・経度を\phi_1・\lambda_1、
地点Bの緯度・経度を\phi_2・\lambda_2とします。
また、地球の半径は6,371kmとします。
この時、地点Aと地点Bの距離は、以下の公式で計算されます。

distance = 6371 \times arccos(sin\phi_1 \times sin\phi_2 + cos\phi_1 \times cos\ph...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tkinter csvフォルダ選択GUI]]></title>
        <id>https://zenn.dev/takiser/articles/e164ff093a5b66</id>
        <link href="https://zenn.dev/takiser/articles/e164ff093a5b66"/>
        <updated>2023-09-12T15:06:30.000Z</updated>
        <summary type="html"><![CDATA[import tkinter as tk
from tkinter import ttk
from tkinter import filedialog
from pathlib import Path


class DataModel:
    def __init__(self):
        self.selected_folder = None
        self.selected_files = []

    def set_selected_folder(self, folder_path):
        self.selected_folder = fold...]]></summary>
        <author>
            <name>takiser</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python　勉強会]]></title>
        <id>https://zenn.dev/ssym/books/8e89577a4eb6fb</id>
        <link href="https://zenn.dev/ssym/books/8e89577a4eb6fb"/>
        <updated>2023-09-12T14:33:52.000Z</updated>
        <summary type="html"><![CDATA[これは、Pythonを学習・復習するための個人的な備忘録です]]></summary>
        <author>
            <name>SSYM</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[`append`と`extend`の違いを知らないと、思わぬバグを生むことになる]]></title>
        <id>https://zenn.dev/ykesamaru/articles/73958e64c226bb</id>
        <link href="https://zenn.dev/ykesamaru/articles/73958e64c226bb"/>
        <updated>2023-09-12T10:04:40.000Z</updated>
        <summary type="html"><![CDATA[Pythonにおけるappendとextendについて、使い方を誤ると思わぬバグを生むことになります。この記事ではappendとextendの基本的な使い方と、面倒くさいことを考えずに済むように、ラッパー関数を作成し、最後に再利用可能なモジュール化を行います。


基本事項

appendとextendの基本的な動作

1. リストに要素を追加する場合

正しい使い方:
誤用:



2. リストにリストを追加する場合

正しい使い方:
誤用:



3. 上記をforループで使う場合

正しい使い方:
誤用:



4. np.ndarrayをリストに追加する場合

正しい使い方:
...]]></summary>
        <author>
            <name>yKesamaru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CAEのためのPython4(6面視画像の自動作成1)]]></title>
        <id>https://zenn.dev/cae_taka/articles/e0c85896c66d95</id>
        <link href="https://zenn.dev/cae_taka/articles/e0c85896c66d95"/>
        <updated>2023-09-12T06:18:39.000Z</updated>
        <summary type="html"><![CDATA[動機
CAEの結果（形状やコンター図など）から資料を作成する機会6面視の画像を作成することが、
多くあると思います。（僕は多かったです。）
この作業、やってることは単純ですが案外やってみるとめんどくさいです。
こういう作業は、自動化ですね。
ちょっと長くなりそうなので2回に分けて書いていきます。

 今回やること
1回目は、ファイルをドラック＆ドロップすると6面視の画像が作成されるところまでやります。
今回は、LSTC社（現在は、Ansys社に買収）が作成したLs-Dyna用のフリープリポストである
lsprepostを自動的に操作して画像を作成します。
※私が使用しているバージョン...]]></summary>
        <author>
            <name>Taka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-303｜A - Similar String]]></title>
        <id>https://zenn.dev/hyperdb/articles/b050ac627bfe63</id>
        <link href="https://zenn.dev/hyperdb/articles/b050ac627bfe63"/>
        <updated>2023-09-12T04:38:37.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-303 A - Similar String



 提出結果
def getInt():
    return int(input())


def getStringList():
    return list(input())


def sc(x, y):
    r = False
    if x == y:
        r = True
    elif (x == '1' and y == 'l') or (x == 'l' and y == '1'):
        r = True
    elif (x == '0' and y ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-303｜B - Discord]]></title>
        <id>https://zenn.dev/hyperdb/articles/03c9e079fbff32</id>
        <link href="https://zenn.dev/hyperdb/articles/03c9e079fbff32"/>
        <updated>2023-09-12T04:38:37.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-303 B - Discord



 提出結果
import math


def getIntMap():
    return map(int, input().split())


def getIntListRow(N):
    return [list(map(int, input().split())) for _ in range(N)]


def main():
    n, m = getIntMap()
    a = getIntListRow(m)
    c = []

    for b in a:
        for i...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Flask】初期化時の一つの謎を解明したので解説【無駄知識】]]></title>
        <id>https://zenn.dev/laplace_daemon/articles/598f91c76bb045</id>
        <link href="https://zenn.dev/laplace_daemon/articles/598f91c76bb045"/>
        <updated>2023-09-11T15:29:32.000Z</updated>
        <summary type="html"><![CDATA[Flaskを使ってアプリケーションを作成している時に、ちょっとした疑問が浮かんだ箇所がありまして、その疑問を調査によって解消することができたので備忘録として残しておきます。

 実行環境
OS: Ubuntu 18.04.2 LTS
python: 3.6.8
Flask: 1.1.1

 疑問の内容
以下のFlaskアプリケーションを起動させるファイルを実行してみた時に事件は起こりました。
from flask import Flask
app = Flask(__name__)
@app.route('/')
def hello():
    return "Hello World!...]]></summary>
        <author>
            <name>Laplace</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python で Tellus の衛星データを検索・取得する]]></title>
        <id>https://zenn.dev/sankichi92/articles/2023-09-11_tellus-traveler</id>
        <link href="https://zenn.dev/sankichi92/articles/2023-09-11_tellus-traveler"/>
        <updated>2023-09-11T15:00:05.000Z</updated>
        <summary type="html"><![CDATA[この記事では、tellus-traveler という Python パッケージを使って、衛星データプラットフォーム Tellus の衛星データを検索・取得する方法を紹介します。
tellus-traveler は pip を使ってインストールできます。
$ pip install tellus-traveler

 API トークンをセットする
tellus-traveler は Tellus Satellite Data Traveler API を利用します。
この API の利用には API トークンが必要なため、Tellus にログインし、https://www.tellusxd...]]></summary>
        <author>
            <name>Takahiro Miyoshi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonでWebAPI作ってみた]]></title>
        <id>https://zenn.dev/riontajima/articles/0aab45b7c99c00</id>
        <link href="https://zenn.dev/riontajima/articles/0aab45b7c99c00"/>
        <updated>2023-09-11T12:31:25.000Z</updated>
        <summary type="html"><![CDATA[はじめに
はじめまして。新卒エンジニアです。
PythonでAPIを作る経験をしてみたい、そう感じ今回記事を書かせていただきました。

 REST API
APIを作成するにあたって、REST APIについて学習しました。
https://tech.012grp.co.jp/entry/rest_api_basics
上記のサイトは、一つ一つかみ砕いて説明がしてあり、とても分かりやすかったです。
サイトの内容を簡単にまとめると

RESTは「RESTの4原則に沿ったシンプルな設計思想」のことで、
　　①統一インターフェース
　　②アドレス可能性
　　③接続性
　　④ステートレス性
　...]]></summary>
        <author>
            <name>田島利恩</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[住所正規化のデモ機能を作ったので、日本のヤバい住所を入力してみた]]></title>
        <id>https://zenn.dev/sikkim/articles/bc86fbcac3a9fd</id>
        <link href="https://zenn.dev/sikkim/articles/bc86fbcac3a9fd"/>
        <updated>2023-09-11T08:04:36.000Z</updated>
        <summary type="html"><![CDATA[!
注意：この記事はかなり長いです。


 はじめに
数か月ほど前、住所の正規化が話題になりました。こちらの記事が特に有名ですね。
https://note.com/inuro/n/n7ec7cf15cf9c
関連して、こちらの記事も話題になりました。
https://yoshinorinie.hatenablog.com/entry/2023/06/09/091804
当時はほかにも色々な人が日本のヤバい住所の例をあげてくれて、とても楽しかったです。
実は弊社でもAddressianという住所正規化サービスを提供しています。初めて目にする変わった住所を見かけたら、とりあえず自社のAPI...]]></summary>
        <author>
            <name>TAKAHASHI Taro</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-302｜A - Attack]]></title>
        <id>https://zenn.dev/hyperdb/articles/bfd92e1cea3b76</id>
        <link href="https://zenn.dev/hyperdb/articles/bfd92e1cea3b76"/>
        <updated>2023-09-11T05:26:01.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-302 A - Attack



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    a, b = getIntMap()

    c = a // b

    print(c if a % b == 0 else c + 1)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-302｜B - Find snuke]]></title>
        <id>https://zenn.dev/hyperdb/articles/af130ee6bf2127</id>
        <link href="https://zenn.dev/hyperdb/articles/af130ee6bf2127"/>
        <updated>2023-09-11T05:26:00.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-302 B - Find snuke



 提出結果
def getIntMap():
    return map(int, input().split())


def getStringListRow(N):
    return [list(input()) for _ in range(N)]


def chk(l, s):
    p = [[0, -1], [1, -1], [1, 0], [1, 1], [0, 1], [-1, 1], [-1, 0], [-1, -1]]

    for i in range(len(p)):
    ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで大文字と小文字の変換と速度比較]]></title>
        <id>https://zenn.dev/nii/articles/lower-upper-comparison</id>
        <link href="https://zenn.dev/nii/articles/lower-upper-comparison"/>
        <updated>2023-09-11T04:56:30.000Z</updated>
        <summary type="html"><![CDATA[概要
Pythonの文字列で、"Python"のような文字列を"python”に変換したいことがあります。
本記事では、大文字や小文字を判定する方法や変換する方法をまとめました。
また、大量の文字列に対して変換する際の速度比較も実施しました。

 変換方法

 大文字から小文字に変換
str型のlower()を使用します。
https://docs.python.org/ja/3/library/stdtypes.html#str.lower
upper_str = "THIS IS UPPERCASE"
to_lower_str = upper_str.lower()

print...]]></summary>
        <author>
            <name>nii</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[日本語 NLP リポジトリ分類データセットを公開しました！]]></title>
        <id>https://zenn.dev/taishii/articles/04964001eb644d</id>
        <link href="https://zenn.dev/taishii/articles/04964001eb644d"/>
        <updated>2023-09-11T03:31:34.000Z</updated>
        <summary type="html"><![CDATA[Huggingface Datasets で利用可能なテキスト分類用データセットを公開しました🤗
このデータセットは、GitHub リポジトリに対して日本語の自然言語処理（NLP）に関連するか否かのラベルが付与されています。
さらにベースライン用のモデルも公開しましたので、大規模言語モデルの性能評価の比較に活用いただければと考えています。
この記事では、データセットの詳細、利用方法やベースラインモデルのエラー分析の結果を紹介します。
https://huggingface.co/datasets/taishi-i/awesome-japanese-nlp-classification-d...]]></summary>
        <author>
            <name>taishi-i</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのenumerateの挙動を理解する]]></title>
        <id>https://zenn.dev/nakurei/articles/understand-python-enumerate</id>
        <link href="https://zenn.dev/nakurei/articles/understand-python-enumerate"/>
        <updated>2023-09-10T23:37:14.000Z</updated>
        <summary type="html"><![CDATA[これはなに
Effective Python 第2版の項目7「rangeではなくenumerateを使おう」において、下記の記述があった。

enumerateは、遅延評価ジェネレータでイテレータをラップします。
enumerateは、ループのインデックスとイテレータの次の値の対をyieldします。

この記述の意味がさっぱりわからなかったので調べた。

 そもそもenumerateとは
enumerateはPythonの組み込み関数のひとつである。
enumerate(iterable, start=0)

 引数



引数
名前
渡すもの




第1引数
iterable
シ...]]></summary>
        <author>
            <name>NakuRei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[plt3d]]></title>
        <id>https://zenn.dev/takiser/articles/c64fc753129791</id>
        <link href="https://zenn.dev/takiser/articles/c64fc753129791"/>
        <updated>2023-09-10T14:08:08.000Z</updated>
        <summary type="html"><![CDATA[import pandas as pd
import matplotlib.pyplot as plt
from pathlib import Path
from mpl_toolkits.mplot3d import Axes3D


class SingleLotDataModel:
    def __init__(self, csvPath):
        self.timeFromStart = "TimeFromStart"
        self.timeFromPlane = "TimeFromPlane"
        self.timeFromLayer = ...]]></summary>
        <author>
            <name>takiser</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【AI】AIの本を読んだのでレビュー(その2:文系向けのAI関連本)]]></title>
        <id>https://zenn.dev/tunaproducts/articles/a04e86c050f50a</id>
        <link href="https://zenn.dev/tunaproducts/articles/a04e86c050f50a"/>
        <updated>2023-09-10T13:55:19.000Z</updated>
        <summary type="html"><![CDATA[!
文系向けに書かれたAIの本を読んでみたので、レビューを書きました。内容のネタバレはしないように配慮いたします。


 読んだ本

タイトル：文系AI人材になる
著者：野口竜司

https://www.amazon.co.jp/文系ＡＩ人材になる―統計・プログラム知識は不要-野口-竜司-ebook/dp/B0828D1TYR/ref=sr_1_1?adgrpid=134580030913&gclid=CjwKCAiA3KefBhByEiwAi2LDHBAsdVGfPZ_NywYgCVA4ENmaOVZwTkqyaE6S4I4u27cFWBUnxS2yGxoCqLwQAvD_...]]></summary>
        <author>
            <name>tunaProductsTech(つなぷろテック)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Apache AirflowのExponential Backoffを読み解く]]></title>
        <id>https://zenn.dev/c6tower/articles/c43e9f2fa93f5a</id>
        <link href="https://zenn.dev/c6tower/articles/c43e9f2fa93f5a"/>
        <updated>2023-09-10T12:37:40.000Z</updated>
        <summary type="html"><![CDATA[要約

Apache AirflowのDAGには標準でExponential Backoff And Jitterが用意されている
2.5.3以前と2.6.0以降でretry間隔の最大値に変更があった模様


 前提

 Airflowのversionは？
2.5.3。
一部、2.6.0の話も出てくる。
執筆時の最新バージョンは2.7.1。

 Exponential Backoffとは？
しっかりと理解したい人向け: AWSのブログがオススメ
https://aws.amazon.com/jp/blogs/architecture/exponential-backoff-and-j...]]></summary>
        <author>
            <name>み</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Transformersライブラリで自然言語生成（NLG）を簡単に！自作ラッパークラスの作成と使い方]]></title>
        <id>https://zenn.dev/sergicalsix/articles/5f58fecdb8411d</id>
        <link href="https://zenn.dev/sergicalsix/articles/5f58fecdb8411d"/>
        <updated>2023-09-10T10:50:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
自然言語生成（Natural Language Generation, NLG）は、AIと自然言語処理（NLP）の興味深い分野の一つです。Hugging FaceのTransformersライブラリは、このようなタスクを簡単に行うための多くのツールを提供しています。
この記事では、Transformersライブラリを使って自然言語生成を簡単に行うための自作ラッパークラスを紹介します。
自作ラッパークラスの特徴は以下です。

簡単な初期化: モデル名を指定するだけで、tokenizerとmodelが自動的に初期化されます。
柔軟なオプション: エンコード、生成、デコードの各ス...]]></summary>
        <author>
            <name>sergicalsix</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[日本語に関連するunicodeの範囲一文字を指定する正規表現マッチオブジェクトを作成する関数の作成]]></title>
        <id>https://zenn.dev/shundeveloper/articles/b5cc85b4d1e7eb</id>
        <link href="https://zenn.dev/shundeveloper/articles/b5cc85b4d1e7eb"/>
        <updated>2023-09-10T10:33:54.000Z</updated>
        <summary type="html"><![CDATA[注意

ここで日本語に関連するとしているunicodeの範囲は以下とする.
unicode正規化(NFC)を使えば大体はカバーしていると思われるが, 足りない・入れて欲しい部分部分等があればコメントをお願いします.



hiragana (U+3040 to U+309F): Hiragana PDF


katakana (U+30A0 to U+30FF): Katakana PDF


katakana_half_width (U+FF65 to U+FF9F): Half-width Katakana PDF


katakana_phonetic_extensions (...]]></summary>
        <author>
            <name>Shun</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ガンマ補正を用いたリアルタイム映像の明るさ調整【Python】]]></title>
        <id>https://zenn.dev/blueman/articles/7faaae8e09e26d</id>
        <link href="https://zenn.dev/blueman/articles/7faaae8e09e26d"/>
        <updated>2023-09-10T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[この記事はQiitaの記事の転載です!!
Qiitaの記事はこちら!!
https://qiita.com/blueman/items/ebd7ff126704bcdbf93d


 目次
はじめに
実行環境
webカメラの幅と高さの取得方法
メインウィンドウのサイズの設定方法
リアルタイム映像の表示領域の設定方法
スライドバーで小数を扱う方法
スライドバーの設定方法
ガンマ補正の実装方法
ルックアップテーブルの作成方法
ガンマ補正の処理方法
リアルタイム画像のtkinterでの表示方法
定期的に処理を実行する方法
ソースコード
結果
まとめ

 はじめに
今回は、前回のTwitter(...]]></summary>
        <author>
            <name>ブルーマン</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Visitor]]></title>
        <id>https://zenn.dev/xxyyzz/articles/044dfe042c327e</id>
        <link href="https://zenn.dev/xxyyzz/articles/044dfe042c327e"/>
        <updated>2023-09-10T07:19:17.000Z</updated>
        <summary type="html"><![CDATA[Visitor パターンは、オブジェクトの構造からアルゴリズムを分離することで、構造が変更されない限り、新しい操作を追加できるようにするデザインパターンです。このパターンは、構造内の各要素に対して訪問者が実行する操作を表すことができる Visitor クラスを使用します。

 主要な構成要素:


Visitor (訪問者): 具体的な訪問者を表すクラスまたはインターフェース。

ConcreteVisitor (具体的な訪問者): 特定のアルゴリズムを実行するためのVisitorの具体的な実装。

Element (要素): Visitor クラスが訪問する要素のインターフェース。

...]]></summary>
        <author>
            <name>xxyyzz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Template Method]]></title>
        <id>https://zenn.dev/xxyyzz/articles/2d866877e5db55</id>
        <link href="https://zenn.dev/xxyyzz/articles/2d866877e5db55"/>
        <updated>2023-09-10T07:18:40.000Z</updated>
        <summary type="html"><![CDATA[Template Method パターンは、アルゴリズムの骨格を定義するが、一部のステップをサブクラスに委譲することでアルゴリズムの構造を変更することなく特定のステップをオーバーライドするデザインパターンです。

 主要な構成要素:


Abstract Class (抽象クラス): アルゴリズムの骨格を定義するテンプレートメソッドを持つクラス。このクラスは、オーバーライド可能な一部のステップを定義することもできます。

Concrete Class (具体クラス): 抽象クラスのメソッドをオーバーライドして具体的な実装を提供するクラス。


 例:
簡単な料理の手順を考えてみましょう。...]]></summary>
        <author>
            <name>xxyyzz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Strategy]]></title>
        <id>https://zenn.dev/xxyyzz/articles/c29bb8fd716323</id>
        <link href="https://zenn.dev/xxyyzz/articles/c29bb8fd716323"/>
        <updated>2023-09-10T07:18:01.000Z</updated>
        <summary type="html"><![CDATA[Strategy デザインパターンは、アルゴリズムのセットを定義し、それぞれのアルゴリズムをカプセル化するもので、これによりアルゴリズムを互いに独立して変更したり交換したりできます。
基本的には、アルゴリズムの実装の詳細を隠蔽しながら、クライアント側から異なるアルゴリズムや戦略を選択・交換する能力を提供します。

 Strategy パターンの具体的な例：ソートアルゴリズム
例として、異なる種類のソートアルゴリズムを適用するシステムを考えます。


Strategy (インターフェース/抽象クラス)
from abc import ABC, abstractmethod

class S...]]></summary>
        <author>
            <name>xxyyzz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[State]]></title>
        <id>https://zenn.dev/xxyyzz/articles/9f0eaa9f91f5f6</id>
        <link href="https://zenn.dev/xxyyzz/articles/9f0eaa9f91f5f6"/>
        <updated>2023-09-10T07:17:23.000Z</updated>
        <summary type="html"><![CDATA[State パターンは、オブジェクトの内部状態が変わるたびにオブジェクトの動作を変更するためのデザインパターンです。このパターンは、オブジェクトが状態ごとに異なる動作を持つ場合や、複雑な条件や分岐がオブジェクトの動作に関連する場合に役立ちます。

 主要な構成要素:


Context (文脈): 現在の状態を定義し、クライアントに対して一貫したインターフェースを提供するクラス。

State (状態): すべての具体的な状態が実装すべきインターフェース。

ConcreteState (具体的な状態): State インターフェースを実装し、Contextの状態に関連する特定の動作を提...]]></summary>
        <author>
            <name>xxyyzz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Observer]]></title>
        <id>https://zenn.dev/xxyyzz/articles/996a06f8438e37</id>
        <link href="https://zenn.dev/xxyyzz/articles/996a06f8438e37"/>
        <updated>2023-09-10T07:16:39.000Z</updated>
        <summary type="html"><![CDATA[Observer パターンは、オブジェクトの状態の変更が他のオブジェクトに影響を及ぼす場合に、これらのオブジェクト間の依存関係を定義するデザインパターンです。状態が変更されたときに自動的に通知されるオブジェクトを登録します。

 主要な構成要素:


Subject (被験者): Observerを追加、削除、通知するメソッドを持つオブジェクト。

Observer (観察者): Subjectからの更新を受け取るオブジェクトのインターフェース。

ConcreteObserver (具体的な観察者): Observerインターフェースを実装するオブジェクトで、Subjectからの更新を...]]></summary>
        <author>
            <name>xxyyzz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Memento]]></title>
        <id>https://zenn.dev/xxyyzz/articles/ef204d8b60a043</id>
        <link href="https://zenn.dev/xxyyzz/articles/ef204d8b60a043"/>
        <updated>2023-09-10T07:15:51.000Z</updated>
        <summary type="html"><![CDATA[Memento パターンは、オブジェクトの内部状態をキャプチャし、後でそのオブジェクトをその状態に戻す方法を提供するデザインパターンです。これにより、オブジェクトの状態を変更した後でも、変更を元に戻す（アンドゥ）操作が可能になります。

 主要な構成要素:


Originator (発行者): 状態を持つオブジェクト。Mementoを作成し、前の状態に戻すためにそれを使用します。

Memento (記念品): Originatorの内部状態のスナップショットを保持するオブジェクト。

Caretaker (保管者): Mementoの保管と状態の復元を管理するオブジェクト。


 例...]]></summary>
        <author>
            <name>xxyyzz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mediator]]></title>
        <id>https://zenn.dev/xxyyzz/articles/53860a9a493ce2</id>
        <link href="https://zenn.dev/xxyyzz/articles/53860a9a493ce2"/>
        <updated>2023-09-10T07:15:16.000Z</updated>
        <summary type="html"><![CDATA[Mediator パターンは、オブジェクト間の通信をカプセル化するオブジェクトを定義するデザインパターンです。このパターンは、オブジェクトが直接通信するのではなく、Mediatorオブジェクトを介して通信することで、オブジェクト間の依存関係を減少させ、疎結合を促進します。

 主要な構成要素:


Mediator (仲介者): すべての通信をコーディネートするインターフェースや抽象クラス。

ConcreteMediator (具体的な仲介者): Mediatorの具体的な実装で、Colleagueオブジェクト間の通信を調整します。

Colleague (同僚): 通信を行うオブジェ...]]></summary>
        <author>
            <name>xxyyzz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Interpreter]]></title>
        <id>https://zenn.dev/xxyyzz/articles/95782e76463ce3</id>
        <link href="https://zenn.dev/xxyyzz/articles/95782e76463ce3"/>
        <updated>2023-09-10T07:14:41.000Z</updated>
        <summary type="html"><![CDATA[Interpreter パターンは、特定のタスクのための言語を解釈するための表現を定義し、それを使用して文を解釈するための解釈機を使用するデザインパターンです。これは主に、繰り返し発生する問題のための簡単な言語を作成する場合に使用されます。

 主要な構成要素:


AbstractExpression (抽象表現): すべての具体的な表現の共通の操作を定義するインターフェースや抽象クラス。

TerminalExpression (終端表現): 文中の終端記号を表す。

NonTerminalExpression (非終端表現): 文中の非終端記号を表す。

Context (文脈):...]]></summary>
        <author>
            <name>xxyyzz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Command]]></title>
        <id>https://zenn.dev/xxyyzz/articles/a4052adc76df9c</id>
        <link href="https://zenn.dev/xxyyzz/articles/a4052adc76df9c"/>
        <updated>2023-09-10T07:14:08.000Z</updated>
        <summary type="html"><![CDATA[Command パターンは、リクエストをオブジェクトとしてカプセル化し、遅延実行やキュー、ログ取り、トランザクションなどのサポートを可能にするデザインパターンです。このパターンを使用することで、リクエストの送信者と受信者を分離できます。

 主要な構成要素:


Command (コマンド): 実行されるアクションを表すインターフェースや抽象クラス。

ConcreteCommand (具体的なコマンド): Command インターフェースを実装する具体的なクラス。

Invoker (起動者): Command の実行を要求するクラス。

Receiver (受信者): コマンドの実際...]]></summary>
        <author>
            <name>xxyyzz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Chain of Responsibility]]></title>
        <id>https://zenn.dev/xxyyzz/articles/bf2ba5000a4b6e</id>
        <link href="https://zenn.dev/xxyyzz/articles/bf2ba5000a4b6e"/>
        <updated>2023-09-10T07:13:36.000Z</updated>
        <summary type="html"><![CDATA[Chain of Responsibility パターンは、複数のオブジェクトを一連の処理手段として連鎖させ、リクエストをこのチェーン上で逐次的に処理させるデザインパターンです。これにより、リクエストの送信者と受信者を分離し、処理を行うオブジェクトを動的に指定できます。

 主要な構成要素:


Handler (ハンドラ): 処理要求を持つインターフェースや抽象クラス。

ConcreteHandler (具体的なハンドラ): Handler インターフェースを実装する具体的なクラス。次のハンドラへの参照を持つこともできます。


 例:
ログの重要度に応じて、異なるログレベルでのメッ...]]></summary>
        <author>
            <name>xxyyzz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Proxy]]></title>
        <id>https://zenn.dev/xxyyzz/articles/3fa688f3446462</id>
        <link href="https://zenn.dev/xxyyzz/articles/3fa688f3446462"/>
        <updated>2023-09-10T07:09:48.000Z</updated>
        <summary type="html"><![CDATA[Proxy パターンは、別のオブジェクトへのアクセスを制御するための代理または置き換えオブジェクトを提供するデザインパターンです。プロキシは元のオブジェクトと同じインターフェースを持っており、クライアントはプロキシを通じて元のオブジェクトにアクセスします。

 主要な構成要素:


Subject (対象): RealSubject と Proxy が共有するインターフェースや抽象クラス。

RealSubject (実対象): Proxy が代表する実際のオブジェクト。

Proxy (代理): RealSubject へのアクセスを制御するオブジェクト。


 例:
データベースへの...]]></summary>
        <author>
            <name>xxyyzz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flyweight]]></title>
        <id>https://zenn.dev/xxyyzz/articles/3f12416eb2b0be</id>
        <link href="https://zenn.dev/xxyyzz/articles/3f12416eb2b0be"/>
        <updated>2023-09-10T07:09:12.000Z</updated>
        <summary type="html"><![CDATA[Flyweight パターンは、大量の類似したオブジェクトを効率的に共有することで、メモリの使用を最適化するデザインパターンです。このパターンは、オブジェクトの共通のデータを外部のデータ構造に保持し、オブジェクト自体はそのデータへの参照のみを持つことで、メモリ使用量を削減します。

 主要な構成要素:


Flyweight (フライウェイト): すべての具象フライウェイトが共有するインターフェースや抽象クラス。

ConcreteFlyweight (具象フライウェイト): 共有される具体的なオブジェクト。

FlyweightFactory (フライウェイト工場): 既存のフライウェ...]]></summary>
        <author>
            <name>xxyyzz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Facade]]></title>
        <id>https://zenn.dev/xxyyzz/articles/13967a4ff7b76e</id>
        <link href="https://zenn.dev/xxyyzz/articles/13967a4ff7b76e"/>
        <updated>2023-09-10T07:08:27.000Z</updated>
        <summary type="html"><![CDATA[Facade（ファサード）パターンは、複雑なサブシステムのインターフェースを単純化するためのデザインパターンです。このパターンでは、シンプルな一つのインターフェースを介してサブシステムの一連のインターフェースにアクセスできるようにします。これにより、サブシステムを使用するクライアントは、サブシステム内部の複雑さを知らなくてもその機能を利用できます。

 主要な構成要素:


Facade (ファサード): クライアントからのリクエストを適切なサブシステムのオブジェクトに転送する役割を持つクラス。

Subsystem (サブシステム): ファサードによってラップされる一連の複雑なクラスや...]]></summary>
        <author>
            <name>xxyyzz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【AI】AIの本を読んだのでレビュー]]></title>
        <id>https://zenn.dev/tunaproducts/articles/de841b91a1a856</id>
        <link href="https://zenn.dev/tunaproducts/articles/de841b91a1a856"/>
        <updated>2023-09-10T00:44:32.000Z</updated>
        <summary type="html"><![CDATA[!
AI関連本を読んだのでレビューをしてみます


 読んだ本

タイトル：
投資対効果を最大化するAI導入7つのルール
著者：石川聡彦(株式会社アイデミー社長)

https://www.amazon.co.jp/投資対効果を最大化する-AI導入７つのルール-石川-聡彦-ebook/dp/B0854G2KS3
※Kindle版もあり、
Kindle Unlimited会員は追加料金なしで読めます。

 レビュー（最高★★★⇔最低☆☆☆）
読みやすさ　★★☆
専門性　　　★★☆
総合　　　　★★☆

 全体概略
本著の序文には以下のように記されています。

技術としては草創期、歴史の浅...]]></summary>
        <author>
            <name>tunaProducts&lt;tech&gt;(つなぷろテック)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FastAPI (mangum) を AWS Lambda で動かす]]></title>
        <id>https://zenn.dev/pilefort/articles/a286144465cb6b</id>
        <link href="https://zenn.dev/pilefort/articles/a286144465cb6b"/>
        <updated>2023-09-09T16:26:50.000Z</updated>
        <summary type="html"><![CDATA[対象

PythonのFastAPIをAWS Lambdaで動かしたい人
カスタムイメージを使ってビルドしたい人
ローカルでの動作確認方法を知りたい人
AWSのリソース作成の概略を知りたい人


 利用するライブラリのバージョン
以下のライブラリを利用します。
fastapiは執筆時点での最新版、mangumは0.11.0より新しいバージョンだとエラーが発生するため、このバージョンとしてます。
pydanticやstarlette, typing-extensionsはfastapiやmangumの依存ライブラリです。
fastapi==0.103.1
pydantic==2.3.0...]]></summary>
        <author>
            <name>pilefort</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[HuggingfaceのTrainer.train()でログを残す方法]]></title>
        <id>https://zenn.dev/nishimoto/articles/4b7d0fe2592504</id>
        <link href="https://zenn.dev/nishimoto/articles/4b7d0fe2592504"/>
        <updated>2023-09-09T12:18:06.000Z</updated>
        <summary type="html"><![CDATA[結論とソースコード
こんな感じでTrainerのcallbacksにtransformers.TrainerCallbackを継承したクラスを渡せばOK。
def init_logger(log_file='train.log'):
    from logging import getLogger, INFO, FileHandler, Formatter, StreamHandler
    logger = getLogger(__name__)
    logger.setLevel(INFO)
    handler1 = StreamHandler()
    handl...]]></summary>
        <author>
            <name>nishimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Python] Stringと数字を一緒に出力(f-String)]]></title>
        <id>https://zenn.dev/huraipan/articles/5a2be9823f8716</id>
        <link href="https://zenn.dev/huraipan/articles/5a2be9823f8716"/>
        <updated>2023-09-09T07:36:14.000Z</updated>
        <summary type="html"><![CDATA[今日は簡単にf-Stringの使い方を勉強しましょう。

suji = 12

print("sujiは " + suji + "です。")   ## error

今までintとかfloatをstringと一緒にprint()関数の中で使うためにintをStringに変更して少し面倒くさいでした
suji = 12

print("sujiは " + str(suji) + "です。")   ## sujiは 12です。


しかしf-Stringを使ったらもっと簡単にできます。
まずダブルクォーテーションの前にfを付きます。
そして使いたいintとかfloat関数名を{}の中に書きま...]]></summary>
        <author>
            <name>huraipan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mojo の __moveinit__ を適用させるには __del__ が必要]]></title>
        <id>https://zenn.dev/ttttkkkkk/articles/295089fcf26129</id>
        <link href="https://zenn.dev/ttttkkkkk/articles/295089fcf26129"/>
        <updated>2023-09-09T05:26:41.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Pythonと互換性がありながら、高速化された新言語 Mojoが一般公開され、色々触ってみています。
Mojo の特徴として、型に以下の3種類が存在することが挙げられます。

ムーブ・コピー不可
ムーブ可能


__moveinit__ の実装が条件


コピー・ムーブ可能


__copyinit__ の実装が条件
ムーブの時には__moveinit__ があればそちらがよばれるし、なければ__copyinit__が呼ばれる



この3種類をうまく使うことで所有権の管理が可能です。
また
a = b^
のような ^ transfer 演算子が呼ばれた際には、__move...]]></summary>
        <author>
            <name>Taqqn</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mojo の borrowed, inout, owned]]></title>
        <id>https://zenn.dev/ttttkkkkk/articles/f3cfb2ba5e73d6</id>
        <link href="https://zenn.dev/ttttkkkkk/articles/f3cfb2ba5e73d6"/>
        <updated>2023-09-08T18:11:07.000Z</updated>
        <summary type="html"><![CDATA[Mojo 言語が一般公開されたので、色々コンパイラで遊んでみました。
その研究記録をここに残します！！

 borrowed, inout, owned について
Mojo には関数の引数として borrowed, inout, owned を取ることができます。それぞれ引数がどのように関数内で扱われるかが異なります。
Rustの借用やC++の参照・ポインタを思い出します。

 borrowed
まず基本的なのが、borrowedです。これは Mojo のデフォルトの設定となり、省略が可能です。
つまり
fn add(borrowed x: Int, borrowed y: Int) -...]]></summary>
        <author>
            <name>Taqqn</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[回帰係数のp値の意味]]></title>
        <id>https://zenn.dev/knao124/articles/glm-coefficients-p-value</id>
        <link href="https://zenn.dev/knao124/articles/glm-coefficients-p-value"/>
        <updated>2023-09-08T12:00:31.000Z</updated>
        <summary type="html"><![CDATA[回帰係数のp値の意味

 p値の意味
回帰係数のp値は、 各係数が統計的に有意であるかを判定するための指標となっている。
p値が十分に小さければ、各係数は目的変数に影響を与えている、と"統計的に"判断できる。

 検定の内容
具体的に、線形な項では以下の検定を行っている。

帰無仮説（H_0）: 該当する回帰係数は0である。（目的変数に影響を与えない）
対立仮説（H_1）: 該当する回帰係数は0ではない。（目的変数に影響を与える）

p値が有意水準（一般的には0.05とか0.01）よりも小さい場合、帰無仮説が棄却され、対立仮説が採択される。

 p値が小さい == 目的変数への影響度...]]></summary>
        <author>
            <name>knao124</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで方位角を16方位に変換する]]></title>
        <id>https://zenn.dev/ssfuno/articles/2e45f6aec8f444</id>
        <link href="https://zenn.dev/ssfuno/articles/2e45f6aec8f444"/>
        <updated>2023-09-08T09:02:04.000Z</updated>
        <summary type="html"><![CDATA[イントロダクション
本記事では、Pythonで2地点間の方位角を16方位に変換する方法について記載します。

16方位の図（出典：日本地図センター）
こちらの記事のJavaScriptでのコードを参考にさせていただきました。
https://qiita.com/m-suizu@github/items/a3d69c211f8f3a5cb624

 動作環境

macOS Ventura 13.5.1
Python 3.11.4


 コードと説明
方位角が0〜360°で表される時は、下記のように算出できます。
from decimal import Decimal, ROUND_HA...]]></summary>
        <author>
            <name>すふー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonライクな新言語「Mojo」が一般公開され、ローカル環境に構築できるようになりました]]></title>
        <id>https://zenn.dev/shintaroamaike/articles/afcbc867db495e</id>
        <link href="https://zenn.dev/shintaroamaike/articles/afcbc867db495e"/>
        <updated>2023-09-08T08:22:49.000Z</updated>
        <summary type="html"><![CDATA[以前投稿した新言語「Mojo」がローカルダウンロードできるようになったとの案内がされました。
https://zenn.dev/minedia/articles/1432443e97cb13
実際にWindows環境へインストールしてローカル環境で実施してみます。
Modular
にアクセスします。

 手順

 1.VSCodeをインストールし、WSL extensionとMojo extensionをインストールします。
WSL extension

Mojo extension


 2.Ubuntu 22.04 for WSLをインストールし、開きます。
Ubuntu 22.04...]]></summary>
        <author>
            <name>ShintaroAmaike</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows環境で噂のChatDevを動かす]]></title>
        <id>https://zenn.dev/solxyz_bso/articles/trying-chatdev</id>
        <link href="https://zenn.dev/solxyz_bso/articles/trying-chatdev"/>
        <updated>2023-09-08T00:05:59.000Z</updated>
        <summary type="html"><![CDATA[仮想のソフトウェア開発会社ChatDev
先日X（旧Twitter）で話題となっていた、OpenAI APIを利用して自動でソフトウェアを作成するChatDevに興味を持ったので、実際に試してみました。
https://github.com/OpenBMB/ChatDev

ChatDevは、最高経営責任者（CEO）、最高技術責任者（CTO）、プログラマー、テスターなど、さまざまな役割を持つインテリジェントエージェントによって運営されるバーチャルソフトウェア企業です。
これらのエージェントは、マルチエージェントの組織構造を形成し、"プログラミングを通じてデジタル世界に革命を起こす"と...]]></summary>
        <author>
            <name>Kojiro Ohara</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonのLogginng(Minimum)]]></title>
        <id>https://zenn.dev/atsuik/articles/5bbc1415e7ac69</id>
        <link href="https://zenn.dev/atsuik/articles/5bbc1415e7ac69"/>
        <updated>2023-09-07T16:01:50.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Pythonで新しくプロジェクトを作ろうとした際、そういえばLoggerの設定や取り扱いってどうすればいいんだっけ？と思って調べてみたところQiitaやZennだと様々な流儀のLoggingのやり方が書いてあって、結局どうすればいいのかがわからず混乱したので自分で調べてまとめました。

 最低限十分なLogginngの方法
私がLoggingについて調べ始めたときは、とりあえずどうしたらいいのかだけが分かればよかったので同じ気持ちの人のために結論だけ書きます。

 Packageプロジェクトの場合
PythonのPackageを作成している場合はログを送出したい各モジュール...]]></summary>
        <author>
            <name>atsuik</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tabular Data Plot]]></title>
        <id>https://zenn.dev/takiser/articles/55a67a45bf9603</id>
        <link href="https://zenn.dev/takiser/articles/55a67a45bf9603"/>
        <updated>2023-09-07T13:33:32.000Z</updated>
        <summary type="html"><![CDATA[import pandas as pd
import matplotlib.pyplot as plt
from pathlib import Path

# import glob


class SingleLotDataModel:
    def __init__(self, csvPath):
        self.__loadData(csvPath=csvPath)
        self.timeColmun = "TimeFromStart"
        self.intervalName = ["INTERVAL"]
        self.__addTi...]]></summary>
        <author>
            <name>takiser</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[RecBole を使った推薦システムの実装とRecVAEの概要]]></title>
        <id>https://zenn.dev/y0/articles/5a69e8e882b6c8</id>
        <link href="https://zenn.dev/y0/articles/5a69e8e882b6c8"/>
        <updated>2023-09-07T12:24:40.000Z</updated>
        <summary type="html"><![CDATA[はじめに
RecBoleはMIT licenseで公開されているOSSで、81種[1]の推薦アルゴリズムが実装されているPython(PyTorch)のライブラリである。主に研究の文脈で、各アルゴリズムの再現性を確認するために開発されており、実装されているアルゴリズムの一覧は、「Model Introduction¶」にて確認できる。
この記事では、「General Recommendation」に分類される一般的な推薦アルゴリズムの使用方法と、その中で比較的高性能な推薦が行えるDNNベースのモデルであるRecVAE[2]について紹介する。私自身は推薦アルゴリズムが専門ではないため、...]]></summary>
        <author>
            <name>y0</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【faiss】なにこれすごい。顔データセットの間違い探し　成功編③]]></title>
        <id>https://zenn.dev/ykesamaru/articles/4e40e0285b0b66</id>
        <link href="https://zenn.dev/ykesamaru/articles/4e40e0285b0b66"/>
        <updated>2023-09-07T06:10:05.000Z</updated>
        <summary type="html"><![CDATA[前回の記事で、顔データセットの類似度の計算には組み合わせが15億8600通りあり、総当りで計算すると1年以上かかる事が分かりました。
そのため、faissを用いて多次元ベクトル類似度計算の高速化を試みましたが、前回の記事では、faissを用いても計算時間が長くなってしまいました。
そのため、以下のfaissチュートリアルを参考に、計算時間を短縮することができるかを試してみました。
https://github.com/facebookresearch/faiss
https://github.com/facebookresearch/faiss/wiki/Getting-started
...]]></summary>
        <author>
            <name>yKesamaru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-301｜A - Overall Winner]]></title>
        <id>https://zenn.dev/hyperdb/articles/e5cd8f33349121</id>
        <link href="https://zenn.dev/hyperdb/articles/e5cd8f33349121"/>
        <updated>2023-09-07T05:23:02.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-301 A - Overall Winner



 提出結果
def getInt():
    return int(input())


def getString():
    return input()


def main():
    n = getInt()
    s = getString()

    if s.count('A') > s.count('T'):
        print('A')
    elif s.count('A') < s.count('T'):
        print('T')
    e...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-301｜B - Fill the Gaps]]></title>
        <id>https://zenn.dev/hyperdb/articles/646f8ed4b4f3a8</id>
        <link href="https://zenn.dev/hyperdb/articles/646f8ed4b4f3a8"/>
        <updated>2023-09-07T05:23:01.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-301 B - Fill the Gaps



 提出結果
def getInt():
    return int(input())


def getIntList():
    return list(map(int, input().split()))


def d(x, y):
    t = []

    if x < y:
        for i in range(x + 1, y):
            t.append(i)
    else:
        for i in range(y + 1, x):
     ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Azure OpenAI Service On your data でベクトル検索を行う]]></title>
        <id>https://zenn.dev/microsoft/articles/06063068b75a91</id>
        <link href="https://zenn.dev/microsoft/articles/06063068b75a91"/>
        <updated>2023-09-06T16:50:45.000Z</updated>
        <summary type="html"><![CDATA[はじめに
2023 年 8 月の更新で Azure OpenAI Service On your data でベクトル検索ができるようになったため、使い方や勘所をまとめました。
https://learn.microsoft.com/ja-jp/azure/ai-services/openai/whats-new#august-2023

 On your data ベクトル検索で何が変わる？
2023 年 6 月に On your data のナレッジベースとして使われている Azure Cognitive Search にてベクトル検索のパブリックプレビューが開始しました。これに...]]></summary>
        <author>
            <name>ryohtaka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[# Tkinterで画面を作る]]></title>
        <id>https://zenn.dev/takiser/articles/94b05d752d082a</id>
        <link href="https://zenn.dev/takiser/articles/94b05d752d082a"/>
        <updated>2023-09-06T13:48:02.000Z</updated>
        <summary type="html"><![CDATA[import tkinter as tk
from tkinter import filedialog


class ToolbarView(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master

        self.pack()
        self.create_widgets()

    def create_widgets(self):
        # self.label1 = tk.Label(...]]></summary>
        <author>
            <name>takiser</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python Tkinterで複数Frameアプリを作る]]></title>
        <id>https://zenn.dev/takiser/articles/e847aef130d4d8</id>
        <link href="https://zenn.dev/takiser/articles/e847aef130d4d8"/>
        <updated>2023-09-06T12:13:05.000Z</updated>
        <summary type="html"><![CDATA[並列に並べる場合
import tkinter as tk

class Frame1(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        self.pack()
        self.create_widgets()

    def create_widgets(self):
        self.label1 = tk.Label(self)
        self.label1["te...]]></summary>
        <author>
            <name>takiser</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-300｜B - Same Map in the RPG World]]></title>
        <id>https://zenn.dev/hyperdb/articles/dcb0e8eb956501</id>
        <link href="https://zenn.dev/hyperdb/articles/dcb0e8eb956501"/>
        <updated>2023-09-06T05:54:27.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-300 B - Same Map in the RPG World



 提出結果
def getIntMap():
    return map(int, input().split())


def getStringListRow(N):
    return [list(input()) for _ in range(N)]


def rx(x):
    for i in range(len(x)):
        x[i] = x[i][1:] + x[i][:1]
    return x


def ry(x):
    return x...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-300｜A - N-choice question]]></title>
        <id>https://zenn.dev/hyperdb/articles/6083bb53238640</id>
        <link href="https://zenn.dev/hyperdb/articles/6083bb53238640"/>
        <updated>2023-09-06T05:54:26.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-300 A - N-choice question



 提出結果
def getIntMap():
    return map(int, input().split())


def getIntList():
    return list(map(int, input().split()))


def main():
    n, a, b = getIntMap()
    c = [0] + getIntList()

    print(c.index(a + b))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonの開発環境の3つの観点をおさえよう]]></title>
        <id>https://zenn.dev/os1ma/articles/935f6e653f1052</id>
        <link href="https://zenn.dev/os1ma/articles/935f6e653f1052"/>
        <updated>2023-09-06T02:58:34.000Z</updated>
        <summary type="html"><![CDATA[先日 "Python の「仮想環境」を完全に理解しよう" というスライドを公開したらかなり反響がありました。

Python の開発環境の構築は、正直言ってかなり複雑だと思います。
pip・venv・pyenv・Pipenv などなど、似たような名前・似たような役割のツールがたくさん登場して、最初は全然意味が分かりません。
慣れればなんとかなるのですが、慣れるまではかなり苦しいです。
このようにとても難解であるにも関わらず、Python は機械学習などでよく使われることから、避けられないことも多いです。
そこでこの記事には、「そもそも Python の開発環境にはどんな観点があるんだ？こ...]]></summary>
        <author>
            <name>oshima_123</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[cuQuantum で遊んでみる (9) — 少し規模が大きめの QAOA を計算する]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-cuquantum09</id>
        <link href="https://zenn.dev/derwind/articles/dwd-cuquantum09"/>
        <updated>2023-09-05T15:51:40.000Z</updated>
        <summary type="html"><![CDATA[目的
cuQuantum で遊んでみる (8) — QAOA の期待値計算高速化 で大分計算周りをマシにしたのでもう少し本格的な計算をしてみたいというもの。
なお、今回の計算、どこか間違えているようなのだが間違えているなりにそこそこ行けてそうなので、一旦記事にしてしまって後日修正したい。
実験は Google Colab 上で T4 を使って行った。そんな手軽な環境で本格的な QAOA も VQE も実行できるのである。

 お題
TYTANSDK のチュートリアル 線形回帰 を拝借したい。因みにこの問題は疑似量子アニーリングで計算したらすぐに結果が得られる。

 QAOA に書き直...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[日経先物分析その2 ... SQまでの残存時間の計算]]></title>
        <id>https://zenn.dev/daidai_daitai/articles/64f45e2d3df2b0</id>
        <link href="https://zenn.dev/daidai_daitai/articles/64f45e2d3df2b0"/>
        <updated>2023-09-05T13:23:09.000Z</updated>
        <summary type="html"><![CDATA[その1では何をしたのか
その1では日経先物のタイムバーに、DaySessionとNightSessionの情報を追加し、SesssionごとにUniqueなIDを割り当てました。
今回その情報は使用しませんが、気になる方は見てみて下さい。
https://zenn.dev/daidai_daitai/articles/92e8fbbfa79e42

 その2では何をするのか
日経先物のつなぎ足データから次のSQまでの残存時間を計算します。今回はタイムバーを使用しますが、その他の方法でサンプリングされたデータでも、コードを少し変えれば使用できると思います。

 SQとは
以下は生成AI...]]></summary>
        <author>
            <name>橙。</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[一般社団法人サイバー技術・インターネット自由研究会の電子公告をPythonで読む]]></title>
        <id>https://zenn.dev/notch_man8600/articles/efee2fb94b1519</id>
        <link href="https://zenn.dev/notch_man8600/articles/efee2fb94b1519"/>
        <updated>2023-09-05T12:33:08.000Z</updated>
        <summary type="html"><![CDATA[最近、Telnetがホットですね。

というわけでPythonで読んでみました。なお、telnetlibでは上手くいきませんでした。
# Standard Library
import socket

try:
    sock = socket.create_connection(("koukoku.shadan.open.ad.jp", 23))
    while True:
        chunk = sock.recv(2)
        if not chunk:
            break
        try:
            print(chun...]]></summary>
        <author>
            <name>notch_man</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】顔データセットの間違い探し（失敗編②）]]></title>
        <id>https://zenn.dev/ykesamaru/articles/83b171b045809c</id>
        <link href="https://zenn.dev/ykesamaru/articles/83b171b045809c"/>
        <updated>2023-09-05T12:06:24.000Z</updated>
        <summary type="html"><![CDATA[顔データセットの間違い探し 失敗編②
前回の記事では、マシンが熱暴走して何回かブラックアウトするという屈辱を味わいました。今回は、その続きです。

!
この記事で紹介している方法で、顔データセットの間違い探しを行いましたが、処理時間が異常に長く、諦めました。ですので、以降の記事を「失敗編②」としました。

前回の記事
https://zenn.dev/ykesamaru/articles/d4b78ea53b02e2
前回の手法では、顔画像から特徴ベクトルを取得し、その後組み合わせを作成していました。そこで今回は、特徴ベクトルを作成する段階と、組み合わせからコサイン類似度を計算する段...]]></summary>
        <author>
            <name>yKesamaru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【個人メモ】RTX4090+llama.cppでGPUオフロードできなかったので解決した]]></title>
        <id>https://zenn.dev/saldra/articles/26288e2f03f2ae</id>
        <link href="https://zenn.dev/saldra/articles/26288e2f03f2ae"/>
        <updated>2023-09-05T05:09:09.000Z</updated>
        <summary type="html"><![CDATA[概要
RTX-4090環境でtext-generation-webui環境を構築していたところ、なぜかllama.cppのモデルでGPUオフロードできなかったので、調べて解決した。
https://zenn.dev/saldra/articles/619232a81f2705

 やったこと

 pytorchの最新化
nvcc -Vを行ったところ、CUDA12系だったのでpytorchを入れなおした。
pip install --pre torch --index-url https://download.pytorch.org/whl/nightly/cu121
これでも直らなか...]]></summary>
        <author>
            <name>Sald ra</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-299｜B - Trick Taking]]></title>
        <id>https://zenn.dev/hyperdb/articles/daa9c8ec47568a</id>
        <link href="https://zenn.dev/hyperdb/articles/daa9c8ec47568a"/>
        <updated>2023-09-05T04:36:12.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-299 B - Trick Taking



 提出結果
def getIntMap():
    return map(int, input().split())


def getIntList():
    return list(map(int, input().split()))


def main():
    n, t = getIntMap()
    c = [0] + getIntList()
    r = [0] + getIntList()

    a = [i for i in range(len(c)) if c[i] ==...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-299｜A - Treasure Chest]]></title>
        <id>https://zenn.dev/hyperdb/articles/75aa806a5a4a1d</id>
        <link href="https://zenn.dev/hyperdb/articles/75aa806a5a4a1d"/>
        <updated>2023-09-05T04:36:12.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-299 A - Treasure Chest



 提出結果
def getInt():
    return int(input())


def getString():
    return input()


def main():
    n = getInt()
    s = getString()

    print('in' if s.find('|') < s.find('*') < s.rfind('|') else 'out')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【量子コンピュータ】IBM量子開発者認定試験(C1000-112)サンプル問題をしがんでしがんで舐め回す(後編  Q011-20)]]></title>
        <id>https://zenn.dev/whitishlion/articles/d6c4765a8f1684</id>
        <link href="https://zenn.dev/whitishlion/articles/d6c4765a8f1684"/>
        <updated>2023-09-05T02:01:06.000Z</updated>
        <summary type="html"><![CDATA[みなさんこんにちは！
この記事は，IBMが提供する量子開発者認定資格試験 Exam C1000-112: Fundamentals of Quantum Computation Using Qiskit v0.2X Developerサンプル問題の解答と解説記事です！
今回は後編で，前編は下記ページにありますので，まだご覧になってない方は是非ご一読ください！
https://zenn.dev/whitishlion/articles/daff336619acef
前編で取り扱ったQ01.~Q10.の続きでQ11.~20を扱います。
では，早速解説の続きに進みたいと思います！

第11問は...]]></summary>
        <author>
            <name>oreo_k</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[移行業務の改善 その3 CSV加工の分離]]></title>
        <id>https://zenn.dev/superstudio/articles/17e346b27114ef</id>
        <link href="https://zenn.dev/superstudio/articles/17e346b27114ef"/>
        <updated>2023-09-05T02:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
弊社では ecforce というシステムをSaaSという形でサービスを提供しています。
ecforceの導入を希望されるクライアント様には、大きく2パターンがあります。


新規で ECを立ち上げたいというクライアント様
別のカートシステムを現在使っており、ecforceに乗り換えたいというクライアント様

後者につきまして、当然ながら顧客や注文データをリセットするわけにもいかないので、 既存データも引き継ぎたい という要望をいただくことが大多数です。
ただ他社のカートシステムとecforceではデータ構造が異なるので、データを抽出してそのままecforceのデータベースに...]]></summary>
        <author>
            <name>Yuji Miyashita</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Golangで重み付き乱択アルゴリズムを作成したので検証してみる]]></title>
        <id>https://zenn.dev/koupro0204/articles/bf87dea2478b72</id>
        <link href="https://zenn.dev/koupro0204/articles/bf87dea2478b72"/>
        <updated>2023-09-04T19:24:16.000Z</updated>
        <summary type="html"><![CDATA[インターンで作成したガチャのアルゴリズムが果たして正しいのか検証してみる。

 アルゴリズムについて
以下の記事を参考にコーディングしました。
ループを用いて重み付き抽選を行う
正直自分が解説するよりわかりやすいので気になる方は記事を見てみてください。
以下がGoのコードになります。（ちょっとだけコメント入れました）
細かいほかの部分のコードはちょっと見せれないです。
// getGacha ガチャアルゴリズム
func getGacha(times int, allcollection []entity.RatioCollection) []entity.RatioCollection...]]></summary>
        <author>
            <name>い。</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Azure Functions Python Programming Model v1 と v2 の違い]]></title>
        <id>https://zenn.dev/pinter/articles/20230903functionspythondifference</id>
        <link href="https://zenn.dev/pinter/articles/20230903functionspythondifference"/>
        <updated>2023-09-04T14:24:25.000Z</updated>
        <summary type="html"><![CDATA[Azure Functions の最新の 4.x version では、C#、JavaScript、Java、Powershell、Python、TypeScript など様々な言語が使用可能です。
中でも、Python を使用する際には、Python v1 プログラミングモデルと、Python v2 プログラミングモデルがあります。
なお、ここでいう v1 や v2 は Python 自体のバージョンとは関係ありません。あくまで、Functions で Python を使用する際のプログラミングモデルの話です。
v2 のプログラミングモデルでは、Functions アプリケーションを簡...]]></summary>
        <author>
            <name>チャマ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ファインチューニング用の訓練データの作成方法]]></title>
        <id>https://zenn.dev/sergicalsix/articles/2863c493c22118</id>
        <link href="https://zenn.dev/sergicalsix/articles/2863c493c22118"/>
        <updated>2023-09-04T13:58:31.000Z</updated>
        <summary type="html"><![CDATA[概要
機械学習モデルのファインチューニングは、特定のタスクに対してモデルを最適化する一般的な手法です。しかし、ファインチューニングを行う前に、適切なデータセットを用意する必要があります。
この記事では、Pythonを使用して簡単にファインチューニング用のデータセットを作成する方法を紹介します。

 内容

 事前準備:ライブラリのインストールとトークナイザーの準備
datasetsとtransformersを使えば簡単にファインチューニングができます。
https://huggingface.co/docs/datasets/index
https://huggingface.co/...]]></summary>
        <author>
            <name>sergicalsix</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[cuQuantum で遊んでみる (8) — QAOA の期待値計算高速化]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-cuquantum08</id>
        <link href="https://zenn.dev/derwind/articles/dwd-cuquantum08"/>
        <updated>2023-09-04T13:48:06.000Z</updated>
        <summary type="html"><![CDATA[目的
cuQuantum で遊んでみる (6) — 最大カット問題と QUBO と QAOA で QAOA の計算を cuQuantum の cuTensorNet で行ったがあまり速くなかった。
これについて、cuQuantum で遊んでみる (7) — 期待値計算再考 で QAOA の類のハミルトニアンのテンソルネットワークへの効率的な埋め込みについて考察した。
この上で更に GPU 計算への配慮をした実装をすると 2 倍以上の高速化ができるのでこれについて簡単にまとめる。実際は更に工夫すると 3 倍以上に高速化ができるが、コードも 3 倍汚くなるので本記事では 2 倍くらいで止...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mersenne Twister (MT19937) で未来と過去の乱数列を予測してみる【Python】]]></title>
        <id>https://zenn.dev/hk_ilohas/articles/mersenne-twister-previous-state</id>
        <link href="https://zenn.dev/hk_ilohas/articles/mersenne-twister-previous-state"/>
        <updated>2023-09-04T13:12:52.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Mersenne Twister (MT, メルセンヌ・ツイスタ) は擬似乱数を生成するアルゴリズムの一種です。その中でも、MT19937 という手法には次のような長所があります。

周期が 2^{19937}-1 と非常に長い。
高次元（623 次元）でも均等に分布する。
擬似乱数の生成が高速。

このような特徴から、様々なプログラミング言語の標準的な擬似乱数生成器に Mersenne Twister が採用されています。たとえば、Python の random には MT19937 が採用されています。
しかし、Mersenne Twister は暗号論的擬似乱数ではあ...]]></summary>
        <author>
            <name>HK_ilohas</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonの勉強メモ]]></title>
        <id>https://zenn.dev/akai_t/articles/fa18bdca2d8c93</id>
        <link href="https://zenn.dev/akai_t/articles/fa18bdca2d8c93"/>
        <updated>2023-09-04T11:42:16.000Z</updated>
        <summary type="html"><![CDATA[内容について
Pythonを基礎から勉強するためにPythonプログラミング入門を読んで気になったところや他の知っている言語（PHP等）との違いをメモ

 

 数値演算

** と指定すると指数になる（ex:4 ** 2 = 16)

PHPは5.6以降で同じ書き方ができる（知らなかった）
PHP5.6未満の場合はpow(4, 2)と書く


// で割ると切り捨てとなる（ex:7 / 2 = 3.5だが7 // 2 = 3となる）

PHPの場合はfloor(7 / 2)





 変数と関数の基礎

関数定義はdef 関数名 (引数, ...):という形式になる。
中括弧({...]]></summary>
        <author>
            <name>Tadaaki AKAI</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AIを利用して知識ゼロからPythonでシステム構築をする その３ - 構築失敗編 -]]></title>
        <id>https://zenn.dev/akai_t/articles/af8f8b502a59bf</id>
        <link href="https://zenn.dev/akai_t/articles/af8f8b502a59bf"/>
        <updated>2023-09-04T11:41:14.000Z</updated>
        <summary type="html"><![CDATA[構築失敗編

 前提知識と仕様

PHPやJavaを用いたWebアプリケーションの開発経験はあるが、Pythonは全く触った経験無し
さくらのレンタルサーバ スタンダードを契約済み
問い合わせは基本的に無料で利用できるChatGPT3.5を利用
できる限りAIを利用して構築（使用技術等は自分で決定し、随時記載）
フレームワークはFlaskを使ってみることとする


User
Flaskを利用してデータベースと接続するWebアプリを作成したい
ChatGPT
素晴らしいです！Flaskを使用してデータベースと接続するWebアプリケーションを作成することは、一般的なタスクです。以下に、基...]]></summary>
        <author>
            <name>Tadaaki AKAI</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AIを利用して知識ゼロからPythonでシステム構築をする その２ - Flask編 -]]></title>
        <id>https://zenn.dev/akai_t/articles/3ad9378c57f4ec</id>
        <link href="https://zenn.dev/akai_t/articles/3ad9378c57f4ec"/>
        <updated>2023-09-04T11:41:01.000Z</updated>
        <summary type="html"><![CDATA[Flask編

 前提知識と仕様

PHPやJavaを用いたWebアプリケーションの開発経験はあるが、Pythonは全く触った経験無し
さくらのレンタルサーバ スタンダードを契約済み
問い合わせは基本的に無料で利用できるChatGPT3.5を利用
できる限りAIを利用して構築（使用技術等は自分で決定し、随時記載）
フレームワークはFlaskを使ってみることとする


User
Flaskを利用してWebシステムを構築したい。
Flaskの基本的な使い方を教えてください。
ChatGPT
FlaskはPythonで書かれた軽量なWebアプリケーションフレームワークです。以下に、Flas...]]></summary>
        <author>
            <name>Tadaaki AKAI</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AIを利用して知識ゼロからPythonでシステム構築をする その１ - サーバー構築編 -]]></title>
        <id>https://zenn.dev/akai_t/articles/b32e6c92660e8f</id>
        <link href="https://zenn.dev/akai_t/articles/b32e6c92660e8f"/>
        <updated>2023-09-04T11:40:47.000Z</updated>
        <summary type="html"><![CDATA[サーバー構築編

 前提知識と仕様

PHPやJavaを用いたWebアプリケーションの開発経験はあるが、Pythonは全く触った経験無し
さくらのレンタルサーバ スタンダードを契約済み
問い合わせは基本的に無料で利用できるChatGPT3.5を利用
できる限りAIを利用して構築（使用技術等は自分で決定し、随時記載）


User
PythonでWebアプリケーションを作成します。
はじめに何からすればいいですか？
ChatGPT
PythonでWebアプリケーションを作成する際の基本的な手順は次のとおりです：


Webフレームワークの選択: Pythonには様々なWebフレームワー...]]></summary>
        <author>
            <name>Tadaaki AKAI</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[おっさん、学びなおす]]></title>
        <id>https://zenn.dev/manabinaoshi/articles/81eb6709bc1b38</id>
        <link href="https://zenn.dev/manabinaoshi/articles/81eb6709bc1b38"/>
        <updated>2023-09-04T09:27:54.000Z</updated>
        <summary type="html"><![CDATA[社会に出て１０年あまり、高校数学の記憶もあやふや、ITも初心者のおっさんがデータサイエンスを一から勉強。Python、R、Java、PHPなどプログラミングはサッパリ、なんならExcel、Wordもあやしい、そんな状況からスタート。
備忘録として使いつつ、何か教えてくれる人がいればラッキーと思う、そんなよこしまな気持ちで投稿してみよう。初投稿なので読みにくいかも、まいっか。]]></summary>
        <author>
            <name>ベテラン初心者</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【量子コンピュータ】IBM量子開発者認定試験(C1000-112)サンプル問題をしがんでしがんで舐め回す(前編 Q01-10)]]></title>
        <id>https://zenn.dev/whitishlion/articles/daff336619acef</id>
        <link href="https://zenn.dev/whitishlion/articles/daff336619acef"/>
        <updated>2023-09-04T07:22:29.000Z</updated>
        <summary type="html"><![CDATA[みなさんこんにちは！
この記事は，IBMが提供する量子開発者認定資格試験 Exam C1000-112: Fundamentals of Quantum Computation Using Qiskit v0.2X Developerサンプル問題の解答と解説記事です！
IBMは, 当IBM量子開発者認定という資格を提供しており，その資格取得のためには当試験のpassが必要がです。(筆者は2023年8月にIBM量子開発者認定を取得。取得ホヤホヤ🍲で本記事執筆中です！)
本記事はとにかくボリュームが多いため、試験自体の説明は概要に留め, サンプル問題の解説に集中しています。
また，本前編/後...]]></summary>
        <author>
            <name>oreo_k</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pyparsingを使えば正規表現がわからなくてもパース処理が書ける]]></title>
        <id>https://zenn.dev/kedama_nth/articles/how-to-pyparsing</id>
        <link href="https://zenn.dev/kedama_nth/articles/how-to-pyparsing"/>
        <updated>2023-09-04T04:49:28.000Z</updated>
        <summary type="html"><![CDATA[はじめに
詳しい説明は他の記事に譲りますが、pyparsingはPEG(Parsing Expression Grammar)という手法を用いた構文解析ライブラリです。
pyparsingを利用することで、比較的簡単にパース処理を記述することができます。
パース処理が書けるようになると、コマンドやプログラムが吐き出したログから欲しいデータだけを取り出せるようになるほか、データの変換処理やユーザが入力した文字列の処理などが書けるようになります。
本記事は「正規表現がイマイチ理解できなくて困っている」「パース処理を書きたいけど、正規表現が書けない」という方々に向けた記事になります。
本記...]]></summary>
        <author>
            <name>kedama_nth</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-298｜A - Job Interview]]></title>
        <id>https://zenn.dev/hyperdb/articles/b2a0f44d3e6bc7</id>
        <link href="https://zenn.dev/hyperdb/articles/b2a0f44d3e6bc7"/>
        <updated>2023-09-04T04:36:35.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-298 A - Job Interview



 提出結果
def getInt():
    return int(input())


def getString():
    return input()


def main():
    n = getInt()
    s = getString()

    print('Yes' if s.count('o') > 0 and s.count('x') == 0 else 'No')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-298｜B - Coloring Matrix]]></title>
        <id>https://zenn.dev/hyperdb/articles/6144f611f7eadb</id>
        <link href="https://zenn.dev/hyperdb/articles/6144f611f7eadb"/>
        <updated>2023-09-04T04:36:34.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-298 B - Coloring Matrix



 提出結果
def getInt():
    return int(input())


def getIntListRow(N):
    return [list(map(int, input().split())) for _ in range(N)]


def updown(l):
    result = []

    for i in range(len(l)):
        result.append(l[len(l) - i - 1])

    return result


d...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[自動売買ツールをリアル環境で検証する方法]]></title>
        <id>https://zenn.dev/erand/articles/c771d28aba8413</id>
        <link href="https://zenn.dev/erand/articles/c771d28aba8413"/>
        <updated>2023-09-03T15:27:35.000Z</updated>
        <summary type="html"><![CDATA[株・FXで儲けたくて自動売買ツールを作った方は、海外FXの口座開設ボーナスを使って資金調達するのがおすすめ。私もPythonでコードを書いて、口座開設ボーナスを使って検証をしてました。
デモ口座でも出来るとおっしゃる方もいますが、どうしても本気度が出ない方もいるので実際のお金がかかった状態がよいです。ただし、自己資金を使うのはリスクがあるのでボーナスを使いましょう。
参考サイト：海外FXで口座開設ボーナスがもらえる業者一覧]]></summary>
        <author>
            <name>えらんど</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FastAPI が動く諸々整った Python 環境を Docker で作ってみる]]></title>
        <id>https://zenn.dev/comachi/articles/a058dc03790d55</id>
        <link href="https://zenn.dev/comachi/articles/a058dc03790d55"/>
        <updated>2023-09-03T13:36:23.000Z</updated>
        <summary type="html"><![CDATA[はじめに

この記事では、最近 WSL2 を使い始めた私が、FastAPI が動く諸々整った Python 環境を Docker で作る方法を、メモとして残します。
FastAPI で単に Hello, World するためだけの環境ではなく、フォーマッタ、リンタ、型チェック、ユニットテスト、パッケージ管理などを導入した環境を用意しました。

また、VSCode 上でのテストカバレッジの可視化についても実施できるようにしました。


この記事は、nikkie さんの Hatena Blog を参考にして作成しました。いくつかの記事の Tips をまとめたものを作成したイメージです。
...]]></summary>
        <author>
            <name>comachi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenFHEのPython wrapperで準同型暗号を試してみた]]></title>
        <id>https://zenn.dev/hk_ilohas/articles/openfhe-python-example</id>
        <link href="https://zenn.dev/hk_ilohas/articles/openfhe-python-example"/>
        <updated>2023-09-03T09:14:13.000Z</updated>
        <summary type="html"><![CDATA[はじめに
OpenFHE とは、完全準同型暗号（Fully Homomorphic Encryption, FHE）のオープンソースライブラリです。FHE は暗号化されたデータを復号せずに加法や乗法、回転などの計算を実行できます。今回は OpenFHE の Python wrapper をインストールし、いくつかサンプルプログラムを動かしてみました。

 インストール
https://github.com/openfheorg/openfhe-python/tree/main
公式の README に従ってインストールします。OpenFHE の Python wrapper をビルド...]]></summary>
        <author>
            <name>HK_ilohas</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[URLセーフなBase64エンコーディングとデコーディング]]></title>
        <id>https://zenn.dev/jusanz/articles/d6cec091d45657</id>
        <link href="https://zenn.dev/jusanz/articles/d6cec091d45657"/>
        <updated>2023-09-03T06:31:38.000Z</updated>
        <summary type="html"><![CDATA[Base64エンコーディングした文字列をURLパラメータで送信を求められることがあります。Base64エンコーディングされた文字列にはURLに含められない+ 、/、=が含まれるため、URLセーフ　に変換が必要です。

 Base64エンコーディングとは
データを 64種類の文字 (アルファベット大文字小文字、0から9の数字)と+、 /、=の記号のみを使って変換する方式。メールの添付ファイル送信などに使われます。

 javascriptの場合
const encoded = btoa("String to be encoded")
    .replace(/=/g, "")
    ....]]></summary>
        <author>
            <name>jedinakahira</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linuxサーバーに対するSSH接続を検知してDiscordに通知するよ]]></title>
        <id>https://zenn.dev/gaimo_ch/articles/c2d67d7dbd39b5</id>
        <link href="https://zenn.dev/gaimo_ch/articles/c2d67d7dbd39b5"/>
        <updated>2023-09-03T06:17:46.000Z</updated>
        <summary type="html"><![CDATA[🚨 SSH-Notify
Linuxサーバに対するSSH接続をPAMを用いて検知し、WebhookでDiscordに通知を行うよ。
Python 3.10.12 / Ubuntu 22.04.3

 🛠 準備をしよう

 Python

 使用ライブラリについて
requests : クライアントのグローバルIPと国を取得
netifaces : サーバのローカルIPを取得
socket : サーバのホスト名を取得

 ssh-notify.py
#!/usr/bin/env python3
import socket
import netifaces
import requests...]]></summary>
        <author>
            <name>がいも</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[線形ガウス状態空間モデル(2) - ローカルレベルモデル]]></title>
        <id>https://zenn.dev/knao124/articles/ssm-03-local-level-model</id>
        <link href="https://zenn.dev/knao124/articles/ssm-03-local-level-model"/>
        <updated>2023-09-03T05:00:52.000Z</updated>
        <summary type="html"><![CDATA[ローカルレベルモデル

 定義  [1, p193]
以下の式で表される状態空間モデルをローカルレベルモデルと呼ぶ。

\mu_t = \mu_{t-1}+w_t,\quad  w_t\sim N(0, \sigma_w^2)
\\
y_t = \mu_t + v_t, \quad v_t\sim N(0, \sigma_v^2)

w_t は状態誤差、 v_tは観測誤差と呼ばれる。状態\mu_tは水準（レベル） とも呼ばれる。

 データの生成過程の仮定
ローカルレベルモデルは、状態も観測値も、生成過程が正規分布だと仮定するモデルである。
このことは、上記の式を、以下のように変形す...]]></summary>
        <author>
            <name>knao124</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[線形ガウス状態空間モデル(1) - 線形ガウス状態空間モデルとは]]></title>
        <id>https://zenn.dev/knao124/articles/ssm-02-linear-gaussian</id>
        <link href="https://zenn.dev/knao124/articles/ssm-02-linear-gaussian"/>
        <updated>2023-09-03T04:12:01.000Z</updated>
        <summary type="html"><![CDATA[線形ガウス状態空間モデル

 定義 [1, p187]
以下の式で表される状態空間モデルを線形ガウス状態空間モデルと呼ぶ。

\begin{equation}
\begin{aligned}
x_t &= T_t x_{t-1} + R_t \xi_t,\quad &\xi_t \sim N(0, Q_t)
\\
y_t &= Z_t x_t + \epsilon_t, \quad &\epsilon_t \sim N(0, H_t)
\end{aligned}
\end{equation}



x_t が状態、 y_t が観測値。

T_t , R...]]></summary>
        <author>
            <name>knao124</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[状態空間モデル]]></title>
        <id>https://zenn.dev/knao124/articles/ssm-01-state-space-model</id>
        <link href="https://zenn.dev/knao124/articles/ssm-01-state-space-model"/>
        <updated>2023-09-03T04:11:17.000Z</updated>
        <summary type="html"><![CDATA[定義
状態空間モデルは、システムが時間によってどう変わるかを説明するための数学的なフレームワーク（モデル）を指す。

 状態と観測値
モデルは、「状態」と「観測値」の2つの方程式で構成される。
文字通り「状態」は「システムの現在の状態」のことを指し、「観測値」は「その状態を観測した値」のことを指す。

 具体例1: 温度の計測
具体例として、温度を1時間おきに計測することを考える。このとき、状態と観測値はそれぞれ以下の通りである。

状態: 宇宙の法則として決まる真の温度
観測値: 温度センサーに表示される値


 状態空間モデルでのモデル化
状態空間モデルでのモデル化とは、この状態...]]></summary>
        <author>
            <name>knao124</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【streamlit】st.input_numberのstepperを消す方法]]></title>
        <id>https://zenn.dev/knao124/articles/230901-streamlit-stepper</id>
        <link href="https://zenn.dev/knao124/articles/230901-streamlit-stepper"/>
        <updated>2023-09-03T01:23:37.000Z</updated>
        <summary type="html"><![CDATA[現時点で存在しない
議論

Remove number_input -/+ step toggles option · Issue #894 · streamlit/streamlit

修正

Assorted visual tweaks by sfc-gh-jgarcia · Pull Request #7050 · streamlit/streamlit

input_numberが120px以下になると消えるようになっているが、直接消したりする方法はない
これ以上対応する予定もないとのこと

 対応策

120px以下にする
markdown経由でcssをいじる(バージョンが...]]></summary>
        <author>
            <name>knao124</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sentryを使ったScrapyのウェブクローリング監視]]></title>
        <id>https://zenn.dev/yag_ays/articles/5df1a2d3b00912</id>
        <link href="https://zenn.dev/yag_ays/articles/5df1a2d3b00912"/>
        <updated>2023-09-03T01:23:08.000Z</updated>
        <summary type="html"><![CDATA[クローリング監視の必要性
ウェブサイトのクローリングは、インターネット上の情報を自動的に収集する方法です。機械学習の文脈では、言語モデルや辞書作成などのデータの収集に欠かすことができない技術です。必要な質および量のデータを収集するためには、定期的かつ大規模なクローリングが必要となります。
さて、クローリングを実装し運用する上で問題となるのが、エラーの対応です。インターネットを通じてウェブページをクローリングする際には、以下のような問題が偶発的に発生します。

ネットワーク的な問題でリクエストがタイムアウトする
リクエスト先のサーバの問題で、正常にHTMLが読み込まれない
ウェブページ...]]></summary>
        <author>
            <name>yag_ays</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[cuQuantum で遊んでみる (7) — 期待値計算再考]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-cuquantum07</id>
        <link href="https://zenn.dev/derwind/articles/dwd-cuquantum07"/>
        <updated>2023-09-02T17:17:24.000Z</updated>
        <summary type="html"><![CDATA[目的
cuQuantum で遊んでみる (6) — 最大カット問題と QUBO と QAOA で cuQuantum を使った、QAOA 的なハミルトニアンの期待値計算を扱った。この計算は素直で分かりやすいのだが、一方で非効率なところもあるように思う。それは何度も CircuitToEinsum を呼び出し、何度も contract を呼ぶことである。まずは contract の呼び出しを減らせないかを考察してみたい。

 問題設定
3 量子ビットの量子回路において、ハミルトニアン H = Z_0 \otimes Z_1 + Z_1 \otimes Z_2 の期待値を計算するものとす...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[geom 0 is INVALID: Self-intersection 自己交差エラーとその回避]]></title>
        <id>https://zenn.dev/syu_tan/articles/2c43758b8c349d</id>
        <link href="https://zenn.dev/syu_tan/articles/2c43758b8c349d"/>
        <updated>2023-09-02T14:41:13.000Z</updated>
        <summary type="html"><![CDATA[ポリゴンの扱いをしている中で以下のようなエラーが発生します。
GEOSException: TopologyException: 
Input geom 0 is invalid: 
Self-intersection at 182.71451535122969 3137.9381128435944

エラーの原因は Self-intersection の通りでポリゴン自体が 自己交差 してしまっていることが原因です。
ArcGIS の資料には 自己交差 の例が記載されています。
https://pro.arcgis.com/ja/pro-app/latest/help/editing/...]]></summary>
        <author>
            <name>emmyeil</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[個人開発の反省点(地獄のバックエンド編)～個人開発WEBアプリYEN$CONVERSION」より～]]></title>
        <id>https://zenn.dev/syab_syab/articles/32863c7f3ac9a6</id>
        <link href="https://zenn.dev/syab_syab/articles/32863c7f3ac9a6"/>
        <updated>2023-09-02T12:13:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
外国からの輸入品を日本円から現地の通貨に換算して、向こうではどのくらいの価値があるのかの目安を示すことができるWEBアプリ「YEN$CONVERSION」を完成させてしばらく経ちました。
開発で疲れ切った頭もようやく回復してきたので、今回は反省点を書こうと思います。
文章量が多くなりそうなので、2つに分けて投稿したいと思います。

フロントエンド編
バックエンド編 ← 今ここ

こちらの記事 → React.js + Supabase + GCPで作った個人開発WEBアプリ「YEN$CONVERSION」もよろしくお願いします。

 今回の開発を通しての感想
とにかく長引い...]]></summary>
        <author>
            <name>しゃぶしゃぶ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[dequeの使い方]]></title>
        <id>https://zenn.dev/yuto_mo/articles/3a381c4a4086e7</id>
        <link href="https://zenn.dev/yuto_mo/articles/3a381c4a4086e7"/>
        <updated>2023-09-02T09:58:59.000Z</updated>
        <summary type="html"><![CDATA[今回はpythonのdequeについて解説します。

 deque(デック)とは
deque(デック)とは、
・両端に対する要素の追加や削除が高速に行えるデータ構造
です。
データ構造とはpythonで使用されるデータの型のことで、例えばlistやdictもデータ構造の一種です。

 特徴
dequeの特徴は
・キュー処理やスタック処理を高速に行う事ができること
です。
特に大量のデータを扱う際にはパフォーマンスの違いが顕著になることがあります。
※キュー処理とスタック処理
簡単に言うと[1,2,3,4,5]などのデータの先頭や末尾にデータを追加したり、データを消したりすること
要約：l...]]></summary>
        <author>
            <name>pomu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】データセットの間違い探し]]></title>
        <id>https://zenn.dev/ykesamaru/articles/d4b78ea53b02e2</id>
        <link href="https://zenn.dev/ykesamaru/articles/d4b78ea53b02e2"/>
        <updated>2023-09-02T04:01:20.000Z</updated>
        <summary type="html"><![CDATA[はじめに
深層学習におけるモデル学習において、データセットのクレンジングは重要な作業です。
顔認証システムにおいてのデータセットのクレンジングとは、「人物Aの顔画像ファイルが、間違いなく人物Aのフォルダーに存在しているか」と定義できます。
このクレンジング作業は、ある程度自動化していますが、最終的には目視で確認する必要があります。
なかには知っている人物もありますが、大部分は知らない人物です。
スクレイピング対象の人物名がマイナーな場合（仮に人物Aとします）、同じ名字の有名人（人物B）がヒットしてしまうこともあります。
有名人と言っても私は知らないので、顔画像枚数の多い人物Bを、人...]]></summary>
        <author>
            <name>yKesamaru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DiscordBotの仕様変更で受けた影響(2020->2023)]]></title>
        <id>https://zenn.dev/inuo/articles/35cc9a14697363</id>
        <link href="https://zenn.dev/inuo/articles/35cc9a14697363"/>
        <updated>2023-09-02T03:42:16.000Z</updated>
        <summary type="html"><![CDATA[2020年ごろに作成したDiscordのBotを色々あって2023年の今実行しようとしたら下記エラーが

TypeError: init() missing 1 required keyword-only argument: 'intents'
なんか書き方が変わったらしい


 従来の記載
client = discord.Client()

 新しい記載
client = d.scord.Client(intents=discord.Intents.all())
まあエラー分そのままの意味に書き換えただけだけど

 なんか違うエラーが出た

discord.errors.Privil...]]></summary>
        <author>
            <name>いぬお</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChatGPTの仮想会社「ChatDev」にゲームを開発してもらう方法]]></title>
        <id>https://zenn.dev/karaage0703/articles/05b647078a2d8a</id>
        <link href="https://zenn.dev/karaage0703/articles/05b647078a2d8a"/>
        <updated>2023-09-02T02:35:54.000Z</updated>
        <summary type="html"><![CDATA[ChatGPTにゲーム開発を委託
これが面白そうだったので試してみました。
https://nowokay.hatenablog.com/entry/2023/09/01/132459
Dockerとか使おうかなと思いましたが、GitHubを見た感じcondaだったので、MacとMiniForgeで動かすのが一番無難そうと直感したので、そうしました。
というわけでMacBook Air + MiniForgeです。以下参照にセットアップしましょう。
https://zenn.dev/karaage0703/articles/f3254b14898b4d
開発中のデバッグで、GUI使...]]></summary>
        <author>
            <name>karaage0703</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[東工大機械系院試をpythonで解いてみた[流体力学編]]]></title>
        <id>https://zenn.dev/porphyrio/articles/c43ab6b9879af1</id>
        <link href="https://zenn.dev/porphyrio/articles/c43ab6b9879af1"/>
        <updated>2023-09-02T01:41:39.000Z</updated>
        <summary type="html"><![CDATA[はじめに
東工大の機械系の院試の問題をpythonを使って解いてみます。今回は令和1年度 流体力学 問題1を解いていきます。過去問は以下のページにあります。
https://www.titech.ac.jp/admissions/prospective-students/admissions/past-exam-papers

 問題


 (1)
W(z)にz=re^{i\theta}を代入し、展開した式の実部が速度ポテンシャル、虚部が流れ関数です。
from sympy import symbols, I, ln, cos, sin, re, im, arg, Abs

# 変数...]]></summary>
        <author>
            <name>porphyrio</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【AOJ解説(python)】ALDS1_8_C 二分探索木の実装]]></title>
        <id>https://zenn.dev/usma11dia0/articles/solve-alds-1-8-c</id>
        <link href="https://zenn.dev/usma11dia0/articles/solve-alds-1-8-c"/>
        <updated>2023-09-01T15:10:13.000Z</updated>
        <summary type="html"><![CDATA[本記事ではAizu Online Judgeより、ALDS1_8_Cの考え方と実際の解答をpythonで解説します。問題のリンク先は下記となります。
https://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=ALDS1_8_C&lang=ja

 方針
二分探索木の実装に関する問題です。まず二分探索木がどのような条件を満たす木であるかを確認します。
その後、条件を満たすよう実装していきますが、実装には関数で行う方法とクラスで行う方法の2通りが考えられます。
今回はクラスでの実装を試みたいと思います。

 二分探索木の特徴
...]]></summary>
        <author>
            <name>usma11dia0</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[RecBoleを使ってみよう3　Atomicファイルについて]]></title>
        <id>https://zenn.dev/kentoo1/articles/d5aef1c67901a0</id>
        <link href="https://zenn.dev/kentoo1/articles/d5aef1c67901a0"/>
        <updated>2023-09-01T13:32:58.000Z</updated>
        <summary type="html"><![CDATA[概要
前回はAnimeデータセットをRecBole用のデータに変換しました。変換後のデータの先頭部分を少し見てみましょう。

 anime.item




item_id:token
name:token_seq
genre:token_seq
type:token
episodes:float
avg_rating:float
members:float




32281
Kimi no Na wa.
Drama, Romance, School, Supernatural
Movie
1
9.37
200630


5114
Fullmetal Alchemist: Brot...]]></summary>
        <author>
            <name>ケントゥ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenCVを用いた画像の画素ごとの補色を用いた色変換【Python】]]></title>
        <id>https://zenn.dev/blueman/articles/4aef850be5f439</id>
        <link href="https://zenn.dev/blueman/articles/4aef850be5f439"/>
        <updated>2023-09-01T10:47:31.000Z</updated>
        <summary type="html"><![CDATA[この記事はQiitaの記事の転載です!!
Qiitaの記事はこちら!!
https://qiita.com/blueman/items/27be76fd66f238f2e2e1


 目次
はじめに
実行環境
画像の画素値へのアクセス方法
補色の計算方法
画像上に文字を出力する方法
複数の画像を横並びに表示する方法
ソースコード
結果
まとめ

 はじめに
今回は、前回のTwitter(X)のアンケートでトップだった動画像処理についての記事です。
そのジャンルの中から、オリジナル画像・画像の画素値ごとの補色を用いて変換した画像・ネガポジ反転した画像を並べて表示させ、ネガポジ反転と補色を用...]]></summary>
        <author>
            <name>ブルーマン</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VSCode 保存時+Cell実行時にnotebookをblackでformatする設定]]></title>
        <id>https://zenn.dev/knao124/articles/230901-vscode-ipynb</id>
        <link href="https://zenn.dev/knao124/articles/230901-vscode-ipynb"/>
        <updated>2023-09-01T05:50:09.000Z</updated>
        <summary type="html"><![CDATA[保存時+Cell実行時にblackでformatする
{
    "[python]": {
        "editor.defaultFormatter": "ms-python.black-formatter"
    },
    "notebook.formatOnSave.enabled": true,
    "notebook.formatOnCellExecution": true
}

 参考


Visual Studio Code March 2023

保存時



Visual Studio Code May 2023

Cell実行時



visua...]]></summary>
        <author>
            <name>knao124</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-297｜B - chess960]]></title>
        <id>https://zenn.dev/hyperdb/articles/ce2d0f2fe9dc6f</id>
        <link href="https://zenn.dev/hyperdb/articles/ce2d0f2fe9dc6f"/>
        <updated>2023-09-01T04:32:22.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-297 B - chess960



 提出結果
def getString():
    return input()


def main():
    s = getString()

    r = False
    if s.find('B') % 2 != s.rfind('B') % 2 and s.find('R') < s.find('K') < s.rfind('R'):
        r = True

    print('Yes' if r else 'No')


if __name__ == "__main__"...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-297｜A - Double Click]]></title>
        <id>https://zenn.dev/hyperdb/articles/2d8ca84bdb66f7</id>
        <link href="https://zenn.dev/hyperdb/articles/2d8ca84bdb66f7"/>
        <updated>2023-09-01T04:32:22.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-297 A - Double Click



 提出結果
def getIntMap():
    return map(int, input().split())


def getIntList():
    return list(map(int, input().split()))


def main():
    n, d = getIntMap()
    t = getIntList()

    c = [i for i in range(1, n) if t[i] - t[i - 1] <= d]

    print(t[min(...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[cuQuantum で遊んでみる (6) — 最大カット問題と QUBO と QAOA]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-cuquantum06</id>
        <link href="https://zenn.dev/derwind/articles/dwd-cuquantum06"/>
        <updated>2023-08-31T17:59:41.000Z</updated>
        <summary type="html"><![CDATA[目的
cuQuantum で遊んでみる (5) — VQE その 2 で VQE を無理やり実行してみたが、今回は 3 種類の方法で最大カット問題を解いてみたい。

 最大カット問題
Maximum cut にあるように、頂点と辺がつながったグラフにおいて、頂点を黒と白に塗分ける類のものである。辺で繋がった頂点同士が異なる色で塗られている場合に、その辺は “カット可能” という解釈をする。カットできる箇所を最大化するという組み合わせ最適化問題である。
明らかに 最大カット問題 のほうが明らかに優しい雰囲気の解説である。

 今回試す手法


TYTAN SDK: 疑似量子アニーリング...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ジェネレータでyieldの後に処理が書いてあったらどうなる]]></title>
        <id>https://zenn.dev/x_point_1/articles/65a0a20bea145f</id>
        <link href="https://zenn.dev/x_point_1/articles/65a0a20bea145f"/>
        <updated>2023-08-31T14:50:07.000Z</updated>
        <summary type="html"><![CDATA[はじめに
どうも、うみぶどうです。エックスポイントワンで働き始めてまだ日が浅いエンジニアです。
Pythonのジェネレータの動きについて、理解が足りず困った経験から記事を執筆しました。
表題通りです。どうなるんでしょう。

 そもそもジェネレータってなに
Pythonにおいて、繰り返し値を返却することができる関数のことです。
ものすごくざっくり説明すると、関数で値の返却を記述する局面で、
return value
とするところをreturnの代わりに、yieldを以下のように使用します。
for row in rows:
    yield row
呼び出される度に一つずつ、値を返却...]]></summary>
        <author>
            <name>うみぶどう</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python（openpyxl）でExcelをHTMLに変換する試み]]></title>
        <id>https://zenn.dev/collabostyle/articles/d6e32c3d96b2ec</id>
        <link href="https://zenn.dev/collabostyle/articles/d6e32c3d96b2ec"/>
        <updated>2023-08-31T14:48:01.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回はExcelで作った文書のレイアウトを、PythonでHTMLに変換するツールを作成してみました。
サンプルで使った文書は、いわゆるExcel方眼紙の稟議書です。

 結果
実行結果から書いてしまいますが、Pythonのライブラリ「openpyxl」を使うことで、
Excelのセルの情報を読み取り、それっぽくHTML＋CSSに変換できることができました！
ですが、再現性を上げるには装飾の反映や、マージセルの考慮などが大変なことも分かりました。
処理の流れを解説しますが、罫線の種類、背景色、文字色の指定などいろいろ未完成です💦


 処理の流れ

 【１】メイン処理
エン...]]></summary>
        <author>
            <name>TETRER</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[日経先物分析その1 ... Sessionの割り当て]]></title>
        <id>https://zenn.dev/daidai_daitai/articles/92e8fbbfa79e42</id>
        <link href="https://zenn.dev/daidai_daitai/articles/92e8fbbfa79e42"/>
        <updated>2023-08-31T13:55:07.000Z</updated>
        <summary type="html"><![CDATA[何をするのか
日経先物を対象にデータの前処理や分析を行います。一度に全部を書くのが大変なので、シリーズ化しちょこちょこ書いて行こうと思っていますが、勉強中の素人なので間違いは勘弁してください。

 その1の目的
日経先物miniの1分足データを使用し、session名を割り当て、sessionごとにuniqueなIDを割り当てる方法を解説します。

 準備

 使用するデータ
DataFrame
 
shape: (2_874_147, 6)
┌─────────────────────┬───────┬───────┬───────┬───────┬────────┐
│ date...]]></summary>
        <author>
            <name>橙。</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[RyeでWord2Vecの開発環境を構築]]></title>
        <id>https://zenn.dev/seven_901/articles/05bd001edd4aaa</id>
        <link href="https://zenn.dev/seven_901/articles/05bd001edd4aaa"/>
        <updated>2023-08-31T12:23:05.000Z</updated>
        <summary type="html"><![CDATA[概要
3年ぶりにPythonの開発環境を整えるためにzennなどを調査してみると、最近ではRyeと呼ばれるパッケージ管理ツールが注目されているそうです。
https://rye-up.com/
早速、こちらのインストール手順を進めてから、日本語のwikipediaを学習させるためのWord2Vecの開発環境を構築しました。
その時の環境構築の手順と実際にRyeを利用してみた感想を記述したいと思います。

 リポジトリ
https://github.com/hagiwa901/word2vec

 環境

Mac
Docker：20.10.0
docker-compose：1.27.4...]]></summary>
        <author>
            <name>seven_901</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[座談会記事ができるまで 〜Whisper + pyannote.audio で自動書き起こし・話者分離を試してみた〜]]></title>
        <id>https://zenn.dev/terass_dev/articles/c38e38499e0635</id>
        <link href="https://zenn.dev/terass_dev/articles/c38e38499e0635"/>
        <updated>2023-08-31T10:48:34.000Z</updated>
        <summary type="html"><![CDATA[株式会社TERASS でエンジニアリングマネージャーを担当している hiroya です。
前回、TERASS エンジニアメンバーのデスク環境座談会と題した記事を公開しましたが、今回はその記事ができるまでの過程をご紹介したいと思います。
また、「最新の音声認識モデルを利用することで文字起こし作業がどれだけ簡略化できるか？」といった点について、記事の後半でその手順や実際の精度について説明していきます。

 全体の流れ

 1. 記事のストーリーを決める
記事全体の流れを想定しながら、どんな感じの内容を盛り込むか決めていきます。


 2. スケジュールを確保し、座談会を開催
TERASSは「...]]></summary>
        <author>
            <name>hiroya</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[アイヌ語仮名「ㇷ゚」に対する正規表現の罠]]></title>
        <id>https://zenn.dev/mkpoli/articles/ff01135f91d7ee</id>
        <link href="https://zenn.dev/mkpoli/articles/ff01135f91d7ee"/>
        <updated>2023-08-31T08:08:25.000Z</updated>
        <summary type="html"><![CDATA[導入
アイヌ語は日本語と異なり、閉音節（子音で終わる音節）も存在するので、表記の際音素文字であるラテン文字なら、そのまま p, t, k, m, n, s, r などの子音文字を後ろの付ければ良いわけなので、アイヌ語ローマ字表記では、何も問題が生じない。しかし、元々開音節言語である日本語に特化したカタカナのような仮名文字で表記する際、鼻音 n は「ン」でなんとかなる（実はそれでもまずい事になっているけどここでは割愛する）が、p, t, k, m, n, s, r, h はどうしようもないので、特殊の捨て仮名（小書き仮名文字）を利用することになっている。
具体的には以下のような特殊仮名...]]></summary>
        <author>
            <name>mkpoli</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[保存版] pandasのメモリ節約方法まとめ]]></title>
        <id>https://zenn.dev/okun/articles/3ed213edd1048e</id>
        <link href="https://zenn.dev/okun/articles/3ed213edd1048e"/>
        <updated>2023-08-31T07:00:45.000Z</updated>
        <summary type="html"><![CDATA[pandasのDataFrameで大容量データを扱っていると、すぐにメモリ超過してしまいます。
メモリ超過すると、ついスペック側でメモリを上げたくなってしまいますが、やはり費用が嵩んでしまいます。
しかし、pandasの実装を少し工夫するだけで、使用メモリを大幅に抑えられることが結構あります。
私はこれまでメモリを節約するためにあらゆる方法を試してきましたので、今回はおすすめの手法をまとめてみました！
皆さんのサーバー費用が少しでも抑えられると幸いです。

 基本編

 カラムの型指定をする
カラムについて、型の指定がないと、数値の場合には自動でint64またはfloat64が付与されて...]]></summary>
        <author>
            <name>t_nobu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[conda環境をjupyter notebookで使う]]></title>
        <id>https://zenn.dev/maeda56/articles/da8ea39cd5a030</id>
        <link href="https://zenn.dev/maeda56/articles/da8ea39cd5a030"/>
        <updated>2023-08-31T06:13:03.000Z</updated>
        <summary type="html"><![CDATA[conda install ipykernel
python -m ipykernel install --user --name=環境名]]></summary>
        <author>
            <name>maeda56</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pytorch3dのインストール]]></title>
        <id>https://zenn.dev/maeda56/articles/7d0a72c90491a5</id>
        <link href="https://zenn.dev/maeda56/articles/7d0a72c90491a5"/>
        <updated>2023-08-31T05:36:56.000Z</updated>
        <summary type="html"><![CDATA[apt-get install g++
pip install git+https://github.com/facebookresearch/pytorch3d.git
環境はUbuntu22.04.3LTSのanaconda環境。
pip　install pytorch3dやcondaではうまく行かなかった。gitからpipでとってくる方法だとうまく行きました。]]></summary>
        <author>
            <name>maeda56</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pip install notebookでPyYaml error]]></title>
        <id>https://zenn.dev/maeda56/articles/07083a654e98e9</id>
        <link href="https://zenn.dev/maeda56/articles/07083a654e98e9"/>
        <updated>2023-08-31T05:36:23.000Z</updated>
        <summary type="html"><![CDATA[anaconda環境でpip install notebookとすると以下のログが出ました。
(省略)
Attempting uninstall: pyyaml
    Found existing installation: PyYAML 5.1.2
ERROR: Cannot uninstall 'PyYAML'. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial ...]]></summary>
        <author>
            <name>maeda56</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-296｜A - Alternately]]></title>
        <id>https://zenn.dev/hyperdb/articles/bdd8a22ba9d6f9</id>
        <link href="https://zenn.dev/hyperdb/articles/bdd8a22ba9d6f9"/>
        <updated>2023-08-31T05:09:25.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-296 A - Alternately



 提出結果
def getInt():
    return int(input())


def getString():
    return input()


def main():
    n = getInt()
    s = getString()

    print('Yes' if s.find('MM') == -1 and s.find('FF') == -1 else 'No')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-296｜B - Chessboard]]></title>
        <id>https://zenn.dev/hyperdb/articles/95d1b7b3b2c836</id>
        <link href="https://zenn.dev/hyperdb/articles/95d1b7b3b2c836"/>
        <updated>2023-08-31T05:09:24.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-296 B - Chessboard



 提出結果
def getStringRow(N):
    return [input() for _ in range(N)]


def main():
    s = getStringRow(8)
    s.reverse()

    for y in range(8):
        x = s[y].find('*')
        if x >= 0:
            print('%s%d' % (chr(ord('a') + x), y + 1))


if __name__...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【ABC317】AtCoder Beginner Contest 317 A-D 振り返り【Python】]]></title>
        <id>https://zenn.dev/tmori/articles/5b29373cad0197</id>
        <link href="https://zenn.dev/tmori/articles/5b29373cad0197"/>
        <updated>2023-08-31T01:22:27.000Z</updated>
        <summary type="html"><![CDATA[https://atcoder.jp/contests/abc317

 A - Potions
以下の条件になるまで傷口を順番に選択する。
P_n (傷薬nの回復量) + H (現在の体力) \geq X (目標体力)
N, H, X = map(int, input().split())
p_list = list(map(int, input().split()))

for i, p in enumerate(p_list):
    if H + p >= X:
        print(i + 1)
        exit()

 B - MissingNo.
ナオ...]]></summary>
        <author>
            <name>tmori</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonにおけるハッシュの扱いとメモリの削減について]]></title>
        <id>https://zenn.dev/d2c_mtech_blog/articles/1d4511c9345e7c</id>
        <link href="https://zenn.dev/d2c_mtech_blog/articles/1d4511c9345e7c"/>
        <updated>2023-08-31T00:53:37.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは、D2Cデータサイエンティストの小林です。
本記事では、Pythonによるハッシュの扱い方とハッシュを用いることで使用するメモリの削減ができるのかを検証します。
ハッシュについては簡単な紹介のみとなりますので、ハッシュについて深く知りたい方は他の記事を参考していただければと思います。

 開発環境
検証において以下の環境を使用しました。

AWS EC2 (インスタンスタイプ: r5.2xlarge)
Python 3.10系（3.10.9）
pandas 1.5.1
memory_profiler 0.61.0
hashlib 3.10系で提供されているモジュー...]]></summary>
        <author>
            <name>D2C m-tech</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[tensorflow v2でfrozen_inference_graph.pbをsaved_modelに変換]]></title>
        <id>https://zenn.dev/ryoooou/articles/6eac87b85984ea</id>
        <link href="https://zenn.dev/ryoooou/articles/6eac87b85984ea"/>
        <updated>2023-08-30T22:04:45.000Z</updated>
        <summary type="html"><![CDATA[覚書なので、全くもって完ぺきではありません。なのでより良い方法がありましたら、コメントをお願いします。
参考
https://saturncloud.io/blog/how-to-convert-a-tensorflow-frozen-graph-to-savedmodel/
https://stackoverflow.com/questions/44329185/convert-a-graph-proto-pb-pbtxt-to-a-savedmodel-for-use-in-tensorflow-serving-o/44329200#44329200
import tensorflo...]]></summary>
        <author>
            <name>リョウ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[google colabでtensorflowのobject_detectionモジュールを使えるようになるまで]]></title>
        <id>https://zenn.dev/ryoooou/articles/676d79492f62c9</id>
        <link href="https://zenn.dev/ryoooou/articles/676d79492f62c9"/>
        <updated>2023-08-30T21:48:17.000Z</updated>
        <summary type="html"><![CDATA[覚書なので、全くもって完ぺきではありません。なのでより良い方法がありましたら、コメントをお願いします。
参考　https://github.com/tensorflow/models/blob/master/research/object_detection/colab_tutorials/inference_tf2_colab.ipynb
import os
import pathlib

# Clone the tensorflow models repository if it doesn't already exist
if "models" in pathlib.Path.cw...]]></summary>
        <author>
            <name>リョウ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Day2：Ray Core の前に... ~ N日間Rayを学ぶ  / Python で分散コンピューティング~]]></title>
        <id>https://zenn.dev/honomaru/articles/23afaa348280fc</id>
        <link href="https://zenn.dev/honomaru/articles/23afaa348280fc"/>
        <updated>2023-08-30T15:08:43.000Z</updated>
        <summary type="html"><![CDATA[毎日やると言いましたが、和訳も元の英語のブログも更新できていません、、というのも体調を大きく崩しており...継続が大事ということで投げ出さず細々と続けていけたらと思います。
Day2はRay Core(分散コンピューティングを支える基礎となるAPIを提供している部分)概要に入る前の前提知識の整理がメインになります。
アプリケーションアーキテクチャの本などで基本のきとして載ってる内容なのかなとか思います。

 Ray Core の前に...

 1. Rayクラスターとは
Rayクラスターは、アプリケーションのプロセスを分散させたいノードのセットを指します（ベアメタルサーバー、仮想マシン、...]]></summary>
        <author>
            <name>Honoka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gitpod上でのJupyter環境で、バージョンを7系から6系にしたお話]]></title>
        <id>https://zenn.dev/rie_amasato/articles/00db1989798b9c</id>
        <link href="https://zenn.dev/rie_amasato/articles/00db1989798b9c"/>
        <updated>2023-08-30T08:12:50.000Z</updated>
        <summary type="html"><![CDATA[前に書いた記事ではGitpodというクラウド上でVSCodeライクな環境を使えるサービスを使って、クラウド上にJupyterのターミナルを置いてお手軽iPadでJupyter環境を整えていました
しかし、Jupyter Notebookが7系アップグレードされたことで問題が発生してしまった
iPadだとShft+Enterでのコードブロック実行後に次のコードブロックにカーソルが移動しない！
これ、いくつかのコードブロックを実行したいそき、右手小指でShiftキーを長押ししながら、薬指でEnter、Enter、Enter…って連続してコードブロックを実行できていたのができなくなっています。...]]></summary>
        <author>
            <name>Amasato Rie(遍怜 悧叡)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-295｜A - Probably English]]></title>
        <id>https://zenn.dev/hyperdb/articles/a3bbb772add1f8</id>
        <link href="https://zenn.dev/hyperdb/articles/a3bbb772add1f8"/>
        <updated>2023-08-30T07:31:35.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-295 A - Probably English



 提出結果
def getInt():
    return int(input())


def getStringList():
    return list(input().split())


def main():
    n = getInt()
    w = getStringList()
    d = ['and', 'not', 'that', 'the', 'you']

    w.sort()

    r = False
    for x in set(w):
     ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-295｜B - Bombs]]></title>
        <id>https://zenn.dev/hyperdb/articles/664232fa21aa5b</id>
        <link href="https://zenn.dev/hyperdb/articles/664232fa21aa5b"/>
        <updated>2023-08-30T07:31:35.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-295 B - Bombs



 提出結果
def getIntMap():
    return map(int, input().split())


def getStringListRow(N):
    return [list(input()) for _ in range(N)]


def explode(a, x, y, w, h):
    p = int(a[y][x])

    a[y][x] = '.'

    for j in range(-p, p + 1):
        for i in range(-p, p + 1...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChatGPTとLangChainを活用したアプリ開発]]></title>
        <id>https://zenn.dev/sutamac/articles/630dc87f62e6b4</id>
        <link href="https://zenn.dev/sutamac/articles/630dc87f62e6b4"/>
        <updated>2023-08-30T07:00:54.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回はChatGPTを利用した開発におけるアシスタントのやり方とLangChainを活用した実装方法を具体的なアプリ開発を例に解説していきます。
LangChainの実装方法について、Python未経験の自分でもサクッと実装できたので、初心者でも理解できるように解説をしていきます。

 この記事で学べること

ChatGPTを使って要件定義、設計、開発などをアシストする活用例が分かる
アプリ開発においてLangChainの活用方法を学べる

前半でビジネスサイド(いわゆる要件定義、設計)などの解説をし、後半で具体的な開発例を解説する構成になっています。
LangChainに...]]></summary>
        <author>
            <name>KNR109</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[huggingface autotrainをgoogle colabで試してみた]]></title>
        <id>https://zenn.dev/tatsuromurata/articles/b8bcaac383b167</id>
        <link href="https://zenn.dev/tatsuromurata/articles/b8bcaac383b167"/>
        <updated>2023-08-30T03:39:59.000Z</updated>
        <summary type="html"><![CDATA[huggingface autotrainとは
huggingface autotrainとは、データセットさえあれば誰でも簡単にLLMやStable diffusionを学習することができるprojectです。
https://github.com/huggingface/autotrain-advanced
今回はstable diffusion xlを対象にやってみようと思います。

 リンク
Colab
github

 準備
Google Colabを開き、メニューから「ランタイム→ランタイムのタイプを変更」でランタイムを「GPU」に変更します。

 環境構築
インストール...]]></summary>
        <author>
            <name>しば🐕AI</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonコードをVSCodeでptvsdを使ってリモートデバッグ]]></title>
        <id>https://zenn.dev/lot36z/articles/0453eb2a06ebe5</id>
        <link href="https://zenn.dev/lot36z/articles/0453eb2a06ebe5"/>
        <updated>2023-08-30T03:27:50.000Z</updated>
        <summary type="html"><![CDATA[PythonコードをVSCodeでptvsdを使ってリモートデバッグする方法のメモです。
Pythonのバージョンは以下のとおり。
python --version
出力結果:
Python 3.10.8

 必要ライブラリのインストール
# 必要ライブラリのインストール
python -m pip install ptvsd==4.3.2

 実行スクリプトの作成
実行スクリプト(=デバッグしたいスクリプト)を仮で以下のとおり作成。

./sample.py
import sys

if __name__ == '__main__':
    print("Hello, " + sys...]]></summary>
        <author>
            <name>のっかー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[github actions]Error: Process completed with exit code 5.]]></title>
        <id>https://zenn.dev/zuzuzu/articles/e3d4305c403707</id>
        <link href="https://zenn.dev/zuzuzu/articles/e3d4305c403707"/>
        <updated>2023-08-30T02:11:01.000Z</updated>
        <summary type="html"><![CDATA[エラー内容
Run pytest
  pytest
  shell: /usr/bin/bash -e {0}
  env:
    pythonLocation: /opt/hostedtoolcache/Python/3.7.17/x64
    PKG_CONFIG_PATH: /opt/hostedtoolcache/Python/3.7.17/x64/lib/pkgconfig
    Python_ROOT_DIR: /opt/hostedtoolcache/Python/3.7.17/x64
    Python2_ROOT_DIR: /opt/hostedtoolca...]]></summary>
        <author>
            <name>zuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[東工大機械系院試をpythonで解いてみた[数学編]]]></title>
        <id>https://zenn.dev/porphyrio/articles/93ef80b71703d3</id>
        <link href="https://zenn.dev/porphyrio/articles/93ef80b71703d3"/>
        <updated>2023-08-29T15:14:23.000Z</updated>
        <summary type="html"><![CDATA[はじめに
東工大の機械系の院試の問題をpythonを使って解いてみます。今回は令和3年度の数学の試験を解いていきます。過去問は以下のページにあります。
https://www.titech.ac.jp/admissions/prospective-students/admissions/past-exam-papers

 問１


 問1 (1)
回転体の体積を求める問題です。まず図を書いてみます。
import matplotlib.pyplot as plt
import numpy as np

#仮の値
a = 2
b = 5

# 円のパラメータ
center = (0,...]]></summary>
        <author>
            <name>porphyrio</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[RecBoleを使ってみよう2　データの用意]]></title>
        <id>https://zenn.dev/kentoo1/articles/30ac7f25d76278</id>
        <link href="https://zenn.dev/kentoo1/articles/30ac7f25d76278"/>
        <updated>2023-08-29T14:28:14.000Z</updated>
        <summary type="html"><![CDATA[概要
前回はPoetryを用いてRecboleの環境構築をし、テストコマンドが通るところまで進めました。
今回は、Recboleが用意しているデータセットリストの中からAnimeデータセットを取得し、RecBoleで使えるフォーマットに加工する方法を書きます。基本的には公式ドキュメント（Anime.md）の通りに進めればよいのですが、ローカル環境に依存しない形で進めたいので、ここではPoetryを使った方法を紹介します。

 データを用意する

 データ加工リポジトリのクローン
mkdir ~/src
cd ~/src
git clone https://github.com/RUC...]]></summary>
        <author>
            <name>ケントゥ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[衛生画像をPythonでNDVIに変換して表示する方法]]></title>
        <id>https://zenn.dev/h_hiroyuki/articles/4b92c64ab41ede</id>
        <link href="https://zenn.dev/h_hiroyuki/articles/4b92c64ab41ede"/>
        <updated>2023-08-29T13:47:28.000Z</updated>
        <summary type="html"><![CDATA[はじめに
衛生画像を活用して健康と衛生に関する情報を得ることは、今や一般的な方法です。本記事では、Pythonを使用して、衛生画像をNDVI（Normalized Difference Vegetation Index）に変換し、そのプロセスを通じて衛生画像の解析方法を紹介します。

 衛生画像とNDVIとは？
衛生画像は、特定の波長範囲で撮影された画像で、土地や植物の健康状態を評価するのに使用されます。一方、NDVIは植物の植生を示す指標で、緑色と近赤外線の光の反射率を比較することで算出されます。NDVIは、植物の生育状態や土地の質を評価するのに役立つ重要な指標です。
農業では、例...]]></summary>
        <author>
            <name>Hiro</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Day 1 ~ N日間Rayを学ぶ  / Python で分散コンピューティング~]]></title>
        <id>https://zenn.dev/honomaru/articles/16121b9124e7b4</id>
        <link href="https://zenn.dev/honomaru/articles/16121b9124e7b4"/>
        <updated>2023-08-29T09:18:44.000Z</updated>
        <summary type="html"><![CDATA[前書き
毎日Rayとその周りの知識について、少しでも学習した記録を残していこうと思います。
RayだけでなくOS周りの知識もつけていきたいなと思います。
みなさんは、Rayをご存知でしょうか？
英語でもRayのブログを書いているんですが、調べていて日本語の記事が少ないのかな？と思ったので、日本語でも書いてみようかなというモチベーションです。
※英語版も同じですが、学習過程の記録なので理解が誤ってる可能性もありますが、誤りに気づいたらできるだけ修正もしていきたいと思います。。
Rayについては、オライリーから書籍が出ています。英語版ですが。。

Scaling Python With ...]]></summary>
        <author>
            <name>Honoka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonのクラス変数に外部関数を使うとTypeError:(省略) but 1 was givenになる問題を考える]]></title>
        <id>https://zenn.dev/nomuraya/articles/f8b749930ed0af16d76c</id>
        <link href="https://zenn.dev/nomuraya/articles/f8b749930ed0af16d76c"/>
        <updated>2023-08-29T07:40:11.000Z</updated>
        <summary type="html"><![CDATA[!
この記事はQiitaから移行しています。

https://qiita.com/items/f8b749930ed0af16d76c


 お詫び
Qiitaの元記事にて、区切り線を「---」で書いている場所があり、これがZennの記法に干渉して一部うまく表示できない記事がある事を認識しています。
全ての記事を精査しきれていないため、お手数ですがお見かけの際は教えていただけると大変喜びます。


 変更前タイトル：pythonのクラス変数に外部関数を使うときにTypeError: function name takes 0 positional arguments but 1 was...]]></summary>
        <author>
            <name>nomuraya@元CTOのIT講師</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonで任意の場所に文字を挿入したい！（関数・ラムダ式でも書いてみた）]]></title>
        <id>https://zenn.dev/nomuraya/articles/d68ed63a7dae897eda7c</id>
        <link href="https://zenn.dev/nomuraya/articles/d68ed63a7dae897eda7c"/>
        <updated>2023-08-29T07:36:41.000Z</updated>
        <summary type="html"><![CDATA[!
この記事はQiitaから移行しています。

https://qiita.com/items/d68ed63a7dae897eda7c


 お詫び
Qiitaの元記事にて、区切り線を「---」で書いている場所があり、これがZennの記法に干渉して一部うまく表示できない記事がある事を認識しています。
全ての記事を精査しきれていないため、お手数ですがお見かけの際は教えていただけると大変喜びます。

base_string = 'test'
INSERT_POINT = 2  #分かりやすくするために大文字
insert_string = '--hoge--'

# 2文字目から挿入したい...]]></summary>
        <author>
            <name>nomuraya@元CTOのIT講師</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pathlibのメソッドチェーンだけでパスを加工したい]]></title>
        <id>https://zenn.dev/nomuraya/articles/d360b531039cac1a9842</id>
        <link href="https://zenn.dev/nomuraya/articles/d360b531039cac1a9842"/>
        <updated>2023-08-29T07:36:40.000Z</updated>
        <summary type="html"><![CDATA[!
この記事はQiitaから移行しています。

https://qiita.com/items/d360b531039cac1a9842


 お詫び
Qiitaの元記事にて、区切り線を「---」で書いている場所があり、これがZennの記法に干渉して一部うまく表示できない記事がある事を認識しています。
全ての記事を精査しきれていないため、お手数ですがお見かけの際は教えていただけると大変喜びます。

<a href="https://teratail.com/questions/141682">フルパスを持つPath or strから、任意に指定した階層以上だけを切り捨てたい&...]]></summary>
        <author>
            <name>nomuraya@元CTOのIT講師</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[備忘録：pythonのelse時に何もしない場合の書き方をワンライナーで]]></title>
        <id>https://zenn.dev/nomuraya/articles/b1a59a78ddb1b21f172a</id>
        <link href="https://zenn.dev/nomuraya/articles/b1a59a78ddb1b21f172a"/>
        <updated>2023-08-29T07:32:33.000Z</updated>
        <summary type="html"><![CDATA[!
この記事はQiitaから移行しています。

https://qiita.com/items/b1a59a78ddb1b21f172a


 お詫び
Qiitaの元記事にて、区切り線を「---」で書いている場所があり、これがZennの記法に干渉して一部うまく表示できない記事がある事を認識しています。
全ての記事を精査しきれていないため、お手数ですがお見かけの際は教えていただけると大変喜びます。

気付いたらそれだけなんですが、気付くまでに時間が掛かるやつです。
探しても見つからなかったので備忘録。

 やりたいこと
def practice(message = None):
  if ...]]></summary>
        <author>
            <name>nomuraya@元CTOのIT講師</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[map,filterなど高階関数がよく分からない場合]listの中にlistを持っていた時にmap関数を使いたい]]></title>
        <id>https://zenn.dev/nomuraya/articles/ab1f3c7062f9ef6d588f</id>
        <link href="https://zenn.dev/nomuraya/articles/ab1f3c7062f9ef6d588f"/>
        <updated>2023-08-29T07:32:31.000Z</updated>
        <summary type="html"><![CDATA[!
この記事はQiitaから移行しています。

https://qiita.com/items/ab1f3c7062f9ef6d588f


 お詫び
Qiitaの元記事にて、区切り線を「---」で書いている場所があり、これがZennの記法に干渉して一部うまく表示できない記事がある事を認識しています。
全ての記事を精査しきれていないため、お手数ですがお見かけの際は教えていただけると大変喜びます。


 [map,filterなど高階関数がよく分からない場合]listの中にlistを持っていた時にmap関数を使いたい
なんてことはないんだけど、解説してるサイトが見つからなかったので、後で困...]]></summary>
        <author>
            <name>nomuraya@元CTOのIT講師</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[もっと簡単で高速に一意なデータの判別がしたい]]></title>
        <id>https://zenn.dev/nomuraya/articles/a53faad2d3ad566f9b69</id>
        <link href="https://zenn.dev/nomuraya/articles/a53faad2d3ad566f9b69"/>
        <updated>2023-08-29T07:25:17.000Z</updated>
        <summary type="html"><![CDATA[!
この記事はQiitaから移行しています。

https://qiita.com/items/a53faad2d3ad566f9b69


 お詫び
Qiitaの元記事にて、区切り線を「---」で書いている場所があり、これがZennの記法に干渉して一部うまく表示できない記事がある事を認識しています。
全ての記事を精査しきれていないため、お手数ですがお見かけの際は教えていただけると大変喜びます。

結構簡単に出来るみたいです。
当初は素直にlist作ってその中にtargetが存在するかチェックするループを使って…としていたんですが、数によってはめちゃくちゃ重くなるforを実行してしまいま...]]></summary>
        <author>
            <name>nomuraya@元CTOのIT講師</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google Safe Browsing ListにCSVから取得したマルチバイト文字を含んだURLを渡す]]></title>
        <id>https://zenn.dev/nomuraya/articles/7ae15e8dc299ea8ad2c8</id>
        <link href="https://zenn.dev/nomuraya/articles/7ae15e8dc299ea8ad2c8"/>
        <updated>2023-08-29T07:25:07.000Z</updated>
        <summary type="html"><![CDATA[!
この記事はQiitaから移行しています。

https://qiita.com/items/7ae15e8dc299ea8ad2c8


 お詫び
Qiitaの元記事にて、区切り線を「---」で書いている場所があり、これがZennの記法に干渉して一部うまく表示できない記事がある事を認識しています。
全ての記事を精査しきれていないため、お手数ですがお見かけの際は教えていただけると大変喜びます。

Python2.7でやってます。3系はもっと簡単に出来そう。

 ソースコード
from urlparse import urlparse
import urllib

def toGSBL(...]]></summary>
        <author>
            <name>nomuraya@元CTOのIT講師</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[XMLファイルをPandas.DataFrameで扱いたい]]></title>
        <id>https://zenn.dev/nomuraya/articles/78d0174977bb61a52808</id>
        <link href="https://zenn.dev/nomuraya/articles/78d0174977bb61a52808"/>
        <updated>2023-08-29T07:25:06.000Z</updated>
        <summary type="html"><![CDATA[!
この記事はQiitaから移行しています。

https://qiita.com/items/78d0174977bb61a52808


 お詫び
Qiitaの元記事にて、区切り線を「---」で書いている場所があり、これがZennの記法に干渉して一部うまく表示できない記事がある事を認識しています。
全ての記事を精査しきれていないため、お手数ですがお見かけの際は教えていただけると大変喜びます。


 XMLファイルをPandas.DataFrameで扱いたい
pandasはcsvやjsonを扱う時は便利ですが、xmlは対応してくれていないのか、良い方法が思いつきませんでした。
xmlを...]]></summary>
        <author>
            <name>nomuraya@元CTOのIT講師</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pandasの威力を手っ取り早く実感したい]]></title>
        <id>https://zenn.dev/nomuraya/articles/51b5a8bf9ef41ed04ac2</id>
        <link href="https://zenn.dev/nomuraya/articles/51b5a8bf9ef41ed04ac2"/>
        <updated>2023-08-29T07:25:00.000Z</updated>
        <summary type="html"><![CDATA[!
この記事はQiitaから移行しています。

https://qiita.com/items/51b5a8bf9ef41ed04ac2


 お詫び
Qiitaの元記事にて、区切り線を「---」で書いている場所があり、これがZennの記法に干渉して一部うまく表示できない記事がある事を認識しています。
全ての記事を精査しきれていないため、お手数ですがお見かけの際は教えていただけると大変喜びます。

私自身、pythonもあまり理解していると言えないレベルだが、そんなレベルでも手っ取り早くパンダさんすげー！っていいたい記事が見つからなかったので書いた。
正直、他の記事とかを読むと、周りのレ...]]></summary>
        <author>
            <name>nomuraya@元CTOのIT講師</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GPT-4とLangChainで技術記事のクイズを生成するサイトを作った]]></title>
        <id>https://zenn.dev/yu_9/articles/cd31b6a904dcde</id>
        <link href="https://zenn.dev/yu_9/articles/cd31b6a904dcde"/>
        <updated>2023-08-29T06:02:56.000Z</updated>
        <summary type="html"><![CDATA[読んだ技術記事の理解を深めるべく、技術記事の内容からクイズを生成するサイトを作りました。
https://quizbite.yukyu.net/about

 使い方
https://quizbite.yukyu.net にテキストボックスに技術記事のURLを入力し、「クイズを作る」をクリックします。
あとは、クイズが生成されるまで待ちます。生成が終わるまで大体1分半くらいかかります。

https://quizbite.yukyu.net/?url=<技術記事のURL>とすると、テキストボックスにurlが入力された状態で共有できます。

 デモ動画
https://yout...]]></summary>
        <author>
            <name>yukyu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[アソシエーション分析ができるAPIをlambdaとAPI-Gatewayで作った]]></title>
        <id>https://zenn.dev/shabaraba/articles/c581b6126b1a23</id>
        <link href="https://zenn.dev/shabaraba/articles/c581b6126b1a23"/>
        <updated>2023-08-29T05:48:48.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今は訳合ってサービスを閉じてしまっているのですが、スマレジプラットフォームアプリでlook-into-basketsというアプリを公開していました。
https://github.com/shabaraba/look-into-baskets
取引履歴から期間を指定してアソシエーション分析結果を表示するアプリだったのですが、

フロントとバックが密結合だったので、分割したかった
「アソシエーション分析」というもの自体が割と使い勝手がよく、いろんなことに応用が効きそう

自作ブログのタグを分析すれば、僕の興味とかスキルセットとか見えるんじゃないか、とか



という理由から、...]]></summary>
        <author>
            <name>しゃば</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pandasのDataFrame.to_sqlのmethodとchunksize設定について]]></title>
        <id>https://zenn.dev/maretol/articles/9d6aca61cbb89e</id>
        <link href="https://zenn.dev/maretol/articles/9d6aca61cbb89e"/>
        <updated>2023-08-29T05:15:20.000Z</updated>
        <summary type="html"><![CDATA[ことのはじまり
BigQueryで集計した結果をMｙSQLに入れる作業でpythonを用いてこんな感じの実装をしていた（実際はもうちょいいろいろしてる
query_job = bq_client.query(some_query)
query_job.result()
result = query_job.to_dataframe()

result.to_sql(
	some_table,
	connection,
	if_exist="append",
)
あるとき、この部分でエラーが起きて対応したのだが（この対応自体は本記事とあまり関係ないため省略）、pandasのドキュメント...]]></summary>
        <author>
            <name>Maretol</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-294｜A - Filter]]></title>
        <id>https://zenn.dev/hyperdb/articles/fb995e930cf0c1</id>
        <link href="https://zenn.dev/hyperdb/articles/fb995e930cf0c1"/>
        <updated>2023-08-29T04:02:50.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-294 A - Filter



 提出結果
def getInt():
    return int(input())


def getIntList():
    return list(map(int, input().split()))


def main():
    n = getInt()
    a = getIntList()
    b = [i for i in a if i % 2 == 0]

    print(" ".join(map(str, b)))


if __name__ == "__main__":
    ma...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-294｜B - ASCII Art]]></title>
        <id>https://zenn.dev/hyperdb/articles/1f21f49cdf37d5</id>
        <link href="https://zenn.dev/hyperdb/articles/1f21f49cdf37d5"/>
        <updated>2023-08-29T04:02:50.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-294 B - ASCII Art



 提出結果
def getIntMap():
    return map(int, input().split())


def getIntListRow(N):
    return [list(map(int, input().split())) for _ in range(N)]


def asc(c):
    return chr(ord('A') + c - 1)


def main():
    h, w = getIntMap()
    a = getIntListRow(h)

    f...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[大人のためのPythoで、情報、数学再学習]]></title>
        <id>https://zenn.dev/suehiro3721p/books/5b47e32964893f</id>
        <link href="https://zenn.dev/suehiro3721p/books/5b47e32964893f"/>
        <updated>2023-08-29T02:43:54.000Z</updated>
        <summary type="html"><![CDATA[メルマガ「Pythoで、情報、数学再学習」(パイマガ)のまとめ
https://www.mag2.com/m/0001685552

Python  言語で、高校に導入された教科「情報」を学習し、高校数学、さらに、大学工学部で勉強する数学を勉強します。人工知能の基礎となる統計も学習します。]]></summary>
        <author>
            <name>JJ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[「OSError: mysql_config not found」と言われた時の対処法]]></title>
        <id>https://zenn.dev/dexcter/articles/b90455b7f523c7</id>
        <link href="https://zenn.dev/dexcter/articles/b90455b7f523c7"/>
        <updated>2023-08-29T00:08:40.000Z</updated>
        <summary type="html"><![CDATA[発生問題
コマンドにpip install mysqclientと入力すると、以下のエラーメッセージが出てきた
・・・
/bin/sh: 1: mysql_config: not found
/bin/sh: 1: mariadb_config: not found
/bin/sh: 1: mysql_config: not found
Traceback (most recent call last):
File "<string>", line 1, in <module>
File "/tmp/pip-install-pnhw9vzq/mysqlclie...]]></summary>
        <author>
            <name>dexcter</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Webブラウザ上で動くサーバーレスなStreamlitのstliteを試してみた]]></title>
        <id>https://zenn.dev/fitness_densuke/articles/serverless_streamlit_stlite</id>
        <link href="https://zenn.dev/fitness_densuke/articles/serverless_streamlit_stlite"/>
        <updated>2023-08-28T15:14:28.000Z</updated>
        <summary type="html"><![CDATA[stliteとは
stliteは、Streamlitを完全にWebブラウザ上で動作させるためのものです。
stliteはPyodideというCPythonをWebAssembly/Emscriptenに移植させたモノを搭載しています。
Pyodideを使うことで、ブラウザ上でmicropipを使ってPythonパッケージをインストールして実行することができます。
言い換えれば、Streamlit用のPythonサーバーを立てることなく、静的なウェブページをセットアップするだけで、必要な計算をユーザーのマシンで直接実行することができます。
PythonでWebアプリのプロトタイプを素早...]]></summary>
        <author>
            <name>Tamtam</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SIGNATE Career Up Challenge 2023の24位解法]]></title>
        <id>https://zenn.dev/rookzeno/articles/f238f23fcd6e4e</id>
        <link href="https://zenn.dev/rookzeno/articles/f238f23fcd6e4e"/>
        <updated>2023-08-28T15:07:49.000Z</updated>
        <summary type="html"><![CDATA[他の人の解法を見ようと思ったのに、あんまり解法が見当たらなかったので書きました。
上位解法は表彰式に参加して確認しましょう。

 タスク
以下のような中古車販売のデータが与えられるので値段(price)を当てるものです。



走行距離
車種
price




30000
トヨタ
100


10000
日産
Null




 評価指標
\text{MAPE} = \dfrac{100}{n}\displaystyle\sum_{i＝1}^n|\dfrac{y_i-\hat{y_i}}{y_i}|
評価指標がMAPEだったのがこのコンペで難しい部分であり、面白い部分でもあったかもしれ...]]></summary>
        <author>
            <name>rookzeno</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PPL比較：Stan、NumPyro、PyMC]]></title>
        <id>https://zenn.dev/yoshida0312/articles/3323b08e1e6e41</id>
        <link href="https://zenn.dev/yoshida0312/articles/3323b08e1e6e41"/>
        <updated>2023-08-28T14:31:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
最近はPPLのStan、NumPyro、PyMCを触っていたのですが、それぞれ一長一短だったため個人的な感覚での評価値ですが、各ライブラリの比較表を残しておきます。
各ライブラリの細かい使い方は記事一覧から確認してください。

 比較表
階層モデル〜DL系までのカテゴリは書きやすさで評価しています。




Stan
NumPyro
PyMC
MEMO




階層モデル
△
◯
◯
NumPyroとPyMCでは階層のところを行列演算で自然に書くことができる


ガウス過程
△
△
◯
PyMCではカーネル関数やスパースGPなどデフォルトで用意されている


時系列モデル（...]]></summary>
        <author>
            <name>よしだ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ubuntu に nginx, Postgresql, ngrok を使って Mattermost を使ってみた。]]></title>
        <id>https://zenn.dev/hiro_0128/books/f74e4a24f5e95d</id>
        <link href="https://zenn.dev/hiro_0128/books/f74e4a24f5e95d"/>
        <updated>2023-08-28T12:05:34.000Z</updated>
        <summary type="html"><![CDATA[Mattermost のサーバーを構築から公開までの忘備録。]]></summary>
        <author>
            <name>hirosan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ガウス過程回帰とGPyのメモ]]></title>
        <id>https://zenn.dev/hk_ilohas/articles/gaussian-process</id>
        <link href="https://zenn.dev/hk_ilohas/articles/gaussian-process"/>
        <updated>2023-08-28T08:30:19.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Kindle の日替わりセールで買って積読になっていた『ガウス過程と機械学習』を読んだので，ガウス過程回帰について整理し，GPy で試してみました．この記事の内容は『ガウス過程と機械学習』の 2-4 章に対応しています．
ガウス過程回帰とは回帰分析手法の一種で，非線形な関数関係を表すことができます．ガウス過程回帰ではカーネル関数と呼ばれる類似度を表す関数を設定しますが，このカーネル関数を変えることで無限回微分可能な滑らかな関数やブラウン運動，周期性など様々なものを扱えます．

 ガウス分布
平均 \mu，分散 \sigma ^2 のガウス分布の確率密度関数は，

\math...]]></summary>
        <author>
            <name>HK_ilohas</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SlackとChatGPT APIでチャットボットを作る パート5（番外編／Gradioインターフェイス）]]></title>
        <id>https://zenn.dev/techflagcorp/articles/5f2aead03878b1</id>
        <link href="https://zenn.dev/techflagcorp/articles/5f2aead03878b1"/>
        <updated>2023-08-28T07:52:11.000Z</updated>
        <summary type="html"><![CDATA[SlackとChatGPT APIでチャットボットを作る パート5（番外編／Gradioインターフェイス）
パート1（基礎編）、パート2（会話履歴管理編）、パート3（function calling編）、パート4 （code interpreterぽい編）ときて、パート5では番外編としてインターフェイスをGradioにすげ換えてみたいと思います。Slackを使っていない方も多いと思いますが、そんな皆さんもGradioなら手軽に試すことができます。ただひとつ、実は悲しいお知らせがありまして、パート4 （code interpreterぽい編）でPythonコードの実行に使ったIPyth...]]></summary>
        <author>
            <name>dagger1</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[中間テーブルとは #2]]></title>
        <id>https://zenn.dev/oreilly_ota/articles/96fb2d58e273e1</id>
        <link href="https://zenn.dev/oreilly_ota/articles/96fb2d58e273e1"/>
        <updated>2023-08-28T05:13:08.000Z</updated>
        <summary type="html"><![CDATA[概要
本記事では、中間テーブルのデータ表示方法を解説する。「中間テーブルとは #1」に続く記事なので、より詳細を知りたい方はそちらを参考いただきたい。
https://zenn.dev/oreilly_ota/articles/a9a3b4d1dabec0

 中間テーブルのおさらい
中間テーブルのコードを以下に記載する。
order_items = db.Table('order_items',
    db.Column('order_id', db.Integer, db.ForeignKey('order.id'), primary_key=True),
    db.Col...]]></summary>
        <author>
            <name>オライリーヨッシー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-293｜A - Swap Odd and Even]]></title>
        <id>https://zenn.dev/hyperdb/articles/f3fc0c304664d1</id>
        <link href="https://zenn.dev/hyperdb/articles/f3fc0c304664d1"/>
        <updated>2023-08-28T04:50:37.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-293 A - Swap Odd and Even



 提出結果
def getString():
    return input()


def main():
    s = getString()
    t = ''

    i = 0
    while i < len(s):
        t += (s[i:i+2])[::-1]
        i += 2
    print(t)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-293｜B - Call the ID Number]]></title>
        <id>https://zenn.dev/hyperdb/articles/dbb58b46626623</id>
        <link href="https://zenn.dev/hyperdb/articles/dbb58b46626623"/>
        <updated>2023-08-28T04:50:36.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-293 B - Call the ID Number



 提出結果
def getInt():
    return int(input())


def getIntList():
    return list(map(int, input().split()))


def main():
    n = getInt()
    a = [0] + getIntList()
    b = [0 for _ in range(len(a))]

    for i in range(1, len(a)):
        if b[i] == 0:...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AtProtocolを使ってBlueskyにPythonからLinkCardをPostする]]></title>
        <id>https://zenn.dev/sion_pn/articles/a725029649b0f8</id>
        <link href="https://zenn.dev/sion_pn/articles/a725029649b0f8"/>
        <updated>2023-08-28T01:40:45.000Z</updated>
        <summary type="html"><![CDATA[https://zenn.dev/sion_pn/articles/afe598bdbfebf9
前回、AtProtocolを使ってBlueskyにPythonからPostする方法を書きましたが、この方法でURLを含んだテキストを投稿しても、リンクが自動では有効にならないため任意のWebページを開くことが出来ません。
そのため、Blueskyへリンク付きのPostを投稿したい場合、LinkCardを作成して投稿を行うという手順を踏む必要があります。

 使用ライブラリ
前回の記事で紹介した、The At Protocol SDK for Pythonを使用して実装を行います。
本記事投稿...]]></summary>
        <author>
            <name>Mimaki SiON</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[楽天の売れ筋商品からランダムにX(Twitter)に投稿する]]></title>
        <id>https://zenn.dev/torachi0401/articles/how_to_twitter_bot</id>
        <link href="https://zenn.dev/torachi0401/articles/how_to_twitter_bot"/>
        <updated>2023-08-27T16:15:59.000Z</updated>
        <summary type="html"><![CDATA[はじめに
楽天BooksのIT関連の書籍の売れ筋からランダムでTwitterに投稿するシステムを作りました。
特定のジャンルの売れ筋上位30の中からランダムに1つを選択していますので、場合によっては同じ商品が投稿される場合もあります。

 環境


Railway

python3.11

tweepy
reuests






 ソースコード
import tweepy
from const import *


def create_post(_title, _affiliate_url, _item_caption):
    client = tweepy.Client(c...]]></summary>
        <author>
            <name>Torachi0401</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Zennに投稿した記事一覧をCSVに出力する]]></title>
        <id>https://zenn.dev/nori0__/articles/0ef8cbb5bda1d8</id>
        <link href="https://zenn.dev/nori0__/articles/0ef8cbb5bda1d8"/>
        <updated>2023-08-27T15:13:55.000Z</updated>
        <summary type="html"><![CDATA[背景
今まで投稿した技術記事を一覧で欲しいと言われてたので手作業だるすぎとなったのでコード書くことにした。

 実装
https://github.com/nori1994/OUTPUT_CSV_OF_QIITA_ZENN_ARTICLE
ZennだけでなくQiitaでの記事一覧も欲しかったのでどちらも出力できるようにした。
Qiitaについてはこちら。
記事作成日と記事名のCSVが出力される。
published, title,
YYYY/mm/dd, article title,

 工夫したところ


仮想環境記事を参考に仮想環境が Python3 の標準ライブラリである ve...]]></summary>
        <author>
            <name>nori0__</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonでの直接法による最適計算の一例]]></title>
        <id>https://zenn.dev/yonda/articles/13ff0912b92dce</id>
        <link href="https://zenn.dev/yonda/articles/13ff0912b92dce"/>
        <updated>2023-08-27T12:53:36.000Z</updated>
        <summary type="html"><![CDATA[最適制御問題を最適化手法を利用して解く直説法
これをpythonでやってみるだけのメモ
例題とモデルの数式は「直接法による最適計算手法と宇宙機への応用」（宇宙開発事業団技術報告， ISSN1345-7888， NASDA-TMR-010010）より利用させてもらう。

 例題1
1次元の運動
位置:x
速度:v
推力:u
推力は
-1 <= u <= 1
と制限される。
境界条件は
x(0) = 0
v(0) = 0
v(1) = 0
目的関数は
\max x(1)
つまり、
始め（t=0）は静止しているが、
最後(t=1)にはできるだけ遠いところで静止するような
ロケットの...]]></summary>
        <author>
            <name>yonda</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SSE(Server-Sent Events)をFastAPIで行いChatGPTの回答をストリーミングで返すAPIサーバーの実装]]></title>
        <id>https://zenn.dev/fitness_densuke/articles/sse_fastapi_openai</id>
        <link href="https://zenn.dev/fitness_densuke/articles/sse_fastapi_openai"/>
        <updated>2023-08-27T11:13:22.000Z</updated>
        <summary type="html"><![CDATA[今回はFastAPIとSSE(Server-Sent Events)を使って、ChatGPTのようなストリーミングによるレスポンスを実装してみたいと思います！

 SSE(Server-Sent Events)とは
SSEとは、サーバーからクライアントへのイベント・ストリームによる非同期通信をHTTP経由で提供する技術です。
Content-Typeヘッダーにtext/event-streamを指定しデータを送信すると、クライアント側でイベントを受け取ることができます。
WebSocketとSSEの主な違いは、WebSocketが双方向通信であるのに対し、SSEは単一方向の通信です。
S...]]></summary>
        <author>
            <name>Tamtam</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python3とscikit-learnでスロットの大当たり確率を予想して無双しようとした話(ランダムフォレスト編]]></title>
        <id>https://zenn.dev/h0tcatnohotmens/articles/ad6fe9ec3a7148</id>
        <link href="https://zenn.dev/h0tcatnohotmens/articles/ad6fe9ec3a7148"/>
        <updated>2023-08-27T10:20:22.000Z</updated>
        <summary type="html"><![CDATA[はじめに

スロットのデータを手入力でcsvに書き込み、ランダムフォレストで大当たり確率・設定の予想をして、検証をした結果を記事にしてみました。


 対象読者

機械学習に興味がある方
スロットの大当たり予想を試してみたい方


 大当たり予想の検証をした経緯

スロットは1から6まで設定が存在し、6に近いほど高設定と呼ばれプレイヤーが勝ちやすくなります。
当然ながら、しょっちゅう設定6が入ることは無いのが現実です。
そこで、機械学習で過去のデータを学習して予想すれば高設定の台に座りやすくなったり、低設定を打つリスクが下げられるのではと考え実験しました。


 注意
この記事および...]]></summary>
        <author>
            <name>のーり</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GCS composeで32以上のオブジェクトをまとめる方法]]></title>
        <id>https://zenn.dev/jcc/articles/76ba8d333f375d</id>
        <link href="https://zenn.dev/jcc/articles/76ba8d333f375d"/>
        <updated>2023-08-27T09:58:42.000Z</updated>
        <summary type="html"><![CDATA[先日の記事にてパーティション化されたCSVオブジェクトをCloudSQLにimportする方法を紹介しました。
https://zenn.dev/jcc/articles/053ee1e609411d
SDKを利用して32より多いオブジェクトをまとめる場合、GCPのコミュニティのチュートリアルのコードをそのまま使っていました。（2023.8.10にアーカイブされ済み）
https://github.com/GoogleCloudPlatform/community/blob/master/archived/cloud-storage-infinite-compose/index.md
文...]]></summary>
        <author>
            <name>jc</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gmailに届く認証コードをGmailAPIから自動確認したい]]></title>
        <id>https://zenn.dev/otinu/articles/4207621a3e2e0d</id>
        <link href="https://zenn.dev/otinu/articles/4207621a3e2e0d"/>
        <updated>2023-08-27T09:50:20.000Z</updated>
        <summary type="html"><![CDATA[ご挨拶
はじめまして！ おチヌと申します。
普段は Java に触ることが多いですが、個人では Python や JS など自由にやっています。
何かしらやってることの区切りがついたり、おもしろそうなネタがまとまったりした際に記事などアウトプットしていきたいと考えてます。
誰かの記事に助けられることが多いので、自分の記事も微力ながら誰かの+@になるとうれしいです。
どうぞよろしくお願いします。

 GmailAPI の設定
公式ドキュメントが分かりやすかったです。
https://developers.google.com/gmail/api/quickstart/python?hl...]]></summary>
        <author>
            <name>おチヌ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Python]文字列の入力を受けて文字数を数える]]></title>
        <id>https://zenn.dev/huraipan/articles/e49e856058625e</id>
        <link href="https://zenn.dev/huraipan/articles/e49e856058625e"/>
        <updated>2023-08-27T06:36:53.000Z</updated>
        <summary type="html"><![CDATA[本当に簡単な作業をしましょう。
これは初めてPyhtonを学ぶ方向けの練習問題です。
名前を入力したら名前の文字数を出力します。

 文字列を入力してもらおう
まず文字列を入力してもらう必要がありますね
input関数を使って名前をもらいます。
input("名前を教えてください")

 文字数を数える関数は？
len関数を使ったら文字数を数えることができます。
len("abc")  # 3

 結合
じゃあ上で学んだ関数を使って結合しましょう。
まずinputを使ったところに入力した文字列が残ります。
これで入力した名前の文字数をわかりますね。
len(input("名前を教えてくだ...]]></summary>
        <author>
            <name>huraipan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[コマンドプロンプト上で実行するライブラリのエラー対処法(Python)]]></title>
        <id>https://zenn.dev/blueman/articles/8c04b1a57cb4dd</id>
        <link href="https://zenn.dev/blueman/articles/8c04b1a57cb4dd"/>
        <updated>2023-08-27T01:00:00.000Z</updated>
        <summary type="html"><![CDATA[目次
はじめに
実際にやったこと
おわりに

 はじめに
コマンドプロンプト上でライブラリを実行しようとするとエラーが出て調べてもあまり分からず苦労したので、自分以外にも同様の問題に遭遇している方の助けになればと思い対処法を紹介します。
ライブラリ名をコマンドプロンプトにて入力して使用するライブラリ(例えば、pyinstallerやmanimなど)でコマンドプロンプト上でライブラリを実行しようとしたところ次のようなエラーが出ました。
エラー文

エラー文

このエラーを解決するためにpip installを実行してpyinstallerがどこの階層にあるのかを調べると、
実行結果

...]]></summary>
        <author>
            <name>ブルーマン</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[型を意識したPythonのすすめ 第0回]]></title>
        <id>https://zenn.dev/shim_a2kf3/articles/typed_python_no_0</id>
        <link href="https://zenn.dev/shim_a2kf3/articles/typed_python_no_0"/>
        <updated>2023-08-26T16:02:38.000Z</updated>
        <summary type="html"><![CDATA[はじめに
お仕事でPythonを書いて1年くらい経ちました。
(Python自体はもう少しやっています。)
結構カッチリルールを決めてプログラムを書いていく現場に当たったこともあり、型ヒントやmypyを使ってPythonらしからぬ型チェックを強制しています。
型を意識しなくとも気軽に使えることが利点のPythonで、わざわざ型を意識したコーディングをする理由とはなんでしょうか？
この疑問の答えを探しつつ、やっぱりPythonでも型の意識は大事だよね と共感していただけたらと思い、少しずつ記事を書いていこうかと腰を上げた次第です。

 おことわり
本記事と関連する記事は、あくまで個人の...]]></summary>
        <author>
            <name>しま</name>
        </author>
    </entry>
</feed>