<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://s-i27.github.io/Rssfeed/index.html</id>
    <title>osmos::feed</title>
    <updated>2022-11-18T02:03:01.991Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="https://s-i27.github.io/Rssfeed/index.html"/>
    <link rel="self" href="https://s-i27.github.io/Rssfeed/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[[TouchDesigner]PythonからGlobal Shortcutを参照]]></title>
        <id>https://zenn.dev/arkwknsk/articles/73650a926ce974</id>
        <link href="https://zenn.dev/arkwknsk/articles/73650a926ce974"/>
        <updated>2022-11-17T21:23:52.000Z</updated>
        <summary type="html"><![CDATA[Pythonから、動的にGlobal Shortcutを使ってオペレーターを参照する方法。OP名＋連番などのGlobal Shortcutなどを参照できるようになる。

 コード
getattr(op, opName)
targetOp = getattr(op, opName)
Pramaters
opName: 取得したいOPのGlobal Shortcutの文字列
Returns
targetOP: 取得されたOP

 サンプル


 ネットワークの解説
ネットワーク上の2つのBase OPにGlobal Shortcutでアクセスするサンプルです。
以下のBase OPに、Glo...]]></summary>
        <author>
            <name>ARAKAWA Kensuke</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで差分ファイルの抽出]]></title>
        <id>https://zenn.dev/mknc/articles/3485cace2d9e09</id>
        <link href="https://zenn.dev/mknc/articles/3485cace2d9e09"/>
        <updated>2022-11-17T15:42:50.000Z</updated>
        <summary type="html"><![CDATA[これ何？
2つのディレクトリから差分ファイルのパス一覧を生成するスクリプト

 作った経緯
"差分ファイル"と"追加ファイル"のみ"ディレクトリ構造を維持したまま"抽出したい。
しかしいい感じのツールが見つからない(需要はありそうだが)。
さて困った。
幸いにもPythonに良いモジュールが提供されていたのでスクリプトを自作することにした。
import filecmp
import sys

# e.g.
# python3 extract_diff_path.py bbb aaa |xargs -I{} cp --parents -r {} extract/
def extrac...]]></summary>
        <author>
            <name>mknc</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonでfitbitから心拍数を取得してみる]]></title>
        <id>https://zenn.dev/datech/articles/095e4a0f00ff40</id>
        <link href="https://zenn.dev/datech/articles/095e4a0f00ff40"/>
        <updated>2022-11-17T09:41:58.000Z</updated>
        <summary type="html"><![CDATA[はじめに
本記事では、Pythonを用いてFitbitのサーバから心拍数を取得する一連の流れを、OAuth 2.0 tutorial pageを経由させないで実装していく。また、FitbitのPython用のライブラリも今回は使っていない。今回実装するソースコードはgithub上に公開しているので、適宜確認してほしい。ただし、ソースコードは心拍数取得までの流れを主にしているので、実際に用いるためにアクセストークンの更新処理や、例外処理などのコードが足りていないことに注意する。

 全体の流れ
※この節のリンクはすべてFitbitの公式ドキュメント

Fitbitのアカウントを作成、ア...]]></summary>
        <author>
            <name>kushima</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[テラスタルを考慮したタイプの組み合わせの優秀さをPythonで計算する]]></title>
        <id>https://zenn.dev/shugo/articles/tera_type_combination</id>
        <link href="https://zenn.dev/shugo/articles/tera_type_combination"/>
        <updated>2022-11-17T06:59:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
明日にポケモン最新作の『ポケットモンスタースカーレット/バイオレット』(以下「ポケモン SV」)が遂に発売されますね。
私はポケモンに向けて明日と週明けの21日に有給を取りました!!!
ポケモンSVで新しく導入される戦闘システムに「テラスタル」があります。これは全てのポケモンが本来持ってたタイプとは別にテラスタイプを持つことができ、任意のタイミングでテラスタイプに変更できるシステムです.


今回は今までの2タイプの組み合わせに加えて、テラスタイプを考慮した場合に優秀なタイプの組み合わせをPythonで計算していきたいと思います.

 計算方法の解説
今回はグラフ理論を用い...]]></summary>
        <author>
            <name>yb3</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonを用いた時間-周波数解析入門  ~フーリエ・ウェーブレット解析を中心に~]]></title>
        <id>https://zenn.dev/labcode/books/3v5y3msrej7vu9</id>
        <link href="https://zenn.dev/labcode/books/3v5y3msrej7vu9"/>
        <updated>2022-11-16T14:35:12.000Z</updated>
        <summary type="html"><![CDATA[「手持ちのデータで時間-周波数解析をやってみたいけど，どう実装すればいいかわからない」，「「ウェーブレット変換」や「フーリエ変換」を聞いたことはあるけど，どう使ったらいいかわからない」といった経験をお持ちではありませんか？

本書は，「使える時間-周波数解析の本」を目指して，時間-周波数解析で使用される「フーリエ変換」と「ウェーブレット変換」中心に簡単な理論的背景とその実装方法について解説したものです。

Pythonで実行できるコードとその解説をつけていますので，とりあえず動かしてみたい方にもおすすめです。

【販売価格】
期間限定で ¥2500→¥1000 (60% OFF!!)で販売しております！]]></summary>
        <author>
            <name>LabCode（ラボコード）</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GPTモデルを理解したい]]></title>
        <id>https://zenn.dev/sunbluesome/articles/31877b5a767e87</id>
        <link href="https://zenn.dev/sunbluesome/articles/31877b5a767e87"/>
        <updated>2022-11-16T13:53:29.000Z</updated>
        <summary type="html"><![CDATA[GPTモデルを理解したい記事です。
GPTモデルはtransformerを基礎としたモデルです。transformerの解説記事はこちら。
https://zenn.dev/sunbluesome/articles/078ac9a9afca6a
元論文「Improving Language Understanding by Generative Pre-Training」をベースにまとめていきます。

 凄いポイント

様々なタスクをモデルの構造をほとんど変えずに行える。しかも12タスク中9つでSOTA。


 GPTモデルの構造

 Transformer Decoder (T-D)
...]]></summary>
        <author>
            <name>sunbluesome</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[続・MeCabの分かち書きを並列処理で高速化する]]></title>
        <id>https://zenn.dev/hpp/articles/64466d9476fb2b</id>
        <link href="https://zenn.dev/hpp/articles/64466d9476fb2b"/>
        <updated>2022-11-16T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[まとめ

Pythonから巨大なテキストファイルを並列に読み込み・処理・書き込みする方法を紹介
読み込み: テキストファイルをバイト列として見て、プロセスごとにファイルの読み込み区間を割り振る
処理: multiprocessingを用いた並列処理
書き込み: プロセスごとにtmpファイルへ並列に書き込み & catによる結合


 はじめに
日本語形態素解析器であるMeCabを用いると、日本語のテキストに対する解析や処理が簡単に実行できます。
特に最近は、BERTをはじめとする深層学習モデルへの入力のための前処理として、MeCabなどを用いて文を単語単位に分割する「分かち書...]]></summary>
        <author>
            <name>hpp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[自然言語処理 ベクトル化の手法]]></title>
        <id>https://zenn.dev/yoshikawat64m/articles/c242b11d21be68</id>
        <link href="https://zenn.dev/yoshikawat64m/articles/c242b11d21be68"/>
        <updated>2022-11-16T04:36:08.000Z</updated>
        <summary type="html"><![CDATA[はじめに
文章を固定長ベクトルに変換する方法はないかなあと調べていたら、SentenseBertというものを見つけました.それ以外にもベクトル化にはいろいろな方法があるようで調べた内容を少しまとめてみようと思います.

 ベクトル化の用途
ベクトル化することによる応用の仕方はいろいろですが、文書ベクトルの応用としては以下のようなことが可能です.

類似文書の検索
文章間の類似度を測っておすすめの記事をレコメンド
画像検索エンジン(文章ベクトルと画像ベクトルの類似度を測る)


 さまざま手法
word2vecに始まり、自然言語の機械学習によるベクトル化のアルゴリズムは常に改良されてき...]]></summary>
        <author>
            <name>yoshikawat64m</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[データサイエンス100本ノック（構造化データ加工編）環境構築]]></title>
        <id>https://zenn.dev/kyami/articles/b9e58283908bee</id>
        <link href="https://zenn.dev/kyami/articles/b9e58283908bee"/>
        <updated>2022-11-16T00:11:00.000Z</updated>
        <summary type="html"><![CDATA[データサイエンス100本ノックの実行環境をOracle Linux 8 で構築してみました。

 データサイエンス100本ノック（構造化データ加工編）とは？？
https://github.com/The-Japan-DataScientist-Society/100knocks-preprocess
とても親切な方がSQL,Python,Rでデータサイエンスで必要な構造化データの操作を練習できるツールをご用意してくださり、しかもDockerで動かせるようです！
今回はその環境構築を実施してみました。

 母体マシンの用意
よくあるのはWindowsOSに仮想でホストOSを構築してその上...]]></summary>
        <author>
            <name>kyami</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WSL2+Docker DesktopでpytorchのGPU環境を構築する方法]]></title>
        <id>https://zenn.dev/takeguchi/articles/361e12a5321095</id>
        <link href="https://zenn.dev/takeguchi/articles/361e12a5321095"/>
        <updated>2022-11-15T21:00:01.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回は Docker Desktop を用いてGPU環境を構築します。
以前の Docker はCLIをメインに開発を行っていたと思うのですが、Docker Desktop を用いれば GUI からコンテナやイメージなどを操作することができるそうです。しかも、現在のバージョンは導入が爆速でできるのでめちゃくちゃ使いやすくなりました。
使用するもの

CUDA (前提）
Windows11 Home (前提)
Docker Desktop
WSL2
Nvidia-Container-Toolkit
jupyterlab


 WSL2 のインストール
管理者権限でコマンドプロ...]]></summary>
        <author>
            <name>HTake</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[けしからん画像分類器を作ってみる (10) 公開]]></title>
        <id>https://zenn.dev/kleamp1e/articles/202211-pornography-classifier-10</id>
        <link href="https://zenn.dev/kleamp1e/articles/202211-pornography-classifier-10"/>
        <updated>2022-11-15T17:18:16.000Z</updated>
        <summary type="html"><![CDATA[目次

けしからん画像分類器を作ってみる (1) 序章
けしからん画像分類器を作ってみる (2) データ収集 その1
けしからん画像分類器を作ってみる (3) データ収集 その2
けしからん画像分類器を作ってみる (4) データ収集 その3
けしからん画像分類器を作ってみる (5) データ管理 その1
けしからん画像分類器を作ってみる (6) データ管理 その2
けしからん画像分類器を作ってみる (7) 学習 その1
けしからん画像分類器を作ってみる (8) 学習 その2
けしからん画像分類器を作ってみる (9) 推論
けしからん画像分類器を作ってみる (10) 公開（本記事）
番外...]]></summary>
        <author>
            <name>kleamp1e</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ROS2: PyQt5+Qt Desingerでmsg可視化アプリを試作する]]></title>
        <id>https://zenn.dev/tasada038/articles/122531ae241c3c</id>
        <link href="https://zenn.dev/tasada038/articles/122531ae241c3c"/>
        <updated>2022-11-15T10:13:15.000Z</updated>
        <summary type="html"><![CDATA[海洋ロボコンをやっている人です。
今回は、PyQt5+Qt DesingerでGUIプログラムしたアプリをROS2対応させ、msg可視化アプリを作ったときのメモおよびプログラムたちを備忘録としてまとめました。
他にも、「ROSboard」や「JSK Visualization」といったROSの強力な可視化ツールがたくさん揃っているので、車輪の再発明な点もありますが、Qt「キュート」の勉強も兼ねています。

 本記事のプログラム
この記事で扱うプログラムのコードはGithubよりクローンしてご活用ください。
https://github.com/tasada038/pyqt_ros2_ap...]]></summary>
        <author>
            <name>Takumi Asada</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2つの pip freeze を比較するツール作った]]></title>
        <id>https://zenn.dev/hassaku63/articles/deb96896623639</id>
        <link href="https://zenn.dev/hassaku63/articles/deb96896623639"/>
        <updated>2022-11-14T16:16:07.000Z</updated>
        <summary type="html"><![CDATA[おことわり
この記事と背景的なものは同じです。
https://zenn.dev/hassaku63/articles/75bc1b56b94528

引き継いで以降ずっと塩漬けしてた古いプロジェクトの依存関係を更新しよう、という仕事が発生したのですが、依存関係の定義である requirements.txt が pip freeze の出力そのままリダイレクトしたような内容になっていて少々困りました。

requirements をダイエットしたい、という用事が上記の記事と同じで、今回は実際にダイエットさせてみた requirements と元のファイルでそれぞれ何がどのバージョンで...]]></summary>
        <author>
            <name>hassaku63</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Stable Diffusion Samplerの違いを比べてみた]]></title>
        <id>https://zenn.dev/mimitako/articles/stable_diffusion_sampler</id>
        <link href="https://zenn.dev/mimitako/articles/stable_diffusion_sampler"/>
        <updated>2022-11-14T13:25:05.000Z</updated>
        <summary type="html"><![CDATA[Stable Diffusion Samplerの違いを比べてみた
Stable diffusionにおけるSamplerってどれくらい影響がある？ぶっちゃけあまり知らずに使っていました。実際に使うといろいろ違いが出てきて面白いですね。
今回はSampler だけを変更し、Step数、Prompt、Seed値などはすべて固定しています。なお、GPUにはGTX1660Tiを利用しています。描画な時間は目安としてご利用ください。

 呪文
呪文は元素法典から引用しています。

masterpiece, best quality, super fine illustration,maste...]]></summary>
        <author>
            <name>mimitako</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】グラフのx軸目盛の位置を上部に変更する方法について【備忘録】]]></title>
        <id>https://zenn.dev/siganai/articles/20221114_python_xaxis_top</id>
        <link href="https://zenn.dev/siganai/articles/20221114_python_xaxis_top"/>
        <updated>2022-11-14T12:54:49.000Z</updated>
        <summary type="html"><![CDATA[matplotlibを使用してグラフを作成する際に，通常グラフ下部に表示されるx軸の目盛りをグラフ上部に変更する方法を備忘録としてまとめる．
使用言語はPython．
本記事中で例示するために使用したコードとデータは，ここからダウンロード可能．

 方法
matplotlibのAxes.xaxis.tick_top()を使用することでグラフ上部にx軸目盛を表示することが可能．
実際のコードを以下で示す．

 インストール方法

terminal
pip install matplotlib


 実際の使用例
ここでは例として，y=sin(x)をグラフにする．
xの範囲は0～3πとする．...]]></summary>
        <author>
            <name>SiganAI</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[python便利なテクニック集]]></title>
        <id>https://zenn.dev/banananeko/articles/06ef908cd65383</id>
        <link href="https://zenn.dev/banananeko/articles/06ef908cd65383"/>
        <updated>2022-11-14T10:26:48.000Z</updated>
        <summary type="html"><![CDATA[今回紹介するテクニック
今回紹介するテクニックはこちらです

as(importの時)
sys.exit()
_ (アンダーバー)
input()


 as
asとは importの時に使える便利なコードです。これを使うことによって importするモジュール名を自分なりの呼び方にすることができます

 使い方
import モジュール名　as 自分なりの言い方
という感じで使えます

 例文
 import sys as s
 # こうすることでsysをsと呼ぶことができる
 print('hello')
 s.exit()
 print('world')
!
s.exit()を...]]></summary>
        <author>
            <name>banananeko</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[レコメンドのオフライン評価でRecall@kの方がPrecision@kより用いられる理由]]></title>
        <id>https://zenn.dev/yuya_sato/articles/f1a9aebe9a2e0d</id>
        <link href="https://zenn.dev/yuya_sato/articles/f1a9aebe9a2e0d"/>
        <updated>2022-11-14T10:21:39.000Z</updated>
        <summary type="html"><![CDATA[概要
一般にRecallとPrecisionの違いなどは記事がありますが、Recall@kとPrecision@kの違い、そしてレコメンドエンジンを評価する現場ではRecall@kが評価指標としてよく用いられる理由については解説している専門書、記事が英語、日本語とも見当たらなかったので自分なりに考えてみました。

 一般的なRecallとPrecisionの定義
Recallの定義は、

Recall := \frac{TP}  {TP + FN} \\ \quad \\
        = \frac {正解だと思って正解だったアイテム数} {正解だと思って正解だったアイテム数 +...]]></summary>
        <author>
            <name>Yuya Sato / 佐藤優矢</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【TypeHint】list[SubClass]がlist[SuperClass]に受け付けられない【Python】]]></title>
        <id>https://zenn.dev/yosemat/articles/df389eb19bb178</id>
        <link href="https://zenn.dev/yosemat/articles/df389eb19bb178"/>
        <updated>2022-11-14T09:55:38.000Z</updated>
        <summary type="html"><![CDATA[SubClassのlistはSuperClassのlistには代入できない
class SuperClass:
    pass


class ChildClass(SuperClass):
    pass


def process_children(children: list[SuperClass]):
    pass


def process_child(child: ChildClass):
    pass


child = ChildClass()
children = [child]
process_child(child)  # works
process...]]></summary>
        <author>
            <name>Yosemat</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Annictの記録したアニメ数をGitHubのプロフィールに載せるサービスを作りました]]></title>
        <id>https://zenn.dev/penguincabinet/articles/762e7e201fd86a</id>
        <link href="https://zenn.dev/penguincabinet/articles/762e7e201fd86a"/>
        <updated>2022-11-14T09:52:14.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Githubプロフィール用のバッジを生成するサービスがあります。
例えば、
Qiitaのコントリビューション数や記事数をバッジにするサービス。
https://qiita.com/mikkame/items/f2c60d9caf8a8e38ec50
Zennの記事数をバッジにするサービス。
https://github.com/nikaera/zenn-badge
偉大な先人たちに感謝…！！
僕のREADMEに使わせていただくと、こんな感じになります。

僕も何かバッジ化するサービスを作りたい。

 Annictとは
アニメ視聴を記録し感想を投稿できるサービスです。
htt...]]></summary>
        <author>
            <name>PenguinCabinet</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[有価証券報告書をベクトル化して散布図にプロット]]></title>
        <id>https://zenn.dev/jnxjez/articles/75a6d77b624a4f</id>
        <link href="https://zenn.dev/jnxjez/articles/75a6d77b624a4f"/>
        <updated>2022-11-13T23:30:43.000Z</updated>
        <summary type="html"><![CDATA[概要
有価証券報告書から作成されたデータセットchABSA-datasetを使用して、文書をベクトル化します。
ベクトルをUMAPで次元圧縮し、Plotlyで可視化します。
可視化する内容は文章を単純にベクトル化したものと、tf-idfで特徴的な単語を抜き出した文章をベクトル化したものの２種類を使用し、tf-idfを使用した場合の方が業種区分ごとにまとまって出力されるかを確認します。
結果は目視でなんとなく確認し、どれぐらいの精度が出ているか定量的な評価はしていません。

 環境
Google Colabを使用します。

 データセット
以下で紹介されていたchABSA-datase...]]></summary>
        <author>
            <name>ジェイ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[最近よく使うようになったPython ライブラリとツール]]></title>
        <id>https://zenn.dev/otwn/articles/c41685c8e4866e</id>
        <link href="https://zenn.dev/otwn/articles/c41685c8e4866e"/>
        <updated>2022-11-13T22:35:56.000Z</updated>
        <summary type="html"><![CDATA[コードのやり取りをする中で新しいライブラリやツールを知ることがあります。またMedium.comのToward Data Scienceで書かれている記事で得た情報を含めて、今年に入ってよく使うようになったと思う４つのツールを紹介したいと思います。

 1. icecream
https://github.com/gruns/icecream
まずはicecream。なぜ知らなかったのかと思ったくらい、これは本当に頻繁に使うようになりました。
if a == b:
    print("if")
    return something
else:
    print("else")
 ...]]></summary>
        <author>
            <name>otwn</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django REST frameworkで戦術的DDDを実装してみた]]></title>
        <id>https://zenn.dev/takeojapan/articles/c77cdea47f69de</id>
        <link href="https://zenn.dev/takeojapan/articles/c77cdea47f69de"/>
        <updated>2022-11-13T19:06:44.000Z</updated>
        <summary type="html"><![CDATA[初めに
Django REST framework(DRF)は、Djangoを利用してWeb APIを簡単に実装できるライブラリです。
主な目的は個人的な勉強のためですが、少しでも誰かの参考になればと思ったのでDRFを用いて戦術的DDDパターンを実装したものをまとめました。
DDDについて解説をすることを目的としていないため、もしDDDを知らない方や勉強したい人は先に他の記事をご覧になった方が良いかと思います。

 概要
今回はDjangoのチュートリアルの投票アプリをベースに一部処理を追加したシステムを作成しました。

 ディレクトリ構成
先に今回作成したシステムのディレクトリ構成...]]></summary>
        <author>
            <name>kenta takeuchi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【PyTorch】TorchEval を使って精度評価しよう]]></title>
        <id>https://zenn.dev/a5chin/articles/torchevaluation</id>
        <link href="https://zenn.dev/a5chin/articles/torchevaluation"/>
        <updated>2022-11-13T15:40:19.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回は PyTorch で Deep Learning (深層学習，機械学習) を行う際に用いる，評価指標の計算方法について記述していきます．
本記事では，TorchEval という Facebook 社が開発を主導している PyTorch と同時に使われることを想定している，2022/10/30 にリリースされたばかりの精度評価用のライブラリです．
ドキュメントを以下に貼っておきます．


 この記事を読むメリット

複雑な評価計算を 1 行で実装できる
PyTorch が公式で出しているライブラリのためコードが綺麗になる

といった 2 点のメリットがあります．
これを...]]></summary>
        <author>
            <name>a5chin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonどうでもいい知識集]]></title>
        <id>https://zenn.dev/banananeko/articles/c4df31aea5ae89</id>
        <link href="https://zenn.dev/banananeko/articles/c4df31aea5ae89"/>
        <updated>2022-11-13T13:51:30.000Z</updated>
        <summary type="html"><![CDATA[今回紹介する知識

python1
rpython
コンパイラ
pyopencv
IDLE


 python1
pythonと聞くとpython2とpython3が思いつくと思いますが実はpython1があったのです
https://www.python.org/download/releases/
これが python1のリンクです
あるにはありますが古いので使うのはおすすめしません

 rpython
rpythonと聞くと少し詳しい人なら

pythonはc言語で書かれてcpythonだから
rpythonはr言語で書かれているんだ

と思うかもしれませんが実は
rpytho...]]></summary>
        <author>
            <name>banananeko</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SQLAlchemyでmaster/slaveの切り替え]]></title>
        <id>https://zenn.dev/shimakaze_soft/articles/aa6eb5a2097ede</id>
        <link href="https://zenn.dev/shimakaze_soft/articles/aa6eb5a2097ede"/>
        <updated>2022-11-13T12:10:30.000Z</updated>
        <summary type="html"><![CDATA[RDBを使用していて、アクセス数が増えて負荷がかかった際の対処法としては、更新用と参照用でRDBを分けるレプリケーションというものがあります。
PythonのORMであるSQLAlchemyを使用していて、ORMからRDBにアクセスする際には、参照用と更新用に分けたいという状況もあると思います。
RDBのレプリケーションを実施した際に、SQLAlchemyに更新用と参照用を切り替えるための処理の追加方法を紹介します。

 レプリケーションとは
ここでレプリケーションを知らない方のために簡単に解説します。
MySQL/PostgresqlといったRDBを運用していて、アクセス数などが増大し...]]></summary>
        <author>
            <name>shimakaze_soft</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[消費者物価指数データを取得するPythonのコード]]></title>
        <id>https://zenn.dev/welliving/articles/5a0a9636915e29</id>
        <link href="https://zenn.dev/welliving/articles/5a0a9636915e29"/>
        <updated>2022-11-13T10:01:26.000Z</updated>
        <summary type="html"><![CDATA[この記事について
e-Statから消費者物価指数データをPythonで取得します。

 Pythonのコード
jpy-datareaderを使います。
from jpy_datareader import estat
消費者物価指数のデータ数を確認します。
metainfo = estat.MetaInfoReader(api_key, statsDataId="0003427113", name_or_id="name")
meta = metainfo.read()
metainfo.OVERALL_TOTAL_NUMBER
12486296
データ数が多いため、条件で絞ります。...]]></summary>
        <author>
            <name>Ryo YOSHI</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python仕事で使うことになりました]]></title>
        <id>https://zenn.dev/joo_hashi/articles/0fcfdf93b63a59</id>
        <link href="https://zenn.dev/joo_hashi/articles/0fcfdf93b63a59"/>
        <updated>2022-11-13T09:52:53.000Z</updated>
        <summary type="html"><![CDATA[まさか使う機会が来るとは!
こんにちは、Jboyです。最近転職して企業さんでPythonを使うことになりました...
「Pythonって仕事ないよ」と昔聞いたことがある😅
でも、求人はいっぱいある?、機械学習ばっかりですけどね...
プログラミングを学ぶならPHP、Javaだと聞きますが、もう初心者のための求人はないと思いますね😭
プログラミングスクールでは、PHP、Ruby、Javaを教えているところがありますが、最近はPythonを教えているところもある。
でも、初心者でPythonの仕事につくのって難しいんですよね😅
やってる僕って結構レアだなと思った🤫

 なぜPython?...]]></summary>
        <author>
            <name>JboyHashimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのstrとrepr]]></title>
        <id>https://zenn.dev/apple_pie1974/articles/ebde81ff587452</id>
        <link href="https://zenn.dev/apple_pie1974/articles/ebde81ff587452"/>
        <updated>2022-11-13T09:19:29.000Z</updated>
        <summary type="html"><![CDATA[自分用メモ

 strとrepr
公式リファレンスによると、
https://docs.python.org/ja/3/reference/datamodel.html?highlight=repr#object.__str__
https://docs.python.org/ja/3/reference/datamodel.html?highlight=repr#object.__repr__
strは

オブジェクトの「非公式の (informal)」あるいは表示に適した文字列表現を計算するために、 str(object) と組み込み関数 format(), print() によって...]]></summary>
        <author>
            <name>ApplePie</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[日本国債金利データを取得するPythonのコード]]></title>
        <id>https://zenn.dev/welliving/articles/7f9354195efb18</id>
        <link href="https://zenn.dev/welliving/articles/7f9354195efb18"/>
        <updated>2022-11-13T08:45:26.000Z</updated>
        <summary type="html"><![CDATA[この記事について
財務省のページから国債金利データを取得します。

 Pythonのコード
import numpy as np
import pandas as pd

jgbcm = pd.read_csv("https://www.mof.go.jp/jgbs/reference/interest_rate/jgbcm.csv", skiprows=1, encoding="shift-jis")
jgbcm_all = pd.read_csv("https://www.mof.go.jp/jgbs/reference/interest_rate/data/jgbcm_all....]]></summary>
        <author>
            <name>Ryo YOSHI</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows コマンドプロンプトのデフォルト文字コード取得]]></title>
        <id>https://zenn.dev/mtmatma/articles/c5caf790c13d70</id>
        <link href="https://zenn.dev/mtmatma/articles/c5caf790c13d70"/>
        <updated>2022-11-13T08:31:00.000Z</updated>
        <summary type="html"><![CDATA[Windows コマンドプロンプトのデフォルト文字コード取得
>python
Python 3.10.8 (tags/v3.10.8:aaaf517, Oct 11 2022, 16:50:30) [MSC v.1933 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import _locale
>>> _locale._getdefaultlocale()
('ja_JP', 'cp932')...]]></summary>
        <author>
            <name>masaru tsuchiyama</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】【初心者】numpyで乱数を発生させるメソッドの整理]]></title>
        <id>https://zenn.dev/robes/articles/d9d636e47057e8</id>
        <link href="https://zenn.dev/robes/articles/d9d636e47057e8"/>
        <updated>2022-11-13T06:36:20.000Z</updated>
        <summary type="html"><![CDATA[numpyで乱数を発生させるメソッド
特によく使うrand(),random_sample(),randint(),randn() について整理しました。
ざっくりまとめると、以下の通りです。

ひとつひとつ実際の動きを見ていきましょう

 rand()
引数に何も指定しない場合、0以上1未満の乱数がスカラーで返ってきます。
np.random.rand()
出力値
0.11687868813774382
引数xを指定すると、乱数がx次元のベクトルで返ってきます。
np.random.rand(5)
出力値
array([0.42817233, 0.06407754, 0.5981927...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[勾配ブースティングで「幅を持たせた予測」を行う]]></title>
        <id>https://zenn.dev/joanofarc/articles/gradient-boosting-interval-prediction</id>
        <link href="https://zenn.dev/joanofarc/articles/gradient-boosting-interval-prediction"/>
        <updated>2022-11-13T05:57:54.000Z</updated>
        <summary type="html"><![CDATA[背景と目的
ビジネスにおいて機械学習による回帰モデルを構築する際に、単に「予測値（点予測）」が知りたいというよりも、「予測値が（どれくらいの確率で）どれくらいの範囲に収まりそうか（区間予測）」を知りたい場面があります。例えば天気予報を眺めてみると台風の進路予測には予報円が出ており、ある程度幅を持たせて進路を予測するといったことが行われています。あるいは需要予測を行う場合に「95%の確率で40個~60個の間に入りそうだ」という幅を持たせた予測をすることができれば、「売れ残りがでると損失が大きいので、明日の仕入れ量は40個にしよう」といった意思決定に繋げることができるかおしれません。
そ...]]></summary>
        <author>
            <name>JoanOfArc</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonでデザインパターンを学ぶ(Adapterパターン)]]></title>
        <id>https://zenn.dev/satoshi256kbyte/articles/a4fa95984e2974</id>
        <link href="https://zenn.dev/satoshi256kbyte/articles/a4fa95984e2974"/>
        <updated>2022-11-13T04:21:25.000Z</updated>
        <summary type="html"><![CDATA[こんにちは。深緑です。
チーム内で改めてデザインパターンを学び始めました。
記録のために記事に残しておこうと思います。

 はじめに
GoFのデザインパターンを一つずつ学んでいきます。
今回はAdapterパターンです。
Wikipedia - Adapter パターン
言語はPythonを使用します。

 サンプルコードのシチュエーション
学校において、現在生徒を特定するコードを和暦＋学部＋学科＋数字４桁で管理しています。
令和５年度から西暦＋学部＋学科＋数字４桁で管理するとします。



年度
コードのフォーマット
例




令和４年度まで
和暦＋学部＋学科＋数字４桁
04TEIT...]]></summary>
        <author>
            <name>深緑　聡</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[円周率とわし]]></title>
        <id>https://zenn.dev/taroh/articles/c965946e457059</id>
        <link href="https://zenn.dev/taroh/articles/c965946e457059"/>
        <updated>2022-11-13T03:39:41.000Z</updated>
        <summary type="html"><![CDATA[円周率40億桁求めた。
たった40億桁でこんなこと言うと円周率ガチ勢には笑われるかもしれないが、今生で自作プログラム (Python3で60行ほど、ラップトップでわずか7時間) で円周率をこんなに求められるとは思わなかったなー。
2022年現在のテクノロジでちょちょっと計算して円周率が計算できた、のを、ハマって多桁・高速化した、2022年11月の1週間くらいの記録。
!
追記: 公開してからふと右をみてみると、この駄文、ちょうど1文字1byteのテキスト化した\piでいったら2万桁分くらいらしい。2万桁の\piを計算するのは下記のように10msec程度になったのだが、そのうちTransf...]]></summary>
        <author>
            <name>taroh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonでリストの組合せを作成する]]></title>
        <id>https://zenn.dev/mimitako/articles/python_list_combination_gen</id>
        <link href="https://zenn.dev/mimitako/articles/python_list_combination_gen"/>
        <updated>2022-11-12T23:47:00.000Z</updated>
        <summary type="html"><![CDATA[Python でリストの組合せを作成する
大した技術ではありませんが、地味に使っているので公開します。

 モチベーション
Stable Diffusion で Prompt の組合せ評価を行っているとき、いろいろ組合せがあると面倒だからなんとかならんかなぁ？と考えていました。
調べれば itertools というライブラリで目的は達成できるのですが、ベースを Json にしていたので、辞書キー:リストの形でうまく使えるようにしたかったです。

 使い方
コードは下記の通り簡単です。

key:list の形で形成された辞書を作成します。
各 key のリストを大きいリストでネストし...]]></summary>
        <author>
            <name>mimitako</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】EDINET APIから取得した有価証券報告書のテキストデータと財務データを保存【Google Colab】]]></title>
        <id>https://zenn.dev/neomocha/articles/2bc426bf067ef1</id>
        <link href="https://zenn.dev/neomocha/articles/2bc426bf067ef1"/>
        <updated>2022-11-12T16:06:22.000Z</updated>
        <summary type="html"><![CDATA[まとめると
!
有価証券報告書からのテキスト分析&財務分析をする準備として、EDINET APIから取得した有価証券報告書のテキストデータと財務データをGoogle Driveへ保存します🐱

!
Google Colabで動かしています。

つぎの流れでやっていきます。

ライブラリのインポート
有価証券報告書のdocIDを取得
有価証券報告書が入ったzipファイルを取得
zipファイルを解凍
XBRLファイルからテキストデータと財務データを取得
取得したデータをGoogle Driveに保存

作成にあたっては次の記事を参考にしました。とても役立つ内容をありがとうございま...]]></summary>
        <author>
            <name>mocha</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Excelにまとめて画像ファイルを挿入する方法 Python編]]></title>
        <id>https://zenn.dev/kokopi/articles/fd4ebe665b157b</id>
        <link href="https://zenn.dev/kokopi/articles/fd4ebe665b157b"/>
        <updated>2022-11-12T15:57:56.000Z</updated>
        <summary type="html"><![CDATA[解決したい問題
通常、ExcelのSheet内に画像を取り込みたいときは、メニューの挿入から画像を選択します。
しかし、それが何枚もとなると面倒臭いですよね？
さらに、業務などで日常的にとなると費やす時間は計り知れません。
今回はそんな方に向けた記事を紹介していきます。


 対象となる人
プログラミングって何？なんか英語でつらつらと書くやつ？？
そんなのさっぱりわからないしやりたくない、できない。というノンプログラマーの方に向けて丁寧に説明していきます。


 解決策
Python(パイソン)というプログラム言語を使って、Excelへの画像貼り付けを自動化します。
待て待て、さっき...]]></summary>
        <author>
            <name>ここぴのパパ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[画像からテキストを生成してみた]]></title>
        <id>https://zenn.dev/mimitako/articles/img2text_trial1</id>
        <link href="https://zenn.dev/mimitako/articles/img2text_trial1"/>
        <updated>2022-11-12T14:34:56.000Z</updated>
        <summary type="html"><![CDATA[画像からテキストを生成してみた
さて、今回は画像からテキストを生成してみようと思います。画像には CC0 のものとそうでないものが混在したため、ここに貼付けせず、リンクで表記しています。

 モチベーション
この作業を行ったモチベーションは Stable Diffusion で遊ぶのは良いが、逆生成(img to prompt)はできないものかと思い実行しました。結果は散々なものです。ここには画像ありませんが、気になった方は読み進めてもらえると嬉しいです。

 img2text の中身
ほぼ Hugging Face にあったコードを利用させていただいています。Link
修正したとこ...]]></summary>
        <author>
            <name>mimitako</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ベルヌーイ分布の期待値と分散, ベイズ推定]]></title>
        <id>https://zenn.dev/shundeveloper/articles/100ba5ebfc19cb</id>
        <link href="https://zenn.dev/shundeveloper/articles/100ba5ebfc19cb"/>
        <updated>2022-11-12T13:00:00.000Z</updated>
        <summary type="html"><![CDATA[確率質量関数
確率質量関数は下記のように定義される.

\begin{align*}
Bern(x|\mu) &= \mu^x (1-x)^{(1-x)}\\
x&=\{0,1\},\; \mu=(0,1)
\end{align*}

ただし, \mu は平均である.

 期待値・分散
確率変数のとる値が0と1の二つで和の計算が簡単である.

 期待値

\begin{align*}
\mathbb{E}(X)
 &= \sum_{x=0}^1 x\mu^x(1-\mu)^{(1-x)}\\
&=
0\cdot\mu^0 (1-\mu)^1 + 1 \...]]></summary>
        <author>
            <name>ShunDev</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[matplotlibの備忘録]]></title>
        <id>https://zenn.dev/canard0328/articles/memorandum-of-matplotlib</id>
        <link href="https://zenn.dev/canard0328/articles/memorandum-of-matplotlib"/>
        <updated>2022-11-12T08:57:31.000Z</updated>
        <summary type="html"><![CDATA[毎回ググってるし、必要な情報は一か所にまとまっていて欲しいという、自分のための備忘録です。

 plt.plotか、ax.plotか
import matplotlib.pyplot as plt
した後、簡単なグラフを書くには大きく2つの方法があります。一つ目は、
plt.plot(...)
plt.sho()
とする方法です。もう一つは、
fig, ax = plt.subplots()
ax.plot(...)
plt.show()
と書く方法です。
グラフを１つ描画する場合にはどちらでもよいのですが、前者は後者の簡易的な記述方法ですので、後者の書き方で覚えておいたほうが応用が利く...]]></summary>
        <author>
            <name>canard0328</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【python】PDFをスクレイピングして中身をCSVへ出力する（前編）]]></title>
        <id>https://zenn.dev/subaru_hello/articles/73253a46a76f7f</id>
        <link href="https://zenn.dev/subaru_hello/articles/73253a46a76f7f"/>
        <updated>2022-11-12T08:54:43.000Z</updated>
        <summary type="html"><![CDATA[陸上競技場が個人向けに開放されている日を調べるために、毎回サイトへ訪問して、PDFリンクをクリックして、今日が空いているのか、を確認するのって億劫ですよね。
例えばこんな感じです。

そこで、サイト内に存在するPDFをスクレイピングして中身をCSVへ保存するプログラムを作ろうと考えました。
今回は、プログラム作成における戦略と戦術をまとめていきたいと思います。

 本記事で作るプログラム
長すぎるので二つの記事に分けたいと思います。
本記事では、URLからHTMLを取得し、PDFファイルをスクレイピングしてローカルへ保存するまでを扱いたいと考えています。
そして、出来上がるのは下記プログ...]]></summary>
        <author>
            <name>subaru-hello</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】CSVファイルへの書き出しについて【備忘録】]]></title>
        <id>https://zenn.dev/siganai/articles/20221112_python_csv_output</id>
        <link href="https://zenn.dev/siganai/articles/20221112_python_csv_output"/>
        <updated>2022-11-12T08:18:48.000Z</updated>
        <summary type="html"><![CDATA[CSVファイルにデータを書き出す方法を備忘録としてまとめる．
使用言語はPython．
本記事中で例示するために使用したコードとデータは，ここからダウンロード可能．

 方法１：pandas
データフレーム（表形式）のデータをCSVに保存しやすい．
pandasのto_csv関数を使用．
CSVに保存されているデータをデータフレーム（表形式）で読み込むことが可能．
引数path_or_bufにCSVファイルのパス（本記事では変数output_path）を渡す．

 インストール方法

terminal
pip install pandas


 実際の使用例

pandas_test.p...]]></summary>
        <author>
            <name>SiganAI</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[macOS に bpy をインストールする]]></title>
        <id>https://zenn.dev/nek0n0mimi/articles/4f461c2e3ebc45</id>
        <link href="https://zenn.dev/nek0n0mimi/articles/4f461c2e3ebc45"/>
        <updated>2022-11-12T06:07:55.000Z</updated>
        <summary type="html"><![CDATA[背景

ImportError: No module named bpy

となったので、pip install bpyとしたら

ERROR: Could not find a version that satisfies the requirement bpy

と怒られた。

 実行環境

macOS M1
Python 3.9


 インストール
pipのアップグレード後、以下を実行する。
pip install fake-bpy-module-2.82
※ バージョンを指定する]]></summary>
        <author>
            <name>calcifer</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AtCoderのとある問題でCode Golfに挑戦した記録 (Python3)]]></title>
        <id>https://zenn.dev/sugyan/articles/5f45e4808ffc95</id>
        <link href="https://zenn.dev/sugyan/articles/5f45e4808ffc95"/>
        <updated>2022-11-11T09:16:00.000Z</updated>
        <summary type="html"><![CDATA[きっかけ
最近 @yanecoder さんが AtCoder の問題を解きまくっていて、さらにshortest記録更新にも熱心に取り組んでいるので、自分も以前に多少は嗜んでいたしと対抗心を燃やして挑んでみたところ、多くの学びがあったので記録として残しておく。
※使用言語はPython3です

 Code Golf とは
とにかく短いコード(byte数)で目的を達成するプログラムを書くこと。
https://ja.wikipedia.org/wiki/コードゴルフ
AtCoder では AC をとれれば目的達成といえるし、言語別にすべての提出のコード長も表示されるので分かりやすい。

...]]></summary>
        <author>
            <name>sugyan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】CSVファイルの読み込みについて【備忘録】]]></title>
        <id>https://zenn.dev/siganai/articles/20221106_python_csv_input</id>
        <link href="https://zenn.dev/siganai/articles/20221106_python_csv_input"/>
        <updated>2022-11-11T09:02:59.000Z</updated>
        <summary type="html"><![CDATA[CSVファイルに保存されたデータを読み込む方法を備忘録としてまとめる．
使用言語はPython．
本記事中で例示するために使用したコードとデータは，ここからダウンロード可能．

 方法１：pandasの使用
個人的に一番使っている方法．
pandasのread_csv関数を使用．
CSVに保存されているデータをデータフレーム（表形式）で読み込むことが可能．
引数filepath_or_bufferにCSVファイルのパス（本記事では変数path）を渡す．

 インストール方法

terminal
pip install pandas


 実際の使用例

pandas_test.py
im...]]></summary>
        <author>
            <name>SiganAI</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Raspberry Pi 4 model Bで仮想環境をつくる]]></title>
        <id>https://zenn.dev/tokoroteen/articles/c58b4a16269bad</id>
        <link href="https://zenn.dev/tokoroteen/articles/c58b4a16269bad"/>
        <updated>2022-11-10T14:48:34.000Z</updated>
        <summary type="html"><![CDATA[1. 概要
https://zenn.dev/tokoroteen/articles/113ed90c5eefb6
こちらの続き
普段MacでAnacondaを使っているので、ラズパイでもcondaを使えるようにしようと思いましたが、Raspberry Pi 4でMinicondaは上手く動かないみたいです。
参考：https://qiita.com/hanaata/items/39ada844c7c292d2fef1#python
ラズパイ用にberrycondaというものもあるようですが、こちらも

This project is no longer active
https:/...]]></summary>
        <author>
            <name>Tokoroteen</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python+selenumでchromeを動かすまで（Ubuntu）]]></title>
        <id>https://zenn.dev/honehone/articles/482f9a3b5ca481</id>
        <link href="https://zenn.dev/honehone/articles/482f9a3b5ca481"/>
        <updated>2022-11-10T12:00:48.000Z</updated>
        <summary type="html"><![CDATA[最近はJavaScriptを使ったサイトがほとんどなのでPythonのrequestsライブラリだけでスクレイピングなんかをするのは難しくなってきていますね。
そんなときにはSelenumでブラウザを操作する必要があるのですが、Selenum`はrequestsと違い使うのに準備が必要です。
というわけでこの記事ではSeleniumを使い始めるまでの方法を残します。

 環境

Ubuntu 20.04
Python 3.8.6
Google Chrome 107.0.5304.110
Selenium 4.6.0
chromedriver-binary 107.0.5304.62.0
...]]></summary>
        <author>
            <name>プロトケラトプス</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python入門]]></title>
        <id>https://zenn.dev/siganai/books/python_contents</id>
        <link href="https://zenn.dev/siganai/books/python_contents"/>
        <updated>2022-11-10T05:27:59.000Z</updated>
        <summary type="html"><![CDATA[Pythonを使ったデータ処理に関する簡単なコードをまとめていく本]]></summary>
        <author>
            <name>SiganAI</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】CSVファイルの読み込みについて【備忘録】]]></title>
        <id>https://zenn.dev/siganai/articles/20221106_python_csv_output</id>
        <link href="https://zenn.dev/siganai/articles/20221106_python_csv_output"/>
        <updated>2022-11-10T04:54:24.000Z</updated>
        <summary type="html"><![CDATA[CSVファイルに保存されたデータを読み込む方法を備忘録としてまとめる．
使用言語はPython．
本記事中で例示するために使用したコードとデータは，ここからダウンロード可能．

 方法１：pandasの使用
個人的に一番使っている方法．
pandasのread_csv関数を使用．
CSVに保存されているデータをデータフレーム（表形式）で読み込むことが可能．
引数filepath_or_bufferにCSVファイルのパス（本記事では変数path）を渡す．

 インストール方法

terminal
pip install pandas


 実際の使用例

pandas_test.py
im...]]></summary>
        <author>
            <name>SiganAI</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[エリア面積計算の多面的アプローチ]]></title>
        <id>https://zenn.dev/luup/articles/data-oshima-20221105</id>
        <link href="https://zenn.dev/luup/articles/data-oshima-20221105"/>
        <updated>2022-11-10T03:57:48.000Z</updated>
        <summary type="html"><![CDATA[こんにちは！
LuupのData Strategy部（Data Scienceチーム所属）の大島です。ここでは、LuupのData Scienceチームと、Luupのデータ分析の醍醐味である地理空間データを使ったポート密度に関する分析をご紹介します。

 LuupのData Scienceチームの紹介
Luupの事業では、電動アシスト自転車や電動キックボードを停めるポートの獲得、アプリや車両などのプロダクトの設計・開発・運用、車両の充電・再配置といったオペレーション、社会への発信・広報活動など、様々な取り組みが必要です。これらの取り組みをデータドリブンで推進していくのがLuupのData...]]></summary>
        <author>
            <name>Luup Developers Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【教師あり学習・分類】タイタニックデータで生存者分析をやってみた]]></title>
        <id>https://zenn.dev/ryuta_kojima/articles/671e374268f8b4</id>
        <link href="https://zenn.dev/ryuta_kojima/articles/671e374268f8b4"/>
        <updated>2022-11-10T02:26:42.000Z</updated>
        <summary type="html"><![CDATA[はじめに
はい、今回は有名なタイタニックデータで教師あり学習の分類を行っていきます！
タイタニックの乗客が生存したかどうか判定してもらいましょう！
初心者でも実装できて、評価指標などを考察してみるのを目標にします！
※僕自身も初心者のため、間違っている部分があればコメントにてご指摘いただければ、幸いです。
今回の流れは
データ読み込み => 加工 => モデル作成 => 推論
で行っていきます！

 環境

colab


 準備
今回使うのは有名なデータセットでタイタニックデータです。
まずはデータを読み込みましょう！ってことで、あらかじめgoogle drive...]]></summary>
        <author>
            <name>ryuta_kojima</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【図解】MLPClassifierの使い方まとめ【Python】]]></title>
        <id>https://zenn.dev/nekoallergy/articles/sklearn-nn-mlpclf02</id>
        <link href="https://zenn.dev/nekoallergy/articles/sklearn-nn-mlpclf02"/>
        <updated>2022-11-09T23:11:59.000Z</updated>
        <summary type="html"><![CDATA[この記事は、
https://zenn.dev/nekoallergy/articles/sklearn-nn-mlpclf01
の続きです。
上記の記事を読んでからだと、理解がより進むと思います。

!

 対象読者

機械学習、ニューラルネットワーク、ディープラーニングがしたい方
Python が何となく分かる方
MLPClassifier を使いこなしたい方


!

 この記事で分かること

MLPClassifier の使い方とパラメータ調整の仕方



Python の基礎を本にまとめています。併せてご覧いただけるととても嬉しいです ↓
https://zenn.dev/ne...]]></summary>
        <author>
            <name>NekoAllergy</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[LightGBMのParameter List]]></title>
        <id>https://zenn.dev/mimitako/articles/lgb_parameters_list</id>
        <link href="https://zenn.dev/mimitako/articles/lgb_parameters_list"/>
        <updated>2022-11-09T23:05:59.000Z</updated>
        <summary type="html"><![CDATA[LightGBM のパラメータ一覧
ここを見れば OK...
そうは言っても、英語だし、意外と見づらいので自分の勉強も兼ねて一度まとめてみました。ちなみに、各パラメータについて説明をしているわけではないので、あしからず。各パラメータの後ろのコメントは他の機械学習などでの別名、一般名だったり、説明だったりします。別名を入れても動くというわけではないのでお気をつけください。
また、ここで紹介する params の記法は辞書の特性上 NG（キーの重複）ですが、見やすく紹介する上で必要な表現方法だとご理解ください。
!
今回紹介しているパラメータは document v3.3.3 を参照して...]]></summary>
        <author>
            <name>mimitako</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VideoPose3Dをサクッと動かす]]></title>
        <id>https://zenn.dev/atfujita/articles/0db060faf1f17d</id>
        <link href="https://zenn.dev/atfujita/articles/0db060faf1f17d"/>
        <updated>2022-11-09T14:30:12.000Z</updated>
        <summary type="html"><![CDATA[3Dの姿勢推定が簡単にできるライブラリを探していたのですが、任意の動画を対象としたチュートリアルが充実したものが少なかったです。
VideoPose3Dは最新ではないですが、そうした中でも簡単に任意の画像で3Dの姿勢推定ができるいいライブラリだったので備忘録も兼ねて手順をまとめます。
公式な手順は↓のINFERENCE.md内にあります。
https://github.com/facebookresearch/VideoPose3D

 実行環境

Amazon EC2 p3.2xlarge
Ubuntu20.04


 環境構築

Condaでも何でもいいので仮想環境を作ります。
ff...]]></summary>
        <author>
            <name>atfujita</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのlistをもっと便利に +α 【大規模ソフトウェアを手探る】]]></title>
        <id>https://zenn.dev/irugo/articles/06a67373aa713a</id>
        <link href="https://zenn.dev/irugo/articles/06a67373aa713a"/>
        <updated>2022-11-09T13:17:29.000Z</updated>
        <summary type="html"><![CDATA[これは何？
この記事は、東京大学工学部電子情報工学科/電気電子工学科の後期実験「大規模ソフトウェアを手探る」のレポートとして作成されました。この実験では、各班がOSSを1つ選び、開発技法を学びながら新たな機能追加やバグ修正などを試みます。私たちの班(@irungo_ic, @yutyan_ut, @ncrpy)はCPython を選びました。
https://github.com/python/cpython

 CPythonとは
プログラミング言語であるPythonの、C言語による実装です。つまり、C言語で書かれたPythonのインタプリタです。

 CPythonを選んだ理由
...]]></summary>
        <author>
            <name>いるんご</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[自作コマンドでFlake8やmypyを一気に行う]]></title>
        <id>https://zenn.dev/isuya1992/articles/cmd-check-pycode</id>
        <link href="https://zenn.dev/isuya1992/articles/cmd-check-pycode"/>
        <updated>2022-11-09T10:37:06.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Flake8やmypyは、Pythonのコードを静的解析するツールである。Flake8はPEP8のコーディング規約、mypyは型ヒントのミスをチェックする。
ただし、全ての規約に従ってコーディングするのはナンセンスなケースもあり得る。この場合、コマンドを追記することで、一部の規約を無視できる。
flake8 [.pyファイル/ディレクトリのパス] --ignore=E501
mypy [.pyファイルの/ディレクトリのパス]  --ignore-missing-imports
PEP8のE501は1行の文字数を79文字以下に制限する規則であり、一般的には不要だろう。
myp...]]></summary>
        <author>
            <name>isuya1992</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonのエディタを比較してみる]]></title>
        <id>https://zenn.dev/banananeko/articles/d308d408a1803c</id>
        <link href="https://zenn.dev/banananeko/articles/d308d408a1803c"/>
        <updated>2022-11-09T08:48:40.000Z</updated>
        <summary type="html"><![CDATA[今回比較するエディタ
今回比較するエディタは
こちらです↓

IDLE
visual studio code(以下、VScodeとします)
pycharm


 IDLE
公式サイト
https://docs.python.org/ja/3/library/idle.html

 IDLEとは
IDLEとは pythonに標準で搭載されているエディタでシンプルなデザインが特徴です

 IDLEの機能

 色分け機能
IDLEには色分け機能があります

 赤色
エラーの時の文字

 青色
出力時の文字

 緑色
「”」でかこまれた文字列

 オレンジ色
キーワードimportやforな...]]></summary>
        <author>
            <name>banananeko</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[cmdstanpy : スパースモデル]]></title>
        <id>https://zenn.dev/yoshida0312/articles/ba57a187654bce</id>
        <link href="https://zenn.dev/yoshida0312/articles/ba57a187654bce"/>
        <updated>2022-11-09T08:35:47.000Z</updated>
        <summary type="html"><![CDATA[import os
import time

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import make_regression
from cmdstanpy import CmdStanModel

 データの読み込み
以下のデータを使用しています。
x, y, true_coef = make_regression(random_state=12, 
                       n_samples=100, 
  ...]]></summary>
        <author>
            <name>よしだ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【備忘録】SendGrid選定理由]]></title>
        <id>https://zenn.dev/mksh/articles/reasons-for-selecting-sendgrid-d39648e23bf398</id>
        <link href="https://zenn.dev/mksh/articles/reasons-for-selecting-sendgrid-d39648e23bf398"/>
        <updated>2022-11-09T00:41:36.000Z</updated>
        <summary type="html"><![CDATA[概要
とあるプロジェクトのメール通知機能にてSendGridを採用した理由に関する社内向けの備忘録。実際のプロジェクトに関する情報は抽象化している。

 プロジェクトの規模感
SendGridを採用したプロジェクトでの見積もりは大まかに以下の通りとなる。

ユーザ数120名（リリース初期）
1回/日の定時連絡メール
10回/月程度（平均）の不定期通知メール（リリース初期）

なお定時連絡および不定期の連絡はユーザそれぞれに対してメールが送信される。
またユーザ数は120名単位で増加する見込みあり。
上記より、リリース初期段階では3,730通/月のメール配信が見込まれる。

 メール通...]]></summary>
        <author>
            <name>mksh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python でログファイルを圧縮する方法]]></title>
        <id>https://zenn.dev/bugph0bia/articles/dcecf44e4d2082</id>
        <link href="https://zenn.dev/bugph0bia/articles/dcecf44e4d2082"/>
        <updated>2022-11-08T14:51:32.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Python でログ出力を行う場合、標準ライブラリの logging を使用することが多いと思います。
logging モジュールに用意されている既定のハンドラの中の RotatingFlieHander を使用するとファイルのログローテーションが簡単に行えて便利なのですが、ローテーションした古いログファイルを圧縮したい場合はひと手間加える必要があります。
!
syslog を利用したロギングを行うのであれば syslogd の設定でファイルを圧縮することができますが、ここでは、あくまで RotatingFlieHander を使用したログファイル出力におけるファイル圧縮に...]]></summary>
        <author>
            <name>bugph0bia</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VSCode+Docker+Dev Containerを使って開発環境をコンテナに作ってみた]]></title>
        <id>https://zenn.dev/harurow/articles/c903de5f479a57</id>
        <link href="https://zenn.dev/harurow/articles/c903de5f479a57"/>
        <updated>2022-11-08T13:51:39.000Z</updated>
        <summary type="html"><![CDATA[今回やったこと
開発環境をコンテナに構築しホストのVisual Studio Codeからイジイジできるようにした。
動作検証環境は Mac mini 2020(Apple M1), MacBook Pro 2019(Intel Core)で検証しています。Windows, Linux では試せていません。

 メリット
開発環境の再現性が高いため以下のようなメリットが得られます。

同じ開発環境をすぐに提供できる[1]

ツール・ライブラリのバージョンをプロジェクト毎に決められる
ホストの環境を汚さずにちょっとお試しができる
Dockerの設定によっては構築時の最新バージョンのツー...]]></summary>
        <author>
            <name>www.harurow</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】単純パーセプトロンを理解する]]></title>
        <id>https://zenn.dev/k41531/articles/f47f536a18491a</id>
        <link href="https://zenn.dev/k41531/articles/f47f536a18491a"/>
        <updated>2022-11-08T13:29:00.000Z</updated>
        <summary type="html"><![CDATA[初心に還ってパーセプトロンを実装します。

 単純パーセプトロンがANDを学習している様子


 パーセプトロンとは
1958年、Rosenblattによって提案されたネットワークモデル。
脳の中の生物学的なニューロンを単純化したモデルで、最も単純なニューラルネットワークです。
線形分離可能な問題であれば解くことができます。
ここではパーセプトロンの中でも単純パーセプトロンを取り扱います。
パーセプトロンは、ニューロンを次のようなステップでモデル化している。
（入力がn個で出力が1個のパーセプトロン）

入力信号を受け取る。（入力：x_i）
入力の重み付きの和を計算（重み：w_i）
2の...]]></summary>
        <author>
            <name>kaisei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ubuntu 22.04 に Ansible をインストールする]]></title>
        <id>https://zenn.dev/imksoo/articles/81645222f9f30b</id>
        <link href="https://zenn.dev/imksoo/articles/81645222f9f30b"/>
        <updated>2022-11-08T05:40:27.000Z</updated>
        <summary type="html"><![CDATA[Installing Ansible に従って入れるのだが、標準だと python3-pip がないので python3 -m pip の部分で "/usr/bin/python3: No module named pip" になる。

なので、最初に python3-pip をインストールする。
sudo apt install -y python3-pip

改めて sudo python3 -m pip install ansible を実行する。
sudo python3 -m pip install ansible]]></summary>
        <author>
            <name>きりの</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Raspberry Pi  × 電子ペーパーで最新のお天気情報を表示する電子版を作ってみた]]></title>
        <id>https://zenn.dev/yutafujiwara/articles/2d568f168c2e65</id>
        <link href="https://zenn.dev/yutafujiwara/articles/2d568f168c2e65"/>
        <updated>2022-11-08T03:21:52.000Z</updated>
        <summary type="html"><![CDATA[概要
Raspberry Pi × 電子ペーパーで最新のお天気情報を表示する電子版を作りました！！ 初めてRaspberryを触ってみたので、環境構築から開発するまでの取り組みをZennにまとめました！！
RaspberryPiを購入して何かを作ろうとしている人、夏休みの工作で何か作ろうと考えている人向けの内容になっております。

 作ったもの


 ソース
https://github.com/FujiyamaYuta/e_paper_weather_display

 使っているデバイス

Raspberry Pi 3 Model B
Micro SDカード（32GB）
電子ペー...]]></summary>
        <author>
            <name>フジワラユウタ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[複数のテキストファイルを１つのExcelファイルにまとめたい]]></title>
        <id>https://zenn.dev/tokoroteen/articles/e82f4c94d62b4b</id>
        <link href="https://zenn.dev/tokoroteen/articles/e82f4c94d62b4b"/>
        <updated>2022-11-07T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[1. 概要
研究で実験装置からたくさんのテキストファイルが出てきます。
これらのグラフ化する上で、1つずつExcelにインポートするのがめんどくさいので一気にExcel化できるようにしようと考えました。
完成品はこちら↓
https://colab.research.google.com/drive/1H_83P0nVApHKIQvfUVAyOAgPqxxx85nf?usp=sharing
区切り文字を選んで、実行し、

ファイルを選んで、

Excelファイルにつけたい名前を入力すれば、

出来上がり！！


 2. 機能

テキストファイルの区切り文字を選ぶ
（複数の）テキストフ...]]></summary>
        <author>
            <name>Tokoroteen</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TensorFlow2で機械学習をはじめたいと思ってる方へ]]></title>
        <id>https://zenn.dev/tatsuya4499/articles/880db89990a73e</id>
        <link href="https://zenn.dev/tatsuya4499/articles/880db89990a73e"/>
        <updated>2022-11-07T13:45:31.000Z</updated>
        <summary type="html"><![CDATA[はじめに
普段は主に機械学習のコードはPyTorchで書いています。とりあえず書きやすいですよね。
PyTorchは 「Define by Run」 と言われ、計算グラフとデータを流すタイミング同時で、何が良いかと言うと、途中の計算結果を確認できてデバックが楽です。そんなPyTorch信者の私ですが、今回TensorFlowでコードを書く必要性が出てきたのでその時のノウハウを忘れないようにメモとして残しておきます。
もともとPyTorchを触る前までは、TensorFlowやkerasを触っていたのでなんとなくは把握できていましたが、TensorFlow2になってからの内容はあまり把...]]></summary>
        <author>
            <name>Tatsuya</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Omeka SのREST APIとやりとりするためのPythonパッケージ]]></title>
        <id>https://zenn.dev/nakamura196/articles/940cf394efc85f</id>
        <link href="https://zenn.dev/nakamura196/articles/940cf394efc85f"/>
        <updated>2022-11-07T09:34:28.000Z</updated>
        <summary type="html"><![CDATA[概要
Omeka SのREST APIをPythonから操作可能なパッケージが開発されています。
https://github.com/wragge/omeka_s_tools
さらに、上記のリポジトリをベースとして、いくつかの機能追加を行なったリポジトリを作成しています。
https://github.com/nakamura196/omeka_s_tools2
本稿では、このリポジトリについて紹介します。

 使い方
以下のページを参考にしてください。
https://nakamura196.github.io/omeka_s_tools2/
本リポジトリはnbdevを用いて開発...]]></summary>
        <author>
            <name>nakamura196</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Amazon Linux2にPython3.10とPoetryをインストールする]]></title>
        <id>https://zenn.dev/tamanugi/articles/b74138a13d0399</id>
        <link href="https://zenn.dev/tamanugi/articles/b74138a13d0399"/>
        <updated>2022-11-07T07:46:42.000Z</updated>
        <summary type="html"><![CDATA[Amazon Linux2にデフォルトで入っているPythonのバージョンは3.7と少し古く、またyumで入れられるバージョンも3.8と最新バージョンには少し古いです。
Python3.10とPoetryをインストールする必要があったので手順を忘れないようにメモシておきたいと思います。
(本当はAnsibleなどで自動化すべきなんでしょうか・・・)

 必要なライブラリのインストール
yumで必要なライブラリをインストールしておきます。
openssl-develは古いものが入っている場合があるので削除して、openssl11をインストールするようにします
$ sudo yum remo...]]></summary>
        <author>
            <name>たまぬぎ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[TouchDesigner]Pythonから、パフォーマンスモードに切替]]></title>
        <id>https://zenn.dev/arkwknsk/articles/cc9d77bddeecf7</id>
        <link href="https://zenn.dev/arkwknsk/articles/cc9d77bddeecf7"/>
        <updated>2022-11-07T00:03:40.000Z</updated>
        <summary type="html"><![CDATA[Pythonコードから、パフォーマンスモードに切り替える方法

 動作環境
Build 2022.29850

 コード
ui.performMode = True]]></summary>
        <author>
            <name>アラカワケンスケ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[第５回 【Python】まだ見ぬアクティビティーを求めてアソビュー ！Doc2Vecモデルチューニング]]></title>
        <id>https://zenn.dev/tokoroteen/articles/ab31ea782df6ec</id>
        <link href="https://zenn.dev/tokoroteen/articles/ab31ea782df6ec"/>
        <updated>2022-11-06T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[1. 概要
この記事は第４回の続きです。
https://zenn.dev/tokoroteen/articles/28ad4b0c2ec178/
第４回ではこれまで集めてきたデータを使って、Doc2Vecでモデル構築を行いました。今回はそのモデルをチューニングしつつ、アクティビティーのレコメンド機能を実装していきます。
完成したアプリはこちら↓
https://lifac.herokuapp.com/
例えば「空を飛びたい」とき（検索後に海要素を足して、山要素を引くこともできます！！）

例えば「動物に癒されたい」とき


 2. 前回のモデルの確認
まずは前回作ったモデルでアクテ...]]></summary>
        <author>
            <name>Tokoroteen</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google Cloud Translation を利用したテキスト翻訳]]></title>
        <id>https://zenn.dev/red_picmin/articles/1f0679d32877da</id>
        <link href="https://zenn.dev/red_picmin/articles/1f0679d32877da"/>
        <updated>2022-11-06T09:34:41.000Z</updated>
        <summary type="html"><![CDATA[概要
Google Cloud Translation を利用してテキストを翻訳する手順を解説します。
Google Cloud Translation は課金設定が必要ですが、月あたり500,000 文字まで無料です。
Google Cloud Translation は有料サービスだけに、高品質で高速な翻訳結果が得られます。
[利用までの手順]

Google Cloud プロジェクトの作成
Cloud Translation API の有効化
サービス アカウントとキーの作成
サービス アカウント キー ファイルの適用
クライアント ライブラリのインストール
翻訳実行


 G...]]></summary>
        <author>
            <name>アカピクミン</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonでの日付の扱い方]]></title>
        <id>https://zenn.dev/red_picmin/articles/cf230ca762f04e</id>
        <link href="https://zenn.dev/red_picmin/articles/cf230ca762f04e"/>
        <updated>2022-11-06T09:33:38.000Z</updated>
        <summary type="html"><![CDATA[pythonで日付の取得、タイムゾーンの扱い、日付フォーマット等の扱い方を解説します。

 import
from datetime import timezone,timedelta,datetime

 日付の扱い一式

    # タイムゾーン定義
    UTC = timezone(timedelta(hours=0), 'UTC')
    EST = timezone(timedelta(hours=-5), 'EST')
    JST = timezone(timedelta(hours=+9), 'JST')

    # 現在時刻取得   
    now = da...]]></summary>
        <author>
            <name>アカピクミン</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】CSVファイルの読み込みについて【備忘録】]]></title>
        <id>https://zenn.dev/siganai/articles/20221106_python_csv</id>
        <link href="https://zenn.dev/siganai/articles/20221106_python_csv"/>
        <updated>2022-11-06T09:30:43.000Z</updated>
        <summary type="html"><![CDATA[CSVファイルに保存されたデータを読み込む方法を備忘録としてまとめる．
使用言語はPython．
本記事中で例示するために使用したコードとデータは，ここからダウンロード可能．

 方法１：pandasの使用
個人的に一番使っている方法．
pandasのread_csv関数を使用．
CSVに保存されているデータをデータフレーム（表形式）で読み込むことが可能．
引数filepath_or_bufferにCSVファイルのパス（本記事では変数path）を渡す．

 インストール方法

terminal
pip install pandas


 実際の使用例

pandas_test.py
im...]]></summary>
        <author>
            <name>SiganAI</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【PyCharm】ファイル保存時にlinterとformatterが自動実行されるように設定する]]></title>
        <id>https://zenn.dev/horitaka/articles/4fc4a5c19bee22</id>
        <link href="https://zenn.dev/horitaka/articles/4fc4a5c19bee22"/>
        <updated>2022-11-06T09:21:03.000Z</updated>
        <summary type="html"><![CDATA[概要
最近、Pythonの開発で使用するエディタをVSCodeからPyCharmに乗り換えたので、PyCharmの設定をしました。
ファイルを保存したときにlinterとformatterが自動実行されるように設定しました。
!
普段のチーム開発ではPyCharm以外のエディタを使用しているメンバーもいます。そのため、pre-commitを使ってcommit時にlinterとformatterが実行されるようにしてコードスタイルがチーム内で統一できるようにしています。

PyCharmのバージョン

Community Edition
バージョン: 2022.2.3
ビルド: 222...]]></summary>
        <author>
            <name>horitaka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pytorch で ResNet50, ResNet101, ResNet152 の実装]]></title>
        <id>https://zenn.dev/takeguchi/articles/f6b4530d57177e</id>
        <link href="https://zenn.dev/takeguchi/articles/f6b4530d57177e"/>
        <updated>2022-11-06T08:22:23.000Z</updated>
        <summary type="html"><![CDATA[はじめに
pytorch で ResNet50, ResNet101, ResNet152 の実装をしてみました！
import torch
import torch.nn as nn

 残差ブロックの実装
#残差ブロックを作成するクラス
class Resblock(nn.Module):
  def __init__(self, in_channels, out_channels, identity_downsample=None, stride=1):
    super(Resblock, self).__init__()

    self.expansion = 4
 ...]]></summary>
        <author>
            <name>HTake</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[awsで翻訳web apiを作る方法]]></title>
        <id>https://zenn.dev/yukisatoblog/articles/4b3d1379b56106</id>
        <link href="https://zenn.dev/yukisatoblog/articles/4b3d1379b56106"/>
        <updated>2022-11-06T07:00:28.000Z</updated>
        <summary type="html"><![CDATA[本日行ったハンズオンはこちら


 大まかな流れ

Lambda Function を作成する
LambdaとAmazon Translateを連携させる
API Gatewayを作成する
API GatewayとLambdaを連携させる
DynamoDBを作成する
DynamoDBとLambdaを連携させる(完成)

※Amazon Translateの無料枠: 1ヶ月に200万文字まで翻訳無料
※ハンズオンのLambdaはpythonで記述

 lambdaの特徴

ec2はサーバー管理を意識しないといけないが、lambdaはコードのみ記述すればよい。
サーバーのプロビジョニング管理...]]></summary>
        <author>
            <name>yuki satou</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】インターフェイスの型ヒントを実現する]]></title>
        <id>https://zenn.dev/naminodarie/articles/467ce8672d4e0b</id>
        <link href="https://zenn.dev/naminodarie/articles/467ce8672d4e0b"/>
        <updated>2022-11-06T02:43:22.000Z</updated>
        <summary type="html"><![CDATA[Pythonは動的型付けなのでダックタイピング(同名で呼び出せるなら)が可能です。
しかし、型ヒントの需要が増している現在ではインターフェイス的な型定義が欲しくなってきます。
そんなときに使えるのが typing.Protocol です。
https://docs.python.org/ja/3.8/library/typing.html#typing.Protocol

 使い方
from typing import Protocol

class Proto(Protocol):
    def meth(self) -> int:
        ...


class C:...]]></summary>
        <author>
            <name>KZRNM</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[第４回 【Python】まだ見ぬアクティビティーを求めてアソビュー ！機械学習(Doc2Vec)]]></title>
        <id>https://zenn.dev/tokoroteen/articles/28ad4b0c2ec178</id>
        <link href="https://zenn.dev/tokoroteen/articles/28ad4b0c2ec178"/>
        <updated>2022-11-05T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[1. 概要
この記事は第3回の続きです。
https://zenn.dev/tokoroteen/articles/4d4e5dbfd8d845
第3回ではアクティビティー予約サイト「アソビュー!」から各アクティビティー施設の口コミをスクレイピングしました。
休日への想いをアクティビティーという形にするという目的を達成するため、今回は口コミデータを使って、アクティビティーをレコメンドしてくれるモデルを構築していきたいと思います。
完成したものはこちら↓
https://lifac.herokuapp.com/
例えば「空を飛びたい」とき（検索後に海要素を足して、山要素を引くこともでき...]]></summary>
        <author>
            <name>Tokoroteen</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】argparse で「環境変数にあればそれを使う」を実現する方法]]></title>
        <id>https://zenn.dev/naminodarie/articles/9a03fba5f6cdbe</id>
        <link href="https://zenn.dev/naminodarie/articles/9a03fba5f6cdbe"/>
        <updated>2022-11-05T18:57:04.000Z</updated>
        <summary type="html"><![CDATA[前置き
「コマンドライン引数か環境変数で値を受け取る」という状況があります。
ここでは
python main.py --foo hoge --bar piyo
というようなコマンドを考えます。


foo

コマンドラインで値を受け取る
コマンドラインがなく環境変数 FOO があればその値を使う
コマンドラインがなく環境変数 FOO もなければエラーとする



bar

コマンドラインで値を受け取る
コマンドラインがなく環境変数 BAR があればその値を使う
コマンドラインがなく環境変数 BAR もなければ defaultbar とする




 実装

 bar
bar の方は...]]></summary>
        <author>
            <name>KZRNM</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[cuQuantum で遊んでみる (3) — 期待値計算]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-cuquantum03</id>
        <link href="https://zenn.dev/derwind/articles/dwd-cuquantum03"/>
        <updated>2022-11-05T18:10:44.000Z</updated>
        <summary type="html"><![CDATA[目的
引き続き cuQuantum で遊んでみるのだが、今回は Qiskit も Cirq も使わずに直接 cuQuantum の Python ラッパを叩いてみたい。

 ハミルトニアン
期待値を計算する対象のハミルトニアンはお馴染みの Pauli Z 演算子とする。\ket{0} と \ket{1} で期待値を計算してみたい。


 早速計算
expectation_pauli.py を参考にするのだが、なかなか C++ なので一部 Python っぽく書き換えて使う。
import numpy as np
import cupy as cp

import cuquantum
...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[flaskがインストールできたか確かめるときにハマったこと]]></title>
        <id>https://zenn.dev/masaru21/articles/285ff4c3e0d123</id>
        <link href="https://zenn.dev/masaru21/articles/285ff4c3e0d123"/>
        <updated>2022-11-05T16:44:44.000Z</updated>
        <summary type="html"><![CDATA[先日GitHubにアップロードしたPythonのプログラムで、ウェブアプリにしたいと思い、Web開発のフレームワークを探していました。
今回は小規模なので、flaskを使ってみることにしました。
今回は、virtualboxにインストールしたUbuntu22.04に、インストールしました。
下記の記事で、作業を進めました。
https://sync-g.co.jp/sjobs/python-flask-biginner/
ですが、下記のコマンドを実行するとエラーになりました。
>>> import Flask
>>> Flask.__version
こ...]]></summary>
        <author>
            <name>lonely_creator_m</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】関数内のローカル変数名を無理やり取得する]]></title>
        <id>https://zenn.dev/sugac/articles/3d2cb78e765d23</id>
        <link href="https://zenn.dev/sugac/articles/3d2cb78e765d23"/>
        <updated>2022-11-05T12:27:56.000Z</updated>
        <summary type="html"><![CDATA[はじめに
どうやらpythonにおいてローカル変数の情報は関数オブジェクトが所持していないらしく、
スマートに取得する方法は見つかりませんでした。
自分はどうしてもローカル変数名を取得したかったので、astモジュールを使って取得を行いましたが、今回のコードだと漏れが生じる可能性もあるので完璧ではないです。

 環境
python 3.9.12
windows

 astモジュールとは
抽象構文木を作成するモジュールです。詳しいことは私も理解していませんが、pythonプログラムの文字列からpythonで実行できるようなデータ形式への変換を行っているっぽいです。
https://doc...]]></summary>
        <author>
            <name>須賀</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[約数列挙のアルゴリズムの実装と改善]]></title>
        <id>https://zenn.dev/def_yuisato/articles/algorithm-divisor-enumeration</id>
        <link href="https://zenn.dev/def_yuisato/articles/algorithm-divisor-enumeration"/>
        <updated>2022-11-05T11:11:52.000Z</updated>
        <summary type="html"><![CDATA[約数列挙とは
正の約数 N において、N の約数を全て求めること。
例) 12 の約数列挙　 → 1,2,3,4,6,12

 通常の実装(O(N))

 【方針】

1 以上 n 以下の整数を i として順番に見ていき、割り切れたら(n % i == 0)i は n の約数と判定する
時間計算量は 1 から n まで全てを見ていくため O(N)になる。


 【実装】
n = int(input())
result = []
for i in range(1, n+1):
    if n % i == 0:
        result.append(i)
print(*resu...]]></summary>
        <author>
            <name>佐藤 優偉(Yui Sato)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[python] import 宣言を複数行またぐケース含めて grep 風出力で検索できるツールを作ってみた]]></title>
        <id>https://zenn.dev/hassaku63/articles/75bc1b56b94528</id>
        <link href="https://zenn.dev/hassaku63/articles/75bc1b56b94528"/>
        <updated>2022-11-05T09:21:56.000Z</updated>
        <summary type="html"><![CDATA[おことわり
「はじめに」で書く用事を満たしたいなら find - xargs grep で十分です。ここで紹介するツールを使う必要は一切ないです。
find . -name "*.py" | xargs grep -n 'import'
ast のお勉強がてら作ってみました。

 はじめに
引き継いで以降ずっと塩漬けしてた古いプロジェクトの依存関係を更新しよう、という仕事が発生したのですが、依存関係の定義である requirements.txt が pip freeze の出力そのままリダイレクトしたような内容になっていて少々困りました。
# 依存関係は明示的に書いてほしい...
p...]]></summary>
        <author>
            <name>hassaku63</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【VSCode】おすすめの拡張機能 21選]]></title>
        <id>https://zenn.dev/nameless_sn/articles/recommended_vscode</id>
        <link href="https://zenn.dev/nameless_sn/articles/recommended_vscode"/>
        <updated>2022-11-05T03:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回の記事では、主にバックエンド(PythonとTypeScript中心)を開発している私が使っているVSCodeの拡張機能を紹介する。

 拡張機能
基本的にどのような言語でも対応できる拡張機能を紹介する。

 Japanese Language Pack for Visual Studio Code

VSCodeを日本語にできる。

 REST Client

VSCode上でgetやpostなどのHTTPリクエストを送信できる。GraphQLにも対応している。

 GitLens — Git supercharged

commit単位でファイルを比較したり、最新の...]]></summary>
        <author>
            <name>Shota Nukumizu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pytest, mock, patchについて整理したい]]></title>
        <id>https://zenn.dev/shimo_s3/articles/9f486cfee75edc</id>
        <link href="https://zenn.dev/shimo_s3/articles/9f486cfee75edc"/>
        <updated>2022-11-05T01:27:42.000Z</updated>
        <summary type="html"><![CDATA[pytest、unittest.mock.patchらへんでハマっていたのでメモ。

 整理したかったこと

同じ機能で、書き方が何種類もあること
引数の使い分け

注: このページでは同じものを別の名前で指しているかもしれないです(例:package, module, library という単語は同じものを指すことがある)

 テストモジュールについて

unittest ... Pythonビルトインのテストpackage
pytest ... 3rd partyのテストpackage。unittestよりよく使われていて主流らしい

unittestをそのまま使える
importし...]]></summary>
        <author>
            <name>shimo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[第３回 【Python】まだ見ぬアクティビティーを求めてアソビュー ！口コミ スクレイピング]]></title>
        <id>https://zenn.dev/tokoroteen/articles/4d4e5dbfd8d845</id>
        <link href="https://zenn.dev/tokoroteen/articles/4d4e5dbfd8d845"/>
        <updated>2022-11-04T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[1. 概要
この記事は第２回の続きです。
https://zenn.dev/tokoroteen/articles/61892df019f6d9
第１回および第２回で、アクティビティー予約サイトであるアソビュー!から掲載されている施設の基本情報を取得しました。
そこで、本来の目的である口コミ情報を学習し、オススメのアクティビティーを提示するモデルを構築するために口コミ集めの作業に入っていきます！
完成したアプリはこちら↓
https://lifac.herokuapp.com/
例えば「空を飛びたい」とき（検索後に海要素を足して、山要素を引くこともできます！！）

例えば「動物に癒さ...]]></summary>
        <author>
            <name>Tokoroteen</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Discord.pyでメッセージリンクを取得する方法]]></title>
        <id>https://zenn.dev/kamotan/articles/43c5e3ecde1ed0</id>
        <link href="https://zenn.dev/kamotan/articles/43c5e3ecde1ed0"/>
        <updated>2022-11-04T14:35:36.000Z</updated>
        <summary type="html"><![CDATA[調べても出てこなかったので垢作って書いておきます。
discord.py 1.7.3

 そもそもメッセージリンクって何？
この記事読んでる人は取得方法が知りたいでしょうけどちょっとだけ説明させてください。
メッセージリンクとは、
https://discord.com/channels/xxxxxxxxxx/xxxxxxxxxx/xxxxxxxxxxxxx
こういつやつです。

Discord内でメッセージリンクを取得する場合
!
メッセージリンクはhttps://discord.com/channels/サーバーID/メッセージチャンネルID/メッセージIDという構成になっています。...]]></summary>
        <author>
            <name>かもたん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PlateauのCityGMLをPythonのElementTreeでパースした時に出るns0とかいう邪魔者をぶっ潰す方法]]></title>
        <id>https://zenn.dev/soh92/articles/f20994e755974f</id>
        <link href="https://zenn.dev/soh92/articles/f20994e755974f"/>
        <updated>2022-11-04T13:52:39.000Z</updated>
        <summary type="html"><![CDATA[ns0=Namespace
CityGMLをElementTreeでパースした時に現れるns0やns1が一体何者なのかというと、Namespace(名前空間)のことです。
そんな怖いものではありません。鬱陶しいですが。
これが
<?xml version="1.0" encoding="UTF-8"?>
<core:CityModel xmlns:brid="http://www.opengis.net/citygml/bridge/2.0" xmlns:wtr="http://www.opengis.net/citygml/waterbody/2.0" xmlns...]]></summary>
        <author>
            <name>ソウ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FaissをソースコードからビルドしてGPUで利用する]]></title>
        <id>https://zenn.dev/yag_ays/articles/65a4154d0dedfa</id>
        <link href="https://zenn.dev/yag_ays/articles/65a4154d0dedfa"/>
        <updated>2022-11-04T07:26:28.000Z</updated>
        <summary type="html"><![CDATA[概要
Faissは、FaceBook Research (現Meta Research) が開発した近似最近傍探索 (Approximate Nearest Neighbor: ANN) のライブラリです。C++で実装されており、GPUでの実行にも対応しているほか、PythonのWrapperも提供されいます。Pythonパッケージではfaiss-cpuとfaiss-gpuの2種類が存在し、公式ではAnacondaでのインストールを推奨しているのですが、PyPIからもパッケージがインストール可能です。
GPU環境でのFaiss実行を試みたのですが、現在PyPIで提供されているfais...]]></summary>
        <author>
            <name>yag_ays</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PEP557から読み解くPythonのdataclassの嬉しさと他手段との比較]]></title>
        <id>https://zenn.dev/kumamoto/articles/d0fb1208c47365</id>
        <link href="https://zenn.dev/kumamoto/articles/d0fb1208c47365"/>
        <updated>2022-11-04T02:34:32.000Z</updated>
        <summary type="html"><![CDATA[1. はじめに 🚀

 1-1. dataclassってなに
みなさんPythonのdataclass使ってますか？
dataclassは真新しい機能ではなくPython3.7からある[1]標準ライブラリです。
dataclassの解説記事ではよく『dataclassとはデータを保持のためのclassである』という説明がされていることが多いです。これはPEP557にある

store values which are accessible by attribute lookup
アトリビュート検索でアクセス可能な値の保持


Data Classes can be thought o...]]></summary>
        <author>
            <name>Kumamoto-Hamachi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[第２回 【Python】まだ見ぬアクティビティーを求めてアソビュー ！分析]]></title>
        <id>https://zenn.dev/tokoroteen/articles/61892df019f6d9</id>
        <link href="https://zenn.dev/tokoroteen/articles/61892df019f6d9"/>
        <updated>2022-11-03T23:30:00.000Z</updated>
        <summary type="html"><![CDATA[1. 概要
この記事は第１回の続きです。
https://zenn.dev/tokoroteen/articles/0d1599540dce00
第１回ではアクティビティー検索サイトであるアソビュー！に掲載されているアクティビティーの基本情報を取得しました。
今回はそのデータを解析することでアソビュー！内のアクティビティーの特徴に迫っていきたいと思います。
完成したアプリはこちら
https://lifac.herokuapp.com/
例えば「空を飛びたい」とき（検索後に海要素を足して、山要素を引くこともできます！！）

例えば「動物に癒されたい」とき


 2. 前回取得したデー...]]></summary>
        <author>
            <name>Tokoroteen</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Model編 -- 忙しい人のためのDjango + DjangoRestFramework]]></title>
        <id>https://zenn.dev/geb/articles/221103_django_model_summarize</id>
        <link href="https://zenn.dev/geb/articles/221103_django_model_summarize"/>
        <updated>2022-11-03T23:18:01.000Z</updated>
        <summary type="html"><![CDATA[モデルとは
DBのテーブル定義とデータの操作を行うクラス
https://docs.djangoproject.com/ja/4.1/topics/db/models/#module-django.db.models

 モデル定義
DBテーブル1つにつきModelクラスを一つ作成し、そのクラスのクラス変数としてフィールドを定義する。
以下の例では、ある会社の従業員テーブルPersonと部署テーブルDivisionを定義している。
from django.db import models

class Division(models.Model):
    name = models...]]></summary>
        <author>
            <name>Geb</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google Cirq + cuQuantum で遊んでみる (2) — グローバー探索アルゴリズム]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-cirq-qsim02</id>
        <link href="https://zenn.dev/derwind/articles/dwd-cirq-qsim02"/>
        <updated>2022-11-03T17:21:50.000Z</updated>
        <summary type="html"><![CDATA[目的
Google Cirq で遊んでみる (1) — グローバー探索アルゴリズム に引き続き、Google Cirq を使ってグローバー探索アルゴリズムを実行してみたい。のだが、今回はさらに cuQuantum を用いてみたい。

 cuQuantum 対応 qsim のビルド
cuQuantum 対応の qsim を使いたい場合、自分で qsim をビルドしないとならない様子。
GPU-based quantum simulation on Google Cloud に従う。

 想定環境

Ubuntu 18.04
Python 3.8
CUDA 11.2
NVIDIA T4
...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SQLModelでcreated_at とupdated_atカラムを自動で更新する【Python3】]]></title>
        <id>https://zenn.dev/alcnaka/articles/e16eed5c8e291e</id>
        <link href="https://zenn.dev/alcnaka/articles/e16eed5c8e291e"/>
        <updated>2022-11-03T16:37:46.000Z</updated>
        <summary type="html"><![CDATA[はじめに
せっかくORMを使っているのであれば、いちいち手動で設定しなくても、insertやupdateしたタイミングで、created_atやupdated_atカラムをいい感じにセットして欲しいですよね。
Laravel(PHP)で使われているEloquentなどではデフォルトの機能としてありますが、SQLModelではドキュメントに記述を見つけられず少し悩みました。また悩むのも嫌なので備忘録として。

 環境
M1 MBA、macOS 13で、HomebrewでインストールしたPython3.10.8を使用しています。
PC: MacBook Air M1 2020
OS: m...]]></summary>
        <author>
            <name>alcnaka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[正規分布(1次元)]]></title>
        <id>https://zenn.dev/shundeveloper/articles/a3bb9d8634ca19</id>
        <link href="https://zenn.dev/shundeveloper/articles/a3bb9d8634ca19"/>
        <updated>2022-11-03T13:01:55.000Z</updated>
        <summary type="html"><![CDATA[概要

 はじめに
Shunです. 統計や機械学習を勉強しています. 正規分布を計算上使うことが多いのでよく使う式をまとめてみました.

 機械学習・統計学における位置づけ
正規分布(normal distribution)※1は連続型確率変数の分布のモデルとして広く利用されている.  出典(1), (2)によれば統計学上きわめて重要な確率分布と位置付けられている.

 確率密度関数
正規分布の確率密度関数は以下のように書ける.

\mathcal{N}(x| \mu, \sigma^2) = 
\frac{1}{\sqrt{2\pi \sigma^2}}
\exp \biggl\{...]]></summary>
        <author>
            <name>ShunDev</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Django】2つ以上のクエリセットを結合する方法]]></title>
        <id>https://zenn.dev/takunari_jp/articles/9ca79687737b12</id>
        <link href="https://zenn.dev/takunari_jp/articles/9ca79687737b12"/>
        <updated>2022-11-03T10:30:00.000Z</updated>
        <summary type="html"><![CDATA[この記事では、Djangoが備えている「2つ以上のクエリセットを結合する方法」について解説します。

 公式ドキュメントを覗く 🫣
公式ドキュメントにはこのように書かれています。

 union(*other_qs, all=False)

SQLのUNION演算子を使用して、2つ以上のQuerySetの結果を結合します。
重複する値を許可する場合は、引数allに対してTrueをセットします。

qs1.union(qs_2, qs_3)

union()は、引数が他のモデルのクエリセットであっても、最初のクエリセットの型のモデルインスタンスを返します。異なるモデルを渡しても、同じフィー...]]></summary>
        <author>
            <name>Omori Takuya</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Django】モデル検索で除外条件を指定する方法]]></title>
        <id>https://zenn.dev/takunari_jp/articles/5744f9691bbeef</id>
        <link href="https://zenn.dev/takunari_jp/articles/5744f9691bbeef"/>
        <updated>2022-11-03T10:30:00.000Z</updated>
        <summary type="html"><![CDATA[この記事では、Djangoがデフォルトで備えている「新しいQuerySetsを返すメソッド」のうち、「exclude()」について解説します。

 公式ドキュメントを覗く 🫣
公式ドキュメントにはこのように書かれています。

 exclude(*args, **kwargs)

与えられたルックアップ・パラメータにマッチしないオブジェクトを含む新しいQuerySetを返します。複数のパラメータは、SQL文の中でANDで結合され、全体はNOT()で囲まれます。


 結論 ⚖️
exclude()を使うことで、除外条件を指定することができます。

 使い方 💪

 通常
次の例では、下記2...]]></summary>
        <author>
            <name>Omori Takuya</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VS code上でdocker環境をつなげてみた]]></title>
        <id>https://zenn.dev/piroshiki/articles/8b69c848b61ff5</id>
        <link href="https://zenn.dev/piroshiki/articles/8b69c848b61ff5"/>
        <updated>2022-11-03T09:11:45.000Z</updated>
        <summary type="html"><![CDATA[目的：VScode上で予め用意されたdocker環境でデバッグを行えるようにする
※基本的には参考記事①に従うとリモートデバッグ可能となるため、主に詰まった箇所を補足いたします。

実行環境
M-1 Mac
VScode

実行手順
任意のディレクトリ（ここではvscode-python）に「.devcontainer」ディレクトリを作成する。
次にdevcontainer.jsonを作成する。これによりDockerFileを参照しイメージコンテナが作られる。
参考記事①より

devcontainer.json
{
	"name": "Python Sample",
	// Doc...]]></summary>
        <author>
            <name>piroshiki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google Colaboratoryで日本語構文・格・照応解析システムKNPを動作させてみる]]></title>
        <id>https://zenn.dev/mima_ita/articles/0a3afd5db596ee</id>
        <link href="https://zenn.dev/mima_ita/articles/0a3afd5db596ee"/>
        <updated>2022-11-03T08:46:03.000Z</updated>
        <summary type="html"><![CDATA[目的
KNPはJuman++の解析結果(形態素列)を入力とし、文節および基本句間の係り受け関係、格関係、照応関係を出力する。
今回はGoogle ColaboratoryでKNPを動作させる方法について記述する
この記事は2022/11/03時点のもので、今後のバージョンアップで動作しなくなる可能性がある。

 juman++のインストール
!wget http://lotus.kuee.kyoto-u.ac.jp/nl-resource/jumanpp/jumanpp-1.02.tar.xz
!tar xJvf jumanpp-1.02.tar.xz
%cd jumanpp-1.0...]]></summary>
        <author>
            <name>mima_ita</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Telegramで多言語ニュースチャットボットを作った話]]></title>
        <id>https://zenn.dev/jcc/articles/4e87dc71f89ba7</id>
        <link href="https://zenn.dev/jcc/articles/4e87dc71f89ba7"/>
        <updated>2022-11-03T08:15:39.000Z</updated>
        <summary type="html"><![CDATA[先日多言語ニュースWebアプリを作りました。
通勤電車で当日のニュースをチェックしながら、外国語を勉強できるので、まあまあ使いやすかったです。
https://zenn.dev/jcc/articles/e672181fd7b174
https://zenn.dev/jcc/articles/36f7d95114fc39
実はこのWebを開発する1年ほど前に、一度Telegram botで多言語ニュースチャットボットを開発していました。今日はそれについて紹介したいと思います。
https://github.com/aibazhang/multitrue-bot

 事前準備

 Tele...]]></summary>
        <author>
            <name>jc</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PyTorchの気になるところ]]></title>
        <id>https://zenn.dev/tatsuya4499/articles/cc74dec7ddcb9b</id>
        <link href="https://zenn.dev/tatsuya4499/articles/cc74dec7ddcb9b"/>
        <updated>2022-11-03T07:37:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
PyTorchを普段触っているのですが、細かいところをなんとなくで今まで過ごしてきたので、今回しっかりまとめていきたいと思います。自分の備忘録になっていますが、少しでも参考になればと思います。
(Qiitaで書いていたものを引っ越してきたものです)

 この記事の対象者


.copy(), .detach(), .bachward()がよくわかっていない方

nn.Conv2dのweightやbiasの取得ってどうやんの？

model.eval()って結局何してる？って方

torch.no_grad(), torch.set_grad_enabled()の区別がわから...]]></summary>
        <author>
            <name>Tatsuya</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pillow(PIL)でborder-radius]]></title>
        <id>https://zenn.dev/taxio/articles/01e198b1e9062a</id>
        <link href="https://zenn.dev/taxio/articles/01e198b1e9062a"/>
        <updated>2022-11-03T06:03:00.000Z</updated>
        <summary type="html"><![CDATA[Pillow(PIL) でこんな感じに画像を border-radius したい。



Before
After










 コードの全体像
from PIL import Image, ImageDraw


img = Image.open("./lenna.png")
radius = 50

mask = Image.new("L", img.size, 0)
mask_draw = ImageDraw.Draw(mask)
mask_draw.rounded_rectangle((0, 0, img.width, img.height), radius, fill=...]]></summary>
        <author>
            <name>taxio</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】まだ見ぬアクティビティーを求めてアソビュー ！スクレイピング]]></title>
        <id>https://zenn.dev/tokoroteen/articles/0d1599540dce00</id>
        <link href="https://zenn.dev/tokoroteen/articles/0d1599540dce00"/>
        <updated>2022-11-03T05:37:01.000Z</updated>
        <summary type="html"><![CDATA[1. 概要
突然ですが私は体験型のアクティビティーが大好きです。サーフィン体験をしたり、屋久杉を見に行ったり、スノードームを作ったり、香水を調製してみたり、、、。
そんな私が食べログの情報から機械学習でラーメンレコメンドをする記事をみて、これのアクティビティー版をやったら面白いのでは！！と考えました笑
アクティビティーを探すとき、人は3ステップの思考フローを辿るのではないかと思います。

「ストレスが溜まっているからスカッとしたい」など休みへの想いを考える
「スカッとするためにはバンジージャンプだな」等、過ごし方を考える
アクティビティーを探して予約する

この思考フローの中で、1→...]]></summary>
        <author>
            <name>Tokoroteen</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[opencv+python フォルダ内の全てのjpg画像をforループで処理する]]></title>
        <id>https://zenn.dev/k_neko3/articles/8b89b0ab1c29f8</id>
        <link href="https://zenn.dev/k_neko3/articles/8b89b0ab1c29f8"/>
        <updated>2022-11-03T03:44:18.000Z</updated>
        <summary type="html"><![CDATA[opencvをpythonで触っていたのでその時に作ったもろもろをメモしていく。
今回は特定のフォルダに入っている複数の画像をforループで開いて、何がしかの処理をするもの。
やることは以下。

globでフォルダ内のjpgファイル名を取得しリスト化
リストの配列数分for inでループ

ファイル名を取得
画像をnumpyでバイナリで開く
取り込んだバイナリをopencv形式に変更
opencv形式の画像をグレースケール化
実際は最後に何がしかの処理をする（トリミングとか）




 ソースコード
import pathlib
import cv2
import numpy as np...]]></summary>
        <author>
            <name>k_neko3</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[flask_SQLAlchemyを使ってCRUDを作成する]]></title>
        <id>https://zenn.dev/yuki_f/articles/29614ff655de90</id>
        <link href="https://zenn.dev/yuki_f/articles/29614ff655de90"/>
        <updated>2022-11-03T02:51:26.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Flaskを用いて簡単なCRUDを再現することができたのでその方法を備忘録的に記事に残そうかと思います！
もし、誤りや補足などあればコメントしていただければありがたいです！
こちらの記事は Qiitaに以前投稿した以下の記事と同一の内容となっています。練習がてらzennに投稿してみたものなので、その点ご了承ください🙇
https://qiita.com/Yu_unI1/items/316e03d94f276695ff13

 開発環境
python 3.7
anaconda

 作成

 フォルダの作成
以下のような構成で作業を進めていきます！
.
└── CRUD
   ...]]></summary>
        <author>
            <name>Yuki Fujita</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[研究のためのPython開発環境]]></title>
        <id>https://zenn.dev/zenizeni/books/a64578f98450c2</id>
        <link href="https://zenn.dev/zenizeni/books/a64578f98450c2"/>
        <updated>2022-11-02T23:47:11.000Z</updated>
        <summary type="html"><![CDATA[注：本書籍は執筆途中です。
この書籍は、とにかく筆者の知りえる研究開発関連の知識をすべて吐き出すことを目的に書かれています。
Pythonを用いた研究を進めるのに必須の環境構築＆開発手法の個人的ベストプラクティスをまとめました。
実行環境の構築/ディレクトリ構成/プログラムの整備/vscodeでのデバッグなど、とにかく知っておくと余計な苦しみから解放される情報を共有します。
可能な限り継続的にアップデートしていこうと思っています。]]></summary>
        <author>
            <name>ZeniZeni</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ペットのための暖房システムをつくったよ]]></title>
        <id>https://zenn.dev/kotaproj/articles/pi_remo2meross</id>
        <link href="https://zenn.dev/kotaproj/articles/pi_remo2meross"/>
        <updated>2022-11-02T22:45:45.000Z</updated>
        <summary type="html"><![CDATA[犬を飼っているのですが、寒い日は電気毛布で暖をとっています。
ちょっとした組み合わせで自動化できそうです。
室内温度と連動させて電気毛布をオンオフするよう作ってみました。

 やったこと

今回は、nature remoとwifiタップの組み合わせで行いました。

1時間毎に以下を実施する
nature remoから温度を取得する
温度からタップを制御


温度が10度未満なら、wifiタップを通電する
温度が10度以上なら、wifiタップを切る


wifiタップには、電気毛布が接続されている


 機材一覧



no
部品名
個数
備考




1
ラズベリーパイ
1
今回は、4B...]]></summary>
        <author>
            <name>kotaproj</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google Cirq で遊んでみる (1) — グローバー探索アルゴリズム]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-cirq-qsim01</id>
        <link href="https://zenn.dev/derwind/articles/dwd-cirq-qsim01"/>
        <updated>2022-11-02T17:17:56.000Z</updated>
        <summary type="html"><![CDATA[目的
Qiskit で遊んでみる (4) と cuQuantum で遊んでみる (2) — グローバー探索アルゴリズム に引き続き、Google Cirq を使ってグローバー探索アルゴリズムを実行してみたい。
別にグローバー探索アルゴリズムに特別な思い入れがあるわけではなくて、フレームワークの試運転の題材として使っているだけなので、それ自身にはそれほどの意味はない[1]。

 基本的なパッケージのインポート
とりあえず以下くらいをインポートしておく。SVGCircuit を使わないと回路の可視化がかなり素っ気なくなるので、これは使っていきたい。
import numpy as np
...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[gzファイルの読み込みパフォーマンス比較]]></title>
        <id>https://zenn.dev/takilog/articles/1b2f7e245c78cd</id>
        <link href="https://zenn.dev/takilog/articles/1b2f7e245c78cd"/>
        <updated>2022-11-02T12:05:34.000Z</updated>
        <summary type="html"><![CDATA[背景

この使い方でJuliaが別に高速じゃないのは分かっていますが…。

 処理の概要

ディレクトリにgzファイルが置かれている（000からfffまで4096ファイル分）
gzファイルの中身は文字列で、各行が1つのJSON文字列になっている
1つ1つgzを開いて、今探索しているキーと同じキーが含まれているJSON文字列を探す
抽出したJSON文字列に含まれているデータを集合に保存する


 実装
大まかにこのような感じの実装になっています。Pythonとほぼ同じ処理をそのままJuliaでも書いています。Juliaで書くときは、最初にググって出てきた GZip.jl を使う実装と、...]]></summary>
        <author>
            <name>たきろぐ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[IDLE最強説を立ててみる]]></title>
        <id>https://zenn.dev/banananeko/articles/73585569e2584b</id>
        <link href="https://zenn.dev/banananeko/articles/73585569e2584b"/>
        <updated>2022-11-02T11:59:13.000Z</updated>
        <summary type="html"><![CDATA[IDLEとは
IDLEとはpythonに標準で搭載されているエディタです。
公式ドキュメントにも載っていますが以下の特徴があります


クロスプラットフォーム
pythonで作られている
codeウィンドウとshellウィンドウがある


公式ドキュメントはこちら↓
https://docs.python.org/ja/3.10/library/idle.html

 IDLEのお勧めする理由
私がIDLEをお勧めする理由はいくつかあります
とりあえずはじめにその理由をざっとみてください

デザインがシンプル
予測変換機能がある
コードを色分けしてくれる
動作が軽い


 詳しくみて...]]></summary>
        <author>
            <name>banananeko</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[python スプレッドシートへ出力]]></title>
        <id>https://zenn.dev/akaneiy/articles/f8e928e23ead60</id>
        <link href="https://zenn.dev/akaneiy/articles/f8e928e23ead60"/>
        <updated>2022-11-02T07:24:02.000Z</updated>
        <summary type="html"><![CDATA[KingOFTimeの勤怠データをスプレッドシートに出力するというだけの処理です。
Uipathで実行していましたが、朝、昼、夜間と定期的に実行したいのと、UI操作もなく明らかにUipathである必要がないと感じていてpythonに書き換えましたので備忘録残します。

 anacondaで行う処理

 新しい仮想環境を作成
conda create -n 仮想環境名

 作成した仮想環境へ移動する
conda activate 仮想環境名

 必要なライブラリをインストールする
今回使用するライブラリは下記の通りです。
●requests・・・KingOfTimeのAPIを叩く
●mat...]]></summary>
        <author>
            <name>akane</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django Crud Example]]></title>
        <id>https://zenn.dev/toccaduong/articles/27a682b6ff8092</id>
        <link href="https://zenn.dev/toccaduong/articles/27a682b6ff8092"/>
        <updated>2022-11-02T07:21:35.000Z</updated>
        <summary type="html"><![CDATA[Django + Dockerよく使うコマンド（メモ）
# バージョン確認
docker-compose exec web ./manage.py --version

# プロジェクトをスタート
docker-compose up -d --build
docker-compose run web django-admin.py startproject 【project_name】 .

# 全て削除
・（コンテナを止めて、ネットワーク、ボリュームもイメージを削除）
docker-compose down --rmi all --volumes

# アプリ作成
docker-c...]]></summary>
        <author>
            <name>DuongLE</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのopencvをインストール]]></title>
        <id>https://zenn.dev/k_neko3/articles/af447fa4240771</id>
        <link href="https://zenn.dev/k_neko3/articles/af447fa4240771"/>
        <updated>2022-11-02T04:11:47.000Z</updated>
        <summary type="html"><![CDATA[PythonのOpenCVをインストール
pip install opencv-python
Numpyは入ってたので割愛。
以下、公式のチュートリアル。
https://docs.opencv.org/4.x/d6/d00/tutorial_py_root.html
matplotlibのインストール
pip install matplotlib]]></summary>
        <author>
            <name>k_neko3</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pipのバージョン確認とアップグレードコマンドのメモ]]></title>
        <id>https://zenn.dev/k_neko3/articles/47fc0c9594f5dd</id>
        <link href="https://zenn.dev/k_neko3/articles/47fc0c9594f5dd"/>
        <updated>2022-11-01T13:09:05.000Z</updated>
        <summary type="html"><![CDATA[病気から復活…！
まだ療養中。
いろいろ苦しんでいた間に世の中が少しずつ変わって、pythonで少し作りたいものができたので、ちょっとpipを更新したという単なるメモ。
バージョン確認は以下。
pip --version
アップグレードは以下。
py -m pip install --upgrade pip
インストールしてあるライブラリの確認。
pip list
pythonのバージョンアップなどで色々苦戦したので、またメモしておきたい。]]></summary>
        <author>
            <name>k_neko3</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CAPTCHAソリューションの自動化]]></title>
        <id>https://zenn.dev/marketer/articles/84cb594e4182bf</id>
        <link href="https://zenn.dev/marketer/articles/84cb594e4182bf"/>
        <updated>2022-11-01T07:02:25.000Z</updated>
        <summary type="html"><![CDATA[公式サイトの説明によると：
「2captcha.comは手動の画像認識によるCAPTCHA突破サービスです。こちらではスキャンしたドキュメント、レターヘッド、CAPTCHAからリアルタイムでテキストを認識する必要がある人と、画面からテキストを入力してお金を稼ぎたい人を見つけることができます。
The system employs English-speaking and Russian-speaking workers.
このシステムでは英語を話す作業者とロシア語を話す作業者が働いています。
アンチCAPTCHAサービス、2captcha.comは、pixodrom、antigate、a...]]></summary>
        <author>
            <name>marketer</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで書いたコードを人に渡す前に、最低限やって欲しいこと]]></title>
        <id>https://zenn.dev/ibaraki/articles/74f9cd726d5885</id>
        <link href="https://zenn.dev/ibaraki/articles/74f9cd726d5885"/>
        <updated>2022-11-01T06:00:01.000Z</updated>
        <summary type="html"><![CDATA[はじめに
パーソルのブログによると、2022年プログラミング言語おすすめランキング1位はPythonらしいです。
https://persol-tech-s.co.jp/hatalabo/it_engineer/607.html#_1-1
実際にPythonは人気の言語なので、ここ数年「Pythonでコードを書いたからアプリに組み込んで欲しい」という依頼がそれなりにあります。
しかし実際にコードを貰うと、可読性が低かったり、そもそも環境依存が強すぎてまともに動かなかったりするケースが多くて対応に苦労することが多いです。
ということで、仕事で人に渡すPythonのコードを書くなら最低限...]]></summary>
        <author>
            <name>いばらき</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Splatoon3】s3sを立てて戦績をstat.inkに自動アップする]]></title>
        <id>https://zenn.dev/hibikine/articles/1febb4eb03b604</id>
        <link href="https://zenn.dev/hibikine/articles/1febb4eb03b604"/>
        <updated>2022-11-01T04:52:47.000Z</updated>
        <summary type="html"><![CDATA[※サードパーティのソフトウェアを使用します。本記事の内容を実行する場合は自己責任でお願いします。

みなさん、イカしてますか？　ようやくS+0に上がった響音カゲです。
スプラトゥーン3の戦績分析って楽しいですよね。自分のその日の動きが数字で見えるので、試合動画と一緒に見返すとすごく勉強になります。
スプラトゥーンの戦績ログを管理できる stat.ink というサービスに自動で戦績をアップロードできる s3s というスクリプトが公開されていたので、Ubuntuサーバー上にserviceとしてセットアップするまでのやり方を解説します。

 実行環境

 ソフトウェア


s3s@2d59ff...]]></summary>
        <author>
            <name>響音カゲ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonでxmlの解析を0から学んでいく]]></title>
        <id>https://zenn.dev/taketooon/articles/c46b6ebef46117</id>
        <link href="https://zenn.dev/taketooon/articles/c46b6ebef46117"/>
        <updated>2022-10-31T17:53:53.000Z</updated>
        <summary type="html"><![CDATA[introduction
やっぱりブラックボックス化がお得意なpythonさん。今回はあんまり体系化されていないxmlモジュールの使い方についてお話する。今回もこの記事の目的は研究にxml解析が必要になったので、その理解を深めるため。参考サイトは以下のものになる。
https://pg-chain.com/python-xml-elementtree
https://marusankakusikaku.jp/python/standard-library/xml.etree.ElementTree/

 xml内のnodeを取得する操作

 xmlの解析

xmlの構造解析
impo...]]></summary>
        <author>
            <name>taketooon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[cuQuantum で遊んでみる (2) — グローバー探索アルゴリズム]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-cuquantum02</id>
        <link href="https://zenn.dev/derwind/articles/dwd-cuquantum02"/>
        <updated>2022-10-31T17:48:36.000Z</updated>
        <summary type="html"><![CDATA[目的
引き続き cuQuantum で遊んでみたい。適当な題材が思いつかないので、Qiskit で遊んでみる (4) を元にグローバー探索アルゴリズムを実行したみたい。

 コンテンツ
Qiskit で遊んでみる (4) に対応させる形で用意した、GitHub のこちら をそのまま利用する。
解説はすべて前回の記事に譲ることにして、今回も 2 つの解を持つオラクルを作成して探索を実行する。

 基本的な回路（オラクル/Diffuser）の実装

 基本的なパッケージのインポート
まずは基本的なパッケージをインポートする。cuQuantum を使うのだが、デフォルトのバックエンド Cu...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonでのファイル操作を0から学んでいく]]></title>
        <id>https://zenn.dev/taketooon/articles/7789f634d52e6d</id>
        <link href="https://zenn.dev/taketooon/articles/7789f634d52e6d"/>
        <updated>2022-10-31T16:58:07.000Z</updated>
        <summary type="html"><![CDATA[introduction
自分の研究でOSモジュールを使う事になり、なんか中身が見えなくて気持ち悪い、、、と思いながら適当に使っていたんだけど、前もグラフの使い方をまとめたら簡単に使えるようになったから、ファイル操作も記事を書いたら簡単に理解できるんじゃね？と思ってこれを書いていく。基本的にはkinocodeさんの動画をみつつ、そこから自分なりに考えたことを付け足していく方式でやっていくので、もしも分かりづらいなぁ...とおもったらkinocodeさんの動画を見るといい。
https://www.youtube.com/watch?v=PV53-nTFE0w

 ディレクトリ名・フォ...]]></summary>
        <author>
            <name>taketooon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonのCalmapを使ってトレーニング記録を可視化する]]></title>
        <id>https://zenn.dev/takilog/articles/8a99818767a5f0</id>
        <link href="https://zenn.dev/takilog/articles/8a99818767a5f0"/>
        <updated>2022-10-31T13:35:49.000Z</updated>
        <summary type="html"><![CDATA[はじめに
普段体調を整えるために筋トレやジョギングをしており、それぞれアプリに運動が記録されているのですが、githubみたいなカレンダー（草）にして確認するとやる気が出るかな？と思って可視化してみることにしました。
自作しようと思ったらちゃんと calmap というものが作られていたので使ってみます。

Calendar heatmaps from Pandas time series data https://pythonhosted.org/calmap/



 実装
上の公式ドキュメントに従って、yearplot を使ってデータを描画しています。雰囲気このような実装です。
...]]></summary>
        <author>
            <name>たきろぐ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonを使ってyoutubeをダウンロードする]]></title>
        <id>https://zenn.dev/momiji777/articles/aae52473c0255d</id>
        <link href="https://zenn.dev/momiji777/articles/aae52473c0255d"/>
        <updated>2022-10-31T12:51:27.000Z</updated>
        <summary type="html"><![CDATA[ライブラリのインストール
pip install yt-dlp

 コーディング
from yt_dlp import YoutubeDL

ydl_opts = {'format': 'best'}
with YoutubeDL(ydl_opts) as ydl:
    ydl.download(['https://www.youtube.com/watch?v=47Jl-_0wQHM&t=1s'])

 実行結果
[youtube] 47Jl-_0wQHM: Downloading webpage
[youtube] 47Jl-_0wQHM: Downloading a...]]></summary>
        <author>
            <name>momiji777</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[風俗の人気嬢の空き予約を確認して自分のLine通知する方法]]></title>
        <id>https://zenn.dev/duke13/articles/81b75c22f373fc7</id>
        <link href="https://zenn.dev/duke13/articles/81b75c22f373fc7"/>
        <updated>2022-10-31T09:08:09.000Z</updated>
        <summary type="html"><![CDATA[前説
風俗を利用するならば可愛い女性のほうが望ましい！！
男性諸君なら誰しもがそう願う。しかし、可愛い嬢は得てして人気であり、予約を取ることは非常に難しい。
そこで、男性諸君の願いを叶えられるように人気嬢を予約できる確率を少しでも高められプログラムを組んでみた。

 概要
やりたいことはシンプルである。

風俗サイトをスクレイピング
出勤データを蓄積する
空いている日があれば自分のLINE通知を出す

なお、スクレイピングするにあたり、対象サイトはスクレイピングが可能かどうかを必ず許可をとってほうが賢明である。

 事前準備
通知システム作成にあたり以下の環境を用意する必要がある。
...]]></summary>
        <author>
            <name>duke13</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonで pythonのモジュールを作る]]></title>
        <id>https://zenn.dev/banananeko/articles/dfb788343291fe</id>
        <link href="https://zenn.dev/banananeko/articles/dfb788343291fe"/>
        <updated>2022-10-31T07:31:55.000Z</updated>
        <summary type="html"><![CDATA[pythonモジュール制作
この記事ではいくつかの種類に分けて
解説していこうと思っています

引数:なし　return:なし
引数:あり　return:なし
引数:なし　return:あり
引数:あり　return:あり

まずはじめに1番目の引数:なし　return:なし
をしようと思います

 引数:なし　return:なし
このような関数は最も基本的で
関数を実行するとその関数の中に書かれている
内容を実行すると終了して元のコードに戻ります

 例

mymodule.py
def hello():
    print("hello")


main.py
import my...]]></summary>
        <author>
            <name>banananeko</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[YAMLWizard で順序を保ってシリアライズする]]></title>
        <id>https://zenn.dev/kasega0/articles/869d7965097520</id>
        <link href="https://zenn.dev/kasega0/articles/869d7965097520"/>
        <updated>2022-10-31T05:11:45.000Z</updated>
        <summary type="html"><![CDATA[結論
encorder として PyYAML の safe_dump(sort_keys=False) を渡す。
import yaml as pyyaml

def encorder(data, **kw):
    return pyyaml.safe_dump(data, sort_keys=False, **kw)

obj.to_yaml_file("obj.yml", encoder=encorder)

 背景
Python で dataclass を yaml で serialize/deserialize したいなと思っていたら dataclass-wizard な...]]></summary>
        <author>
            <name>かせがお</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Twitter を BigQuery と JupyterLab で分析してみた ~ Twitter API v2 ~]]></title>
        <id>https://zenn.dev/ekusiadadus/articles/twitter_bigquery_jupyterlab1</id>
        <link href="https://zenn.dev/ekusiadadus/articles/twitter_bigquery_jupyterlab1"/>
        <updated>2022-10-30T20:45:41.000Z</updated>
        <summary type="html"><![CDATA[Twitter を BigQuery と JupyterLab で分析してみた ~ Twitter API v2 ~

 はじめに
最近、Twitter のデータを分析してみたいと思い、Twitter のデータを取得する方法を調べてみました。
Twitter API というものがあるらしく、Twitter APIを見てみると、結構面白そうだったので、Twitter API に申し込んでみました。
申し込みが通ったので、Twitter API を使って、Twitter のデータを取得してみました。
https://twitter.com/ekusiadadus/status/15867...]]></summary>
        <author>
            <name>ekusiadadus</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker＋WSL＋GPUでWhisperを動かしてみる]]></title>
        <id>https://zenn.dev/gyabi/articles/3d2b3fb4e5bf23</id>
        <link href="https://zenn.dev/gyabi/articles/3d2b3fb4e5bf23"/>
        <updated>2022-10-30T15:01:47.000Z</updated>
        <summary type="html"><![CDATA[はじめに
OpenAIより公開されている翻訳AIであるWhisperをDocker+WSL+GPUで動かしてみたので備忘録。
https://openai.com/blog/whisper/
※WSL＋Docker環境でのGPU有効化はすでに可能なものとする。もし必要だったらコメントください。
全体の流れは以下の記事を参考にさせていただきました。
https://zenn.dev/kento1109/articles/d7d8f512802935

 そもそもWhisperとは？
こちらの記事が非常に細かく解説されており参考になりました。
https://zenn.dev/kwash...]]></summary>
        <author>
            <name>Kano</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのリンター・フォーマッターをしっかりと理解する（Flake8, Black, isort, mypy）]]></title>
        <id>https://zenn.dev/tanny/articles/cdb555d6124a2a</id>
        <link href="https://zenn.dev/tanny/articles/cdb555d6124a2a"/>
        <updated>2022-10-30T14:54:41.000Z</updated>
        <summary type="html"><![CDATA[この記事は何？
Pythonでよく使われるリンター・フォーマッターについて「しっかり」理解するために整理した情報をまとめました。
📋書いてあること

リンターとフォーマッターの違いと役割
Pythonで用いられるリンター・フォーマッターの概要と使い方
VS Codeでの利用方法

🧑‍💻対象としたリンター・フォーマッター



ツール名
種別
概要




Flake8
リンター
論理エラー・PEP8スタイルなどのチェック


Black
フォーマッター
PEP8に従ったスタイルフォーマット


isort
フォーマッター
モジュールのインポート順のフォーマット


mypy
リンタ...]]></summary>
        <author>
            <name>Tanny</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで記述するAzure FunctionsのV2 modelを試してみる]]></title>
        <id>https://zenn.dev/choshicure/articles/364875750f8888</id>
        <link href="https://zenn.dev/choshicure/articles/364875750f8888"/>
        <updated>2022-10-30T13:26:50.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Pythonで記述するAzure FunctionsにV2 modelというものがpreviewで公開されました。
一番の変更点としては関数アプリの設定ファイルであるfunction.jsonがなくなったことです。
設定ファイルの代わりにデコレータを利用してトリガーやバインディングの設定を行うようになりました。

 まずは試す

 要件
V2 modelをローカルで試すには以下の要件を満たしている必要があります。
バージョンが古い、そもそもインストールしていないといった場合は要件を満たすバージョンをインストールしてください。

Python 3.7以降
Azure Func...]]></summary>
        <author>
            <name>choshicure</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[MLflowで機械学習パイプラインの管理（1）]]></title>
        <id>https://zenn.dev/pluck/articles/299ead20e6ab50</id>
        <link href="https://zenn.dev/pluck/articles/299ead20e6ab50"/>
        <updated>2022-10-30T08:07:39.000Z</updated>
        <summary type="html"><![CDATA[はじめに
「AIエンジニアのための機械学習システムデザインパターン」という本読んでいて，パイプライン自体の管理もMLflowでやっていたのがいいなと思ったのでそれについて備忘録という意味でも書いていきます．
https://www.amazon.co.jp/AIエンジニアのための機械学習システムデザインパターン-AI-TECHNOLOGY-澁井-雄介/dp/4798169447

 MLflow
MLfLowは機械学習用の実験管理ツールで，主に実験のトラッキングやモデルファイルの保存（実際のストレージはS3やGCSなど）に使用することが多いと思います．
https://mlflow....]]></summary>
        <author>
            <name>pluck</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[任意のファイルサイズの画像を生成する]]></title>
        <id>https://zenn.dev/tamagoo/articles/6c5ca0d595961c</id>
        <link href="https://zenn.dev/tamagoo/articles/6c5ca0d595961c"/>
        <updated>2022-10-30T07:39:50.000Z</updated>
        <summary type="html"><![CDATA[やりたいこと
画像のファイルサイズを特定の値にしたい。
入力ファイルサイズに制限のあるシステムである場合には、ファイルサイズの境界値テストをしたいことがあると思います。
ファイルの形式が問われないのであればfsutilでバイナリ生成ができるのですが、特に画像ファイルに限定される場合、ましてや縦幅/横幅が指定される場合には生成が難しいです。
実際にその辺りで痛い目を見たので、ファイルサイズを指定して、画像ファイルを作れるようになっておきたいなと思いました。

 PNGファイルの概要
出力する画像ファイルを.pngに限定します。
というのも、PNGの仕様が都合がいいのですが、その辺りの説...]]></summary>
        <author>
            <name>たまごぉ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[データ分析でのEDAチートシート（python/基本編）※随時更新]]></title>
        <id>https://zenn.dev/senbei139/articles/079a5e72ba83d9</id>
        <link href="https://zenn.dev/senbei139/articles/079a5e72ba83d9"/>
        <updated>2022-10-30T05:30:25.000Z</updated>
        <summary type="html"><![CDATA[EDAでよく使うものをまとめていきます。

 必要ライブラリのインポート
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

 データファイル（csv)をdataframeとして読み込む
df = pd.read_csv("path_file.csv")

 データセットのカラム確認
df.columns

"""
Index(['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species'], dtype='o...]]></summary>
        <author>
            <name>senbei139</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【python】スクレイピングしたデータをcsvに出力する]]></title>
        <id>https://zenn.dev/subaru_hello/articles/38624760719abf</id>
        <link href="https://zenn.dev/subaru_hello/articles/38624760719abf"/>
        <updated>2022-10-30T00:28:42.000Z</updated>
        <summary type="html"><![CDATA[「今日個人で使用できる陸上競技場を検索するアプリ」を作っています。
いちいちデータを調べてCSVにまとめるのが面倒だったので、スクレイピングしてきたデータをCSVに保存する処理をpythonで実装しました。
開発環境



pip
python
chromedriver




22.3
3.9.10
102.0.5005.27




 戦略
すでに競技場情報がまとまっているサイトがあったので、以下の手順で取得しようと考えています。

サイトをクローリング
競技場の名前と住所をスクレイピング
CSVに出力

本当は使用料金や開放時間も取得したかったのですが、平日と休日で料金や開放時間が...]]></summary>
        <author>
            <name>subaru-hello</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[英語ができない人の pythonのマスター方法]]></title>
        <id>https://zenn.dev/banananeko/articles/f44621d18826c4</id>
        <link href="https://zenn.dev/banananeko/articles/f44621d18826c4"/>
        <updated>2022-10-28T22:39:17.000Z</updated>
        <summary type="html"><![CDATA[注意書き
これはあくまでも英語ができなくても pythonができるようになることを保証はしませんあくまで僕の独り言だと思って聞いてください

 はじめに
この記事では英語ができないけど pythonを
やりたいという人や過去の自分を思い出したい
という人向けに書いています。
はじめにも書きましたが

pythonができるようになることを保証はしません

のでご注意ください

 方法その1 スペル丸暗記
英語ができる人のとってはものすごく効率の悪いことなのですが英語ができない人にとっては
まあまあ有効な手段です
たとえば
print(“hello world")
にあるprintも昔は...]]></summary>
        <author>
            <name>banananeko</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScriptとPythonにおける文字列（配列・リスト）の切り出し]]></title>
        <id>https://zenn.dev/sasshu/articles/fc3caa06d7a799</id>
        <link href="https://zenn.dev/sasshu/articles/fc3caa06d7a799"/>
        <updated>2022-10-27T18:39:49.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事は、JavaScriptに触ってきた（といっても1年くらい）者がPythonも使うようになったので、JavaScriptとPythonの相互変換を目指し、その備忘録として書いています。
今回は、文字列（配列・リスト）の切り出しについてです。

 文字列の切り出し

 JavaScript
const str = 'abcdef';
// start: 切り出し開始位置, end: 切り出し終了位置（自分自身は含まない）
// slice(start, end)
// endのみ省略可

// 3文字目以降
console.log(str.slice(2));   /...]]></summary>
        <author>
            <name>sasshu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[マスク付きテンプレートマッチングでスプラトゥーン3のイカランプを認識させる]]></title>
        <id>https://zenn.dev/kazaki/articles/893b37b1d1c78c</id>
        <link href="https://zenn.dev/kazaki/articles/893b37b1d1c78c"/>
        <updated>2022-10-27T16:32:14.000Z</updated>
        <summary type="html"><![CDATA[openCVのcv2.matchTemplate()によるテンプレートマッチングでは、アルファ値が使えないことで有名ですが、実はマスク付きテンプレートマッチングで透過処理もどきが可能です。
公式ドキュメント：https://docs.opencv.org/4.x/d4/dc6/tutorial_py_template_matching.html
オライリー・ジャパンから出版されてるあの「詳解OpenCV 3」にもこのことは書かれて無かったので知らなかった・・・😇
かなり便利なのですが、よくあるopenCVの基礎だけを簡単に解説した記事などでは取り上げられてないので本記事でご紹介したいと思...]]></summary>
        <author>
            <name>菊谷　知真</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【GA4】Google Analytics 4のデータをPythonで取得する]]></title>
        <id>https://zenn.dev/shiroqujira/articles/00ea833a7b11a4</id>
        <link href="https://zenn.dev/shiroqujira/articles/00ea833a7b11a4"/>
        <updated>2022-10-27T13:41:38.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Google Analytics 4のデータをpythonで処理したいなーと思い、Analytics Data APIを使ってみました。使ってみて思ったことをまとめたので、このAPIを利用する参考になれば幸いです。
使用したコードこちらからダウンロードできます.
https://github.com/gradus-AP/python-ga4-tips


 まずは使ってみる

 準備
公式のクイックスタートに沿って以下の準備を行います。
<手順1> Google Analytics Data APIを有効にする
クイックスタートのページの[Enable the ...]]></summary>
        <author>
            <name>shiroqujira</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS SDK for Python (Boto3) を用いてプレフィックスごとにS3ライフサイクルルールを一括設定する]]></title>
        <id>https://zenn.dev/optfit/articles/f10da036402cb8</id>
        <link href="https://zenn.dev/optfit/articles/f10da036402cb8"/>
        <updated>2022-10-27T03:00:00.000Z</updated>
        <summary type="html"><![CDATA[Opt FitエンジニアのURUSHIです！
先日大量のライフサイクル設定を依頼されて泣き出しそうだったので、その際に利用した解決策を共有します。

 概要
Boto3のResource APIを利用してAmazon S3 バケットのPrefixごとにライフサイクル設定をする

 対象読者

大量のライフサイクル設定を依頼されて泣きそうな方
Amazon S3 バケットにライフサイクル設定をしたい方
ライフサイクル設定をAmazon S3 コンソールからポチポチ頑張りたくない方
AWS CLIではなくBoto3を利用してライフサイクル設定をしたい方


 できるようになること



 内...]]></summary>
        <author>
            <name>OptFit</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[年賀状の宛名印刷難民の救済]]></title>
        <id>https://zenn.dev/m_cre/articles/address-printing-on-jp-postcards</id>
        <link href="https://zenn.dev/m_cre/articles/address-printing-on-jp-postcards"/>
        <updated>2022-10-26T16:09:52.000Z</updated>
        <summary type="html"><![CDATA[はじめに
毎年年末に悩まされる年賀状、近年の傾向のとおり私も基本的には止めてしまったのですが、親戚だけには出すことにしています。
Windowsであれば手頃な宛名印刷ソフトがいくつかあったと思うのですが、Macに乗り換えてからは定番のものがみつからず、困っていたものです。
それであれば、自分でつくろうと考えました。
Macだけでなく、DockerさえインストールできればWindowsでもLinuxでもラズパイでもうごくはずです。たぶん。

 つかいかた

 Dockerのインストール
Dockerをインストールしたことがない場合は、公式サイトなどを参考にまずインストールしてください。...]]></summary>
        <author>
            <name>mcre (FUJITA Shinya)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[cmdstanpy : 重回帰]]></title>
        <id>https://zenn.dev/yoshida0312/articles/78d996128f3335</id>
        <link href="https://zenn.dev/yoshida0312/articles/78d996128f3335"/>
        <updated>2022-10-26T13:05:07.000Z</updated>
        <summary type="html"><![CDATA[import os
import time

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from cmdstanpy import CmdStanModel

 データの読み込み
以下のデータを使用しています。
https://github.com/MatsuuraKentaro/RStanBook/blob/master/chap05/input/data-attendance-1.txt
df = pd.read_csv("./data-attendance-1.txt")
pr...]]></summary>
        <author>
            <name>よしだ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[numpy.einsumの仕様]]></title>
        <id>https://zenn.dev/termoshtt/articles/numpy-einsum</id>
        <link href="https://zenn.dev/termoshtt/articles/numpy-einsum"/>
        <updated>2022-10-26T09:18:33.000Z</updated>
        <summary type="html"><![CDATA[rust-ndarray用の einsum! マクロを作るためにまずNumPyの実装を調べたので、その内容をまとめていく。

 subscripts
numpy.einsumの引数はのうち、Optionalで無いのは次の2つ：


subscripts: str

operands: list of array_like

einsum はこの subscripts で与えられた文字列に応じて operands で与えられたテンソルに対して操作しその結果を返します。
この記事では subscripts の仕様をまとめていきます。

 Implicit mode
subscripts には...]]></summary>
        <author>
            <name>termoshtt</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[tkinterのlabelウィジェットの使い方]]></title>
        <id>https://zenn.dev/banananeko/articles/db0688fc341655</id>
        <link href="https://zenn.dev/banananeko/articles/db0688fc341655"/>
        <updated>2022-10-26T07:08:41.000Z</updated>
        <summary type="html"><![CDATA[labelウィジェットとは
名前の通りテキストを表示するためのウィジェットです。
このウィジェットがなければGUIアプリケーションが成り立つことはまずありません

 labelウィジェットの表示方法
labelウィジェットはButtonと同じように
表示することができます
ラベル名　= tk.Label(表示するWindow名, text = "表示するテキスト").pack()
ひとまずこれでlabelを表示させることはできます

 labelの色の変更

 文字の色
このラベルの色は実は変更することができます変更するためにはtk.Labelの後の
()に
foreground="...]]></summary>
        <author>
            <name>banananeko</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[lxmlで子要素の後ろ側にある文字列を取得する方法]]></title>
        <id>https://zenn.dev/hashito/articles/e47166c4a0bfd0</id>
        <link href="https://zenn.dev/hashito/articles/e47166c4a0bfd0"/>
        <updated>2022-10-26T05:39:42.000Z</updated>
        <summary type="html"><![CDATA[問題
例えば、下記のようなHTMLがある場合で、すべての文字列を取得したい場合。
<p>
    これは
    <b style="font-weight:bold;">
        テスト
    </b>
    です。
</p>
Pythonのlxmlを利用すると下記のような手順で取得する事ができる。

 これはを取得する
lxmlで解析して、xptahという指定文でテキストを取得できる
from lxml import etree

html_data="""
<p>
    これは
    <b sty...]]></summary>
        <author>
            <name>hashito</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[任意のCUDAバージョンのPyTorchをPoetryでインストールする]]></title>
        <id>https://zenn.dev/yag_ays/articles/a6c84622f558ee</id>
        <link href="https://zenn.dev/yag_ays/articles/a6c84622f558ee"/>
        <updated>2022-10-26T04:35:14.000Z</updated>
        <summary type="html"><![CDATA[概要
PyTorchからGPUを利用するためには、CUDAのバージョンに合ったパッケージをインストールする必要があります。PyTorchの"Get Started"ページでは、プラットフォームやバージョン、パッケージマネージャーを選択すると、それに応じたインストールコマンドが表示される仕組みがありますが、ここにはPoetryは含まれていません。

そこでこの記事では、Poetryを利用しているプロジェクトにおいて、任意のCUDAバージョンのPyTorchパッケージをインストールする方法を解説します。

 方法
実現する方法はいくつか存在するので、それぞれ解説していきます。ここでは、例...]]></summary>
        <author>
            <name>yag_ays</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DeepL + Slack + GitHub Actionsでリモセン論文取得Botの作成]]></title>
        <id>https://zenn.dev/manuriya/articles/49a02bb2a13b84</id>
        <link href="https://zenn.dev/manuriya/articles/49a02bb2a13b84"/>
        <updated>2022-10-25T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[記事要約

指定したキーワードが含まれるarXiv上の論文をSlack上に投げるbotを作成
内容を簡単に把握するためDeepLの翻訳結果をつけた
GitHub Actionsで指定時間にbotを起動するようにした


 完成イメージ
タイトルとURL、著者に加えて日英の概要を表示


 リポジトリ
https://github.com/manuriya/arxiv-satellite

 使い方

 準備

SlackのIncoming Webhookを使用してbotを作成、APIトークンを確認する

DeepLのアカウントを作成、DeepL APIの認証キーを確認する


 Gi...]]></summary>
        <author>
            <name>manuriya</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[浮動小数点数計算のPython、Java、C#での実装について]]></title>
        <id>https://zenn.dev/shui2022/articles/86452f30aed64f</id>
        <link href="https://zenn.dev/shui2022/articles/86452f30aed64f"/>
        <updated>2022-10-25T14:54:54.000Z</updated>
        <summary type="html"><![CDATA[はじめに
浮動小数点数に関わる計算の実装について、一度は悩まされた人も多いと思いますので、自分が良く使うPython、Java、C#での実装方法を備忘録代わりに執筆します。
浮動小数点数についての教科書的な知識は、以下のリンクを参照して下さい。
https://workteria.forward-soft.co.jp/blog/detail/10401
AtCoderという競技プログラミングのサイトで浮動小数点数を扱っている問題があるので、今回はここで通るコードを紹介したいと思います。
https://atcoder.jp/contests/abc169/tasks/abc169_c...]]></summary>
        <author>
            <name>shui2022</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac＆Pythonで、OBSの仮想カメラ情報を取得する]]></title>
        <id>https://zenn.dev/4050sktrmt/articles/6f0998c6ba5436</id>
        <link href="https://zenn.dev/4050sktrmt/articles/6f0998c6ba5436"/>
        <updated>2022-10-25T13:38:01.000Z</updated>
        <summary type="html"><![CDATA[経緯
Mac環境において、「Pythonでカメラのデバイス一覧を取得したいなぁ」と思いながらググると、次の記事に辿り着いた。
https://qiita.com/sutoh/items/fddefe130eae3bba946f
最近、趣味でOBSを触り始めてみて、OBSの仮想カメラからの映像出力をOpenCVでアレコレしたくなった。
しかし、上記記事の手法だと、少なくとも筆者の環境ではOBSの仮想カメラ情報を出力することが出来なかった。
直接的な解決策をググっても見つからなかったため、自身でなんとか解決してみることにした。

 やりたいことの整理

Pythonで、OBSの仮想カメラ...]]></summary>
        <author>
            <name>4050sktrmt</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python+Geopandasでシェープファイル(shpファイル)を処理した (PolygonとMultiPolygonの分岐)]]></title>
        <id>https://zenn.dev/takilog/articles/e31570b1b29114</id>
        <link href="https://zenn.dev/takilog/articles/e31570b1b29114"/>
        <updated>2022-10-25T12:01:37.000Z</updated>
        <summary type="html"><![CDATA[背景
以前このような記事を書きました。
https://zenn.dev/takilog/articles/0d355bbb80f79848da8d
国土地理院データのシェープファイル (*.shp) の外周部をPython+Geopandasで読み込む方法を説明しました。この実装を久しぶりに試したら、長野以外の都道府県だとPolygonがMultiPolygonになることが結構あって、ムムムとなったので追加の記事を書くことにしました。

 やったこと
基本的にやったことは以前の記事の処理を同じですが、Polygon or MultiPolygonの判定をやります。内陸の都道府県は比...]]></summary>
        <author>
            <name>たきろぐ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのクラスのメソッド全てに自動でデコレーターを適用する]]></title>
        <id>https://zenn.dev/nyo3q1/articles/python-auto-logger</id>
        <link href="https://zenn.dev/nyo3q1/articles/python-auto-logger"/>
        <updated>2022-10-25T10:25:54.000Z</updated>
        <summary type="html"><![CDATA[関数単体へのデコレーターの適用すぐ出るけど、今回の使い方は中々無いので忘れないように残しておく。
https://stackoverflow.com/a/23726462
def for_all_methods(decorator):
    def decorate(cls):
        for attr in cls.__dict__: # there's propably a better way to do this
            if callable(getattr(cls, attr)):
                setattr(cls, attr,...]]></summary>
        <author>
            <name>nyo3q1</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WSL2でJoePenna版のDreamboothを動かす]]></title>
        <id>https://zenn.dev/yukku/articles/cf1dbb60f040d6</id>
        <link href="https://zenn.dev/yukku/articles/cf1dbb60f040d6"/>
        <updated>2022-10-25T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[Windows11のローカルでDreamboothを動かす環境構築を行います。
今回紹介しているJoePenna版のDreamboothは、成功事例が多く精度が高いと評価を受けています。また、ckptファイルを出力してくれるので、変換することなくAUTOMATIC1111などで使用できます。
ただし最低VRAM24GB必要なので注意してください。
筆者のPCの環境は以下の通りです。



項目
内容




OS
Windows11 22H2


CPU
Intel Core i7-11700k


メモリ
DDR4-3200 64GB


GPU
NVIDIA RTX3090Ti


...]]></summary>
        <author>
            <name>ユック</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[fireとpoetryで作る自分用cliアプリケーション(2022)]]></title>
        <id>https://zenn.dev/atu4403/articles/python_fire_2022</id>
        <link href="https://zenn.dev/atu4403/articles/python_fire_2022"/>
        <updated>2022-10-25T07:44:49.000Z</updated>
        <summary type="html"><![CDATA[定型作業や自作ツールを使うときにコマンド1発で使用できると便利です。
例えば、URLにアクセスしてデータをダウンロードしDBにぶち込むなどなど。
以前にこのような記事を投稿したことがあるのですが欠点がありました。
https://zenn.dev/atu4403/articles/b776a9f2b7a516d195d1
公開できるCLIアプリケーションという前提でしたので、汎用的に使える一方で細かな修正が面倒でした。
なので今回は「自分が使えればOK」という観点で書き直してみたいと思います。

 プロジェクト作成
例としてmyappというコマンドを作成します。myappの部分は好きに命...]]></summary>
        <author>
            <name>atu4403</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【M1/Mac】毎回勝手にCondaが起動されるのを止める方法]]></title>
        <id>https://zenn.dev/teba_eleven/articles/d318ccf5f8f729</id>
        <link href="https://zenn.dev/teba_eleven/articles/d318ccf5f8f729"/>
        <updated>2022-10-25T04:42:26.000Z</updated>
        <summary type="html"><![CDATA[現象

ターミナルを開くと勝手にcondaの仮想環境がactivateされる


 筆者の環境
conda 22.9.0
condaはMiniforge3で入れました。

 結論

ターミナル
conda config --set auto_activate_base false

ターミナルでこちらを実行。

 関連ページ
https://www.chickensblog.com/vscode-runcode-run/
https://www.chickensblog.com/vscode-not-path/
https://zenn.dev/teba_eleven/article...]]></summary>
        <author>
            <name>手羽先</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[最近見つけたPythonの小技]]></title>
        <id>https://zenn.dev/kazu_gor/articles/9c26774e2802b9</id>
        <link href="https://zenn.dev/kazu_gor/articles/9c26774e2802b9"/>
        <updated>2022-10-25T02:00:00.000Z</updated>
        <summary type="html"><![CDATA[Python3.8以降で使えるf-stringsの小技です。

test.py
x = 10
print(f'{x=}')

↑こうすると、こう↓

CLI
$ python test.py
>>> x=10

なかなか便利。


test.py
print(f'{x  =  }')

↑こうしても、こう↓

CLI
$ python test.py
>>> x  =  10

便利ですねえ。]]></summary>
        <author>
            <name>kazu-gor</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pytestでカバレッジを計りながら開発したい]]></title>
        <id>https://zenn.dev/ymiz/articles/ffbdcd9e26a3a3</id>
        <link href="https://zenn.dev/ymiz/articles/ffbdcd9e26a3a3"/>
        <updated>2022-10-24T20:49:13.000Z</updated>
        <summary type="html"><![CDATA[問題

pytestを使っている
テストカバレッジを計りながら開発したい
どうするか？


 対応
pytest-cov を使う。
https://pypi.org/project/pytest-cov/
例えば、
├─src
│  └─domains
│      └─foo
└─test
import pytest

from src.domains.foo.domain import Domain as Foo


def test_foo():
    Foo()
class Domain:
    pass
の時、
> pytest --cov=src test
==...]]></summary>
        <author>
            <name>ymiz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【SP-API】Amazon Marketplace SP-APIを利用するまでの手順]]></title>
        <id>https://zenn.dev/eito_blog/articles/f65e9994fdebc7</id>
        <link href="https://zenn.dev/eito_blog/articles/f65e9994fdebc7"/>
        <updated>2022-10-24T13:26:00.000Z</updated>
        <summary type="html"><![CDATA[案件でSP-APIを利用するために必要な設定を行う機会がありました。
このページではその備忘録としてAmazon Marketplace SP-APIを利用するまでの手順について解説いたします。
SP-APIを利用するために下記6つのデータを取得します。

リフレッシュトークン
クライアントID
クライアント機密情報
シークレットアクセスキー
アクセスキーID
ロールのARN


 IAMユーザーの作成
IAMに遷移します。

ユーザー > ユーザーを追加をクリックします。

任意のユーザー名（添付画像ではAmazonSPAPIUser）を入力し、アクセスキー-プログラムによるア...]]></summary>
        <author>
            <name>エイト</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[cmdstanpy : 単回帰]]></title>
        <id>https://zenn.dev/yoshida0312/articles/34f3d93f860266</id>
        <link href="https://zenn.dev/yoshida0312/articles/34f3d93f860266"/>
        <updated>2022-10-23T13:44:14.000Z</updated>
        <summary type="html"><![CDATA[import os
import time

import pandas as pd
import matplotlib.pyplot as plt
from cmdstanpy import CmdStanModel

 データの読み込み
以下のデータを使用しています。
https://github.com/MatsuuraKentaro/RStanBook/blob/master/chap04/input/data-salary.txt
df = pd.read_csv("./data-salary.txt")
plt.scatter(df["X"], df["Y"])
plt.xl...]]></summary>
        <author>
            <name>よしだ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[python  tkinterとpyqtの比較]]></title>
        <id>https://zenn.dev/banananeko/articles/13cc3ce1c61d28</id>
        <link href="https://zenn.dev/banananeko/articles/13cc3ce1c61d28"/>
        <updated>2022-10-23T13:33:47.000Z</updated>
        <summary type="html"><![CDATA[tkinterとは
tkinterとは pythonの標準モジュールで
tcl/tkというプログラミング言語の　　
GUIツールのtkを pythonで使えるようにしたものです

 pyqtとは
pyqtとは　pipで追加できるモジュールで
qtというc++で使用されている GUI
ツールを pythonで使えるようにしたものです

 それぞれのメリット　デメリット

 tkinterのメリット

インストール不要
コードが短い
商用利用可


 tkinterのデメリット

デザインがダサい
機能が少ない


 pyqtのメリット

多機能
デザインがいい


 pyqtのデメリッ...]]></summary>
        <author>
            <name>banananeko</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[telnet 接続中のリターンコードにご注意]]></title>
        <id>https://zenn.dev/bugph0bia/articles/e53198bb384cb8</id>
        <link href="https://zenn.dev/bugph0bia/articles/e53198bb384cb8"/>
        <updated>2022-10-23T13:32:45.000Z</updated>
        <summary type="html"><![CDATA[はじめに
telnet を利用してコマンドを送信する場合、使用すべきリターンコードは <CR><LF> か <CR><NUL> のどちらかのようです。安直に <LF> 単独で送ってもうまくいきません。
このことは、telnet コマンドのマニュアル にも説明されています（toggle crlf の説明部分）。
通常、何らかの telnet クライアントを使用して接続している場合、普通に Enter キーを押せば現在のモードに従って適切なリターンコードが送られるので、この点を意識する必要は特に無いのだと思いますが、自作のスクリ...]]></summary>
        <author>
            <name>bugph0bia</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[UbuntuでPython・Pygameを使って音が出せない]]></title>
        <id>https://zenn.dev/turtleeen/articles/3ecc77780f5bfb</id>
        <link href="https://zenn.dev/turtleeen/articles/3ecc77780f5bfb"/>
        <updated>2022-10-23T13:31:10.000Z</updated>
        <summary type="html"><![CDATA[症状
UbuntuでPython3, Pygameを使って音が出なかった
以下のようなエラーが出ていた
XDG_RUNTIME_DIR (/usr/lib/) is not owned by us (uid 1000), but by uid 0! (This could e.g. happen if you try to connect to a non-root PulseAudio as a root user, over the native protocol. Don't do that.)


 解決法
https://stackoverflow.com/question...]]></summary>
        <author>
            <name>turtleeen</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[tkinterのbuttonを使う]]></title>
        <id>https://zenn.dev/banananeko/articles/9fc582e1ee7c8d</id>
        <link href="https://zenn.dev/banananeko/articles/9fc582e1ee7c8d"/>
        <updated>2022-10-23T11:41:58.000Z</updated>
        <summary type="html"><![CDATA[準備
まず初めにtkinter
をimportします
 import tkinter as tk
次にbuttonを表示するためのWindowを作成します
 import tkinter as tk
 root = tk.Tk()
これで準備は終了です

 コードを書こう！
ではコードを書いていこうと思います
ボタンを作るには
ボタン名　= tk.Button(表示数Window名, text="表示するテキスト, command = ボタンが押されたとき実行する関数名).pack
とすればボタンを作成することができます

 例
 import tkinter as tk
 
 de...]]></summary>
        <author>
            <name>banananeko</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【初心者向け】BERTのtokenizerについて理解する]]></title>
        <id>https://zenn.dev/robes/articles/b6708032855a9c</id>
        <link href="https://zenn.dev/robes/articles/b6708032855a9c"/>
        <updated>2022-10-23T08:58:05.000Z</updated>
        <summary type="html"><![CDATA[BERTすごいですね。
 
BERTモデルは、2018年にGoogle社が開発し、自然言語処理の世界でブレークスルーをつくったと言われています。
BERTはGLUEという英語の言語理解を評価するタスクにおいて、当時の記録を一気に塗り替えました。また、Google検索においてもBERTを導入したことにより、飛躍的に精度が上がりました。
 
こんな素晴らしいBERTですが、初心者が一発で理解するのは少し大変な印象をもっています。
そこで、BERTを初めて扱う方に向けて、以下の書籍を参考にしながら、基本的なコードの書き方と、それぞれのコードが具体的にどのような処理を行っているのかを丁寧に解説し...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【MAYA】複数のmb・FBXデータに対し特定の処理を行うツール]]></title>
        <id>https://zenn.dev/kuru_teo/articles/507eeab4cf9080</id>
        <link href="https://zenn.dev/kuru_teo/articles/507eeab4cf9080"/>
        <updated>2022-10-23T07:17:16.000Z</updated>
        <summary type="html"><![CDATA[mayaで複数シーンに対し一括で処理したい...。自分の作成したツールを色んなデータでテストしたい...ってとき一度はあるかと思います。
今回は複数のmaya・FBXデータに対し特定の処理を行うツールを作ってみました。
https://github.com/Kuru-teo/PythonCollection/tree/master/ScriptLoopCheck

 【できること】
複数のMayaBinaryもしくはFBXデータを一括で読み込み、特定の処理を行います。処理したデータとログファイルが保存されます。元データの別名保存です。

 【事前準備】

mm_script_loopCh...]]></summary>
        <author>
            <name>kuruteo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[cmdstanpy : インストール]]></title>
        <id>https://zenn.dev/yoshida0312/articles/3582deda168f90</id>
        <link href="https://zenn.dev/yoshida0312/articles/3582deda168f90"/>
        <updated>2022-10-23T07:15:19.000Z</updated>
        <summary type="html"><![CDATA[https://mc-stan.org/cmdstanpy/installation.html

 CmdStanPy
pythonでStanを行う際はpystanなどがありますが、最近は速度の面からCmdStanPyが注目されつつあるため、CmdStanPyを使用して解析を行いたいと思います。

 インストール

 CmdStanPyのインストール
今回はPoetryでインストールしました。

pyproject.toml
[tool.poetry]
name = "bayesianstatistics"
version = "0.1.0"
description = ""
autho...]]></summary>
        <author>
            <name>よしだ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[whisperを利用して音声データから音声抽出翻訳する方法]]></title>
        <id>https://zenn.dev/momiji777/articles/2cc0a368317c2f</id>
        <link href="https://zenn.dev/momiji777/articles/2cc0a368317c2f"/>
        <updated>2022-10-23T04:46:08.000Z</updated>
        <summary type="html"><![CDATA[はじめに
先日OpenAIから公開された多言語音声認識を行うことができるマルチタスクモデルであるWhisperを利用して音声データから音声認識、言語識別、翻訳を検証してみました。

 whispaerのインストール
pip install git+https://github.com/openai/whisper.git

 whisperを読み込みモデルをダウンロード
import whisper
model = whisper.load_model("large")
動画内では、「large」モデルを利用しましたが、様々なモデルが存在します。


 音声認識
result = m...]]></summary>
        <author>
            <name>momiji777</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GoogleColaboratoryでseleniumを使ってスクレイピングする]]></title>
        <id>https://zenn.dev/robes/articles/b0542824ec61a6</id>
        <link href="https://zenn.dev/robes/articles/b0542824ec61a6"/>
        <updated>2022-10-23T04:45:56.000Z</updated>
        <summary type="html"><![CDATA[はじめに
GoogleColaboratory（Googleコラボ）使ってますか。
Googleコラボは、Googleアカウントさえあれば、簡単にPythonの実行環境を構築できるうえに、GPUも無料で使えて、最強のサービスだと思います。
私自身、Pythonは、Googleコラボで実行していますが、これまで、ブラウザを操作するSelenium　はGoogleコラボでは「できない」と思い込んでいました。
今回、GoogleコラボでもSeleniumが扱えることを知ったので、その方法について、ご紹介したいと思います。
AnacondaやVS-codeよりずっと簡単にSeleniumを扱...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python 設定ファイルを用いて処理を呼び出す方法]]></title>
        <id>https://zenn.dev/kwashizzz/articles/python-class-load-from-setting</id>
        <link href="https://zenn.dev/kwashizzz/articles/python-class-load-from-setting"/>
        <updated>2022-10-23T04:03:02.000Z</updated>
        <summary type="html"><![CDATA[MMDetectionやEasyCVでは、データ処理のパイプラインを設定ファイルに書くことで、処理の内容、順序を定義することができます。
例えば、データ読み込み後の処理パイプラインは、以下のように書かれています。

 EasyCV/blob/master/configs/detection/common/dataset/autoaug_coco_detection.py
train_pipeline = [
    dict(type='MMRandomFlip', flip_ratio=0.5),
    dict(type='MMNormalize', **img_norm_cfg)...]]></summary>
        <author>
            <name>わっしー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WT901BLECLにBLE接続して設定をいじる]]></title>
        <id>https://zenn.dev/fastriver/articles/wt901blecl_change_settings</id>
        <link href="https://zenn.dev/fastriver/articles/wt901blecl_change_settings"/>
        <updated>2022-10-23T02:40:21.000Z</updated>
        <summary type="html"><![CDATA[WitMotionのWT901BLECLをBLEで接続したときに、設定をいじったり他のデータを取る方法を考えます。
BLE接続をする方法はこちら:
https://zenn.dev/fastriver/articles/wt901blecl_read_data

 設定を送信する場所
設定の変更や指示などは、あるCharacteristicにデータを書き込むことで実現できます。
WT901BLECLの持つCharacteristic一覧はこちらから入手できることがわかっています。
その中でnotifyと同じServiceに含まれwriteコマンドを持つもの、つまり0000ffe9で始まる...]]></summary>
        <author>
            <name>fastriver</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】【Linux】複数のzipファイルを解凍する方法]]></title>
        <id>https://zenn.dev/robes/articles/ce29b02ac40226</id>
        <link href="https://zenn.dev/robes/articles/ce29b02ac40226"/>
        <updated>2022-10-23T01:29:58.000Z</updated>
        <summary type="html"><![CDATA[PythonもしくはLinuxで、複数zipファイルを解凍する方法のご紹介です。
contentディレクトリ配下に複数zipファイルがあるとします。
解凍後にzipファイルを格納する各ディレクトリの名称は、解凍前のzipファイルの名称と同じにします。

 解凍前
<content>
   ├── S100OCJ8.zip 
   ├── S100OBWX.zip
   ├── S100O98X.zip
   ├── S100OLCJ.zip

 解凍後
<content>
   ├── S100OCJ8
   ├── S100OBWX
   ├── S100O98...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[EC2(Windows)のサービスをCloudWatchで監視したい]]></title>
        <id>https://zenn.dev/zgw426/articles/baabeec88900b1</id>
        <link href="https://zenn.dev/zgw426/articles/baabeec88900b1"/>
        <updated>2022-10-23T00:43:20.000Z</updated>
        <summary type="html"><![CDATA[Windowsサービスを監視したい
EC2(Windows)のWindowsサービスをCloudWatchで監視する仕組みを作りました。
現在のCloudWatch Agentはプロセス監視はできますが、サービス監視はできないようです。
サービスに紐づくプロセスを監視する方法もありますが、プロセスの起動数などの仕様がわからないと適切な監視設定ができません。
そこで、サービスの状態はPowerShellコマンドで取得し、その結果をもとにCloudWatchのカスタムメトリクスとしてCloudWatchに出力することにしました。

 構成
構成はこのようになります。

Windows S...]]></summary>
        <author>
            <name>suo-takefumi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ビットコインの曜日効果を調べるプログラム]]></title>
        <id>https://zenn.dev/harukaze/articles/946e434f9c4c8e</id>
        <link href="https://zenn.dev/harukaze/articles/946e434f9c4c8e"/>
        <updated>2022-10-22T13:58:57.000Z</updated>
        <summary type="html"><![CDATA[皆様は曜日効果についてご存知でしょうか？
曜日効果とは、"特定の曜日の収益率が他の曜日よりも低く、または高くなりやすい現象のこと。"とありますが、本当に存在するのでしょうか？
今現在も存在しているかもしれませんし、していないかもしれません。
していなくても、これから曜日効果が発生する可能性もあります。
そこで、この記事ではビットコインには曜日効果が存在しているか？を調査するためのプログラム（Python3）を提供します。
実際にこちらを参考に行った取引および記事のプログラムを利用したことによるいかなる損害も作者は一切の責任を負いません。自己の責任の上で使用してください。
プログラムの実行...]]></summary>
        <author>
            <name>haru01</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google Colaboratoryのファイル入出力方法]]></title>
        <id>https://zenn.dev/harukaze/articles/c10101b39bd3e0</id>
        <link href="https://zenn.dev/harukaze/articles/c10101b39bd3e0"/>
        <updated>2022-10-22T08:50:50.000Z</updated>
        <summary type="html"><![CDATA[よくちょっとしたファイルをColaboratoryで集計してドライブに入出力したいときがあるのでメモ。Pythonを使用。

 ドライブのマウント
実行後、ドライブにアクセス許可をもとめるダイアログがでるので許可する。
from google.colab import drive
drive.mount('/content/drive')

 CSVファイルの読み込み
あらかじめドライブにおいておいたCSVファイルをpandasで読み込む。
パス、ファイル名は適宜変更する。
import pandas as pd

base_path = r"/content/drive/test_fo...]]></summary>
        <author>
            <name>haru01</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[python tkinterのWindow表示]]></title>
        <id>https://zenn.dev/banananeko/articles/b5e099fb923262</id>
        <link href="https://zenn.dev/banananeko/articles/b5e099fb923262"/>
        <updated>2022-10-22T08:30:11.000Z</updated>
        <summary type="html"><![CDATA[tkinterのimport
 import tkinter as tk
!
as tk とは　tkinterを略してtkと呼ぶ　　
ということを定義するものです。



 Window表示
Windowの名前　= tk.Tk()
とすることでWindowを作れます。
例
 import tkinter as tk
 root = tk.Tk()


 Windowにタイトルを設定
Window名.title(タイトル名)
のようにするとWindowのタイトルを設定できます。。
例
 import tkinter as tk
 root = tk.Tk()
 root.title("...]]></summary>
        <author>
            <name>banananeko</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonでおみくじを作る]]></title>
        <id>https://zenn.dev/banananeko/articles/573cc42382a1ea</id>
        <link href="https://zenn.dev/banananeko/articles/573cc42382a1ea"/>
        <updated>2022-10-22T06:03:57.000Z</updated>
        <summary type="html"><![CDATA[プログラムの流れ

おみくじ　と出力する
3秒待つ
ランダムな数を指定する
if分岐でランダムな数に対するものを当てはめる


 コードを書く
from time import sleep
from random import randint
print("おみくじ")
print("けっかは...", end=" ")
sleep(3)
a = randint(1, 10)
if a == 10:
    print("大吉")
if a < 10 and a > 7:
    print("中吉")
if a < 7 and a > 1:
    prin...]]></summary>
        <author>
            <name>banananeko</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[NN+MILP] ランダム多層パーセプトロンを用いた検証]]></title>
        <id>https://zenn.dev/mory22k/articles/c9b1c14c3616a3</id>
        <link href="https://zenn.dev/mory22k/articles/c9b1c14c3616a3"/>
        <updated>2022-10-21T10:31:56.000Z</updated>
        <summary type="html"><![CDATA[ニューラルネットワークと混合整数線形計画法を用いたブラックボックス最適化 (NN+MILP) が 完全に馬鹿なアルゴリズムではないこと を確認します。

 元論文
Papalexopoulos, Theodore P., Christian Tjandraatmadja, Ross Anderson, Juan Pablo Vielma, and David Belanger. “Constrained Discrete Black-Box Optimization Using Mixed-Integer Programming.” In Proceedings of the 39th ...]]></summary>
        <author>
            <name>mory22k</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A/Bテスト前に行うオフラインテストは、doubly robust よりシンプルな手法で十分なのではという提案]]></title>
        <id>https://zenn.dev/yuya_sato/articles/cf32c1248db9ef</id>
        <link href="https://zenn.dev/yuya_sato/articles/cf32c1248db9ef"/>
        <updated>2022-10-21T10:16:26.000Z</updated>
        <summary type="html"><![CDATA[A/Bテスト投入前にはオフラインテストをする
Netflixなどの企業では、レコメンドエンジンなどのA/Bテスト前にオフラインテストにより実際に顧客に試す前にコンバージョンレートなどの点で効果がある施作なのかどうかを判断するということが行われている。

 現状のオフラインテストの手法
大きく分けて２つの手法がある。
一つは古典的な offline replay という手法で、ランダムな要素をユーザーに提示して、そこで実際に発生した遷移を正解データとして用いる手法である。Netflix などが採用しているようだ。
https://arxiv.org/abs/1003.5956
この手法...]]></summary>
        <author>
            <name>Yuya Sato / 佐藤優矢</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonでMS Outlookのmsgファイルを読む（msg_parser）]]></title>
        <id>https://zenn.dev/kumasun/articles/5fa34c7029d1da</id>
        <link href="https://zenn.dev/kumasun/articles/5fa34c7029d1da"/>
        <updated>2022-10-21T00:19:10.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Outlookで受信したメールのうち、特定のメーリングリスト宛に誰からどのくらいの頻度でメールが来ているか調べて欲しいと言われた。
調査用データとして、過去数年分のメールデータ（Outlook .msg形式）数千件が提供された。
Outlookに取り込んでルールで振り分けを試みたが、メーリングリストに投稿したユーザーで振り分けることができないことが分かった。
（やり方が悪いのかもしれないが…）
msgファイルを1通ごと開いて調べるのは非現実的なので、Pythonの力を借りて自動化した。

 コード

 実証実験コード
「.msg」形式を読むためのパッケージは複数存在するが、...]]></summary>
        <author>
            <name>Kumasun Morino</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python + IntellijのSDK seems invalidエラー]]></title>
        <id>https://zenn.dev/libertym/articles/84b41b0229041e</id>
        <link href="https://zenn.dev/libertym/articles/84b41b0229041e"/>
        <updated>2022-10-20T12:04:55.000Z</updated>
        <summary type="html"><![CDATA[記事について
一部単語の意味や表現が正確でない可能性がありますがご了承ください。
基本的に自分の環境の言語は英語です。
WindowsとIntellij ideaでPythonの環境構築がうまくできない人をターゲットにしています。

 SDKが設定できない問題が発生
Windows上でIntellij ideaからpoetryで新規プロジェクトを作成しようとするとSDKが無効(SDK seems invalid)というエラーが発生して正常に設定できませんでした。(VScodeなら問題なし？)

 原因調査
Intellij idea上部の「help > show log in...]]></summary>
        <author>
            <name>Libertym</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[poetryとVSCodeで仮想環境の構築（Windows10）]]></title>
        <id>https://zenn.dev/kanaotto/articles/a0d6e4a661fb56</id>
        <link href="https://zenn.dev/kanaotto/articles/a0d6e4a661fb56"/>
        <updated>2022-10-20T11:07:53.000Z</updated>
        <summary type="html"><![CDATA[poetryとVSCodeで仮想環境の構築（Windows10）

 1. poetryとは
PoetryはPythonのパッケージマネージャの一つです。
次のようなことができます。

パッケージ管理ファイルの生成・変更
インストールされているパッケージのアップデート
プロジェクトごとの仮想環境のセットアップ

などなど...

 2. インストール

 基本

 - Python のセットアップ
PoetryのインストールにPythonが必要なので既に入っている前提ですが、一応。
Python JapanのサイトからWindows版Pythonをインストール


https://w...]]></summary>
        <author>
            <name>かなおっと</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pytestでテストをグループ化する]]></title>
        <id>https://zenn.dev/ymiz/articles/c25dcddfedd7c3</id>
        <link href="https://zenn.dev/ymiz/articles/c25dcddfedd7c3"/>
        <updated>2022-10-20T11:02:03.000Z</updated>
        <summary type="html"><![CDATA[問題

pytestを使ってテストしている
ある条件の場合のテストスイートをまとめたい

jestでいうところの describe のようなことをしたい

https://jestjs.io/ja/docs/api#describename-fn






 対応
classでグループ化する。
ドキュメントは https://docs.pytest.org/en/7.1.x/getting-started.html#group-multiple-tests-in-a-class
class Test_指標が閾値Aを超えた場合:
    def test_在庫を追加する(self):...]]></summary>
        <author>
            <name>ymiz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google Cloud FunctionsでFizzBuzzを作成する]]></title>
        <id>https://zenn.dev/penguincabinet/articles/d765da03bf66f5</id>
        <link href="https://zenn.dev/penguincabinet/articles/d765da03bf66f5"/>
        <updated>2022-10-20T05:12:52.000Z</updated>
        <summary type="html"><![CDATA[はじめに
近年FaaSが流行しています。
僕も試してみたいと考えていたため、今回FizzBuzz判定APIを作ってみようと思います。

 完成品
https://github.com/PenguinCabinet/FizzBuzz_Google_Cloud_Functions

 環境構築
gcloud CLIを使用していますので、インストールしてください。
https://cloud.google.com/sdk/docs/install?hl=ja
念のため、その他のバージョン環境。
OS:Windows 11
言語処理系:Python 3.10.5

Google Cloud ...]]></summary>
        <author>
            <name>PenguinCabinet</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[UE5] Control Rig をPythonから使う]]></title>
        <id>https://zenn.dev/h_kishimoto/articles/5f0a6639c0fd8d</id>
        <link href="https://zenn.dev/h_kishimoto/articles/5f0a6639c0fd8d"/>
        <updated>2022-10-19T17:36:15.000Z</updated>
        <summary type="html"><![CDATA[Pythonでコントロールリグを云々する時のメモです。


 アセットの取得
プロジェクト内のアセットを取得するとき
unreal.EditorAssetLibrary.load_asset( asset_path )
asset_path にはいろいろな書き方があてはめられます。
asset_path = "/Script/ControlRigDeveloper.ControlRigBlueprint'/Game/Characters/Mannequins/Rigs/CR_Mannequin_Body.CR_Mannequin_Body'"
asset_path = "/Game/Ch...]]></summary>
        <author>
            <name>h_kishimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ROS2: 別のpythonファイルからインポートしてノードをつくる手順]]></title>
        <id>https://zenn.dev/tasada038/articles/5d8ba66aa34b85</id>
        <link href="https://zenn.dev/tasada038/articles/5d8ba66aa34b85"/>
        <updated>2022-10-19T16:28:31.000Z</updated>
        <summary type="html"><![CDATA[海洋ロボコンをやっている人です。
今回は、pythonでROS2ノードをつくるときに、別のPythonファイルからクラスや関数をインポートするときの記述方法について知見をまとめておきます。
経緯としては、pythonで書かれたROS2プログラムに、別のpythonファイルの関数を読み込む方法が記事にまとまっておらず、わからないという意見を頂いたためです。
なお、本記事はROS2でpythonを使ったプログラムを書く必要性がある方を対象としており、C++でのプログラムで良い場合は依存関係の観点からも、C++での記述が良いと思います。
この記事が皆様のお力添えになれば幸いです。

 別のpy...]]></summary>
        <author>
            <name>Takumi Asada</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonとSeleniumでAmazon自動購入botを作る]]></title>
        <id>https://zenn.dev/almon/articles/2ba0aed751002b</id>
        <link href="https://zenn.dev/almon/articles/2ba0aed751002b"/>
        <updated>2022-10-19T14:20:27.000Z</updated>
        <summary type="html"><![CDATA[!
この記事はPythonとSeleniumの使い方、及び学習用に作成したものであり、自動購入や転売活動を推奨しているわけではありません。また、本プログラムの利用でどのようなトラブル(アカウントのBANや意図しない購入など)が発生したとしても筆者は一切責任を負いません。


 はじめに
プロコンが品薄で全く買えません…😭
こちらの入荷速報アプリによると、特にAmazonではほぼ毎日入荷されているようなのですが、通知直後であってもカートに入れることすらままならない状況が続いています。
そこで、PythonとSleniumを使い簡単な自動購入プログラムを作ってみたいと思います。
なお、自分は...]]></summary>
        <author>
            <name>アルモン</name>
        </author>
    </entry>
</feed>