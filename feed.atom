<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://s-i27.github.io/Rssfeed/index.html</id>
    <title>osmos::feed</title>
    <updated>2022-10-13T02:35:15.210Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="https://s-i27.github.io/Rssfeed/index.html"/>
    <link rel="self" href="https://s-i27.github.io/Rssfeed/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[【Python】VSCodeが型推論結果を自動で表示してくれるようになった【TypeHinting】]]></title>
        <id>https://zenn.dev/yosemat/articles/36638f17e9ded8</id>
        <link href="https://zenn.dev/yosemat/articles/36638f17e9ded8"/>
        <updated>2022-10-12T14:57:09.000Z</updated>
        <summary type="html"><![CDATA[VSCodeの型推論結果がリアルタイムに表示されるようになりました！
まずsettings.jsonを開き、次の記述を加えます。
{
    "python.analysis.inlayHints.functionReturnTypes": true,
    "python.analysis.inlayHints.variableTypes": true,
}
コードを書きます。
def double(x: int):
    return x * 2


def double_float(x: int):
    y = float(x)
    return y * 2


x...]]></summary>
        <author>
            <name>Yosemat</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pyゆき「なんだろう、独自ルールでコーディングするのやめてもらっていいですか」]]></title>
        <id>https://zenn.dev/web_tips/articles/b4f24f4c9abf0d</id>
        <link href="https://zenn.dev/web_tips/articles/b4f24f4c9abf0d"/>
        <updated>2022-10-12T13:46:00.000Z</updated>
        <summary type="html"><![CDATA[「なんだろう、独自ルールでコーディングするのやめてもらっていいですか」
本記事ではPythonでのコーディング規約(PEP8)についてまとめていきます。
プログラミングはコードの効率性ももちろん大事ですが、改修などを考えていくと可読性もとても重要なものとなっていきます。コードを書いた日は当然のように覚えていますが、1ヶ月後、半年後、1年後はなかなか覚えていないものです。
またそのときにクソコードやなぁと思うのも少なくないかと思います。
そういうのをできるだけ減らすためにプログラミング言語にはコードのスタイルを一貫させるためにコーディング規約が設けられています。
ただし、以下のような場...]]></summary>
        <author>
            <name>Tomoki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[chromedriver のバージョンを Chrome に同期させる]]></title>
        <id>https://zenn.dev/bugph0bia/articles/cb1cc704808ccf</id>
        <link href="https://zenn.dev/bugph0bia/articles/cb1cc704808ccf"/>
        <updated>2022-10-12T13:40:57.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Selenium で GoogleChrome を操作する際、その橋渡しの役割となる chromedriver をインストールしておく必要がありますが、このとき問題になるのが、chromedriver のバージョンを操作対象の GoogleChrome のバージョンに合わせる必要があるということです（経験上、メジャーバージョンが合っていれば良いようですが）。
通常 GoogleChrome は自動的にバージョンアップが行われますので、昨日まで動いていた Selenium が今日は動かないという事態が発生し、よく困っていました。

 先に結論
これを解決するために、chrom...]]></summary>
        <author>
            <name>bugph0bia</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PDFKITがwkhtmltopdfを見つけられないことがある]]></title>
        <id>https://zenn.dev/takamichie/articles/ab18a826affbf9</id>
        <link href="https://zenn.dev/takamichie/articles/ab18a826affbf9"/>
        <updated>2022-10-12T08:23:29.000Z</updated>
        <summary type="html"><![CDATA[ここからの移植です。

PDFKITがwkhtmltopdfを見つけられないことがある - Qiita

Pythonのライブラリ、pdfkitを使っていると、wkhtmltopdfがインストール済みの環境にもかかわらず、「No wkhtmltopdf executable found」というエラーでPDF作成に失敗することがあります。
答えはPDFKITの構成ファイルにあります。

pdfkit\configuration.py
        if not self.wkhtmltopdf:
            if sys.platform == 'win32':
      ...]]></summary>
        <author>
            <name>高見知英</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python 画像から文字認識(Tesseract)]]></title>
        <id>https://zenn.dev/watakarinto/articles/c491d92da70219</id>
        <link href="https://zenn.dev/watakarinto/articles/c491d92da70219"/>
        <updated>2022-10-12T03:33:31.000Z</updated>
        <summary type="html"><![CDATA[インストール
今回は、Tesseractを使って文字認識行います。
brewを使ってインストールするので、事前に入れておいてください。
関連：M2 MacにHomebrewをインストール
Tesseractを使うにあたって、ラッパー(pytesseract)を使いたいと思います。
下記のコマンドでそれぞれインストールします。
brew install tesseract
pip3 install pytesseract

 日本語対応
標準では日本語に対応していないため、必要なファイルをダウンロードします。ファイルは「jpn.traineddata」と「jpn_vert.traine...]]></summary>
        <author>
            <name>wataree</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【徹底解説】『良いコード/悪いコードで学ぶ設計入門』の要約と活用方法]]></title>
        <id>https://zenn.dev/nameless_sn/articles/point_mino_techbook</id>
        <link href="https://zenn.dev/nameless_sn/articles/point_mino_techbook"/>
        <updated>2022-10-12T01:28:43.000Z</updated>
        <summary type="html"><![CDATA[はじめに

© 技術評論社
今回の記事では、Twitterで話題になった『良いコード/悪いコードで学ぶ設計入門』(通称：ミノ駆動本)の要約と実務での活用方法を簡潔に解説する。
https://twitter.com/MinoDriven/status/1502487395890999298
本書を読んでいく中で簡潔に要点を整理し、実務の現場でプログラムを書いたりコードをレビューしたりする際にどのようにして活用するべきかを自分なりにまとめた。本記事を通して、『良いコード/悪いコードで学ぶ設計入門』の要点と初級者から中級者目線で実務における活用方法を学べる。本記事の読者の対象は主に以下の...]]></summary>
        <author>
            <name>Shota Nukumizu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Colabで動く】Detectron2のFaster R-CNNで自作データセットの物体検出]]></title>
        <id>https://zenn.dev/chickenta2ta/articles/e4a934ead40e67</id>
        <link href="https://zenn.dev/chickenta2ta/articles/e4a934ead40e67"/>
        <updated>2022-10-12T00:48:54.000Z</updated>
        <summary type="html"><![CDATA[この記事は何か
Detectron2（Facebook AI Researchが開発したPyTorchベースの物体検出ライブラリ）でFaster R-CNNのPre-Trainedモデルを使って自作データセットの物体検出をしてみます。実行環境はGoogle Colaboratoryを利用します。Colab + Detectron2 + Faster R-CNN + 自作データセットの組み合わせの記事はほとんど見受けられなかったので、備忘録がてらこの記事を書いています。

 Detectron2のインストール
Detectron2の前提となるライブラリを入れていきます。Colabが使っ...]]></summary>
        <author>
            <name>chickenta2ta</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[mongoengineでmongodbにデータを作成する]]></title>
        <id>https://zenn.dev/nkoguchi_dev/articles/0ff923dca8ad2b</id>
        <link href="https://zenn.dev/nkoguchi_dev/articles/0ff923dca8ad2b"/>
        <updated>2022-10-11T16:00:08.000Z</updated>
        <summary type="html"><![CDATA[初めに
概要
この記事のゴール
使用するツール
実行環境
ディレクトリ構成
テストの作成
mongoDBのドキュメントモデルを作成する
ユーザー作成時の入力値の型を設定する
ユーザー情報をDBに作成する機能を実装する
DBに接続する際に必要な値を設定ファイルに記載する
テストに必要な処理を作成する
動作確認用のコンテナを作成する
テストの実行
パスワードのハッシュ化
備考


 初めに
普段APIの開発や運用をしていますが、APIがWebアプリでどのように利用されているかを全くイメージできませんでした。
そのため、APIをいくつか作成し、簡単なWebページをhtmlで実装して連携させて...]]></summary>
        <author>
            <name>nkoguchi-dev</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[LiDARデータによる物体検出を試してみた-要約]]></title>
        <id>https://zenn.dev/gyabi/articles/df15f5e4a3f1fb</id>
        <link href="https://zenn.dev/gyabi/articles/df15f5e4a3f1fb"/>
        <updated>2022-10-11T14:52:16.000Z</updated>
        <summary type="html"><![CDATA[はじめに
以下3つの記事の要約を示す。
https://zenn.dev/gyabi/articles/739131bae9a57e
https://zenn.dev/gyabi/articles/7de3142bbece8a
https://zenn.dev/gyabi/articles/458169e4ae01cb

 Why
最近Unityをメインで使っていて、ROSに興味が出てきたので調べているとAutowareに行き着いた。
Autowareで実装されている点群からの3D物体認識が面白そうだったのでどのような技術があるのか調べて自分で動かしてみた。

 そもそも点群データっ...]]></summary>
        <author>
            <name>Kano</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonで機械学習する際のloggingについてのまとめ]]></title>
        <id>https://zenn.dev/roju/articles/bd2552eeeeb3c6</id>
        <link href="https://zenn.dev/roju/articles/bd2552eeeeb3c6"/>
        <updated>2022-10-11T03:26:49.000Z</updated>
        <summary type="html"><![CDATA[素敵なまとめ記事は多いものの, 学生さんらが学ぶのに苦労しているようだったのでまとめ記事をまとめておく.
おそらく柔軟なためにわかりやすいベストプラクティスが定まっていなそうなのと, 用途の違いで書き方が異なるため一見すると共通項を学習しづらいことにあるのではと.

 所感

用途 (だいたい 解析の記録 か エラーの記録 )を意識する
インスタンス化して使うことを心がける (絶対ではないが意識としては)
loggerインスタンスの初期化・作成はutils.pyなどにまとめてインスタンスを返させるとすっきりする


 1. loggingの用途
loggingの用途として大きく解析情報の...]]></summary>
        <author>
            <name>roju</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【徹底解説】FastAPIの特徴と課題点]]></title>
        <id>https://zenn.dev/nameless_sn/articles/why_fastapi_development</id>
        <link href="https://zenn.dev/nameless_sn/articles/why_fastapi_development"/>
        <updated>2022-10-11T02:09:28.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回の記事では、PythonのWebフレームワーク「FastAPI」の特徴・課題点を簡潔に解説する。本記事の読者は主に以下のようなものを対象とする。

FastAPIを知らない人
FastAPIを実務で活用したい人
技術選定でFastAPIを選ぶ理由を検討している人
PythonでWebアプリケーションを開発したい人
すでにDjangoやLaravelなどの他のフレームワークに着手していて、別のフレームワークに関する情報を収集している人


 FastAPIとは
FastAPIとは、Djangoと同様にPythonのWebフレームワークである。主にWeb APIを開発するた...]]></summary>
        <author>
            <name>Shota Nukumizu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Lambdaがタイムアウトしたときの例外処理をCW logsにトリガーさせる]]></title>
        <id>https://zenn.dev/shimo_s3/articles/dfb516f25785a2</id>
        <link href="https://zenn.dev/shimo_s3/articles/dfb516f25785a2"/>
        <updated>2022-10-10T22:56:09.000Z</updated>
        <summary type="html"><![CDATA[やりたいこと
プログラムにエラーが出たとき、例外処理をしてから終了させたいときがあります。一方で、Lambdaがタイムアウトで終了する場合は、例外処理をすることなく終わってしまいます。これをどうにかしたいと思い、やってみました。

 やったこと
CloudWatch Logsのサブスクリプションフィルターで別のLambdaを呼んで例外処理をさせればよさそうです。下の絵のように、Lambda1がタイムアウトしたときのログを見つけたら、Lambda2をコールします。


 やりかた
サブスクリプションフィルターについてはこのAWSブログが丁寧なので、ほとんどこれを使いました。
https...]]></summary>
        <author>
            <name>shimo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのunittestでmockを使用する]]></title>
        <id>https://zenn.dev/horitaka/articles/95066e831832fe</id>
        <link href="https://zenn.dev/horitaka/articles/95066e831832fe"/>
        <updated>2022-10-10T13:27:38.000Z</updated>
        <summary type="html"><![CDATA[概要

Pythonのunittestで関数をモック化する方法です
モック化するにはunittest.mockのMagicMockもしくはpatchを使用します
APIの呼び出しなどでrequestsを使用しており、requestsをモックにする場合はrequests-mockというライブラリを使用できます

バージョン情報

Python: 3.10.7
requests-mock: 1.10.0

各ライブラリの公式サイト

unittest.mock
requests-mock

サンプルコード
サンプルコードはこちらです。

 対象のコード
今回の記事では外部APIの呼び出し...]]></summary>
        <author>
            <name>horitaka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python thread.Condition のマニュアル解説]]></title>
        <id>https://zenn.dev/hissorimemo/articles/c8a2fff210418e</id>
        <link href="https://zenn.dev/hissorimemo/articles/c8a2fff210418e"/>
        <updated>2022-10-10T11:30:14.000Z</updated>
        <summary type="html"><![CDATA[「わからないことがあればマニュアルを読めばいい」と先輩に言われたが、そもそもマニュアルに書いてある意味がわからない、、、なんて経験ないでしょうか。先輩にありがたい教えを頂いたにも関わらず、何年経っても成長しないのか、私はいまだにマニュアルを読むのに苦労しています。自分の理解も含めて解説文を書いてみることにしました。
なお、作者や和訳されてる方に説明が足りないというようなことを言うつもりはなく、いわゆるマニュアル的な説明を補うことが目的であり、作者様および訳者様には大変感謝しております。間違い等ありましたら遠慮なくコメントお願いします。
なお、このマニュアルを読むには、マルチスレッドについ...]]></summary>
        <author>
            <name>kanade</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CloudFunctionで時間のかかる処理を作るノウハウ]]></title>
        <id>https://zenn.dev/miyaji26/books/2c2d28781d44e6</id>
        <link href="https://zenn.dev/miyaji26/books/2c2d28781d44e6"/>
        <updated>2022-10-10T11:18:21.000Z</updated>
        <summary type="html"><![CDATA[時間のかかる処理を CloudFunction と CloudPub/Sub を使った方法で解決するための構築方法を紹介します。

本の中で GCP 上の画面を利用した構築を行っていますが閲覧時期によってはレイアウト等が異なる可能性がありますので、ご注意ください。
また、一からの作成ではなく成果物ベースの構築方法のまとめとなっておりますので、認識のほどよろしくお願いします。]]></summary>
        <author>
            <name>miyaji_26</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[スプラのブキ紹介文を自動生成してみた(GPT)]]></title>
        <id>https://zenn.dev/thr3a/articles/eed434cb20339a</id>
        <link href="https://zenn.dev/thr3a/articles/eed434cb20339a"/>
        <updated>2022-10-10T10:23:42.000Z</updated>
        <summary type="html"><![CDATA[皆さんはスプラトゥーンやっていますでしょうか。
スプラ３では５０種類以上のブキがありますが、スプラ２をやってた自分としては亜種がまったくないのでちょっと物足りないです。
そこで考えました。 ブキチに新ブキを作らせよう、と。

 新ブキの作り方
スプラトゥーンでは、ブキを購入する前に必ずブキチのうんちく 紹介文を聞く必要があります。

今回はこのブキ紹介文をrinna社が無料で提供している日本語特化GPT2モデル rinna/japanese-gpt2-medium に食わせてファインチューニングしてみます。
結論から言うと、こんな感じで架空のブキ紹介文が無限に生成できます。

この武器は...]]></summary>
        <author>
            <name>thr3a</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Substance 3D Painter の Python API に少し手を入れる]]></title>
        <id>https://zenn.dev/sho7noka/articles/beb448e83383b1</id>
        <link href="https://zenn.dev/sho7noka/articles/beb448e83383b1"/>
        <updated>2022-10-10T09:50:35.000Z</updated>
        <summary type="html"><![CDATA[Python API の所感
Substance 3D Painter は 7.4.0 (Released November 24, 2021) から、QML+Javascript で開発していたスクリプトをPythonから呼び出すことが出来るようになりました。
https://substance3d.adobe.com/documentation/spdoc/version-7-4-223053247.html
最近のリリースにも定期的な更新が入っているものの、ベイクやシェーダなどのモジュールがバックポートされず、使うには難しい印象でした。

 js モジュールをラップ
そこでpy...]]></summary>
        <author>
            <name>sho7noka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[振幅エンコーディング（２）]]></title>
        <id>https://zenn.dev/converghub/articles/ce304bb5184741</id>
        <link href="https://zenn.dev/converghub/articles/ce304bb5184741"/>
        <updated>2022-10-10T09:19:42.000Z</updated>
        <summary type="html"><![CDATA[振幅エンコーディング

 データ木構造を用いた振幅エンコーディング
N次元ベクトル \bm{v'} の振幅エンコーディングを実装したい！
前回はQRAMをもちいて確率的にエンコードする方法をみました。
プログラム実装を考えるとユニタリ変換のみで構成されているほうが、なにかとやりやすいです。
Prakash氏によって提案されたデータ木構造を用いた振幅エンコーディングであれば実装できそうだったので、詳細を書き下していきます。


 2量子ビットの場合
ことはじめとして、2量子ビットで表現できる4次元ベクトルを考えます。
今回の最初のお題は以下のベクトル v。
なお、このベクトルは、あるデ...]]></summary>
        <author>
            <name>converghub</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mattermost 投稿数順に集計して通知]]></title>
        <id>https://zenn.dev/kiyasu7028/articles/83b38aff54f4b6</id>
        <link href="https://zenn.dev/kiyasu7028/articles/83b38aff54f4b6"/>
        <updated>2022-10-10T06:28:55.000Z</updated>
        <summary type="html"><![CDATA[やりたいこと
ノウハウチャンネルにたくさん投稿してくれる人を称えたい。
なので、投稿してくれた数を集計するスクリプトを作ろうと思いました。
こだわりたいポイント
・期間を指定したい(週刊MVP的な考え方)
・多い人が上にくるように、上位●人的な指定をしたい
本当はRe:dashとか使ってみたいけど導入するのはちょっとハードル高いな、、と思ったので地道に集計する方法をとっています。

 実行結果
こんな感じに表示されるようにしました。


 コード説明
とりあえず一気にコピペする用。細かい説明はここでは割愛しますが、環境依存パラメータ(HOSTNAME,PORT,PASSWORD等)が...]]></summary>
        <author>
            <name>きや</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python(とGo)で複数プロセスから一つのファイルにログを書き込んでいいのか？]]></title>
        <id>https://zenn.dev/ooyamatakehisa/articles/a354bbfe053191</id>
        <link href="https://zenn.dev/ooyamatakehisa/articles/a354bbfe053191"/>
        <updated>2022-10-10T06:08:22.000Z</updated>
        <summary type="html"><![CDATA[概要
マルチプロセスでレスポンスの処理を行う（1リクエストにつき1プロセスがレスポンスの処理を行う）PythonのWEBフレームワーク[1]でAPIサーバーを実装している際、各プロセスから一つのファイルにログを書き出しても、行が上書きされる・順番が前後するといった不整合がおきないのか、という疑問がわきました。（ファイルは各プロセスで独立にopenするものとします。）
Pythonのロギングに関する公式ドキュメントには、「複数プロセスから1ファイルへのロギングはサポートしていないから別の方法で工夫しろ」と書いてあるのですが、別の記事では「書き込むログの長さが短ければ不整合はおきない」と...]]></summary>
        <author>
            <name>Takehisa Oyama</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[私がDjangoでWeb開発を行う理由]]></title>
        <id>https://zenn.dev/nameless_sn/articles/why_django_development</id>
        <link href="https://zenn.dev/nameless_sn/articles/why_django_development"/>
        <updated>2022-10-10T04:06:24.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回の記事では、私がPythonのWebフレームワーク「Django」で開発を進める理由を独自の視点から徹底解説する。今回の記事の読者の対象は主に以下の通り。

個人開発でDjangoを使おうとしているプログラマー
Djangoについて深く理解したいプログラマー
Djangoを個人開発(Web開発)に採用するメリット・デメリットを把握したいプログラマー
すでにRailsやLaravelなど他のWebフレームワークを使った開発を経験しており、他のWebフレームワークの特徴を把握しておきたいプログラマー
Web開発の技術選定で困っているプログラマー


 Djangoとは
Dj...]]></summary>
        <author>
            <name>Shota Nukumizu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[App ServiceでgRPCサーバーを動かす際のまとめ]]></title>
        <id>https://zenn.dev/reifujimura/articles/grpc-on-appservice</id>
        <link href="https://zenn.dev/reifujimura/articles/grpc-on-appservice"/>
        <updated>2022-10-10T04:01:27.000Z</updated>
        <summary type="html"><![CDATA[背景
Azure のサンプルリポジトリに Python で実装した gRPC サーバーの App Service 用サンプルが公開されていたので App Service で gRPC を試してみた。
https://github.com/Azure/app-service-linux-docs/tree/master/HowTo/gRPC/Python/Flask

 サンプルコードの通りの実装でデプロイ
とりあえずサンプルコードのまま、サービスをデプロイし下記の設定を実施

 アプリケーション設定



変数
値




HTTP20_ONLY_PORT
8282(gRPC サーバ...]]></summary>
        <author>
            <name>Rei Fujimura</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[はじめてのセマンティックセグメンテーション(Semantic Segmentation)]]></title>
        <id>https://zenn.dev/na7na/articles/3e2ef5e0f1a9bd</id>
        <link href="https://zenn.dev/na7na/articles/3e2ef5e0f1a9bd"/>
        <updated>2022-10-09T17:14:06.000Z</updated>
        <summary type="html"><![CDATA[目的
DeepLearningの物体検知経験を積みたいと思ったので、SemanticSegmentationに取り組んでみた内容を残します。特に自身が不明だった「何を学習しているのか」「セマンティックセグメンテーションの評価指標とは」を中心に記載します。
本記事で述べていないデータ拡張等の関数は添付のjupyter notebookを参照ください。

 読者対象

pytorch初学者
物体検知初学者


 動作環境
GoogleColaboratory
GPU TeslaT4

 セグメンテーションタスクとは
バウンディングボックス(bbox)による物体検出では対象物体を矩形領域で...]]></summary>
        <author>
            <name>NA7NA</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[「パッと見で素数っぽい数」がどれぐらい素数として当たっているか調べてみた]]></title>
        <id>https://zenn.dev/harukaeru/articles/f037c4dd0d1c46</id>
        <link href="https://zenn.dev/harukaeru/articles/f037c4dd0d1c46"/>
        <updated>2022-10-09T14:08:51.000Z</updated>
        <summary type="html"><![CDATA[素数とかの前に。ヒューリスティックとは
ヒューリスティックは、発見的手法とも呼ばれ、「経験則や直感から近似解を得る」という、アルゴリズムに対比する概念です[1]。人間は、日常生活を比較的ラクに過ごすために、厳密解を頑張って求めようとするのではなく、近似解を求めてそれで暮らすことが多いと言われています（たぶん）。
たとえば、初めて来た百貨店でうんちが急にしたくなりトイレをなるべく短時間で探さなければならなくなったと仮定します。このとき、

まずはトイレのマークを探すために吊り下げ式表示版がないか見上げる
とりあえず全体を見通すためにそのフロアの大きなコンコースに出てみる
化粧品売り場や...]]></summary>
        <author>
            <name>かえる</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[はじめての機械学習(自分でデータセットを作る編)]]></title>
        <id>https://zenn.dev/kaityo256/articles/my_first_machine_learning</id>
        <link href="https://zenn.dev/kaityo256/articles/my_first_machine_learning"/>
        <updated>2022-10-09T11:45:27.000Z</updated>
        <summary type="html"><![CDATA[はじめに
機械学習をやってみたくて、とりあえずサンプルを実行して、何かできているっぽいけれど、その後どうして良いかわからない、そんな人は多いと思います。
この記事では、全くの機械学習初心者向けに、自分でデータセットを作ってニューラルネットワークに学習させてみるサンプルを作ってみます。
サンプルコードは
kaityo256/my_first_ml
にありますが、cloneしたりせず、以下を手で写しながら作業したほうが良いと思います。

 MNISTの学習
機械学習のデータセットといえば、MNISTです。これは手書き数字のデータセットで、0から9までの手書き数字データと、その正解ラベルが...]]></summary>
        <author>
            <name>ロボ太</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Data Visualization]]></title>
        <id>https://zenn.dev/mimitako/books/python-awesome-graph</id>
        <link href="https://zenn.dev/mimitako/books/python-awesome-graph"/>
        <updated>2022-10-09T11:01:22.000Z</updated>
        <summary type="html"><![CDATA[Pythonでデータ分析しているとグラフで化して概要をつかんだり、説明資料として利用したりしたくなります。しかし、それを人に見せられるような状態まで加工するのは難しいですよね。 そこでこの本ではデータをグラフ化して見せられるようにするテクニックを紹介します。 一通りの内容がまとまっているのでウェブでいちいち検索することも少なくなるでしょう。 より伝わることを意識したデータビジュアライゼーションを目指しましょう！]]></summary>
        <author>
            <name>mimitako</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonのTypedDictをネストする方法4選]]></title>
        <id>https://zenn.dev/kitsune3/articles/426d8a9e5ce60a</id>
        <link href="https://zenn.dev/kitsune3/articles/426d8a9e5ce60a"/>
        <updated>2022-10-09T09:31:26.000Z</updated>
        <summary type="html"><![CDATA[PythonのTypedDictは辞書に対する型ヒントですが、ネスト構造の定義をする方法が不明確です。
本記事ではTypedDictをネストする方法とその解説を行います。

 TypedDictについて
TypedDictは辞書型への型ヒントを提供するインターフェースです。
JSONやYAMLから生成した辞書に対して型ヒントを利用したいケースに便利です。
(※スクリプト実行時の型チェックをしたい場合はPyDanticを利用することをお勧めします。)
例えばこういったYAMLファイルで生成した辞書に対してTypedDictを定義するとエディタで型ヒントが出るようになるます。
サンプルYAM...]]></summary>
        <author>
            <name>ギンギツネさん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのテスト環境の構築(pytest)]]></title>
        <id>https://zenn.dev/horitaka/articles/c75b754e648512</id>
        <link href="https://zenn.dev/horitaka/articles/c75b754e648512"/>
        <updated>2022-10-09T09:26:55.000Z</updated>
        <summary type="html"><![CDATA[概要

Pythonにpytestを導入する手順を説明します
pytestのみではカバレッジの計測やwatchモードでの実行ができないため、それらの導入手順もあわせて説明します

バージョン情報

Python: 3.10.7
pytest: 7.1.3
pytest-cov: 4.0.0
pytest-watch: 4.2.0

各ライブラリの公式サイト

pytest
pytest-cov
pytest-watch

サンプルコード
サンプルコードはこちらです。

 導入手順

 pytestの導入

 インストール
$ pip install pytest

 テスト実行
テス...]]></summary>
        <author>
            <name>horitaka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonによるDoubly Robust Learnerの実装]]></title>
        <id>https://zenn.dev/s1ok69oo/articles/1d35bc0cfaec49</id>
        <link href="https://zenn.dev/s1ok69oo/articles/1d35bc0cfaec49"/>
        <updated>2022-10-09T03:24:20.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Doubly Robust Learner(以下、DR-Learner)について、Pythonによる実装を交えてまとめました。内容について誤り等ございましたら、コメントにてご指摘いただけますと幸いです。

 機械学習を用いた因果推論
機械学習を用いた因果推論手法は大きく分けて下記の2通りが存在します。

Meta-Learner系
Causal-Tree系

今回はMeta-Learner系の手法の1つであるDR-Learnerについて紹介します。

 Meta-Leanrerとは
Meta-Learnerとは、機械学習と因果推論の考え方を掛け合わせて条件付き平均処置効果(...]]></summary>
        <author>
            <name>Shingo Uto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【必見】プログラマーが学習・開発で絶対に登録するべき15のYouTubeチャンネル]]></title>
        <id>https://zenn.dev/nameless_sn/articles/recommended_youtube</id>
        <link href="https://zenn.dev/nameless_sn/articles/recommended_youtube"/>
        <updated>2022-10-08T23:11:47.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回の記事では、プログラマー向けに私が学習や開発で必ず登録するべきYouTubeチャンネルを15も紹介する。今回の記事では主に以下の属性の人を読者の対象とする。

プログラミング初心者
YouTubeをプログラミング学習や開発に活用したいプログラマー
実務でPython、TypeScript(JavaScript)やDart(Flutter)を活用しているプログラマー
開発に役立つ情報を探しているプログラマー


 数多くのプログラミング言語・フレームワークを扱っている、初心者向け

 freeCodeCamp.org
https://www.youtube.com/c/F...]]></summary>
        <author>
            <name>Shota Nukumizu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[PyTorch] ReLU を用いたニューラルネットワークの argmax / argmin を汎用 MILP ソルバで求める]]></title>
        <id>https://zenn.dev/mory22k/articles/c2773eb131c1f7</id>
        <link href="https://zenn.dev/mory22k/articles/c2773eb131c1f7"/>
        <updated>2022-10-08T12:18:14.000Z</updated>
        <summary type="html"><![CDATA[ニューラルネットワークの最小値または最大値を、汎用のソルバで求めるということをやってみます。

 区分線形なニューラルネットワーク
ニューラルネットワークの表現力の高さは、既に多くの人が認めるところだと思います。特に、そのコアとなる構造のほとんどが、線形変換 (より正確には Affine 変換) と活性化関数によって構成されるというのが面白いところです。
活性化関数には様々なものを考えることができますが、本記事では、専ら ReLU で構成されたニューラルネットワークに着目します。ReLU は、正規化線形関数 (ReLU関数) を活性化関数に持つユニットで、次のような式で表されます。

\...]]></summary>
        <author>
            <name>mory22k</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【解説】フレームワークとライブラリの違い]]></title>
        <id>https://zenn.dev/nameless_sn/articles/framework_and_library</id>
        <link href="https://zenn.dev/nameless_sn/articles/framework_and_library"/>
        <updated>2022-10-08T04:44:58.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回の記事では、プログラマー間で見解が分かれるライブラリとフレームワークの違いを徹底解説する。我々プログラマーはアプリケーション等を開発する際にフレームワークやライブラリを駆使する。その中でも、「フレームワークとライブラリの違いがわからない」と考える人も少なくないだろう。中には混同して使う人がいるかもしれない。両者は厳密に言えば異なる意味を示す。

 フレームワークとは
フレームワーク(framework)はアプリケーションを開発するのに必要な機能がデフォルトで揃っているものを示す。アプリケーションとして動く骨組みが用意されているので、別途プログラムを書かなくても最低限のア...]]></summary>
        <author>
            <name>Shota Nukumizu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PyPIにパッケージ公開する手順]]></title>
        <id>https://zenn.dev/k0kishima/articles/7a977bd2dd055e</id>
        <link href="https://zenn.dev/k0kishima/articles/7a977bd2dd055e"/>
        <updated>2022-10-08T01:11:00.000Z</updated>
        <summary type="html"><![CDATA[ほぼ私的備忘録

 前提

リポジトリが用意されている
venvで環境が独立できている


リポジトリが用意されている

今回パッケージとして公開するのは以下
https://github.com/BoatraceRepository/boatrace.models
今回は素振りのため、浅い階層にEnum継承したシンプルなクラス何個か配置してあるだけの小規模なリポジトリを適当にバージョン0台で出すことにした。

 ライセンスを決める
今回はMITにした。
テンプレートはここからコピペして、西暦やコピーライトホルダーのみ書き換えてプロジェクトルートの LICENSE.txt に配置した。
...]]></summary>
        <author>
            <name>k0kishima</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[じゃあぼくも雑にRSA暗号実装してみた]]></title>
        <id>https://zenn.dev/harukaeru/articles/42961199481b82</id>
        <link href="https://zenn.dev/harukaeru/articles/42961199481b82"/>
        <updated>2022-10-07T20:22:13.000Z</updated>
        <summary type="html"><![CDATA[つくったやつ
画像にある pubが公開鍵です。公開するときに使います。
画像にあるsecは秘密鍵です。ふつうは公開しないけど、この記事では説明用に公開しています。


 しくみの概要
RSA暗号は、素因数分解がとてもむずかしいこと（人類が解くにはとても時間がかかるという意味）を利用して、
「なに人類？ 数が素因数の分解をさせてくれない？ 人類、それは無理矢理引き離そうとするからだよ。逆にかんがえるんだ。『暗号につかっちゃってもいいさ』と考えるんだ」
というやつです。TRIZの13番目のルール 'The Other Way Round' （逆にせよ）みたいなノリです。

 ざっくりとし...]]></summary>
        <author>
            <name>かえる</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pytorch Points 3Dを使えるようにする（Windows 11）]]></title>
        <id>https://zenn.dev/takiser/articles/c1d72670d0abac</id>
        <link href="https://zenn.dev/takiser/articles/c1d72670d0abac"/>
        <updated>2022-10-07T08:14:02.000Z</updated>
        <summary type="html"><![CDATA[環境について
Pytorch Points 3Dはpipでインストールできる。が、2022/10/07現在、必要なもの全てを最新の状態でインストールしていくとインストールがうまくいかない。
今回はうまく行ったケースについて紹介していく。
OS: Windows11
バージョン管理: pyenv-win
仮想環境: venv
エディタ: vscode
Visual Studio 2019を事前にインストールし、2022バージョンをインストールしている場合はアンインストールしておくと良い。Pythonのバージョンは3.8.0を使用する。
pyenv,venvについて以下参照。
https...]]></summary>
        <author>
            <name>takiser</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[他言語に移行する前のdjangoまとめ]]></title>
        <id>https://zenn.dev/issei_manabi/articles/c5abea2833b558</id>
        <link href="https://zenn.dev/issei_manabi/articles/c5abea2833b558"/>
        <updated>2022-10-06T23:56:02.000Z</updated>
        <summary type="html"><![CDATA[環境構築
1 pythonをインストール
2 Vscodeをインストール（（ライブラリを入れておくと楽　Prettierなど
3 仮想環境の作成（venv)　以下の通りに実行
3 % sudo apt install python3.8-venv
4 % python3 -m venv venv
5  ls(venvがインストールされていることを確認
6 % source venv/bin/activate
7 (venv)% と表示されるしくみは完成！

 プロジェクトを始める
work_placeでターミナルを開く
# work_placeファイルがある階層で
cd work_p...]]></summary>
        <author>
            <name>issei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GoogleChromeのブックマークを登録日順に出力する]]></title>
        <id>https://zenn.dev/kawagh/articles/extract_chrome_bookmarks</id>
        <link href="https://zenn.dev/kawagh/articles/extract_chrome_bookmarks"/>
        <updated>2022-10-06T11:48:31.000Z</updated>
        <summary type="html"><![CDATA[はじめに
GoogleChromeのブックマーク一覧を登録時の時系列順に並べて出力するpythonプログラムを実装しました。
ディレクトリの中にさらにディレクトリがあるような入れ子の場合にも対応しています。
ブックマークの情報には登録時のタイムスタンプが保存されているのでそれを使って並び替えています。

 出力
後述のプログラムを実行した際の出力は以下のようになります。
3 urls
2022-10-04 Zenn｜エンジニアのための情報共有コミュニティ https://zenn.dev/
2022-10-05 Zenn｜エンジニアのための情報共有コミュニティ https://zen...]]></summary>
        <author>
            <name>kawagh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[reCaptcha v2.0を突破するための2captchaサービス (python版)]]></title>
        <id>https://zenn.dev/marketer/articles/235af428acf66a</id>
        <link href="https://zenn.dev/marketer/articles/235af428acf66a"/>
        <updated>2022-10-06T11:24:23.000Z</updated>
        <summary type="html"><![CDATA[この投稿ではGoogle reCaptcha v2.0を解決するため、2captchaへの自動接続をするコードを紹介します。今から少し前に、Googleはユーザー行動のreCaptcha(v2.0)を大幅に複雑にしました。このオンラインサービスは、それを解決する方法を提供します。
このサービスが使用する単純なアルゴリズムは次のとおりです。:

ターゲットサイトを開くクレデンシャル(recaptchaの「サイト キー」、サイトURL、オプション: プロキシ IP) は、利用者(クライアント) によってコピーされ、2captchaサービスに送信されます。シンプルなウェブ開発者ツールでそれらを...]]></summary>
        <author>
            <name>marketer</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Automatic1111】Mac(M1/M2)のローカルでStableDiffusionのGUIツールを使う方法]]></title>
        <id>https://zenn.dev/michy/articles/ca45fd291c6ea4</id>
        <link href="https://zenn.dev/michy/articles/ca45fd291c6ea4"/>
        <updated>2022-10-06T09:29:21.000Z</updated>
        <summary type="html"><![CDATA[はじめに
WindowsやColab環境のStableDiffuisonユーザに人気のAutomatic1111がMacでも使用できるようになりました。
公式の説明が英語で分かりづらいのと、デフォルトのインストーラーを使うと一部の環境が書き換えられてしまうので、おすすめの方法を解説します。

 導入前の前提条件
conda環境とhomebrewは先行してインストールしておいてください。
導入手順がわからない場合は、以下の記事のhomebrewをインストールとpython仮想環境のインストール部分を参考にインストールしてください。
https://zenn.dev/michy/arti...]]></summary>
        <author>
            <name>zaiwa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[生成AIまとめ]]></title>
        <id>https://zenn.dev/nekoallergy/articles/ml-memo03-genarate01</id>
        <link href="https://zenn.dev/nekoallergy/articles/ml-memo03-genarate01"/>
        <updated>2022-10-06T09:00:00.000Z</updated>
        <summary type="html"><![CDATA[生成 AI がすごい
ここ半年での生成 AI の進化が凄まじいです。
ニュースや Twitter で話題になっていたので、知っている方も多いでしょう。
今回は、有名なモデルや最新のモデルについて紹介します。
大きく 3 つに分類しました。

テキストから画像を生成
テキストから動画を生成
テキストから音声を生成


Created by NekoAllergy


 01 画像を生成

 📸 リアルな画像を生成「DALL-E2」
https://twitter.com/jaguring1/status/1554431706257850368
公式 ↓
https://openai.c...]]></summary>
        <author>
            <name>NekoAllergy</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Lambdaでの音声処理（ffmpeg, librosa）を完全攻略した]]></title>
        <id>https://zenn.dev/hayua/articles/4b75429aa70e4e</id>
        <link href="https://zenn.dev/hayua/articles/4b75429aa70e4e"/>
        <updated>2022-10-06T07:42:05.000Z</updated>
        <summary type="html"><![CDATA[はじめに
pythonを用いた音声処理をLambdaで行いたかったが、コンテナベースでffmpegやlibrosaを動かすために結構苦戦したので記事にした。
AmazonLinuxベースでコンテナイメージを作成しようとしたが、yumコマンドでffmpegやlibsndfileがインストールできず、それの回避方法を本記事で記載している。

 超概要
yumでインストールできないので、curlコマンドで必要なパッケージをダウンロードしてきて、インストール作業を行う。

 具体的なDockerFile
インストールするために、本筋とは関係がないgccのインストールをしているので、もしかした...]]></summary>
        <author>
            <name>hayua</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【pyodbc】Insertするときに4200エラーが出た]]></title>
        <id>https://zenn.dev/tsuji_u/articles/0f67ccd8096575</id>
        <link href="https://zenn.dev/tsuji_u/articles/0f67ccd8096575"/>
        <updated>2022-10-06T02:28:00.000Z</updated>
        <summary type="html"><![CDATA[pyodbcを使ってpandasのDataFrameをSQL ServerにInsertするときにこんなエラーが出た
('42000', '[42000] [Microsoft][ODBC Driver 17 for SQL Server][SQL Server]The incoming tabular data stream (TDS) remote procedure call (RPC) protocol stream is incorrect. Parameter 24 (""): The supplied value is not a valid instance of dat...]]></summary>
        <author>
            <name>t_u</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【pandas】fillnaがうまくいかなかった話]]></title>
        <id>https://zenn.dev/tsuji_u/articles/39f6bafc43857a</id>
        <link href="https://zenn.dev/tsuji_u/articles/39f6bafc43857a"/>
        <updated>2022-10-06T01:19:24.000Z</updated>
        <summary type="html"><![CDATA[欠損地NaNを置換したかった
pandasのfillnaメソッドを使えばNaN値が置換できるとのことで試してみた。
今回は特定の列に含まれるNaNを置換したかったので次のコードを実行した。
# これだとうまくいかない
df.fillna({'header_name': 0.0})
上記では実行した後にNaNが残ったままになっていた。
原因はメソッド実行したものを代入していなかったから。
正しくは次のようにすることで正しく置換される。
# 置換したDFを代入しなおす
df = df.fillna({'header_name': 0.0})]]></summary>
        <author>
            <name>t_u</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Zappaを利用してAWSへFlaskのアプリケーションをデプロイ。NotFoundExceptionを解決する方法]]></title>
        <id>https://zenn.dev/kobakichi/articles/47d8d1e06c9189</id>
        <link href="https://zenn.dev/kobakichi/articles/47d8d1e06c9189"/>
        <updated>2022-10-05T19:53:50.000Z</updated>
        <summary type="html"><![CDATA[参考記事
https://forum.serverless.com/t/invalid-api-identifier-specified/8498/2

 動作環境
zsh バージョン
zsh 5.7.1 (x86_64-apple-darwin19.0)

OS
macOS Catalina 10.15.7 (19H15)
Kernel Version: Darwin 19.6.0

Zappa バージョン
0.55.0

Flask バージョン
Python 3.7.3
Flask 2.2.2
Werkzeug 2.2.2

 内容
Zappaというフレームワークを利用して、AW...]]></summary>
        <author>
            <name>kobakichi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WhipserをGPUで動かす環境をDocker Conposeでつくる]]></title>
        <id>https://zenn.dev/yuarth/articles/dc81a0fa15748b</id>
        <link href="https://zenn.dev/yuarth/articles/dc81a0fa15748b"/>
        <updated>2022-10-05T17:09:00.000Z</updated>
        <summary type="html"><![CDATA[概要
OpenAIがオープンソースとして公開したSpeech to Textを行う深層学習モデルのWhisperをPython＋GPUで動かす環境をDocker Composeで作成するまでの手順です。

 想定環境
Windows11
GPU:GeForce RTX 2080 Ti
GPUはドライバや後述するdockerfileでベースとするイメージに影響します。
ディレクトリ構成
.
├── main
│   └── recognize.py # whisperを動かすプログラム
├── audio
│   └── input.mp3 # 解析する音声ファイル
├── Docke...]]></summary>
        <author>
            <name>yuarth</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Python] Tkinter、アプリ起動時にバックグラウンドで無限ループ処理を開始する。]]></title>
        <id>https://zenn.dev/milkystack/articles/c7072bbdb9ca09</id>
        <link href="https://zenn.dev/milkystack/articles/c7072bbdb9ca09"/>
        <updated>2022-10-05T13:24:05.000Z</updated>
        <summary type="html"><![CDATA[語彙力ないのでタイトル迷った。
これを求めて検索から来てくれた人なら理解できるはず、、、
threadingを使う必要はないです。
import tkinter as tk

root = tk.Tk()
root.title("アプリ名")
root.geometry("400x200")

# ループ処理 ==========================
def getLoop():
	print("ループ")
	root.after(2000, getLoop) #二秒後にgetLoop実行
root.after(2000, getLoop) #これ！ #二秒後にgetLoop...]]></summary>
        <author>
            <name>milkystack</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Twitterのトレンドの起点を探るPythonのプログラム]]></title>
        <id>https://zenn.dev/autumn_nsn/articles/22be6dc5396453</id>
        <link href="https://zenn.dev/autumn_nsn/articles/22be6dc5396453"/>
        <updated>2022-10-05T05:39:27.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Twitterを使っていると、時々不謹慎なトレンドのハッシュタグを見かけることがありますよね。
「#○○の辞職を求めます」、「#○○逮捕で新年を迎えたい」みたいな・・・
このような作為的なトレンドって誰が仕掛けているんだろう、と思ってこのようなプログラムを作ってみました。

 開発環境
Windows10
Visual Studio 2019 Community.
Python: 3.9.10
Pandas: 1.4.1
tweepy: 4.6.0
個別にインストールが必要なライブラリは「Pandas, tweepy」の２つです。
また、今回のプログラムでは、事前に「Twi...]]></summary>
        <author>
            <name>autumn_nsn</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[アイスクリームの季節を考慮した売上予測]]></title>
        <id>https://zenn.dev/smrids/articles/0e0f458d46f048</id>
        <link href="https://zenn.dev/smrids/articles/0e0f458d46f048"/>
        <updated>2022-10-05T01:46:53.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この半年間でデータ分析を学習しました。
そこで学んだ技術を使って、商品の売り上げ予測して、その分析結果をまとめてみました。

 解決したい社会課題
テーマは「アイスクリーム」。
アイスクリームは夏の食べ物と思われがちですが、「冬に食べるアイスクリームも美味しい」ということで好んで冬に食べる人も多いと聞きます。
売上データを分析して売上予測をして、本当に冬にもアイスクリームをたくさん入荷して販売しても大丈夫なのかを確かめてみたいと考えました。

 実行環境
パソコン：MacBook Pro
開発環境：Google Coraboratory
言語：Python
ライブラリ：Ma...]]></summary>
        <author>
            <name>Ueno Kenta</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AI Programmerを試してみる]]></title>
        <id>https://zenn.dev/k02miu/articles/1aafb6157a2f96</id>
        <link href="https://zenn.dev/k02miu/articles/1aafb6157a2f96"/>
        <updated>2022-10-05T01:24:04.000Z</updated>
        <summary type="html"><![CDATA[はじめに
AI Programmerなるものがプロトタイプ無料で公開されていたので何番煎じかわかりませんが試してみました。

 それなに
詳しくはこちらを見たらよいかなと思います。

 概要

AI Programmerは日本語の自然言語を元にコードを自動で生成してくれるとても便利なツールです。
全てのプログラマーにとって強力なサポートとなり、教育など様々な分野で応用できるサービスを目指し開発を進めて参ります。


 対応言語

SQL
Python
Javascript
HTML & CSS
スマートコントラクト
C++
PHP
Go
R
Perl
Ruby
正規表現
Ha...]]></summary>
        <author>
            <name>k02miu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[機械学習バッチジョブの実行時間を4時間から1時間にした話]]></title>
        <id>https://zenn.dev/nasa/articles/performance_improve_ml_batch_job</id>
        <link href="https://zenn.dev/nasa/articles/performance_improve_ml_batch_job"/>
        <updated>2022-10-04T23:07:28.000Z</updated>
        <summary type="html"><![CDATA[こんにちはnasaです。
最近、機械学習バッチジョブのパフォーマンス改善に取り組み実行時間を4時間30分から1時間まで改善できたのでやったことを残しておこうと思います。

 やったこと
取り組みは次の４つです。それぞれ説明していこうと思います。

マシンのスケールアップ
GCSを経由してBigQueryからデータを取得する
並列処理
dataframeのCSV出力をpickle出力にする


 マシンのスケールアップ
金の弾丸と呼ばれるやつですね。
インフラコストとの相談ですが手っ取り早く高速化したいならお金の力でぶん殴るのは良い手段だと思います。
今回実行時間の短縮に取り組んだバッチジ...]]></summary>
        <author>
            <name>nasaちゃん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[asyncioで並行処理すると本当に速くなるのか、実際にベンチマークしてみた]]></title>
        <id>https://zenn.dev/alivelimb/articles/20221004-asyncio-benchmark</id>
        <link href="https://zenn.dev/alivelimb/articles/20221004-asyncio-benchmark"/>
        <updated>2022-10-04T14:14:34.000Z</updated>
        <summary type="html"><![CDATA[こんにちわ alivelimb です。
FastAPI などで見える機会が増えたasyncioですが、本当に恩恵があるのかベンチマークテストしてみました。

 はじめに
「そもそもasyncioって何？」という方のために簡単に紹介してみます。
詳細は公式ドキュメントまたは@JunyaFffさんのスライドが非常にわかりやすいです。


 asyncio とは？
asyncio はその名の通り非同期(async) I/O の実装に活用できます。
ネットワーク通信を含む Input/Ouput の際は処理待ちが発生し CPU を持て余してしまいます。

File I/O の間 CPU を別の処...]]></summary>
        <author>
            <name>alivelimb</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[macでpyenvをインストールする]]></title>
        <id>https://zenn.dev/takahiro0224/articles/f651475f2bd028</id>
        <link href="https://zenn.dev/takahiro0224/articles/f651475f2bd028"/>
        <updated>2022-10-04T11:38:48.000Z</updated>
        <summary type="html"><![CDATA[pyenvについて
https://github.com/pyenv/pyenv

pyenv lets you easily switch between multiple versions of Python. It's simple, unobtrusive, and follows the UNIX tradition of single-purpose tools that do one thing well.


This project was forked from rbenv and ruby-build, and modified for Python.

pye...]]></summary>
        <author>
            <name>kamome_nyan_nyan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WT901BLECLにBLE接続してデータを読み取る]]></title>
        <id>https://zenn.dev/fastriver/articles/wt901blecl_read_data</id>
        <link href="https://zenn.dev/fastriver/articles/wt901blecl_read_data"/>
        <updated>2022-10-04T09:19:38.000Z</updated>
        <summary type="html"><![CDATA[https://www.wit-motion.com/9-axis/witmotion-bluetooth-ble-5-0.html
WT901BLECLは中国WitMotionの開発する安価なBluetooth Low Energy(BLE)対応IMUです。
Windows11とPythonを使ってセンサの値を読み取れるようにしてみましょう。

 PCと接続する
WT901の電源を入れると自動でペアリングモードになるので、PCの設定の[Bluetooth & Devices] > [Add Device]からペアリングします。

「WT901BLE67」が見つかると思う...]]></summary>
        <author>
            <name>fastriver</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【機械学習】数式をコード化する基本のき]]></title>
        <id>https://zenn.dev/deeprecommend/articles/afc9164519d4f4</id>
        <link href="https://zenn.dev/deeprecommend/articles/afc9164519d4f4"/>
        <updated>2022-10-04T07:11:27.000Z</updated>
        <summary type="html"><![CDATA[パーセプトロン
ソースコード
パーセプトロンについて詳しくはこちら
https://ja.wikipedia.org/wiki/パーセプトロン#:~:text=パーセプトロン（英%3A Perceptron）は,回帰と等価である。
インポートします。
%matplotlib inline
import math 
import copy
import numpy as np
import pandas as pd
from matplotlib import pylab as plt
データつくります。
df = pd.DataFrame(
    {
        'x1': [...]]></summary>
        <author>
            <name>DeepRecommend</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ROS2 Moveit2パッケージの作成方法]]></title>
        <id>https://zenn.dev/tasada038/articles/57e446285e60de</id>
        <link href="https://zenn.dev/tasada038/articles/57e446285e60de"/>
        <updated>2022-10-04T01:55:19.000Z</updated>
        <summary type="html"><![CDATA[海洋ロボコンをやっている浅田です。
今回は、ROS2用のMoveit2パッケージの作成方法について私の知見をまとめました。
これからMoveit2を自分の研究機体に実装したい方のお力添えになれば幸いです。

 ROS2 Moveit2パッケージの作成方法
この記事を読むことで、自身のオリジナルロボットをMoveit2で動かせるようになります。
また使用するモデルは、アイコンでも表示されているマンタ型ロボットで紹介していきます。
なお、ロボットのハード設計からソフト設計まで全て私が担当しており、所属研究室の教授からも承諾を得ています。

 moveit setup assistantでパッ...]]></summary>
        <author>
            <name>Takumi Asada</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ROS2 urdfの作り方と表示方法]]></title>
        <id>https://zenn.dev/tasada038/articles/940ef193a4a28a</id>
        <link href="https://zenn.dev/tasada038/articles/940ef193a4a28a"/>
        <updated>2022-10-04T01:49:02.000Z</updated>
        <summary type="html"><![CDATA[海洋ロボコンをやっている浅田です。
今年で大学を卒業するということもあり、記事として知見を残しておくことにしました。
この記事が初投稿となりますが、どうぞよろしくお願いします。

 ROS2対応 URDFのロボットの作り方
ここでは、ROS2に対応したオリジナルURDFモデルの作り方から、実際にRviz2で表示させるまでを記事にしていこうと思います。
使用するモデルは、アイコンでも表示されているマンタ型ロボットで紹介していきます。
なお、ロボットのハード設計からソフト設計まで全て私が担当しており、所属研究室の教授からも一般公開の許可を得ています。

 はじめに
まずは私が使用した動作環境...]]></summary>
        <author>
            <name>Takumi Asada</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[python-docxを用いた両側ルビ]]></title>
        <id>https://zenn.dev/nakamura196/articles/2bf1da3cc3cb0e</id>
        <link href="https://zenn.dev/nakamura196/articles/2bf1da3cc3cb0e"/>
        <updated>2022-10-03T21:17:36.000Z</updated>
        <summary type="html"><![CDATA[python-docxを用いて、Wordで両側ルビを実現する方法の備忘録です。
以下のノートブックからお試しいただけます。
https://colab.research.google.com/github/nakamura196/ndl_ocr/blob/main/python_docxを用いた両側ルビ.ipynb
出力例は以下です。

入力例は以下です。
<body>
<p>
 私は
 <ruby>
  <rb>
   <ruby>
    <rb>打</rb>
    <rt place="ri...]]></summary>
        <author>
            <name>nakamura196</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[google/jax を Poetry でインストールする]]></title>
        <id>https://zenn.dev/odan/articles/d209e90c71dcc3</id>
        <link href="https://zenn.dev/odan/articles/d209e90c71dcc3"/>
        <updated>2022-10-03T11:26:46.000Z</updated>
        <summary type="html"><![CDATA[背景
google/jax が PEP 503 に対応していなくて困った
https://github.com/google/jax/issues/5410
Poetry 側にも issue がある
https://github.com/python-poetry/poetry/issues/5481
どうやら pip の --find-links 相当のものが 1.2.0 から実装されたらしい
https://github.com/python-poetry/poetry/issues/1391
https://github.com/python-poetry/poetry/pul...]]></summary>
        <author>
            <name>odan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kivyで作る数独自動解答アプリ①]]></title>
        <id>https://zenn.dev/ruymtnw/articles/sudoku-auto-solve</id>
        <link href="https://zenn.dev/ruymtnw/articles/sudoku-auto-solve"/>
        <updated>2022-10-02T14:47:32.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回は、PythonのオープンライブラリのKivyを使用して、数独の自動解答アプリを作っていきたいと思います。
実装している中でKivyの記事が少なかったので、備忘録も兼ねて書いてみました。
最終的にはiosアプリとしてリリースまで持っていきたいです。

 リポジトリ作成
数独の画面用のリポジトリを作りましょう。その後、仮想環境を作成して有効化します。
mkdir kivy-sample
cd kivy-sample
python3 -m venv venv
source venv/bin/activate

 各種インストール
念の為pipをアップグレード
venv/bi...]]></summary>
        <author>
            <name>ryuya-matsunawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[自作PythonラッパーでGoogleグループのメンバーシップをより便利に管理する]]></title>
        <id>https://zenn.dev/jcc/articles/0ef23e881cacb4</id>
        <link href="https://zenn.dev/jcc/articles/0ef23e881cacb4"/>
        <updated>2022-10-02T12:20:32.000Z</updated>
        <summary type="html"><![CDATA[Googleグループのメンバーシップを管理する方法
Googleグループを管理するのは

Workspaceのadmin SDKを利用する

https://developers.google.com/admin-sdk/directory/v1/guides/manage-groups

CLI gcloudを利用する

https://cloud.google.com/sdk/gcloud/reference/identity/groups/memberships

Cloud Identity APIを叩く

https://cloud.google.com/identity/...]]></summary>
        <author>
            <name>jc</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【初心者でもできる】HuggingFaceにGradioで作成したアプリをデプロイする方法]]></title>
        <id>https://zenn.dev/robes/articles/fb99590d9ec9f2</id>
        <link href="https://zenn.dev/robes/articles/fb99590d9ec9f2"/>
        <updated>2022-10-02T12:04:16.000Z</updated>
        <summary type="html"><![CDATA[はじめに
以前、機械学習アプリを超爆速で実装できるフレームワークgradioをご紹介しました。
https://zenn.dev/robes/articles/fcbda5d2dc1362
gradioはGoogleColaboratory上でも作成できて、かつ公開もできるなど、超便利なのですが、いかんせん、公開期間は72時間限定だったりして、当然、不便なところもあります。
そんなgradioで作ったwebアプリを永続的に公開するための最適なプラットフォームとして、HuggingFaceのSpacesがあります。
今回、いろいろ調べながら、何とかHuggingFaceSpacesへの...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[LiDARデータによる物体検出を試してみた-Part2]]></title>
        <id>https://zenn.dev/gyabi/articles/7de3142bbece8a</id>
        <link href="https://zenn.dev/gyabi/articles/7de3142bbece8a"/>
        <updated>2022-10-02T10:06:27.000Z</updated>
        <summary type="html"><![CDATA[今回の内容
前回の記事でPointPilllarsの動作確認を行った。
次のステップとしてUnity上で自作のLiDARを実装して点群データを取得できるようにしたい。
https://zenn.dev/gyabi/articles/739131bae9a57e
今回は実装に入る前にPointPilllarsと前回使用したKittiDataSetについて深堀し、実装する際の要件を抽出する。

 PointPillars
アルゴリズムそのものは理解しきっていない＋既に良く解説されている記事が存在するのでリンクを張っておく。
https://aru47.hatenablog.com/ent...]]></summary>
        <author>
            <name>Kano</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Djangoで鍵を隠すためのプチテク]]></title>
        <id>https://zenn.dev/mimitako/articles/django_gen_secretkey</id>
        <link href="https://zenn.dev/mimitako/articles/django_gen_secretkey"/>
        <updated>2022-10-02T07:31:31.000Z</updated>
        <summary type="html"><![CDATA[Django で開発中に鍵を隠しておきたいけど面倒だよね？
通常、Django などの CMS をいじるときに秘密鍵が Github などにアップされないように管理されなければなりません。こういう状況では、非同期されているファイルによる管理がよく利用されています。
私も今まではsecrets.jsonなどを用いて管理していましたが、PULL するときに毎回コピーするのも面倒だと感じていました。
開発中は自動生成できるようにするのが楽なんじゃない？ということで、ちょっとお試しで自動鍵生成、管理システムを Django に組み込んでみました。

 まずは gitignore の設定
せっ...]]></summary>
        <author>
            <name>mimitako</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[機械学習モデルの評価に必要なデータ数を見積もる 〜機械学習の仕事に統計を使ってみる〜]]></title>
        <id>https://zenn.dev/yagiyuki/articles/ml_data_set_statistics</id>
        <link href="https://zenn.dev/yagiyuki/articles/ml_data_set_statistics"/>
        <updated>2022-10-02T04:41:27.000Z</updated>
        <summary type="html"><![CDATA[この記事では、母比率の区間推定を用いて機械学習モデルの評価に必要なデータ数を見積もる方法を書きます。
以下の記事で、母比率の区間推定で機械学習モデルを評価する方法を書きましたがその続編です。
https://zenn.dev/yagiyuki/articles/ml_test_statistics
!
本記事で記載した内容は、私的なアイディアをまとめたものになります。
機械学習モデルの評価方法として確立したものではない点をご認識ください。


 機械学習モデルの評価とは?
機械学習モデルの評価とは、「学習したデータとは別のデータでモデルの性能を評価すること」を指します。
性能評価の指標と...]]></summary>
        <author>
            <name>yagiyuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[python アプリケーション開発中、 git submodule で取り込んだパッケージ内の依存解決に躓いた]]></title>
        <id>https://zenn.dev/ymiz/articles/4f9bc3c1238388</id>
        <link href="https://zenn.dev/ymiz/articles/4f9bc3c1238388"/>
        <updated>2022-10-02T00:03:14.000Z</updated>
        <summary type="html"><![CDATA[問題

複数のアプリケーションで共通のビジネスルールを利用したい
ビジネスルールを公開したくはない
個人開発なのでチーム開発ほどのコストをかけたくない
pythonのアプリケーションである
どうするか？


 対応
共通のビジネスルールを切り出す。
それを単一のprivate repositoryとして管理する。
このrepositoryをsubmoduleとして取り込む。
取り込むことは簡単にできた。
だが、取り込んだパッケージの作りが悪く、そのまま使うことができなかった。
具体的には、取り込んだパッケージ内での依存解決ができない状態になった。
共通ビジネスルールパッケージのディレ...]]></summary>
        <author>
            <name>ymiz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PoetryからFlitのマイグレーションノート]]></title>
        <id>https://zenn.dev/attakei/articles/migrate-poetry-to-flit</id>
        <link href="https://zenn.dev/attakei/articles/migrate-poetry-to-flit"/>
        <updated>2022-10-01T16:55:24.000Z</updated>
        <summary type="html"><![CDATA[ちょっとした経緯があって、いくつかのPythonパッケージの管理用ライブラリを Poetry [1] から Flit [2] に変えました。
この際の基本的な動き方を整理しておくための記事です。

 前提
以下の環境で書いています。
» python --version
Python 3.10.6
» poetry --version
Poetry version 1.1.12
» flit --version
Flit 3.7.1
また、次の2点を満たす環境であるものとします。

Poetry用の pyproject.toml がある
ソース類をGitHubで管理している


 Fli...]]></summary>
        <author>
            <name>Takei Kazuya</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker+poetryの開発環境とCI]]></title>
        <id>https://zenn.dev/energy_saving/articles/d1ef09fc24f365</id>
        <link href="https://zenn.dev/energy_saving/articles/d1ef09fc24f365"/>
        <updated>2022-10-01T14:51:04.000Z</updated>
        <summary type="html"><![CDATA[はじめに・経緯
 みなさん、pythonの開発環境に何を使っていますか？localのスパゲッティ環境でゴリ押し、仮想環境作る、いろいろあると思います。かくいう僕は「環境依存における差異」が非常に嫌いなので、できればDocker内で何とかしたい、みたいな思想が強かったりします(docker環境にも差異があったりする話は別で......)。
 加えてpoetryが最近のpythonのパッケージ管理のトレンドらしく、pythonを使ったアプリケーションではpoetryが候補の一つに入ってきます。これらを両立しつつ快適なpython開発環境が何となく自分の中で固まりつつあるのでつらつら書いて...]]></summary>
        <author>
            <name>energy_saving</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】condaコマンド集]]></title>
        <id>https://zenn.dev/hope/articles/09b4dce7207ad8</id>
        <link href="https://zenn.dev/hope/articles/09b4dce7207ad8"/>
        <updated>2022-10-01T14:40:23.000Z</updated>
        <summary type="html"><![CDATA[condaコマンド集

 基本



コマンド
内容




conda update conda
Conda のアップデート


conda create -n [name] python=[version] [library]
仮想環境構築


conda env list
仮想環境一覧


activate [name]
仮想環境有効化


deactivate [name]
仮想環境無効化


conda remove -n [name] --all
仮想環境削除




 パッケージ系



コマンド
内容




conda install [package]
パッケージ...]]></summary>
        <author>
            <name>ほぺ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ABC271 C - Manga Python解答例]]></title>
        <id>https://zenn.dev/fjnkt98/articles/488c0ed7911f51</id>
        <link href="https://zenn.dev/fjnkt98/articles/488c0ed7911f51"/>
        <updated>2022-10-01T14:36:32.000Z</updated>
        <summary type="html"><![CDATA[AtCoder Beginner Contest 271 C - MangaをPythonで解きます。

 問題
問題文をAtCoderのページより引用します。


 問題文
高橋君は全10^9巻の漫画『すぬけ君』を読むことにしました。
初め、高橋君は『すぬけ君』の単行本をN冊持っています。i番目の単行本はa_i巻です。
高橋君は『すぬけ君』を読み始める前に限り次の操作を0回以上何度でも繰り返せます。

現在持っている単行本が1冊以下の場合、何もしない。そうでない場合、現在持っている単行本から2冊を選んで売り、代わりに好きな巻を選んで1冊買う

その後、高橋君は『すぬけ君』を1巻、2巻、...]]></summary>
        <author>
            <name>藤那花多</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Intro2DL : 画像分類の代表的なアーキテクチャ]]></title>
        <id>https://zenn.dev/yoshida0312/articles/2da90c027050b1</id>
        <link href="https://zenn.dev/yoshida0312/articles/2da90c027050b1"/>
        <updated>2022-10-01T13:04:27.000Z</updated>
        <summary type="html"><![CDATA[画像分類のアーキテクチャ
現在でもほとんどの最先端のアーキテクチャの基礎となっている以下のCNNアーキテクチャを見ていきます。

AlexNet
VGG
GoogleNet
ResNet
DenseNet

今回からモデルが重くなるため、GoogleColabで実行します。
(前回まではMPSを使用していたのですが、今回のPytorch Lightningのコード内で解決できないバグがあるようですので、ColabのCuda環境で実行しています)
以下のボタンをクリックすると、GoogleColabに勝手に移動します。
リンクは、https://github.com/をhttps://...]]></summary>
        <author>
            <name>よしだ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PyQtGraphを用いたファイナンスデータの可視化（1）]]></title>
        <id>https://zenn.dev/mashi_z/articles/fintech-basic-plot</id>
        <link href="https://zenn.dev/mashi_z/articles/fintech-basic-plot"/>
        <updated>2022-10-01T10:56:16.000Z</updated>
        <summary type="html"><![CDATA[これは何？
ファイナンスのデータをダウンロードして表示するアプリケーションの制作記録です。作成するアプリケーションのイメージは以下のとおりです。

これも少し前に作成したものなので、バックテストなどの機能を盛り込みすぎてかえって使いづらくなってしまいました。
ということで、今回は機能をブラッシュアップしつつ取り組もうと考えておりますので見た目などが異なります。
公開しながら行うことにより、作業の進みが早くなることを期待しております。ということで、少しずつ書き足しながら、かつシリーズものとして作成を行います。

 現状のコード
financeCall.pyを実行すると、アプリが起動しま...]]></summary>
        <author>
            <name>mashi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PyQtGraphの凡例などのフォント設定について]]></title>
        <id>https://zenn.dev/mashi_z/articles/pyqtgraph-lissa</id>
        <link href="https://zenn.dev/mashi_z/articles/pyqtgraph-lissa"/>
        <updated>2022-10-01T08:38:14.000Z</updated>
        <summary type="html"><![CDATA[これは何？
PyQtGraphでグラフを描く際の凡例の追加に関するメモです。
完成イメージは、以下のとおりです。


 環境
当方の環境は以下のとおりです。

HW

MacBook Pro (13-inch, 2019, Four Thunderbolt 3 ports)
macOS Monterey 12.5.1（21G83）
2.8 GHz クアッドコアIntel Core i7


SW

Python 3.10.4
PySide6 6.3.2
pyqtgraph 0.13.1



2880x1800のdot by dotにて使用しているため、他の解像度の環境ではフォントの...]]></summary>
        <author>
            <name>mashi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[バーチャル量子コンピュータで素因数分解]]></title>
        <id>https://zenn.dev/mizar/articles/91ca88bd57c5e0</id>
        <link href="https://zenn.dev/mizar/articles/91ca88bd57c5e0"/>
        <updated>2022-10-01T07:01:29.000Z</updated>
        <summary type="html"><![CDATA[素因数分解は位数に弱い？
今回は、仮想の量子コンピュータを使って「\operatorname{mod}N に関する 整数 A の位数」というものを計算し、それを基に長い桁数の素因数分解をする遊びをしてみようと思います。
「量子コンピュータでどのようにして位数を求めるのか」という話はここでは取り扱いません。
量子コンピュータで使われる手法の参考リンク:
https://qiskit.org/textbook/ja/ch-algorithms/shor.html
https://ja.wikipedia.org/wiki/量子コンピュータ
https://en.wikipedia.org/w...]]></summary>
        <author>
            <name>Mizar/みざー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonによるDA-Learnerの実装]]></title>
        <id>https://zenn.dev/s1ok69oo/articles/a319078f8c6af1</id>
        <link href="https://zenn.dev/s1ok69oo/articles/a319078f8c6af1"/>
        <updated>2022-10-01T05:12:46.000Z</updated>
        <summary type="html"><![CDATA[はじめに
DA-Learnerについて、Pythonによる実装を交えてまとめました。内容について誤り等ございましたら、コメントにてご指摘いただけますと幸いです。

 機械学習を用いた因果推論
機械学習を用いた因果推論手法は大きく分けて下記の2通りが存在します。

Meta-Learner系
Causal-Tree系

今回はMeta-Learner系の手法の1つであるDA-Learnerについて紹介します。

 Meta-Leanrerとは
Meta-Learnerとは、機械学習と因果推論の考え方を掛け合わせて条件付き平均処置効果(CATE: Conditional Average ...]]></summary>
        <author>
            <name>Shingo Uto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[マケデコで開催した株式シストレ初心者向けセミナー動画と今後の学習リソース]]></title>
        <id>https://zenn.dev/gamella/articles/e8792cac02be1b</id>
        <link href="https://zenn.dev/gamella/articles/e8792cac02be1b"/>
        <updated>2022-10-01T02:17:57.000Z</updated>
        <summary type="html"><![CDATA[マケデコで開催した株式シストレ初心者向けセミナー動画
9/28にマケデコ(知らない人が多いですがMarket API Developer Communityの略です、興味がある方はこちらから 👉 https://discord.gg/xg6P5RXwaa )主催で、JPX総研の皆様と一緒にシステムトレード・株式データ分析の初心者向けセミナーを開催しました。
https://mkdeco.connpass.com/event/259946/
476名のご応募をいただき、341名の方に参加いただきました。発表内容ですが、

株式のシステムトレード初心者の最初の一歩(評価方法を中心に)
J...]]></summary>
        <author>
            <name>tomo@Alpaca</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[「うちの技術書検索くん」を作った話]]></title>
        <id>https://zenn.dev/fan_tech/articles/2e12b109f9fe88</id>
        <link href="https://zenn.dev/fan_tech/articles/2e12b109f9fe88"/>
        <updated>2022-10-01T02:15:03.000Z</updated>
        <summary type="html"><![CDATA[「うちの技術書検索くん」を作ろう
次は何を作ろうかと思っていたところ、技術書の棚が目に入り、そうだこれを作ってみようと決めました！
では、さっそく図を書こうと思って書いた図がこちら。

実際出来たものとは違うけど、だいたいこんな感じのことがやりたいというイメージが湧いたところで、作業を始める。
必要なものをインストールし、作業開始！
ちなみに、ソースコード全文は ここ（GitHub)
途中の作業の説明ができたらよかったんだけど、上手に説明できない…。どうしよう…、と記事を書きながら思ってるんだけど…大事なところだけ書いてみようと思います。
検索結果を表示する際に使っている部分です。こ...]]></summary>
        <author>
            <name>ふぁん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Homie API詳細]]></title>
        <id>https://zenn.dev/shouheikuwata/articles/10fe21675e1040</id>
        <link href="https://zenn.dev/shouheikuwata/articles/10fe21675e1040"/>
        <updated>2022-09-30T14:50:15.000Z</updated>
        <summary type="html"><![CDATA[FastAPIでの実装

 自分のアカウント関連

 新規登録(/user/)
詳細
/user/

CURL
curl -X 'POST' \
  'http://127.0.0.1:8000/user/' \
  -H 'accept: application/json' \
  -H 'Content-Type: application/json' \
  -d '{
  "username": "testUser001",
  "password": "testUser001",
  "disabled": false
}'



RESPONSE
{
  "password...]]></summary>
        <author>
            <name>しょーへい</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonを用いてTEI/XMLファイルをEPUBに変換する]]></title>
        <id>https://zenn.dev/nakamura196/articles/a8c55f6689ea89</id>
        <link href="https://zenn.dev/nakamura196/articles/a8c55f6689ea89"/>
        <updated>2022-09-30T14:24:05.000Z</updated>
        <summary type="html"><![CDATA[概要
Pythonを用いてTEI/XMLファイルをEPUBに変換する機会がありましたので、その備忘録です。
TEI/XMLファイルをEPUBに変換する方法として、Oxygen XML Editorを使用する方法もありますが、今回は、Pythonのライブラリ「EbookLib」を使用します。以下の記事を参考にしました。
https://dev.classmethod.jp/articles/try-create-epub-by-python-ebooklib/
特に今回は、「校異源氏物語・本文テキストデータリポジトリ」で公開されているTEI/XMLファイルを対象として、縦書きのEPUB...]]></summary>
        <author>
            <name>nakamura196</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Plotly】水素原子の図鑑：電子波動関数の可視化]]></title>
        <id>https://zenn.dev/shittoku_xxx/articles/dc13eb4c060a1c</id>
        <link href="https://zenn.dev/shittoku_xxx/articles/dc13eb4c060a1c"/>
        <updated>2022-09-30T09:30:00.000Z</updated>
        <summary type="html"><![CDATA[0.概要
この記事ではシュレディンガー方程式に従う水素原子の電子波動関数の可視化方法について解説し、水素原子の図鑑を作成した。グラフィックライブラリとして、インタラクティブなグラフ描画が可能なPlotly(参考[1])を使用する。この記事ではPythonからPlotlyを使用するが、PlotlyはJulia, Matlab, R, Javascriptなどからも呼び出し可能である。
Plotlyには4次元データの可視化に優れたplotly.graph_objects.Volume() (3D Volume Plots)というモジュールがあり(参考[2,3])、今回はこれを利用する。こ...]]></summary>
        <author>
            <name>しっとく</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python3.11では]]></title>
        <id>https://zenn.dev/dms_sub/articles/bfcd69f367bf72</id>
        <link href="https://zenn.dev/dms_sub/articles/bfcd69f367bf72"/>
        <updated>2022-09-30T09:15:18.000Z</updated>
        <summary type="html"><![CDATA[Python3.11では

 概要
Python3.11がもうすぐでリリースされるらしいので、僕が注目した今回のPythonのアップデートについて書きます。

 処理速度
Python3.11では10%~15%ほど速くなっており、今までのPythonで抱えていた問題が処理速度の問題が完全にではありませんが解決に前進したと思います。

 tomlが標準でサポート
以下のようにできます。
※tomlサンプル

test.toml
hello = world

[hoge]
hoge = 1234

※Pythonサンプル

toml.py
import tomllib


with op...]]></summary>
        <author>
            <name>tuna2134</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[にじさんじファンは推し以外のどのチャンネルに生息しているか、データ分析で明らかにしてみる。]]></title>
        <id>https://zenn.dev/eviry/articles/7710bf0031626c</id>
        <link href="https://zenn.dev/eviry/articles/7710bf0031626c"/>
        <updated>2022-09-30T06:33:17.000Z</updated>
        <summary type="html"><![CDATA[Eviry のプロダクト開発本部でエンジニアをしている栗原です。
私は Youtube Marketing サービス kamui tracker の開発を担当しています。

https://sb-licence-kamuitracker.ourservice.jp/ab/lOeckmsmitJYH_Kazw?gclid=Cj0KCQjw1bqZBhDXARIsANTjCPLQkP6uBauk0_KkiasKZR7DUauwwlucE8HbFByLVLxZtdgMkC0CnbYaAu1dEALw_wcB
この kamui tracker では、Youtube に関する様々なデータを保持して...]]></summary>
        <author>
            <name>Eviry Tech Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FastAPIの環境構築で躓いた!]]></title>
        <id>https://zenn.dev/joo_hashi/articles/005dce8f1b9910</id>
        <link href="https://zenn.dev/joo_hashi/articles/005dce8f1b9910"/>
        <updated>2022-09-30T05:21:29.000Z</updated>
        <summary type="html"><![CDATA[仮想環境作らないと、インストールできない!
最近、話題のFastAPIに興味があってUdemyの講座で環境構築をしてみたのですが、FastAPIをインストールできない?
どうやら、仮想環境を作らないといけないようですね😇

 こちらのサイトを参考に仮想環境の構築を行いました!
https://camp.trainocate.co.jp/magazine/venv-python/

 FastAPIの公式ドキュメントはこちら
https://fastapi.tiangolo.com/ja/
自分のメモ用に環境構築をした方法をReadmeに書いておきました。

 Pythonの仮想環境を...]]></summary>
        <author>
            <name>JboyHashimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python でリトライ処理のテストを書く (pytest)]]></title>
        <id>https://zenn.dev/tkm/articles/eff809ece742c1</id>
        <link href="https://zenn.dev/tkm/articles/eff809ece742c1"/>
        <updated>2022-09-30T03:42:45.000Z</updated>
        <summary type="html"><![CDATA[Python でリトライ処理を書いたのでメモ。

 テスト対象のコード
target.py
class ApiConnectionError(Exception):
    pass


class Target:

    def get(self, key: str) -> dict[str, str]:
        """api からデータを取得する処理

        Args:
            key (str): API パスパラメーター

        Returns:
            dict[str, str]: API レスポンス

  ...]]></summary>
        <author>
            <name>tkm</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【LeetCode】476.number_compliment]]></title>
        <id>https://zenn.dev/yzzz/articles/50cd1d4fbf59c7</id>
        <link href="https://zenn.dev/yzzz/articles/50cd1d4fbf59c7"/>
        <updated>2022-09-29T23:55:05.000Z</updated>
        <summary type="html"><![CDATA[概要

 内容

整数を受け取る
受け取った整数をバイナリ（２進数に変換する）
0と1を反転させる
反転させた値を10進数に変換する


 かかった時間
なんだかんだ1時間くらい

 この問題で学んだこと

異なる進数に変換すると何進数かを表すプレフィックスを処理する必要がある。(それはそう)
pytonでintはリテラルじゃない
文字列から先頭n文字を削除する方法


 解答
class Solution:
    def findComplement(self, nums: int) -> int:
        nums = str(bin(nums))[2:]
   ...]]></summary>
        <author>
            <name>yzzz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【初心者向け】Pythonを用いたデータ解析入門 ~研究で使えるプログラミングの知識~]]></title>
        <id>https://zenn.dev/labcode/books/5b90b398c6d0f4</id>
        <link href="https://zenn.dev/labcode/books/5b90b398c6d0f4"/>
        <updated>2022-09-29T23:41:35.000Z</updated>
        <summary type="html"><![CDATA[本書は、Pythonを研究で利用したい人の最初のステップとして、まずはこれだけできたらいいですよという内容がまとまっています。
Pythonを触ったことのない人や、データ解析をやったことのない人のための初心者向け入門書になります。
著者が院生時代に実際に研究で利用していたプログラミングのエッセンスをまとめていますので、研究で活用できる実用的な内容となっています。

対象とする読者
- Python初心者
- 文系・理系問わず、データ解析でプログラミングを使いたい人
- 解析する時はいつもExcelを使ってるが、そろそろプログラミングに挑戦したいと考えている人
- データが多すぎて手動で解析するのが困難になってきた人

本書を読むメリット
- Pythonが使えるようになる
- 解析を自動化する基礎技術が手に入る


販売価格
期間限定で ¥1000→¥500 (50% OFF!!)で販売しております！]]></summary>
        <author>
            <name>LabCode（ラボコード）</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[LiDARデータによる物体検出を試してみた-Part1]]></title>
        <id>https://zenn.dev/gyabi/articles/739131bae9a57e</id>
        <link href="https://zenn.dev/gyabi/articles/739131bae9a57e"/>
        <updated>2022-09-29T16:51:47.000Z</updated>
        <summary type="html"><![CDATA[はじめに
ちょっと気になってLiDARの物体検出手法を調べて実際に動かしてみたので備忘録。
(最近、開発中にZennの記事がよくヒットするので気になって投稿してみる)

 背景
最近Unityをメインで使っていて、ROSに興味が出てきたので調べているとAutowareに行き着いた。
自動運転関連の情報を収集してると何度も何度もLiDAR関連の話が出てくるので1つくらいLiDAR関連のタスクに触れてみたくなった。
https://github.com/autowarefoundation/autoware
ということで今回はLiDARデータを用いた3D物体検出手法のPointPilla...]]></summary>
        <author>
            <name>Gyabi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Snowflake で暗号化したデータをアプリ側で復号する]]></title>
        <id>https://zenn.dev/indigo13love/articles/48c4d690e404d8</id>
        <link href="https://zenn.dev/indigo13love/articles/48c4d690e404d8"/>
        <updated>2022-09-29T13:59:07.000Z</updated>
        <summary type="html"><![CDATA[Snowflake では外部と暗号化されたデータをやり取りする手段として、ENCRYPT_RAW 関数と DECRYPT_RAW 関数が用意されています。
https://docs.snowflake.com/ja/sql-reference/functions/encrypt_raw.html
https://docs.snowflake.com/ja/sql-reference/functions/decrypt_raw.html
下記の記事では、Snowflake 上で ENCRYPT_RAW 関数を使って暗号化したデータを Oracle, MySQL, PostgreSQL で復...]]></summary>
        <author>
            <name>indigo13love</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[python×SQLite - 行の存在確認]]></title>
        <id>https://zenn.dev/k_osawa/articles/b22f48d83a87f6</id>
        <link href="https://zenn.dev/k_osawa/articles/b22f48d83a87f6"/>
        <updated>2022-09-29T12:45:48.000Z</updated>
        <summary type="html"><![CDATA[python×SQLite - 行の存在確認
PythonでSQLiteを使用した行の存在確認を行う。



number
name
type1
type2




152
チコリータ
くさ



875
コオリッポ
こおり



884
ジュラルドン
はがね
ドラゴン




 結論
fetchoneメソッドの戻り値がNoneかどうかで判定する。

 ある場合
import sqlite3

dbname = "pokemon.db"
connection = sqlite3.connect(dbname)
cursor = connection.cursor()

cursor....]]></summary>
        <author>
            <name>koko</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dockerを使ってOpenAIのWhisperをサクッと試す]]></title>
        <id>https://zenn.dev/kento1109/articles/d7d8f512802935</id>
        <link href="https://zenn.dev/kento1109/articles/d7d8f512802935"/>
        <updated>2022-09-29T09:58:00.000Z</updated>
        <summary type="html"><![CDATA[少し前から界隈を賑わせているWhisper。
https://openai.com/blog/whisper/
どうやらスゴイらしい。
嬉しいことに

日本語対応
しかも無料

という太っ腹ぷり。
アーキテクチャ・どんなにスゴイかすっ飛ばして「環境つくり／テスト」に焦点を当てます。
（Colabの記事は既にいくつかあったので、dockerを使った環境構築を想定して書きます。）
結論から言うと、「めっちゃ簡単」でした。
こういうのってハマりどころが多いなと思って、備忘録として書いたのですが、簡単だったので内容が薄いです。。

 とくにかく触ってみたい
huggingfaceさんがデモを公開...]]></summary>
        <author>
            <name>kento sugimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【M1/Mac】miniforgeでzsh: command not found: condaなどと表示されて実行できない時の対処法]]></title>
        <id>https://zenn.dev/teba_eleven/articles/1691b3e25dd751</id>
        <link href="https://zenn.dev/teba_eleven/articles/1691b3e25dd751"/>
        <updated>2022-09-29T09:48:42.000Z</updated>
        <summary type="html"><![CDATA[筆者の環境

PC M1MacBookAir
OS Monterey version12.6
miniforge3


 エラー内容
zsh: command not found: conda

 結論

/Users/ユーザー名/.zshrc
# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/Users/名前/miniforge3/bin/conda' 'shell.zsh' '...]]></summary>
        <author>
            <name>手羽先</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Pyathena + SQLAlchemy】PythonでAmazon Athenaをオブジェクト指向的に扱いたい]]></title>
        <id>https://zenn.dev/eviry/articles/3f450d3757a137</id>
        <link href="https://zenn.dev/eviry/articles/3f450d3757a137"/>
        <updated>2022-09-29T09:27:52.000Z</updated>
        <summary type="html"><![CDATA[はじめに
動画配信サービスmillviで主にバックエンドエンジニアとして業務をしている片山です。
Amazon AthenaはS3に保存されたCSVファイルなどをSQLクエリで分析するサービスです。現在開発中のmillvi新バージョンではサービスの利用量集計にAthenaを利用しています。
集計用コード内でAthenaを利用したい場合、boto3等のSDKを使うことになると思います。具体的には、関数(boto3の場合はstart_query_execution)の引数にクエリ文字列を直接指定し、クエリを投げます。ただし、これには

構文ミスがクエリを実行する時まで検知されない
SQL...]]></summary>
        <author>
            <name>Eviry Tech Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[sys.orig_argvとsys.argvの違い]]></title>
        <id>https://zenn.dev/ud/articles/a6ae6c049ad08c</id>
        <link href="https://zenn.dev/ud/articles/a6ae6c049ad08c"/>
        <updated>2022-09-29T03:06:24.000Z</updated>
        <summary type="html"><![CDATA[sys.orig_argvとsys.argvの違い
Pythonのコマンドライン引数周りについて調べていると、sys.orig_argvという見慣れない属性を見つけました。
公式ドキュメントの説明を見ても、どんなユースケースが想定されていて、sys.argvとの違いはなにか、なぜ3.10になって新しく追加されたのか気になったので調べてみました。

 sys.orig_argv
公式ドキュメントには以下のようにありました。(2022-09-29時点)
つまり、sys.orig_argvとは、Python executableに渡されるオリジナルのコマンドライン引数リストとのことです。
...]]></summary>
        <author>
            <name>UD</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[メモ]Matplotlibでよく使うコマンド]]></title>
        <id>https://zenn.dev/retrofocus/articles/38021efd9e8007</id>
        <link href="https://zenn.dev/retrofocus/articles/38021efd9e8007"/>
        <updated>2022-09-28T15:27:51.000Z</updated>
        <summary type="html"><![CDATA[軸のスケールを揃える。(https://stackoverflow.com/questions/17990845/how-to-equalize-the-scales-of-x-axis-and-y-axis-in-matplotlib)
plt.gca().set_aspect('equal', adjustable='box')
# or 
plt.axis('scaled')
フォントを変更する。(https://stackoverflow.com/questions/3899980/how-to-change-the-font-size-on-a-matplotlib-plot)...]]></summary>
        <author>
            <name>retrofocus</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WhisperのREADME]]></title>
        <id>https://zenn.dev/piment/articles/ca917d0e9c8a49</id>
        <link href="https://zenn.dev/piment/articles/ca917d0e9c8a49"/>
        <updated>2022-09-28T14:38:07.000Z</updated>
        <summary type="html"><![CDATA[多言語対応の音声認識モデルのWhisperのREADMEを読んでみます。
軽くColabでお試しはしましたが、やはり一度はREADMEを読まないと全体が理解できません。


 Whisper
[Blog] [Paper] [Model card] [Colab example]
Whisperは汎用的な音声認識モデルです。大規模音声データセットで学習しています。英語音声認識や言語識別だけでなく、多言語音声認識を行うことができるマルチタスクモデルです。

 Approach

Transformer sequence-to-sequence modelは、多言語音声認識、音声翻訳、音声言語...]]></summary>
        <author>
            <name>ぴーまん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google Home に話しかけ、Google Keep を経由して Todoist にタスクを追加する（IFTTT不要、要サーバー）]]></title>
        <id>https://zenn.dev/euro/articles/8713b5a272c401</id>
        <link href="https://zenn.dev/euro/articles/8713b5a272c401"/>
        <updated>2022-09-28T12:14:36.000Z</updated>
        <summary type="html"><![CDATA[2022年9月から、Google アシスタントと IFTTT の仕様変更により、Google Home に話しかけて Todoist に任意の単語でタスクを追加することができなくなってしまいました。
ここでは、Google Home からは Google Keep にタスクを追加し、 keep2todoist という非公式の同期スクリプトを別途サーバーで稼働させ、Google Keep に追加したタスクをサーバー経由で Todoist に追加する手順を紹介します。

 Google Keep で Todoist への同期用リストを作成する
keep2todoist では Google K...]]></summary>
        <author>
            <name>ゆーろ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[競馬で覚えるPython初心者のための覚書②]]></title>
        <id>https://zenn.dev/motokoike/articles/9c3525e9f70afc</id>
        <link href="https://zenn.dev/motokoike/articles/9c3525e9f70afc"/>
        <updated>2022-09-27T21:59:10.000Z</updated>
        <summary type="html"><![CDATA[Pythonプログラミングの基礎についての記事第2弾となります。
今回は、以下について競馬要素を交えて、纏めていきます。



章
処理内容




1
if文による条件分岐


2
for文による繰り返し処理




 1.if文による条件分岐
基本的な書式は次の通りです。
elifは、C言語・Java言語などにおけるelse ifに相当します。
if 条件式1:
    #条件式1がTrueのときに行う処理
elif 条件式2:
    #条件式1がFalse かつ 条件式2がTrueのときに行う処理`
elif 条件式3:
    #条件式1, 2がFalse かつ 条件式3がTr...]]></summary>
        <author>
            <name>元小池</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[cuQuantum で遊んでみる (1) — GTC2022 より]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-cuquantum01</id>
        <link href="https://zenn.dev/derwind/articles/dwd-cuquantum01"/>
        <updated>2022-09-27T15:30:15.000Z</updated>
        <summary type="html"><![CDATA[目的
GTC2022 で cuQuantum について簡単に学んだので少し記事にまとめたいというもの。
具体的には Scaling Quantum Circuit Simulations with cuQuantum for Quantum Algorithms [A41102] を視聴した。
雑記みたいなものとして書いているので、途中計算とは無茶苦茶であまり意味合いまで深掘りしていないがそれは今後考えることにする。また、オマケとして大量の量子ビットを持つ回路の計算を軽く見てみる。

 cuQuantum って何？
文献 [CQ] より:

NVIDIA cuQuantum is a...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】Manimでバブルソートのアニメーションを作ってみる]]></title>
        <id>https://zenn.dev/k41531/articles/828e81c86560ae</id>
        <link href="https://zenn.dev/k41531/articles/828e81c86560ae"/>
        <updated>2022-09-27T02:51:56.000Z</updated>
        <summary type="html"><![CDATA[Manimとは
Manimとは、3Blue1BrownというYouTubeチャンネルの数学の解説動画を作成するために設計されたエンジンで、プログラムによって精密なアニメーション表現が可能です。
https://www.youtube.com/watch?v=r6sGWTCMz2k

 準備
私の環境がMacなのでMac用のインストール方法です。
Windows,Linux,Docker,Jupyter Notebooksなど、公式ドキュメントにはさまざまなパターンのインストール方法があるのでご参照ください。
https://docs.manim.community/en/stabl...]]></summary>
        <author>
            <name>kaisei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[共有メモリにNumpy配列を載せてProcessPoolExecutorに渡す]]></title>
        <id>https://zenn.dev/kzm4269/articles/80df87e6e9001f</id>
        <link href="https://zenn.dev/kzm4269/articles/80df87e6e9001f"/>
        <updated>2022-09-27T00:25:54.000Z</updated>
        <summary type="html"><![CDATA[TL;DR
import concurrent.futures
import multiprocessing as mp

import numpy as np


def ndarray_to_shared_memory(data):
    """NumPy配列を共有メモリに載せる.
    
    Paramerters
    -----------
    data: numpy.ndarray
    
    Returns
    -------
    (multiprocessing.RawValue, numpy.dtype)
        共有メモリ上のデ...]]></summary>
        <author>
            <name>kzm4269</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[StableDiffusionやMidjourneyでよく出てくる用語まとめ]]></title>
        <id>https://zenn.dev/michy/articles/f5a9f073709e0e</id>
        <link href="https://zenn.dev/michy/articles/f5a9f073709e0e"/>
        <updated>2022-09-26T16:11:20.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事ではStableDiffusionを利用する際によく出てくる用語をまとめました。
それぞれの用語には見出しをつけてあるので、気になる用語には目次からジャンプできます。

 基本用語

 prompt(呪文)
StableDiffusionに書いてほしいイラストをインプットする為のテキスト。
主にイラストの構図、シチュエーション、画風を決めるために使用する。

 Negative Prompt
StableDiffusionに書いてほしくない画像をインプットする為のテキスト。

 seed
画像作成時に使用するパラメータ。同じseed値を使うと同じ画像が作成される。
...]]></summary>
        <author>
            <name>zaiwa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【編集中】競プロでよく使うコードまとめ(Python3)]]></title>
        <id>https://zenn.dev/pienthon/articles/5289bed34a8bd6</id>
        <link href="https://zenn.dev/pienthon/articles/5289bed34a8bd6"/>
        <updated>2022-09-25T18:41:56.000Z</updated>
        <summary type="html"><![CDATA[入力値を受け取る

 1. N行で入力されるスペースで区切られていない文字列をリストに格納
経路が何通りあるか計算する時のマスの情報を格納するのに使ったりします。
3
...
...
#..
と入力された場合、
[['.', '.', '.'],
['.', '.', '.'],
['#', '.', '.']]
というリストにします。
N = int(input())
S = [["."] * N for _ in range(N)]
for i in range(N):
    S[i] = list(input())


 2. N行で入力されるスペースで区切られた数値をリスト...]]></summary>
        <author>
            <name>にゃーん(Pienthon)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenAI Whisperに音声データを全文書き起こしさせる【Google Colaboratory】]]></title>
        <id>https://zenn.dev/ik/articles/f891d628e829ea</id>
        <link href="https://zenn.dev/ik/articles/f891d628e829ea"/>
        <updated>2022-09-25T16:29:08.000Z</updated>
        <summary type="html"><![CDATA[OpenAIの「Whisper」を試してみていたのですが、Pythonで音声データを全文書き起こしする方法があまり情報がなかったため、備忘録です。
（手軽に試せるデモだと30秒程度までしか認識してくれません）

 Whisper
「Whisper」は、OpenAIが開発した、会話音声をテキストに変換する深層学習モデルです。
多様な音声の大規模データセットで学習され、音声翻訳や言語識別だけでなく、多言語音声認識を行うことができるマルチタスクモデルでもあります。
（細かくは調べていないですが、音声を元にしてTransformerなどの自然言語処理技術で文章を生成する、という認識の方が近いかも...]]></summary>
        <author>
            <name>inakam</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[価格帯別出来高を扱う]]></title>
        <id>https://zenn.dev/ymd/articles/9110790208f803</id>
        <link href="https://zenn.dev/ymd/articles/9110790208f803"/>
        <updated>2022-09-25T14:05:02.000Z</updated>
        <summary type="html"><![CDATA[価格帯別出来高(VPR:volume price range)とは
以下のような価格帯ごとの出来高で横バー

上記の図の引用元と詳しい説明はここを参照

 plotの方法
以下をjupyter notebookで実行する
import numpy as np
import pandas as pd
import holoviews as hv
import hvplot.pandas
from holoviews import opts
hv.extension('bokeh')

opts.defaults(opts.Curve(tools=['hover']), opts.Ove...]]></summary>
        <author>
            <name>ymd</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python - SQlite エラー】ValueError: parameters are of unsupported type]]></title>
        <id>https://zenn.dev/osawa_koki/articles/348e3af043bcf0</id>
        <link href="https://zenn.dev/osawa_koki/articles/348e3af043bcf0"/>
        <updated>2022-09-25T12:08:13.000Z</updated>
        <summary type="html"><![CDATA[タプル型??? 優先度変更用の括弧???
PythonでSQLiteを操作している際に発生したエラー、、、
以下のテーブル(pokemon)から図鑑番号が「25」の行を削除しようとしたときにお話ですね、、、



number
name
type1
type2




25
ピカチュウ
でんき



152
チコリータ
くさ



875
コオリッポ
こおり



884
ジュラルドン
はがね
ドラゴン



cursor.execute("DELETE FROM pokemon WHERE number = ?", (25))
上のコードを実行すると以下のエラーが、、、
Value...]]></summary>
        <author>
            <name>osawa-koki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[cookiecutterとcruftとcopier]]></title>
        <id>https://zenn.dev/nishikoh/articles/8939b2c00bf916</id>
        <link href="https://zenn.dev/nishikoh/articles/8939b2c00bf916"/>
        <updated>2022-09-25T10:09:38.000Z</updated>
        <summary type="html"><![CDATA[cookiecutterとcruftとcopier
cruftとcopierについて調べてみた。理解するのに公式のドキュメントを読むのが一番良さそうだが備忘録として書いておく。

 導入
プロジェクトを始める時にお決まりのディレクトリ構成、ライブラリ、ツール、CI設定、その他を使いまわすためにプロジェクトテンプレートを用意することがある。テンプレートが更新された際、既に作成済みのプロジェクトにコピペで更新を反映したり、更新が面倒で放置されるプロジェクトもある。そこで継続的にテンプレートの更新をプロジェクトに反映するツールを調べてみた。

 cruft
cruftはcookiecutt...]]></summary>
        <author>
            <name>nishikoh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[とりあえず突っ込んで見るデータ概要]]></title>
        <id>https://zenn.dev/mimitako/articles/analyzer_of_basic</id>
        <link href="https://zenn.dev/mimitako/articles/analyzer_of_basic"/>
        <updated>2022-09-25T07:57:15.000Z</updated>
        <summary type="html"><![CDATA[どんなデータなのか一括で見たい
Kaggle しかり、他のデータ分析しかり、前処理は面倒だし同じ作業の繰り返しというのもつまらない。
サクッと見たいときに Jupiter Notebook をカタカタするのも面倒…
こんな気持なのはきっと私だけじゃないですよね？ということで、今のところ csv ファイルだけですが、全体を俯瞰するような Python コードを作成したので公開します。
公開先はここです。クローンしてご利用ください。
https://github.com/miris-mimitako/basic_analyzer

 どんな入出力にしたか？
現在（2022/09/25）は...]]></summary>
        <author>
            <name>mimitako</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ctypes.windll.user32.SetProcessDPIAware()]]></title>
        <id>https://zenn.dev/as/articles/c142780724f1b4</id>
        <link href="https://zenn.dev/as/articles/c142780724f1b4"/>
        <updated>2022-09-25T07:41:19.000Z</updated>
        <summary type="html"><![CDATA[try:
   ctypes.windll.user32.SetProcessDPIAware()
except AttributeError:
    pass]]></summary>
        <author>
            <name>ForestSeo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[理解して覚えるpython ~デコレータ編~]]></title>
        <id>https://zenn.dev/ama_c/articles/c5523044aa0868</id>
        <link href="https://zenn.dev/ama_c/articles/c5523044aa0868"/>
        <updated>2022-09-25T03:56:07.000Z</updated>
        <summary type="html"><![CDATA[はじめに
初学者がデコレータだけ学習しようとすると苦戦します．書き方を覚えたつもりでも理解をしていないのでは，毎日書かない限りほんの数日で忘れてしまいます（過去の僕がそうです）．
本記事では，デコレータを理解するのに必要な最低限の知識と，そのユースケースを見ていくことで理解して覚えることを目的としています．

 前提知識
まず，関数内関数とクロージャから学びます．

 関数内関数
簡単に言うと，関数のネストです．ユースケースとしては，クラスを書くほどじゃないけど，少し読みにくい処理等を書きたいとき程度に考えています．関数の外に書けばいいじゃないかと思うかもしれませんが，外側に書くと，...]]></summary>
        <author>
            <name>ama-c</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[『リーダブルコード』の要点＆活用方法]]></title>
        <id>https://zenn.dev/nameless_sn/articles/readable_code_handbook</id>
        <link href="https://zenn.dev/nameless_sn/articles/readable_code_handbook"/>
        <updated>2022-09-25T02:44:41.000Z</updated>
        <summary type="html"><![CDATA[はじめに

今回の記事では『リーダブルコード』の要点と、実務で活用する方法を徹底解説する。この記事を読むことで、『リーダブルコード』の重要な部分と実務での活用方法を学べるだろう。
本記事で使うプログラムの言語はPythonを採用した。Pythonは文法がシンプルなので初心者でも学習コストが低く、プログラミングの入門としては最も相応しいからである。今回の記事の内容は良いプログラムを格上での重要な基本事項なので、どの言語でも役立つだろう。

 1部：表面上の改善

 名前に情報を詰め込む
プログラムに使われる名前は、主に次の5つの鉄則を守る必要がある。

明確な単語を選ぶ

例えば、ge...]]></summary>
        <author>
            <name>Shota Nukumizu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TodoListを作りました！]]></title>
        <id>https://zenn.dev/fan_tech/articles/8e2379a2b2152a</id>
        <link href="https://zenn.dev/fan_tech/articles/8e2379a2b2152a"/>
        <updated>2022-09-24T20:03:16.000Z</updated>
        <summary type="html"><![CDATA[TODO
GitHub - fan-tech/todo: TodoListです。

 はじめに
ベースは以下のサイトを参考にしています。
Django入門 | 初心者でも1時間でWebアプリ(Todoアプリ)を作成するコース | テックダイアリー
実はこのままではなくて、
DBの部分をMYSQL、色んな人のローカルで少しでも動きやすいようにDockerで環境構築できるようにしてあります。


 動かし方　お手元での動かし方

 まずは、少し書き換えが必要です。
以下の部分を削除してください。
★config/settings.py
import os
import environ

...]]></summary>
        <author>
            <name>ふぁん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Raspberry Pi+OpenCVで動体検出してLINE通知]]></title>
        <id>https://zenn.dev/technicarium/articles/82e17c1f5b2ef1</id>
        <link href="https://zenn.dev/technicarium/articles/82e17c1f5b2ef1"/>
        <updated>2022-09-24T14:12:10.000Z</updated>
        <summary type="html"><![CDATA[カメラモジュールも無事使用できるようになったのでとりあえず目標であった動体検出してLINE通知をしてみました。
https://zenn.dev/technicarium/articles/449294af295d5c

 OSバージョン
$ cat /etc/os-release 
PRETTY_NAME="Debian GNU/Linux 11 (bullseye)"
NAME="Debian GNU/Linux"
VERSION_ID="11"
VERSION="11 (bullseye)"
VERSION_CODENAME=bullseye
ID=debian
HOME_URL=...]]></summary>
        <author>
            <name>テク二カリウム</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[checkmake] Makefile向けのLinterを実行するGitHub Actionを作ってみた]]></title>
        <id>https://zenn.dev/u_not/articles/6973eeb8028810</id>
        <link href="https://zenn.dev/u_not/articles/6973eeb8028810"/>
        <updated>2022-09-24T11:23:50.000Z</updated>
        <summary type="html"><![CDATA[エレベータ―ピッチ

checkmakeによって、Makefileのフォーマットをチェック。
GitHub  Actionとして、GitHub Marketplaceに公開し、容易に導入可能。

軽量なコンテナを使い1分以内に実行が可能
OSS+GitHub Actionsなのでプライベートリポジトリなどでも無課金で使用可能



 概要
一般的にチーム開発においてLinterはコードに統一感を与え、潜在的なバグの解消に役立ちます。またDocker向けのHadolintはより軽量なイメージを作成するためのtipsを教えてくれたりと、Linterは様々な側面から開発をサポートしてくれま...]]></summary>
        <author>
            <name>U-NOT</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[母比率の区間推定で機械学習モデルを評価する 〜機械学習の仕事に統計を使ってみる〜]]></title>
        <id>https://zenn.dev/yagiyuki/articles/ml_test_statistics</id>
        <link href="https://zenn.dev/yagiyuki/articles/ml_test_statistics"/>
        <updated>2022-09-24T08:17:53.000Z</updated>
        <summary type="html"><![CDATA[この記事では、母比率の区間推定を用いた機械学習モデルを評価する方法を書きます。
統計学を使うことで機械学習モデルの評価をより精密に実施することを目指します。
!
本記事で記載した内容は、私的なアイディアをまとめたものになります。
機械学習モデルの評価方法として確立したものではない点をご認識ください。


 正解率90%はどんなデータに対しても90%なのか?
機械学習モデルの学習/評価方法の以下のフローを考えてみます。

全3000万のデータから訓練データとテストデータを合わせて数千件ほど抽出する
訓練データとテストデータに対してラベル付けを実施する
訓練データでモデル学習
テストデータで...]]></summary>
        <author>
            <name>yagiyuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[競馬で覚えるPython初心者のための覚書①]]></title>
        <id>https://zenn.dev/motokoike/articles/b3b495f9397873</id>
        <link href="https://zenn.dev/motokoike/articles/b3b495f9397873"/>
        <updated>2022-09-24T08:16:34.000Z</updated>
        <summary type="html"><![CDATA[Pythonプログラミングの基礎についての記事となります。
今回は、以下について競馬要素を交えて、纏めていきます。



章
データ型
備考




1
リスト型
複数の要素を格納できるデータ型（変更可能）


2
タプル
複数の要素を格納できるデータ型（変更不可）


3
辞書型
キー（key）と値（value）の組で表されるデータ型




 1.リスト型
リスト型とは、複数の要素を格納できるデータ型の1つです。他のプログラミング言語における「配列」に相当する。
[] で記述します。

 1.1.リスト型のデータ定義
角カッコ[] の中にそのリストに含めるデータをカンマで区切って並べ...]]></summary>
        <author>
            <name>元小池</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WSL2にGoogle Cloud SDKをインストールしようとしたらハマったのでメモ]]></title>
        <id>https://zenn.dev/noriko3/articles/d365ae94188910</id>
        <link href="https://zenn.dev/noriko3/articles/d365ae94188910"/>
        <updated>2022-09-24T08:00:38.000Z</updated>
        <summary type="html"><![CDATA[現在使ってるバージョンはこんな感じです。
$ cat /etc/os-release
PRETTY_NAME="Ubuntu 22.04 LTS"
NAME="Ubuntu"
VERSION_ID="22.04"
VERSION="22.04 LTS (Jammy Jellyfish)"
VERSION_CODENAME=jammy
ID=ubuntu
ID_LIKE=debian
HOME_URL="https://www.ubuntu.com/"
SUPPORT_URL="https://help.ubuntu.com/"
BUG_REPORT_URL="https://bugs.l...]]></summary>
        <author>
            <name>noriko3</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DuckDB入門]]></title>
        <id>https://zenn.dev/notrogue/articles/1193d0ab8d8eda</id>
        <link href="https://zenn.dev/notrogue/articles/1193d0ab8d8eda"/>
        <updated>2022-09-24T02:40:31.000Z</updated>
        <summary type="html"><![CDATA[背景

 ポジション
一言で言うとSQLiteのOLAP版です。位置づけとしては、論文(DuckDB: an Embeddable Analytical Database (SIGMOD 2019 Demo))記載のSystem Landscapeがわかりやすいです。

このLandscapeでは、データベースを

Standalone（クライアント・サーバモデル）か、組み込み（シングルマシン）か
OLTPかOLAPか

の二軸に分割しています。その上で、

クライアント・サーバモデルのOLTPにはPostgreSQL等
クライアント・サーバモデルのOLAPにはTeradata等
組...]]></summary>
        <author>
            <name>notrogue</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【自然言語処理】【Python】BERTでネガポジ判定を実装した]]></title>
        <id>https://zenn.dev/robes/articles/5c1599615290ed</id>
        <link href="https://zenn.dev/robes/articles/5c1599615290ed"/>
        <updated>2022-09-24T02:13:38.000Z</updated>
        <summary type="html"><![CDATA[0.はじめに
Python初心者のわたくしですが、このたび、BERTによる自然言語処理入門を読み込んで、BERTによるネガポジ判定を実装することができました。
本の内容から、初心者のわたくしなりに、こうした方が分かりやすいのではないかと、いくつかの工夫をしています。きっと、あまたの初心者の方にとっても、ネガポジ判定の入門としては、こちらの方が分かりやすいのではないかと自負しています。
 
https://www.ohmsha.co.jp/book/9784274227264/
 
!
ここで言うネガポジ判定の対象は、一般的な文書ではなく、いわゆるビジネス文書になります。
したがって、...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【自然言語処理】【感情分析】chABSA-datasetを扱いやすいように整形する]]></title>
        <id>https://zenn.dev/robes/articles/a7ba6e172f3a14</id>
        <link href="https://zenn.dev/robes/articles/a7ba6e172f3a14"/>
        <updated>2022-09-24T02:12:30.000Z</updated>
        <summary type="html"><![CDATA[chABSA-datasetとは
chABSA-datasetとは、機械学習で感情分析を行うためのデータセットで、TIS株式会社が無償公開しているものです。
上場企業の有価証券報告書（2016年度）をベースに作成されており、各文章の中で、「何が」ネガティブで、ポジティブなのかという観点を表す情報が含まれています。
一方、データ構造が少々複雑なので、そのまま扱うことができません。タスクにあわせて扱いやすいように、データを整形してやる必要があります。
ここでは、BERTで感情分析を行うことを前提に、chABSA-datasetを整形する方法についてご紹介していきます。
以下のサイトも参考...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Remote Containers + Poetryの俺最強テンプレート]]></title>
        <id>https://zenn.dev/utt3519/articles/615b3f73640a46</id>
        <link href="https://zenn.dev/utt3519/articles/615b3f73640a46"/>
        <updated>2022-09-23T16:45:03.000Z</updated>
        <summary type="html"><![CDATA[tl;dr
Remote Containers + Poetryの俺最強テンプレートを作りました。

 対象読者
以下の基本的な使い方がわかる人。

VS Code Remote Remote Container
Poetry
Dockerfile
Docker Compose

あるいはこれらの技術を理解したい人。（この記事を駆け抜けると、これらの知識が得られます）

 目指すこと

ローカルの開発環境を汚さない
Remote Containersを意識せずに、アプリを起動することができる
開発用のコンテナの起動をできるだけ早くする
moduleとしてpythonスクリプトを実行す...]]></summary>
        <author>
            <name>utt3519</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WhisperとGoogle Colaboratoryで音声の文字起こしをやってみた]]></title>
        <id>https://zenn.dev/kazuki_tam/articles/d59250ecf25628</id>
        <link href="https://zenn.dev/kazuki_tam/articles/d59250ecf25628"/>
        <updated>2022-09-23T15:09:48.000Z</updated>
        <summary type="html"><![CDATA[AI 業界の進化が著しい昨今、OpenAI から Whisper というとんでもない自動音声認識モデルの発表がありました。（2022/09/22）Whisper は 68 万時間かけてトレーニングされた自動音声認識モデルでなんとオープンソース化されています。
https://openai.com/blog/whisper/
https://github.com/openai/whisper
公開されているサンプルでは早口や K-POP、フランス語、アクセントのある会話などを問題なく処理できることが示されています。また日本語に関しても高い精度を保持していることがグラフから見て取れます。

...]]></summary>
        <author>
            <name>Kazuki Yonemoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[絶対に負けない三目並べを作る]]></title>
        <id>https://zenn.dev/plhr7/articles/80979f08481719</id>
        <link href="https://zenn.dev/plhr7/articles/80979f08481719"/>
        <updated>2022-09-23T12:46:07.000Z</updated>
        <summary type="html"><![CDATA[三目並べはきっと誰でも遊んだことのある他愛無い遊びですが、「じゃあプログラムで三目並べの AI を作ってください」と言われると意外と悩む人もいるのではないでしょうか。今回はそんな三目並べの絶対負けない AI を作る方法について、コードをいちから書いて実装したいと思います。
実装については三目並べが囲碁や将棋と異なり、比較的パターン数が少ないため全盤面の探索を行い、勝てる(負けない)パターンを見つけることで最良の手を打つようにします。つまり乱択アルゴリズムではなく、決定的であるということです。
さて、三目並べですが、ゲームに対する認識の齟齬がないように条件をあらかじめ整理したいと思います。...]]></summary>
        <author>
            <name>PlasticHeart</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】水素原子の解の描画：球面調和関数]]></title>
        <id>https://zenn.dev/shittoku_xxx/articles/061ad99166afcc</id>
        <link href="https://zenn.dev/shittoku_xxx/articles/061ad99166afcc"/>
        <updated>2022-09-23T09:30:00.000Z</updated>
        <summary type="html"><![CDATA[球面調和関数
!
この記事は消化不良の箇所を一部含みますが、他の方の役に立つ部分もあると思うので公開します。分からなかったところは分からなかったと記載しています。私の理解が進んだら記事を改定するかもしれません。間違いなどを見つけた方はコメント欄やTwitterなどでご連絡頂けますと幸いです。


 0. 概要
この記事では、シュレディンガー方程式に従う水素原子の解を描画する、という立場に立ち、球面調和関数(Spherical harmonics function)に関する情報を整理・解説する。水素原子の解のうち、動径方向に関する部分は以前の記事を参考にされたい。なお、水素原子の解の計算...]]></summary>
        <author>
            <name>しっとく</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[macOSにLightGBMにインストールする（legacy-install-failureも解決）]]></title>
        <id>https://zenn.dev/higan96/articles/4d6220e2251f5b</id>
        <link href="https://zenn.dev/higan96/articles/4d6220e2251f5b"/>
        <updated>2022-09-23T08:19:18.000Z</updated>
        <summary type="html"><![CDATA[以下の環境でLightGBMのpython packageをインストールします。
macOS Monterey 12.6
チップ Apple M1
Python 3.10.7 (pyenvでインストール)
pip 22.2.2
GithubのREADMEにYou may need to install wheel via pip install wheel first.とあるのでまずwheelのインストールをします。
pip install wheel
この状態でpip install lightgbmでLightGBMをインストールしようとすると以下のようなエラーが出ます。
Faile...]]></summary>
        <author>
            <name>Norihiko Oba</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pipenv を導入して requirements.txt を利用したパッケージ管理をやめる]]></title>
        <id>https://zenn.dev/k0kishima/articles/8490a552f2fac0</id>
        <link href="https://zenn.dev/k0kishima/articles/8490a552f2fac0"/>
        <updated>2022-09-23T04:18:16.000Z</updated>
        <summary type="html"><![CDATA[前提

作業環境は Mac (macOS Monterey 12.6 Apple M2)

Homebrew が既に使えるようになっていること


pyenvは既にインストールされていること


 requirements.txt を利用する方式の問題点


pip install した後に反映し忘れる
前項の反映に関して、 pip freeze > requirements.txt ってしたら dev dependencies的なパッケージ(フォーマッターやテスティングフレームワークなど開発やテスト関係のパッケージで、本体の実行に必須ではないもの)も全部吐き出される

この兼...]]></summary>
        <author>
            <name>k0kishima</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenAIのWhisperをWindows環境で試す(CUDA環境有り)]]></title>
        <id>https://zenn.dev/en129/articles/ddfb3da6d0fd31</id>
        <link href="https://zenn.dev/en129/articles/ddfb3da6d0fd31"/>
        <updated>2022-09-23T03:03:50.000Z</updated>
        <summary type="html"><![CDATA[試した環境
Python 3.10.5
Windows10 Pro 21H2 (19044.2006)
CPU:Core i9-11900KF
Mem:32GB
GPU:RTX3060 12GB

 CPUで動かす
winget install Git.git
winget install ffmpeg
#パス読み込みのためログアウトor再起動
python -m pip install git+https://github.com/openai/whisper.git
python -m  whisper --help
これで動作すればOK
認識テストに使う英語の音声ファイルをこち...]]></summary>
        <author>
            <name>en129</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tensorflow x Kerasを使ってみた]]></title>
        <id>https://zenn.dev/mimitako/articles/tfxkeras_begin</id>
        <link href="https://zenn.dev/mimitako/articles/tfxkeras_begin"/>
        <updated>2022-09-23T01:18:50.000Z</updated>
        <summary type="html"><![CDATA[Tensorflow x keras を使ってみる
こちらの記事では Tensorflow だけを利用して Iris の分類タスクを実行していました。しかし、Keras を利用する方が多く、また利用が容易であるというメリットがあります（参考）。
そこで、せっかく Tensorflow を学ぶのなら一緒に Keras も学んでみようと思い、使ってみることにしました。(ここでは Keras の Sequential を利用するという意味です。)

 Keras Sequential を利用する
こちらの記事にあるコードを Keras 仕様へ変更します。
https://zenn.dev/...]]></summary>
        <author>
            <name>mimitako</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[KaggleのTitanicをTensorflowで解いてみる]]></title>
        <id>https://zenn.dev/mimitako/articles/kaggle_first</id>
        <link href="https://zenn.dev/mimitako/articles/kaggle_first"/>
        <updated>2022-09-23T01:18:49.000Z</updated>
        <summary type="html"><![CDATA[Kaggle とは
Kaggle は Google が主催の機械学習コンペティションで、様々な課題に対してその精度を競いあうものです。
精度が高ければ、上位チームには懸賞金が出ます。
そんな Kaggle も初心者向けに常時公開してあるタスクがあり、そのひとつが Titanic の生死分類タスクです。
Titanic はあの映画にもなった大型客船のことです。ここに乗船していた人の状況（利用料金、性別、家族構成など）によって生死がどうなったかを予測していきます。

 Tensorflow で分類していく
Tensorflow はニューラルネットワークによるディープラーニングの機械学習ラ...]]></summary>
        <author>
            <name>mimitako</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Raspberry Pi OS(Bullseye)+カメラモジュールV1.3]]></title>
        <id>https://zenn.dev/technicarium/articles/449294af295d5c</id>
        <link href="https://zenn.dev/technicarium/articles/449294af295d5c"/>
        <updated>2022-09-23T00:53:38.000Z</updated>
        <summary type="html"><![CDATA[画質や高機能は不要だったため1000円以下で買えたカメラモジュールV1.3を使ってみました。
https://www.raspberrypi.com/documentation/accessories/camera.html
安易に使用できると思いきや苦戦・・・

 Legacy Cameraの有効化
sudo raspi-config

3を選択

1を選択

はいを選択

了解を選択

はいを選択して再起動

 接続状況確認
vcgencmd get_camera
supported=1 detected=1, libcamera interfaces=0
!
64bitの場合はsu...]]></summary>
        <author>
            <name>テク二カリウム</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[XMLファイルで文字列のみを抽出して処理する方法]]></title>
        <id>https://zenn.dev/nakamura196/articles/93f85e26a3dc42</id>
        <link href="https://zenn.dev/nakamura196/articles/93f85e26a3dc42"/>
        <updated>2022-09-22T11:32:23.000Z</updated>
        <summary type="html"><![CDATA[XMLファイルで文字列のみを抽出して処理する機会がありました。
このニーズに対して、以下のようなスクリプトにより、実現することができました。
soup = BeautifulSoup(open(path,'r'), "xml")
elements = soup.findChildren(text=True, recursive=True)
ポイントは、text=Trueを与えている点で、テキストノードのみを取得することができました。
参考になりましたら幸いです。]]></summary>
        <author>
            <name>nakamura196</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[量子最適化を使ったふるさと納税で得をするプログラム]]></title>
        <id>https://zenn.dev/deeprecommend/articles/46dab7ae9bfb0e</id>
        <link href="https://zenn.dev/deeprecommend/articles/46dab7ae9bfb0e"/>
        <updated>2022-09-22T01:47:23.000Z</updated>
        <summary type="html"><![CDATA[準備

Google Colaboratory（※Jupyter NotebookでもOK）
配布ソースコード（※一からやりたい方は不要）


 使用技術
Python
Qiskit

 やったこと
ふるさと納税上限シミュレーション × 楽天API連携 × 量子コンピューティング × 最適化問題
「ふるさと納税 訳あり」で
楽天APIからふるさと納税返礼品一覧を取得して
組合せ最適化問題のひとつナップサック問題を解く量子アルゴリズム
（QAOA:量子近似最適化アルゴリズム）で
シミュレーションで出した控除上限額までで
最も総重量が重くなるような返礼品の組み合わせを求めて
とにかくふる...]]></summary>
        <author>
            <name>DeepRecommend</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nnabla]特定のレイヤーの勾配計算をさせない方法]]></title>
        <id>https://zenn.dev/nishikawajun/articles/dfefca48024cfd</id>
        <link href="https://zenn.dev/nishikawajun/articles/dfefca48024cfd"/>
        <updated>2022-09-22T01:31:04.000Z</updated>
        <summary type="html"><![CDATA[はじめに
nnablaにおいて、特定の計算からの勾配を伝搬させたくないという状況を実装した時の備忘録。
例えば、L=w(y)\times L_1(x)としたときに、xについてはすべての勾配を伝搬させたいが、yについて、Lの計算における勾配\frac{\partial L}{\partial w}は計算したくないという状況。

 環境
python==3.8.0
nnabla==1.30.0

 実装

 式
\displaystyle L = w(y) \times L_1(x)を次の形で実装してみる。

L_1 = x^2 \ ... \ (1) \\
w = 2y \ ... \...]]></summary>
        <author>
            <name>NishikawaJun</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google Colaboratoryでkmol]]></title>
        <id>https://zenn.dev/pluie/articles/20220921-kmol-getting-started</id>
        <link href="https://zenn.dev/pluie/articles/20220921-kmol-getting-started"/>
        <updated>2022-09-21T16:17:35.000Z</updated>
        <summary type="html"><![CDATA[本記事でわかること

Google Colaboratoryでkmolを実行する方法


 kmolとは
Drug discoveryおよびLife scienceのための機械学習ライブラリで、グラフベースの推論モデル、説明可能AI、差分プライバシーなどの特徴的な機能を有する。
https://github.com/elix-tech/kmol

 前提条件


conda環境を前提とする。公式ドキュメントではconda環境を前提としてインストール方法が記載されている、かつ_libcc_mutexがconda-forgeにしか見つからなかったのでcondaを用いる


 Google...]]></summary>
        <author>
            <name>pluie</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django-DRFでFileField(ImageField)のユニットテストどうするのか]]></title>
        <id>https://zenn.dev/yuya_morimoto/articles/a238e7861ce2ba</id>
        <link href="https://zenn.dev/yuya_morimoto/articles/a238e7861ce2ba"/>
        <updated>2022-09-20T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[始めに
Django、DjangoRestFrameworkを使用したAPI開発後、ファイルアップロード(POST, PUT)をどのように実装するのか、以外とハマったので備忘兼共有
※コードベースで行います
!
トークン認証想定です
djangoのself.clientではなくrest_framework.testのAPIClientの方だと動くことがあるので注意


 環境
django==3.2.x
djangorestframework==3.13.1

 ViewでParserを設定

file_upload_api_view.py

class FileUploadAPIV...]]></summary>
        <author>
            <name>yuya_morimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Intro2DL : NNにおける損失関数]]></title>
        <id>https://zenn.dev/yoshida0312/articles/3b757e81ee42ec</id>
        <link href="https://zenn.dev/yoshida0312/articles/3b757e81ee42ec"/>
        <updated>2022-09-20T12:40:26.000Z</updated>
        <summary type="html"><![CDATA[損失関数
ここでは、さまざまなタスクに使用される損失関数を見ていきます。
import os
import json
import math
import japanize_matplotlib
import numpy as np 
import time
import copy
import requests
from io import StringIO

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import cm
import seaborn as sns
sns.set()

f...]]></summary>
        <author>
            <name>よしだ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【機械学習・組み合わせ最適化】最適化問題について活用法を考慮して解説します]]></title>
        <id>https://zenn.dev/deeprecommend/articles/04d7f2c79f9afc</id>
        <link href="https://zenn.dev/deeprecommend/articles/04d7f2c79f9afc"/>
        <updated>2022-09-20T04:57:54.000Z</updated>
        <summary type="html"><![CDATA[最適化問題とは？
Wikipediaいわく、
!
最適化問題とは、特定の集合上で定義された実数値関数または整数値関数についてその値が最小（もしくは最大）となる状態を解析する問題である。こうした問題は総称して数理計画問題、数理計画とも呼ばれる。最適化問題は、自然科学、工学、社会科学などの多種多様な分野で発生する基本的な問題の一つであり、その歴史は18世紀の変分問題に遡る。1940年代に線型計画法が登場して以来、理論的な研究や数値解法の研究が非常に活発に行われ、その応用範囲はいろいろな分野に拡大されていった。実世界の現象の数理的な解析に関わる問題や抽象的な理論の多くをこの最適化問題という...]]></summary>
        <author>
            <name>DeepRecommend</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[wsl2でubuntu Cloud Imageを使う]]></title>
        <id>https://zenn.dev/backalley/articles/1b348e44f332f4</id>
        <link href="https://zenn.dev/backalley/articles/1b348e44f332f4"/>
        <updated>2022-09-20T04:40:45.000Z</updated>
        <summary type="html"><![CDATA[wslでubuntuを使用した際の備忘録
wsl2を利用できるようにしておく

 参考サイト
WSL2とVSCodeで欲しい環境を好きなだけ作る - いろいろ備忘録日記

 wsl2にubuntu Cloud Imageをいれる

 現在の一覧を表示
wsl -l -v

 Ubuntu Cloud Imageをダウンロードする
Ubuntu Cloud Images - the official Ubuntu images for public clouds, Openstack, KVM and LXD

 イメージをインポートする
wsl --import pyenv .\Docu...]]></summary>
        <author>
            <name>backalley</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Qdrant ベクトル検索エンジン - 前編]]></title>
        <id>https://zenn.dev/tfutada/articles/acf8adbb2ba5be</id>
        <link href="https://zenn.dev/tfutada/articles/acf8adbb2ba5be"/>
        <updated>2022-09-20T00:55:50.000Z</updated>
        <summary type="html"><![CDATA[この記事はオープンソースのベクトル検索エンジンQdrant(クワッドラント)の使い方と類似記事検索についての前編になります。

初心者向けにコンセプトの理解を優先し、難しい用語の使用はあえて避けています。

https://qdrant.tech/

 使用するもの


Qdrant オープンソースベクトル検索エンジン (Rust実装)

GiNZA spaCy ドキュメントのベクトル化

livedoorニュースコーパス ライブドアのニュース記事 (株式会社ロンウィット)
Python 3.10


 Qdrantとは？
オープンソースのRust製ベクトル検索エンジンです。クライアント...]]></summary>
        <author>
            <name>TF</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[異常検知技術を比較してみた（ルールベース, HLAC, PatchCore）]]></title>
        <id>https://zenn.dev/shinue/articles/40560352dcf70b</id>
        <link href="https://zenn.dev/shinue/articles/40560352dcf70b"/>
        <updated>2022-09-20T00:05:42.000Z</updated>
        <summary type="html"><![CDATA[はじめに
異常検知AIソフトウェア・クラウドサービスを提供しているアダコテックでエンジニアをしているshin-ueです！
今回は、弊社内で保有する電子部品を撮像した画像データに対して、異常検知を実施してみます。


 そもそも異常検知って？
異常検知における異常とは、みなさん何を思い浮かべますか？
例えば、毎日休まず周期的な信号を出力してくれるシステムが一家に一台あったとします。
機械とよくケンカする僕みたいな人間は「ほんとうに周期的な信号だしてるのか！？」と疑いをかけてモニタリングしてしまいます。

t=9~11の出力値がいつもと違う変化をしているぞ・・・不良品だコイツこのやろう！...]]></summary>
        <author>
            <name>shin-ue</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonでVSCodeをコーディングする際のおすすめの基本設定・拡張機能]]></title>
        <id>https://zenn.dev/motokoike/articles/2520a473887adc</id>
        <link href="https://zenn.dev/motokoike/articles/2520a473887adc"/>
        <updated>2022-09-19T16:08:52.000Z</updated>
        <summary type="html"><![CDATA[1.基本設定編
VSCode（Visual Studio Code）自体のおすすめの基本設定を紹介します。
!
デフォルトは、無効化されているため、機能を有効にする必要があります。


 1.1 Insert Final Newline
ファイル保存時にファイルの最終行は改行を必須にする。


 1.2 Trim Trailing Whitespace
ファイル保存時に行末の空白（半角スペース）を自動で削除する。


 2.拡張機能編
VSCode（Visual Studio Code）自体のおすすめの拡張機能を紹介します。

 2.1 Japanese Language Pack ...]]></summary>
        <author>
            <name>元小池</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PLATEAUのCityGMLに所在（建物の住所）を追加するスクリプトを作った。]]></title>
        <id>https://zenn.dev/soh92/articles/9863ae6a511f72</id>
        <link href="https://zenn.dev/soh92/articles/9863ae6a511f72"/>
        <updated>2022-09-19T08:45:36.000Z</updated>
        <summary type="html"><![CDATA[経緯度を逆ジオコーディング
GoogleMaps APIのreverse_geocodeを使って経緯度から所在を取得します。
  googleapikey = 'apikey'
  gmaps = googlemaps.Client(key=googleapikey)

  geocord = lat + ", " + lon

  results = gmaps.reverse_geocode((geocord), language='ja')
  add = [d.get('formatted_address') for d in results]
  list_add = a...]]></summary>
        <author>
            <name>ソウ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Poetryをwindows10にinstallしてみた]]></title>
        <id>https://zenn.dev/pejpo/articles/5080662546764c</id>
        <link href="https://zenn.dev/pejpo/articles/5080662546764c"/>
        <updated>2022-09-19T08:44:25.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Pythonで書いたプログラムをパッケージにする際、pyproject.tomlを使う方法が、今後取り入れられていくということを知りました。また、パッケージマネージャとしてPoetryを使い、pyproject.tomlを作成できるということも判りました。
そこでまず、Poetryをインストールしようとしたのですが、window10へのインストールで、引っかかったところがあったので、メモとして、やったことを残します。記事中、環境変数の設定に言及していますが、他への影響もあると思うので、ご自身の判断でお願いします。

 概要
英語ではありますが、公式サイトを見ながらインストー...]]></summary>
        <author>
            <name>Dr_O</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[transformersのtutorialを読んでみた - part3]]></title>
        <id>https://zenn.dev/python3654/articles/9693f6a56beeea</id>
        <link href="https://zenn.dev/python3654/articles/9693f6a56beeea"/>
        <updated>2022-09-19T06:39:19.000Z</updated>
        <summary type="html"><![CDATA[はじめに
https://huggingface.co/docs/transformers/training

 ファインチューニング
事前学習済みのモデルを使用することには大きな利点があります。 計算コストを削減し、最先端のモデルをゼロから学習することなく使用できます。Transformersを使うと、幅広いタスク向けの何千もの事前学習済みモデルにアクセスできます。事前学習済みのモデルを使用する場合、タスクに固有のデータセットでモデルを学習します。これはファインチューニングとして知られており非常に有用な手法です。

 データセットの準備
事前学習済みのモデルをファインチューニングす...]]></summary>
        <author>
            <name>とりごん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[都市伝説pythonのfor文とmap()の処理速度は全然違う説]]></title>
        <id>https://zenn.dev/jim_soros/articles/4d10ce4b617198</id>
        <link href="https://zenn.dev/jim_soros/articles/4d10ce4b617198"/>
        <updated>2022-09-19T05:54:38.000Z</updated>
        <summary type="html"><![CDATA[●結論
map()よりもfor文が全てにおいて僅かに早い。(python3.10)

・検証A、1万字の文字列をジェネレーターにした後、繋げて文字列を作る(abc...➡abc...)
・検証B、1万字の文字列をジェネレーターにした後、@文字を挟んで繋げて文字列を作る(abc...➡a@b@c@...)
それぞれに対して
・検証1、for文 {VS} map()
・検証2、for文のネスト(検証A/Bを10回繰り返す) {VS} map()のネスト(検証A/Bを10回繰り返す)
・検証3、for文の2重ネスト(検証A/Bを10回10回繰り返す) {VS} map()の2重ネスト(検証A/...]]></summary>
        <author>
            <name>jim_soros</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】これは驚いた！Gradioを使えば機械学習アプリを超爆速で実装できる！！]]></title>
        <id>https://zenn.dev/robes/articles/fcbda5d2dc1362</id>
        <link href="https://zenn.dev/robes/articles/fcbda5d2dc1362"/>
        <updated>2022-09-19T05:52:33.000Z</updated>
        <summary type="html"><![CDATA[はじめに
機械学習アプリを超爆速で作ることができるライブラリーのご紹介です。
Gradioというライブラリーになります。
 
https://gradio.app/
 
百聞は一見にしかずで、早速、実装してみましょう。
 

 <実装するアプリの内容>
名前（●●）を入力したら、Hello ●●！と返してくれるアプリの実装です。
 
!
GoogleColaboratoryで実装できます。

 

 gradioのインストール
!pip install gradio

 実装
たった、これだけです。
画像系などにも対応しています。詳細は冒頭のリンクをご覧ください。
imp...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【自然言語処理】【Python】トピックモデル（LDA）を実装し、PyLDAvisを使ってインタラクティブに可視化する]]></title>
        <id>https://zenn.dev/robes/articles/424cb97503d16e</id>
        <link href="https://zenn.dev/robes/articles/424cb97503d16e"/>
        <updated>2022-09-19T05:21:10.000Z</updated>
        <summary type="html"><![CDATA[はじめに
SNSでのツイートや、ECサイトでの購買ビューから、消費者の行動や嗜好を分析するの使われる手法として、トピックモデルがあります。
ここでは、トピックモデルのうち最も有名なLDA(潜在的ディリクレ配分法） について、簡単な概要とともにPythonを使ってどのように実装していくのかを紹介していきます。
また実装結果について、PyLDAvisやワードクラウドを使って可視化していきたいと思います。
 

 トピックモデル（LDA)とは
トピックモデルとは、文書が複数の潜在的なトピックから確率的に生成されると仮定したモデルです。トピックモデルでは、トピックごとに単語の出現頻度分布を想...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【個人開発】文学作品の冒頭を読んで作者を当てる Web サービスを開発しました]]></title>
        <id>https://zenn.dev/kangetsu_121/articles/d99e8306c0d895</id>
        <link href="https://zenn.dev/kangetsu_121/articles/d99e8306c0d895"/>
        <updated>2022-09-19T05:18:10.000Z</updated>
        <summary type="html"><![CDATA[文学作品の冒頭を読んで作者を当てる Web サービス、「文豪推理」を友人の @kokokocococo555 さんと開発しました。

文豪推理問題

Twitterシェア時の OGP 表示
ユーザー登録などはなくすぐ遊べるので、https://bungo-suiri.tailoor.dev からぜひ遊んでみてください！
2人とも本職 PG ではなく、試行錯誤しながら開発しました。
初めてのまともな個人開発で学びが多くあったので、サービス紹介と経験の還元を目的として本記事にまとめます。
!
開発本職の方から見ると改善点など多々あるかと思いますが、記事のコメント、コンタクトフォームなどからご...]]></summary>
        <author>
            <name>kangetsu_121</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Raspberry Piと人感センサーでLINE通知]]></title>
        <id>https://zenn.dev/technicarium/articles/d836fc075748af</id>
        <link href="https://zenn.dev/technicarium/articles/d836fc075748af"/>
        <updated>2022-09-19T04:56:13.000Z</updated>
        <summary type="html"><![CDATA[Lチカの動作確認もできたので次の目標であった人感センサー（焦電型赤外線センサー）で検知したらLine通知をさせてみました。
!
【注意】

GPIOとセンサーの間に保護抵抗を入れていません、本来は入れずべきかも。
検証プログラムのため単純な無限ループにしています。
プログラムは例外処理をしていません。
終了は強制終了させてしまうのでGPIOのcleanup()を呼び出していません。
requestパッケージとRPi.GPIOパッケージはインストール済



 Raspberry Piと焦電型赤外線センサーの接続

 ジャンパーワイヤー作成と接続

使用した焦電型赤外線センサーとの接続は3...]]></summary>
        <author>
            <name>テク二カリウム</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[機械学習の損失関数を見てみる]]></title>
        <id>https://zenn.dev/mimitako/articles/loss_function</id>
        <link href="https://zenn.dev/mimitako/articles/loss_function"/>
        <updated>2022-09-19T04:28:19.000Z</updated>
        <summary type="html"><![CDATA[機械学習と損失関数
機械学習における損失関数は精度と対を成す存在です。精度を上げるなら損失関数を小さくすることが求められます。
でも、経験が少ない私のような初心者はほんとかな？とひねくれて考えるものです。
じゃぁ、見てみようじゃないかということで下記の記事で出てきた結果を元に、傾向がちゃんとあるのかどうかを確認してみます。
https://zenn.dev/mimitako/articles/c4085419e963b5
https://zenn.dev/mimitako/articles/random_statement

 損失関数の結果を確認する。
random_stateを0...]]></summary>
        <author>
            <name>mimitako</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS ALBのアクセスログをPandasで集計する]]></title>
        <id>https://zenn.dev/nmemoto/articles/analyze-alb-access-log-with-pandas</id>
        <link href="https://zenn.dev/nmemoto/articles/analyze-alb-access-log-with-pandas"/>
        <updated>2022-09-19T00:16:46.000Z</updated>
        <summary type="html"><![CDATA[AWS ALBのアクセスログをPandasを使い、ALBが返したレスポンスのステータスコード別分間件数、ALBの背後にあるターゲットグループがALBに返したステータスコード別分間件数、ターゲットグループの処理時間の分間パーセンタイル値を集計するためのPythonスクリプトを作成しました。

 Pythonスクリプトの説明
この集計を行うために作成したスクリプトを分割して説明します。

 ログをデータフレームに変換
以下のスクリプトでログをデータフレームとしました。なお、集計したい複数のアクセスログは予めスクリプト内のdir_pathに格納している前提としています。
ALBのアクセスログの...]]></summary>
        <author>
            <name>nmemoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[random_statementを考えてみる]]></title>
        <id>https://zenn.dev/mimitako/articles/random_statement</id>
        <link href="https://zenn.dev/mimitako/articles/random_statement"/>
        <updated>2022-09-18T23:51:13.000Z</updated>
        <summary type="html"><![CDATA[random_statement とは
機械学習であるデータから訓練データとテストデータへ分割する際に sikit-learn の train_test_split を利用することが多いと思います。
ここでパラメータとして random_state というものが出てくるのですが、みんなどうやって決めているの？と疑問に思うことが多々あります。
random_state は乱数の発生機ですが、seed 値を与えると、毎回同じ乱数を発生させるため再現性が得られます。
ランダムですがカオスではないので、ある法則に従っていると思って良さそうです。
ここで考えられるのが、random_state...]]></summary>
        <author>
            <name>mimitako</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tensorflowを使ってみた]]></title>
        <id>https://zenn.dev/mimitako/articles/c4085419e963b5</id>
        <link href="https://zenn.dev/mimitako/articles/c4085419e963b5"/>
        <updated>2022-09-18T14:14:15.000Z</updated>
        <summary type="html"><![CDATA[Tensorflow を使ってみる
気になってはいたけど、使ったことがないんです。ということで、初めて Tensorflow を使ってみましたので記録も兼ねてここに記載します。

 使用したライブラリ
今回使用したライブラリは以下のとおりです。
pandas 1.2.3
numpy 1.20.2
tensorflow 2.10.0
scikit-learn 1.0.2
seaborn 0.11.2

 タスクを定義
今回は分類タスクである Iris ことあやめの分類を行います。この分類タスクは調べればすぐに出てきますので詳細は割愛します。まずは、基本的な流れを学ぶために、とりあえず走...]]></summary>
        <author>
            <name>mimitako</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Step FunctionsのMap Stateによる動的並列処理の簡単な実装]]></title>
        <id>https://zenn.dev/koya6565/articles/9f05924666fbd2</id>
        <link href="https://zenn.dev/koya6565/articles/9f05924666fbd2"/>
        <updated>2022-09-18T14:00:28.000Z</updated>
        <summary type="html"><![CDATA[（単なる偶然ですが）ちょうど3年前の9/18、dynamic parallelism in workflowsがStep Functionsでサポートされました。それ以前は、index参照したりChoiceやWaitでループ処理したり並列実行するためにもう一つワークフローを起動したり、Step Functions(以下、SFn)による動的な並列処理実装はまあまあ手間がかかりました。
https://aws.amazon.com/about-aws/whats-new/2019/09/aws-step-functions-adds-support-for-dynamic-paralleli...]]></summary>
        <author>
            <name>T.S</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[StableDiffusionのいろんなWebUIたちをColabで使えるようにしてみた]]></title>
        <id>https://zenn.dev/ddpn08/articles/stablediffusion-webui-colab</id>
        <link href="https://zenn.dev/ddpn08/articles/stablediffusion-webui-colab"/>
        <updated>2022-09-18T10:22:35.000Z</updated>
        <summary type="html"><![CDATA[こんにちは、だだっこぱんだです。
自分は普段、Colab上でwebuiを立ち上げてStableDiffusionで遊んでいます。
しかし、モデルが変えにくかったり引数をいちいち記入するのが面倒だったりしたので、使いやすいようにノートブックを作りました。この記事では、その使い方をざっくり紹介します。

 作ったもの
StableDiffusionのいろんなwebuiを好きなモデルで簡単に実行できるColab用のノートブックをつくりました。

 リポジトリ
👇こちらで公開しています
https://github.com/ddPn08/stable-diffusion-webui-colab
...]]></summary>
        <author>
            <name>だだっこぱんだ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FastAPIでFeatureFlagを使ってみる]]></title>
        <id>https://zenn.dev/nishikoh/articles/f656f07bedf7eb</id>
        <link href="https://zenn.dev/nishikoh/articles/f656f07bedf7eb"/>
        <updated>2022-09-18T07:03:53.000Z</updated>
        <summary type="html"><![CDATA[はじめに
トランクベースの開発でCD(デリバリー/デプロイ)を良い感じにする方法がないか調べていたところFeatureFlagを試したくなりました。私が普段使っているWebAPIフレームワークのFastAPIでFeatureFlagを使ってみます。

 fastapi-featureflags
FastAPI用に開発されたfastapi-featureflagsを使っていきます。これを使うことでFastAPIのエンドポイントからFeatureFlagの切り替えが出来ます。FeatureFlagの数がN個ある場合、何の工夫もしなければ2のN乗個の環境を用意して検証しますが、管理用のエン...]]></summary>
        <author>
            <name>nishikoh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[利用サービスの残ライセンスをAPIで確認する]]></title>
        <id>https://zenn.dev/cazziwork/articles/885e9f88ccf3fd</id>
        <link href="https://zenn.dev/cazziwork/articles/885e9f88ccf3fd"/>
        <updated>2022-09-17T20:42:15.000Z</updated>
        <summary type="html"><![CDATA[この記事はある日急に「やばい、ライセンスが足りない！」「今から発注しても間に合わない！」なんてことにならないよう、APIで様々なSaaSのライセンスをチェックする方法についてまとめたものです。
なお、コードサンプルはすべてPythonで、対象サービスは事前にライセンスを追加しないと利用できないサービスが中心となっています。

 GitHub Enterprise
GitHubはREST APIでは取得ができないため、GraphQL APIで取得する必要があります。GraphQL APIについては こちら を、ライセンス数取得用のAPIについては こちらをを参照。

 リクエストサンプル
...]]></summary>
        <author>
            <name>Takeshi Haraguchi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SageMaker Notebook 上で PyTorch の学習を回す]]></title>
        <id>https://zenn.dev/kasega0/articles/dd51b63071ebea</id>
        <link href="https://zenn.dev/kasega0/articles/dd51b63071ebea"/>
        <updated>2022-09-17T16:55:09.000Z</updated>
        <summary type="html"><![CDATA[いままでEC2でゴリゴリ学習させていたものをSageMaker Notebookに移植することになり、それなりに苦労したので自分用のテンプレート作成も兼ねてハマりどころをまとめます。

 今回作成した雛型
https://github.com/kasegao/sagemaker-sample

 概要
基本的にはこれまで学習用に作成していたプログラムの80-90%ぐらいはそのまま流用できます。綺麗に実装していれば既存プログラムにはほぼ手を入れずに移植できると思います。残りはSageMakerから既存スクリプトを呼び出すための玄関部分と、データ入出力用のS3とのやり取りスクリプトさえ用意し...]]></summary>
        <author>
            <name>かせがお</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Intro2DL : NNのOptimizerとその特徴]]></title>
        <id>https://zenn.dev/yoshida0312/articles/a5dc08bb594ac1</id>
        <link href="https://zenn.dev/yoshida0312/articles/a5dc08bb594ac1"/>
        <updated>2022-09-17T12:41:03.000Z</updated>
        <summary type="html"><![CDATA[最適化
今回はNNを最適化する手法を確認します。
NNが深くなるほど、ネットワークを通して安定的な勾配を伝播させることが重要になります。そうしないと、勾配が消滅したり爆発したりする可能性があるためです。そのため、今回は前回の重みの初期化に引き続き、最適化に関して見ていきます。
import os
import json
import math
import japanize_matplotlib
import numpy as np 
import time
import copy

import matplotlib.pyplot as plt
from matplotlib im...]]></summary>
        <author>
            <name>よしだ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mattermost用Bot作成(slackbot利用)]]></title>
        <id>https://zenn.dev/kiyasu7028/articles/af72096f4555cd</id>
        <link href="https://zenn.dev/kiyasu7028/articles/af72096f4555cd"/>
        <updated>2022-09-17T12:12:17.000Z</updated>
        <summary type="html"><![CDATA[Mattermostでもslackbotを使うと通知用Botを簡単に作れます。
というわけでいきなり実践編です。

 内向きのWebhookを作成する
Web画面から作るのはいろんなところで紹介されているので、今回はあえてコマンドで作ってみようと思います。
参考ページ：mmctl webhook create-incoming
必須オプションはchannel(defaultの投稿先) と user(defaultの名前) のようです。
bitnami@debian:~/python3$ mmctl webhook create-incoming
Error: required flag(...]]></summary>
        <author>
            <name>kiyasu7028</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Blender] Pythonスクリプトでカメラデバイスの固定台となる3Dモデルを作る]]></title>
        <id>https://zenn.dev/zgw426/articles/d3cde75282511c</id>
        <link href="https://zenn.dev/zgw426/articles/d3cde75282511c"/>
        <updated>2022-09-17T10:51:50.000Z</updated>
        <summary type="html"><![CDATA[カメラデバイス固定台の3Dモデルを作ります
3DCGソフトのBlenderで、Pythonスクリプトを使い3Dオブジェクトを作成します。
作成したオブジェクトは主に3Dプリンターで造形することを目的にしています。
以下の動画はBlenderで3Dオブジェクトを作成し3Dプリンターで造形するまでのながれです。
https://youtu.be/-drzycYZWME
3Dオブジェクトの作成/移動/加工/削除の全ての制作工程をPythonスクリプトにしているので、スクリプトの再実行で同じものを作れます。スクリプトをテキストデータで保存すればgitで管理できるのも利点です。

 スクリプト...]]></summary>
        <author>
            <name>suo-takefumi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【自然言語処理】【Python】TF-IDFを理解しよう]]></title>
        <id>https://zenn.dev/robes/articles/241f6c3fac1486</id>
        <link href="https://zenn.dev/robes/articles/241f6c3fac1486"/>
        <updated>2022-09-17T10:22:44.000Z</updated>
        <summary type="html"><![CDATA[はじめに
古くから、自然言語処理の世界では、単語をスコアリングする手法として、TF-IDFというのがあります。
古くからあるにもかかわらず、普通に暮らしていると馴染みのない概念だと思います。かく言う私も、Pythonで自然言語処理を学ぶまでは名前すら聞いたことがありませんでした。
ここでは、そんなTF-IDFについて、はじめて触れる方にも分かるように概念を丁寧に説明するとともに、Pythonを使った実装方法についてご紹介していきたいと思います。
 

 🐱TF-IDFとは
一言でいうと、ある文書の含まれる単語の重要度を示す指標です。文書の中で重要な単語をとらえることで、その文書の特徴...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSVをインメモリで生成しS3にアップロードするメモ]]></title>
        <id>https://zenn.dev/chari/articles/20220917_im-mem_csv_generation_and_upload</id>
        <link href="https://zenn.dev/chari/articles/20220917_im-mem_csv_generation_and_upload"/>
        <updated>2022-09-17T07:24:55.000Z</updated>
        <summary type="html"><![CDATA[CSVをインメモリで生成しS3にアップロードするメモ
import io 
import csv
import boto3

s3 = boto3.client('s3')
bucket = 'sample-bucket'
key = 'sample.csv'

buff = io.StringIO()
writer = csv.DictWriter(f, fieldnames=['A', 'B', 'C'])

# CSVに関連する処理
writer.writeheader()
writer.writerow({"A": "a", "B": "b", "C": "c"})

# S...]]></summary>
        <author>
            <name>wtkmn</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[djangoのdbにアクセスするような変数をpytest.mark.parametrizeでパラメータ化することはできない]]></title>
        <id>https://zenn.dev/yutake27/articles/d55926de49d0c8</id>
        <link href="https://zenn.dev/yutake27/articles/d55926de49d0c8"/>
        <updated>2022-09-17T06:01:30.000Z</updated>
        <summary type="html"><![CDATA[これはng
@pytest.mark.django_db
class TestUserViewSet:
    @pytest.mark.parametrize(
        "user",
        [
            UserAFactory(),
            UserBFactory(),
            UserCFactory(),
            UserDFactory(),
        ],
    )
    def test_user_can_do(self, user):
        user.do()
代わりに...]]></summary>
        <author>
            <name>yutake27</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Matplotlibで描画したグラフをOpenCVでARマーカーにマッピング]]></title>
        <id>https://zenn.dev/zgw426/articles/adf1cc41e953bd</id>
        <link href="https://zenn.dev/zgw426/articles/adf1cc41e953bd"/>
        <updated>2022-09-17T02:40:37.000Z</updated>
        <summary type="html"><![CDATA[MatplotlibのグラフでAR
Matplotlibで描画したグラフをOpenCVでARマーカーにマッピングすることができました。

 デモ
02_matplot2d_no-transparency.pyのデモ
Matplotlibの2DグラフをARマーカーにマッピングしています。
https://youtu.be/t4DyeLGA0gk

03_matplot3d_no-transparency.pyのデモ
Matplotlibの3DグラフをARマーカーにマッピングしています。マーカーの傾きに合わせて3Dグラフの視点を変更しています。
https://youtu.be/vzQA...]]></summary>
        <author>
            <name>suo-takefumi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで排他ロック可能な共有メモリライブラリを作った]]></title>
        <id>https://zenn.dev/quag_cactus/articles/6d09787323d1b1</id>
        <link href="https://zenn.dev/quag_cactus/articles/6d09787323d1b1"/>
        <updated>2022-09-17T02:26:26.000Z</updated>
        <summary type="html"><![CDATA[概要
複数の独立したPythonプロセス間の通信ができる高水準のモジュール IPMMAP を作成しました。
https://github.com/quag-cactus/ipmmap

IPMMAPでは、mmap（標準モジュール）を用いて共有メモリ領域を使ったプロセス間通信を提供します。
クラスベースのデータ構造を採用することで、可読性を高めています。
fastainerを使用してプロセス間排他ロックを実装することで、安全な共有メモリへのアクセスを実現しています。


 背景と要件
とあるプロジェクトで、複数のpythonプロセスを連携して動作させる必要が出てきました。連携いに際して...]]></summary>
        <author>
            <name>QuagCactus</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AI に絵を描かせる方法を誰よりも丁寧に説明するYoutube動画を投稿した【Stable  Diffusion】]]></title>
        <id>https://zenn.dev/yoshiishunichi/articles/2542500bb8f81d</id>
        <link href="https://zenn.dev/yoshiishunichi/articles/2542500bb8f81d"/>
        <updated>2022-09-16T14:59:30.000Z</updated>
        <summary type="html"><![CDATA[動画
こちらの動画の解説に使っている記事です。ぜひ見てください。
https://youtu.be/AlVLv4L-zeQ
動画媒体の方がコードとか触ったことない人もとっつきやすいと思ったので Youtube に投稿してみました。
頑張って喋ったので Zenn の読者さんも良かったら見てみてください。

 内容
最近流行りの Stable Diffusion で、誰でも簡単に AI に絵を描かせてみましょう。
プログラミングがわからない人でもできるように、頑張って説明してみます。

 Stable Diffusion って何？

Stable Diffusionは、オープンソースとし...]]></summary>
        <author>
            <name>yoshiishunichi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[PyTorch] Torchでもガウス過程回帰したい、専用ライブラリなしで、ついでにハイパーパラメータを最適化する]]></title>
        <id>https://zenn.dev/mory22k/articles/afff58b77e164a</id>
        <link href="https://zenn.dev/mory22k/articles/afff58b77e164a"/>
        <updated>2022-09-16T14:25:08.000Z</updated>
        <summary type="html"><![CDATA[前回: https://zenn.dev/mory22k/articles/e3222d02724251
簡単なガウス過程回帰モデルを PyTorch で実装します。
from matplotlib import pyplot as plt
import torch
import seaborn as sns

 ガウス過程回帰モデル
「回帰モデル」は、ある入出力データをもとに、欠落しているデータの補完 や、データがない領域の出力値の予測 などを行うモデル全般を指すものです。その中でもガウス過程回帰モデルは出力値を点推定ではなくベイズ推定の枠組みで柔軟に予測するモデルです。

 ガウス過...]]></summary>
        <author>
            <name>mory22k</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[JQuants APIを用いて日本最大の株式分析コンペで準優勝した決算評価モデルを動かす方法]]></title>
        <id>https://zenn.dev/gamella/articles/bdd980d4929a90</id>
        <link href="https://zenn.dev/gamella/articles/bdd980d4929a90"/>
        <updated>2022-09-16T04:46:33.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こちらは先日行われたマケデコ(discord: https://discord.com/invite/xg6P5RXwaa)のキックオフイベントで行ったセッションの内容を補足するブログです。こちらマケデコ内でセッションに参加できないが、資料を公開してほしいというリクエストを受け、北山の発表部分について記載しました(UKIさんのAsk me anythingセッションは残念ながら公開予定はないです)。
https://mkdeco.connpass.com/event/259046/
本セッションでは、 J-Quants API ベータ版を使用して、J-Quantsファンダメ...]]></summary>
        <author>
            <name>tomo@Alpaca</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenCVで画像内の「最頻色」を取得する]]></title>
        <id>https://zenn.dev/kazaki/articles/4bc99a27e33d24</id>
        <link href="https://zenn.dev/kazaki/articles/4bc99a27e33d24"/>
        <updated>2022-09-16T04:20:34.000Z</updated>
        <summary type="html"><![CDATA[画像内の「最も多くの面積を占める色」を取得したく、考案したのがRGB全ての最頻値を取るというやり方でした。
BGRを3byte分の文字列に結合してstatistics.mode()で最頻値を取得してRGBそれぞれに分解し直してます。
一見同じ色に見えても、webカメラからの画像ソースだったりするとRGB値全てがキレイに揃わないことも多いですが、
inRange()で範囲を指定するときその基準となる色には使えそうです。
そのへんの事情を考慮すると本当はこういうのはクラスタリングで取得するのが最適なんですかね？🤔
もっとうまい実装法を知りたいです。
import cv2
import num...]]></summary>
        <author>
            <name>菊谷　知真</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Intro2DL：NNにおける重みの初期化方法]]></title>
        <id>https://zenn.dev/yoshida0312/articles/c2d3f2af82eae8</id>
        <link href="https://zenn.dev/yoshida0312/articles/c2d3f2af82eae8"/>
        <updated>2022-09-15T14:29:32.000Z</updated>
        <summary type="html"><![CDATA[初期化
今回はNNを初期化する手法を確認します。
NNが深くなるほど、ネットワークを通して安定的な勾配を伝播させることが重要になります。そうしないと、勾配が消滅したり爆発したりする可能性があるためです。そのため、今回は重みの初期化に関して見ていきます。
import os
import json
import math
import japanize_matplotlib
import numpy as np 
import time

import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

from tqdm...]]></summary>
        <author>
            <name>よしだ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Gooble Colab】Stable DiffusionをFine Tuningして、あくたんを生成してみた!]]></title>
        <id>https://zenn.dev/kwashizzz/articles/ml-stable-diffusion-colab-fn</id>
        <link href="https://zenn.dev/kwashizzz/articles/ml-stable-diffusion-colab-fn"/>
        <updated>2022-09-15T14:00:55.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは、わっしーです。最近、画像生成のアプリやデモが流行って、めっちゃ試したくなりますよね。私も、実際に動かし、あくたんこと湊あくあさんの画像を用いてFineTuningしてみました。あくたんの、チャンネル登録よろしくお願いします。
以下、生成した画像ですが、どうでしょうか！めっちゃすごくて感動です。特にお気に入りは、真ん中左の、ちょっと生意気なあくたんの画像です。

画質がいいやつも置いときますね。

実際には、ランダムシードを変更しつつ、何百枚も生成して、よかったものを選択しています。
本記事では、自前で収集した画像群を用いてFineTuningする方法を紹介します...]]></summary>
        <author>
            <name>わっしー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[BlenderでUnity用にアニメーションのみExportするスクリプト]]></title>
        <id>https://zenn.dev/gansoishiyaki/articles/353d1e0daec2a9</id>
        <link href="https://zenn.dev/gansoishiyaki/articles/353d1e0daec2a9"/>
        <updated>2022-09-15T13:41:52.000Z</updated>
        <summary type="html"><![CDATA[ターミナルからBlenderを実行することによって、ログも出力させる
cd 保存したいディレクトリ
/Applications/Blender.app/Contents/MacOS/Blender
# bpyインポート
import bpy

FILE_NAME = "animation.fbx"

# FBXモデルをエクスポートする（メッシュオブジェクト指定）
def export_animation():
    """
    Export FBX file only animation for Unity.
    """

    # FBXインポート
    # bpy.op...]]></summary>
        <author>
            <name>ふぇ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pytest で requests の Retry・Timeout設定 のテストしたい]]></title>
        <id>https://zenn.dev/t_zomu/articles/770eea7f4848ca</id>
        <link href="https://zenn.dev/t_zomu/articles/770eea7f4848ca"/>
        <updated>2022-09-15T12:21:31.000Z</updated>
        <summary type="html"><![CDATA[はじめに
HTTPクライアントとしてよく利用される requests ではリトライ・タイムアウトの設定が当然あります。通常のロジック開発においては、あまりそういうケースはないのでしょうが、たまにリトライやタイムアウトの設定をUnitTestでテストしたいと思うことがありました。
requests 自体を requests_mock などでMock化することはよくあるかもしれませんが、それではテストが行えません。こんなことはHTTPClientを実装するとき以外発生しないのかもしれませんが、メモとして残します。

 pytest-httpserver
https://pytest-ht...]]></summary>
        <author>
            <name>takashno</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[S3への通信を許可するネットワークACLを動的に更新する]]></title>
        <id>https://zenn.dev/jkoba/articles/c6b76098a7bd75</id>
        <link href="https://zenn.dev/jkoba/articles/c6b76098a7bd75"/>
        <updated>2022-09-15T09:08:34.000Z</updated>
        <summary type="html"><![CDATA[どうしてもミニマムな通信に絞りたい時の技

 背景
社内の古き良き審査ルールではネットワークACLに 0.0.0.0/0 のAllowがあると無条件に怒られる。
セキュリティグループやその他諸々の手段で制御していても……
クローズドなVPCのCodeBuildからS3にログを出力させる必要があるが、CodeBuildではS3のインターフェースVPCエンドポイントを指定する方法がない。
ゲートウェイVPCエンドポイント経由でS3に接続させたいが、S3のIPアドレスのCIDRが時々変わる……

 実現すること

社内ルールでギルティ扱いされるネットワークACLの 0.0.0.0/0 のA...]]></summary>
        <author>
            <name>jkoba</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[transformersのtutorialを読んでみた - part2]]></title>
        <id>https://zenn.dev/python3654/articles/2e87e9bdb92a9a</id>
        <link href="https://zenn.dev/python3654/articles/2e87e9bdb92a9a"/>
        <updated>2022-09-15T01:51:34.000Z</updated>
        <summary type="html"><![CDATA[はじめに
最近transformersというライブラリを勉強していて、今はtutorialsを読んでいます！せっかくなので、tutorialsの内容を訳して記事にしようと思っています！今回は第二弾ということで、以下の記事を参考に書きました～ ぜひ最後まで読んでください！(google colabで実装しながら読んで頂けると良いと思います！)
なお、以下の記事では言語、音声、画像の処理について説明していますが、本記事では言語の処理の説明のみとなります。(今後、音声、画像についても記事を書きたいと思っています。)
https://huggingface.co/docs/transform...]]></summary>
        <author>
            <name>とりごん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google ColabでGCSを利用する]]></title>
        <id>https://zenn.dev/dicechick373/articles/cc22c584721678</id>
        <link href="https://zenn.dev/dicechick373/articles/cc22c584721678"/>
        <updated>2022-09-15T00:48:19.000Z</updated>
        <summary type="html"><![CDATA[目標
Google ColabでGCSを利用する

 やり方

 GCP認証
下記コードを実行して、GCPに接続
from google.colab import auth
auth.authenticate_user()

 gcsfuseをインストール
認証に成功したらgcsfuseをインストール
!echo "deb http://packages.cloud.google.com/apt gcsfuse-`lsb_release -c -s` main" | sudo tee /etc/apt/sources.list.d/gcsfuse.list
!curl https:/...]]></summary>
        <author>
            <name>dicechick373</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[LighGBMでcustom objectを使う]]></title>
        <id>https://zenn.dev/ymd/articles/b446e4b04814d3</id>
        <link href="https://zenn.dev/ymd/articles/b446e4b04814d3"/>
        <updated>2022-09-14T23:03:56.000Z</updated>
        <summary type="html"><![CDATA[2022/9/15
目的：論文で提案されている様々なlossの改善の恩恵をlighGBMでも受けれるようにする

 手順

objective function (loss)を自作する
trainのfobjに自作objective functionを渡す


 objective functionを作る
predsとlabels (lgb.Datasetの中に情報がある)を入力にして、gradとhessianを返せばいい。

これはlightbmの最適化がニュートン法 (2次の勾配まで使う)を使っているため

回帰問題のgrad(1次微分)とhessian(2次微分)は

よって自作関数...]]></summary>
        <author>
            <name>ymd</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Gooble Colab】Stable Diffusionを動かしてみた]]></title>
        <id>https://zenn.dev/kwashizzz/articles/ml-stable-diffusion-colab</id>
        <link href="https://zenn.dev/kwashizzz/articles/ml-stable-diffusion-colab"/>
        <updated>2022-09-14T17:05:45.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは、わっしーです。最近、画像生成のアプリやデモが流行っており、生成モデルに入力するプロンプトテキストが呪文と言われるようにまでなっています。私もStable Diffusionを試し、以下のようなピンク色のアニメキャラクターを生成できました。

本記事では、Google Colab上でStable Diffusionを動かす方法を紹介します。
※Google ColabのPro+(GPU:A100)を使用し、動作確認をしています。

 環境設定
まずは、実行に必要なライブラリやStable Diffusionの重みをダウンロードします。
# stable diffu...]]></summary>
        <author>
            <name>わっしー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Raspberry PiでLチカ（完成）]]></title>
        <id>https://zenn.dev/technicarium/articles/a8b5eb4b8c5b0e</id>
        <link href="https://zenn.dev/technicarium/articles/a8b5eb4b8c5b0e"/>
        <updated>2022-09-14T14:25:14.000Z</updated>
        <summary type="html"><![CDATA[Raspberry Pi OSのSDカードへの書き込みに始まり、PyenvによるPythonバージョン管理、Pipenvによる仮想環境、開発環境としてVSCodeのインストール、ブレッドボード上でのLEDと抵抗の配置、GPIOとブレッドボードの接続用コード（オス・メス ジャンパーワイヤー）と一式揃ったのでやっとLチカにチャレンジしました。

 前提条件

 OS
>cat /etc/os-release 
PRETTY_NAME="Debian GNU/Linux 11 (bullseye)"
NAME="Debian GNU/Linux"
VERSION_ID="11"
VERS...]]></summary>
        <author>
            <name>テク二カリウム</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Diffusers】MacでStableDiffusionのImg2Imgのpython環境を整える]]></title>
        <id>https://zenn.dev/michy/articles/064863f3703de6</id>
        <link href="https://zenn.dev/michy/articles/064863f3703de6"/>
        <updated>2022-09-14T13:00:14.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事ではDiffusersを使ったMacのStableDiffusionでimg2imgを実行するまでの手順を紹介します。

 対象読者
・M1/M2シリーズのMacユーザ
・stable-diffusionとその発展型のモデルを気軽に試せる環境がほしい人
・stable-diffusion環境メンテと最新化に稼働を割く暇がない人

 Diffusersとは？
推論・学習に必要なツールが機械学習周りの機能一式が揃ったツールボックスです。
モデルの切り替えや追加学習などのツールが1コマンドですべて入るので、AIイラストの環境がライトに構築可能です。

 Diffusers...]]></summary>
        <author>
            <name>zaiwa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[estat-APIのレスポンスをGoogleBigQueryに格納する]]></title>
        <id>https://zenn.dev/dicechick373/articles/58354a5f1f542f</id>
        <link href="https://zenn.dev/dicechick373/articles/58354a5f1f542f"/>
        <updated>2022-09-14T07:16:20.000Z</updated>
        <summary type="html"><![CDATA[目標

estat-APIから統計表のメタ情報を取得する
estat-APIから統計表データを取得する
estat-APIのレスポンスJSONを加工してpandas DataFrameに変換する
DataFrameをGoogleBigQueryに保存する


 前提条件

estat-APIの利用者登録済
ESTAT_APPIDは環境変数で管理

利用するライブラリは次のとおり
import urllib.parse
import urllib.request
import json
import pandas as pd

 統計表情報の取得
社会・人口統計体系の「Ａ人口・世帯」の...]]></summary>
        <author>
            <name>dicechick373</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python: int/str 型変換における破壊的変更のお知らせ]]></title>
        <id>https://zenn.dev/ykesamaru/articles/2175b317a5410e</id>
        <link href="https://zenn.dev/ykesamaru/articles/2175b317a5410e"/>
        <updated>2022-09-14T06:02:45.000Z</updated>
        <summary type="html"><![CDATA[!
一部加筆修正しました

2022年9月14日17時18分



 int/str型変換における破壊的変更のお知らせ
こんにちは。東海顔認証のyKesamaruです。
https://www.youtube.com/watch?app=desktop&v=eTucYT2LpNU
今さっき上記YouTubeで知ったのですが、なかなかのニュースが飛び込んできました。
2022年9月7日水曜日[1]、Pythonにおいて下位互換性を破壊するセキュリティーアップデートが緊急でリリースされました。 [2]
すくなからずプロジェクトに変更を強いられるケースが発生するかもしれません。といって...]]></summary>
        <author>
            <name>yKesamaru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[『最強の三目並べAIをゼロから作る』をやってみた]]></title>
        <id>https://zenn.dev/quiver/articles/93e91ba2f29fa9</id>
        <link href="https://zenn.dev/quiver/articles/93e91ba2f29fa9"/>
        <updated>2022-09-13T21:37:00.000Z</updated>
        <summary type="html"><![CDATA[『ゼロから作るDeep Learning』などの著者がある斎藤康毅さんが、ゼロシリーズの最新作として、『最強の三目並べAIをゼロから作る』というYouTube動画を公開されていたので、やってみました。
https://twitter.com/SaitohKoki/status/1564198954476089344
最終的に作成する最強の三目並べ(Tic-Tac-Toe)AIは、次のデモページで遊べます。
https://koki0702.github.io/tictactoe-pyscript/


 学習の流れ
動画は5本からなり、以下のトピックを学べます。

ガイダンス(7分02秒...]]></summary>
        <author>
            <name>quiver</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[transformersのtutorialを読んでみた - part1]]></title>
        <id>https://zenn.dev/python3654/articles/7afb7095d6f50f</id>
        <link href="https://zenn.dev/python3654/articles/7afb7095d6f50f"/>
        <updated>2022-09-13T14:41:55.000Z</updated>
        <summary type="html"><![CDATA[はじめに
最近transformersというライブラリを勉強していて、今はtutorialsを読んでいます！せっかくなので、tutorialsの内容を訳して記事にしようと思っています！今回は第一弾ということで、以下の記事を参考に書きました～ ぜひ最後まで読んでください！(google colabで実装しながら読んで頂けると良いと思います！)
https://huggingface.co/docs/transformers/v4.21.3/en/pipeline_tutorial

 推論用パイプライン
pipeline()を使えば、テキスト生成、画像のセグメンテーション、音声分類など...]]></summary>
        <author>
            <name>とりごん</name>
        </author>
    </entry>
</feed>