<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://s-i27.github.io/Rssfeed/index.html</id>
    <title>osmos::feed</title>
    <updated>2023-01-12T01:40:38.937Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="https://s-i27.github.io/Rssfeed/index.html"/>
    <link rel="self" href="https://s-i27.github.io/Rssfeed/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[【DAMO-YOLO】PyTorch＋Webカメラでリアルタイム推論してみた]]></title>
        <id>https://zenn.dev/opamp/articles/b2d673bbccb9d4</id>
        <link href="https://zenn.dev/opamp/articles/b2d673bbccb9d4"/>
        <updated>2023-01-11T17:43:42.000Z</updated>
        <summary type="html"><![CDATA[宣伝
こんなコミュニティもやっているので良ければご参加ください！
https://kobe-sannomiya-ai-tech.vercel.app/
connpassはこちらから！
https://ai-tech.connpass.com/

 はじめに
こんにちはToshikiHaraguchです。今回は勉強会【DAMO-YOLO + ONNX】物体検出AIをノートPCで動かそう！に合わせて、いろいろしたことをつらつらと書き連ねていこうと思います。
まずはDAMO-YOLOの元のリポジトリからクローンしたものを実行＆リアルタイム推論できるように改造していきます！

 実験環境
今...]]></summary>
        <author>
            <name>OPamp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Atcoder】【Python】分野別　初中級者が解くべき過去問精選 100 問を解いてみた（全探索：全列挙）]]></title>
        <id>https://zenn.dev/waml/articles/atcoder-study-1</id>
        <link href="https://zenn.dev/waml/articles/atcoder-study-1"/>
        <updated>2023-01-11T17:20:09.000Z</updated>
        <summary type="html"><![CDATA[はじめに
E869120さんがレッドコーダーが教える、競プロ・AtCoder上達のガイドライン【中級編：目指せ水色コーダー！】にまとめている「分野別　初中級者が解くべき過去問精選 100 問」をPythonで解いてみた。Pythonの記事は少なそうなのでアウトプットが参考になれば幸いです。

 1.ITP1_7_B - How Many Ways?
問題のリンクは、こちら
1問目ということで、愚直に全探索すればよさそうです。
3重ループでO(n^3)でもn=100なので間に合いそう。(n, xが0になるまでループだから本当は怪しい気もする)

answer1
while True:
...]]></summary>
        <author>
            <name>waml</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第4章: 形態素解析 39. Zipfの法則]]></title>
        <id>https://zenn.dev/kurokawa/articles/8f5eb8b4020d27</id>
        <link href="https://zenn.dev/kurokawa/articles/8f5eb8b4020d27"/>
        <updated>2023-01-11T15:45:42.000Z</updated>
        <summary type="html"><![CDATA[問題

 39. Zipfの法則
単語の出現頻度順位を横軸，その出現頻度を縦軸として，両対数グラフをプロットせよ．

 solution39.py
# Plot a log-log graph with the x-axis being rank order and the y-axis being frequency.
import itertools
from collections import Counter
from collections import defaultdict
import matplotlib.pyplot as plt
import japanize_...]]></summary>
        <author>
            <name>kurokawa5</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Alexa スキル: かるたを読んでもらう]]></title>
        <id>https://zenn.dev/blancpanda/articles/alexa-skill-carta</id>
        <link href="https://zenn.dev/blancpanda/articles/alexa-skill-carta"/>
        <updated>2023-01-11T15:01:47.000Z</updated>
        <summary type="html"><![CDATA[幼稚園のかるたを読んでほしい
娘の通っている幼稚園では年明けに「かるた会」があるため、冬休み中にその年の指定かるたで練習します。
ちょうど自宅リビング用の Echo Dot を新調したところだったので、「あ、かるた読んでもらおうかな」と思い立ってスキルを作った備忘録です。
Node.js の方が情報量は多そうですが、Python でもできるので今回はなんとなく Python で。

 会話の組み立て

 幼稚園ルール

読み手（先生）が「読みます」と言う
取り手（子どもたち）が「はい」と言って手をひざにつく
読み手が読み札を読み上げる
取り手は「はい」と言って札を取る

「読みます」...]]></summary>
        <author>
            <name>blancpanda</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SendGrid で送信したメールの Bounce Event を取得するサンプル]]></title>
        <id>https://zenn.dev/hmatsu47/articles/sendgrid-bounce</id>
        <link href="https://zenn.dev/hmatsu47/articles/sendgrid-bounce"/>
        <updated>2023-01-11T14:53:03.000Z</updated>
        <summary type="html"><![CDATA[AWS Lambda（Python）で SendGrid を使ってメールを送信し、その Bounce Event（BouncedおよびDropped）を取得するサンプルです。

 サンプルの内容
「メール送信時に送信履歴用の DynamoDB テーブルに記録した情報」と「SendGrid の Event Webhook で取得した情報」を突合し、Bounce Event に関する情報を取得するサンプルです。
!
今回のサンプルでは、メール送信部分を

メール送信用の DynamoDB テーブルに送信するメールの情報をレコード登録
DynamoDB Streams 経由でメール送信用の L...]]></summary>
        <author>
            <name>hmatsu47</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Severless Frameworkで構築するLambda関数にエラー監視ツールSentryを導入する]]></title>
        <id>https://zenn.dev/m1kan1/articles/e9804debe9e920</id>
        <link href="https://zenn.dev/m1kan1/articles/e9804debe9e920"/>
        <updated>2023-01-11T12:29:08.000Z</updated>
        <summary type="html"><![CDATA[Severless Frameworkで構築するLambda関数にSentryを導入する方法について記載します。
Lambda関数はPythonを使用しています。
導入したソースコードはgithubに載せています。

 Sentryとは
Sentryとは、フロントからバックエンドまで、アプリケーションで発生したエラーを監視できるツールです。
https://sentry.io/welcome/

 事前準備

Sentryアカウントを作成します
プロジェクトを作成します
サインアップしてログインすると、初めにこのような画面が表示されました。


今回はServerlessのLambda(...]]></summary>
        <author>
            <name>m1kan1</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第4章: 形態素解析 38. ヒストグラム]]></title>
        <id>https://zenn.dev/kurokawa/articles/7162ee3bb96a95</id>
        <link href="https://zenn.dev/kurokawa/articles/7162ee3bb96a95"/>
        <updated>2023-01-11T11:11:33.000Z</updated>
        <summary type="html"><![CDATA[問題

 38. ヒストグラム
単語の出現頻度のヒストグラムを描け．ただし，横軸は出現頻度を表し，1から単語の出現頻度の最大値までの線形目盛とする．縦軸はx軸で示される出現頻度となった単語の異なり数（種類数）である．

 solution38.py
import itertools
from collections import Counter
from collections import defaultdict
import matplotlib.pyplot as plt
import japanize_matplotlib

def parse_mecab(block):
 ...]]></summary>
        <author>
            <name>kurokawa5</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第4章: 形態素解析 37. 「猫」と共起頻度の高い上位10語]]></title>
        <id>https://zenn.dev/kurokawa/articles/0534aa32189a5f</id>
        <link href="https://zenn.dev/kurokawa/articles/0534aa32189a5f"/>
        <updated>2023-01-11T10:54:31.000Z</updated>
        <summary type="html"><![CDATA[問題

 37. 「猫」と共起頻度の高い上位10語
「猫」とよく共起する（共起頻度が高い）10語とその出現頻度をグラフ（例えば棒グラフなど）で表示せよ．

 solution37.py
import itertools
from collections import Counter
from collections import defaultdict
import matplotlib.pyplot as plt
import japanize_matplotlib

def parse_mecab(block):
    res = []
    for line in bloc...]]></summary>
        <author>
            <name>kurokawa5</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[「肉汁餃子のダンダダン」の店舗情報をWebスクレイピングして地図上に可視化してみる]]></title>
        <id>https://zenn.dev/gai_ds/articles/06d3a8354ebe1b</id>
        <link href="https://zenn.dev/gai_ds/articles/06d3a8354ebe1b"/>
        <updated>2023-01-11T09:41:44.000Z</updated>
        <summary type="html"><![CDATA[概要

「最近ダンダダンていう居酒屋よく見るな〜」と思い、試しに地図上に可視化してみました。
肉汁餃子のダンダダンは餃子が美味しい居酒屋です。
餃子アイスも美味しいです。

https://www.dandadan.jp/

 手順
1. ダンダダンのサイトから店舗情報をスクレイピング
2. 住所から緯度経度を取得(ジオコーディング)
3. kepler.glで可視化

 1. ダンダダンのサイトから店舗情報をスクレイピング
まずはダンダダンのホームページの店舗情報から店舗名と住所をスクレイピングしたいと思います。
GoogleCoraboratoryを用いてスクレイピングをします。...]]></summary>
        <author>
            <name>ガイ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-084｜A - New Year]]></title>
        <id>https://zenn.dev/hyperdb/articles/7bef95325ad968</id>
        <link href="https://zenn.dev/hyperdb/articles/7bef95325ad968"/>
        <updated>2023-01-11T08:27:15.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-084 A - New Year



 提出結果
def getInt():
    return int(input())


def main():
    m = getInt()

    print(48 - m)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-084｜B - Postal Code]]></title>
        <id>https://zenn.dev/hyperdb/articles/3a06137ed53c36</id>
        <link href="https://zenn.dev/hyperdb/articles/3a06137ed53c36"/>
        <updated>2023-01-11T08:27:14.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-084 B - Postal Code



 提出結果
import re


def getIntMap():
    return map(int, input().split())


def getString():
    return input()


def main():
    a, b = getIntMap()
    s = getString()

    c = r'[0-9]{' + str(a) + '}-[0-9]{' + str(b) + '}'
    m = re.match(c, s)

    print('Ye...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第4章: 形態素解析 36. 頻度上位10語]]></title>
        <id>https://zenn.dev/kurokawa/articles/6915c80bfe73b7</id>
        <link href="https://zenn.dev/kurokawa/articles/6915c80bfe73b7"/>
        <updated>2023-01-11T08:26:30.000Z</updated>
        <summary type="html"><![CDATA[問題

 36. 頻度上位10語
出現頻度が高い10語とその出現頻度をグラフ（例えば棒グラフなど）で表示せよ．

 solution36.py
import itertools
from collections import Counter
from collections import defaultdict
import matplotlib.pyplot as plt
import japanize_matplotlib

def parse_mecab(block):
    res = []
    for line in block.split('\n'):
      ...]]></summary>
        <author>
            <name>kurokawa5</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[最新のYOLOv8 が公開されたので試してみる]]></title>
        <id>https://zenn.dev/takeguchi/articles/8e93b2dee6381d</id>
        <link href="https://zenn.dev/takeguchi/articles/8e93b2dee6381d"/>
        <updated>2023-01-11T08:26:11.000Z</updated>
        <summary type="html"><![CDATA[最新のYOLOv8がUltralyticsより公開されました。まだ論文がarxivに公開されていないらしく情報が少ないですが、とりあえず試してみることにします。
https://github.com/ultralytics/ultralytics
ドキュメントをパッと見てまず思ったのがYOLOv8がPythonのパッケージとして配布されていることですかね。https://docs.ultralytics.com によると,YOLOv8では以前のYOLOを切り替えることができるみたいです。これは拡張性とかかなり期待できそうです！
早速bus.jpgでテスト。
$ pip install u...]]></summary>
        <author>
            <name>tttakeh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pyenvとpipenvで、快適Python生活（Windows向け）]]></title>
        <id>https://zenn.dev/sql_geinin/articles/29f2b0a5c55db2</id>
        <link href="https://zenn.dev/sql_geinin/articles/29f2b0a5c55db2"/>
        <updated>2023-01-11T07:38:11.000Z</updated>
        <summary type="html"><![CDATA[概要
Windowsで、複数バージョンのPython扱う「pyenv」と
フォルダごとに仮想環境を立ててライブラリ等を管理する「pipenv」を導入し
快適なPython生活を手に入れることが目標です。

 背景
これまで、Pythonのインストールといえば「Anaconda」をインストールすることが定石でした。
Anacondaには、numpyやpandasといった主要なライブラリや
Jupyter Notebook（今はJupyter Labですね）といったツールがデフォルトで入っており
さらには、フォルダごとに環境を作ったりということもやってくれて便利でした。
しかし、Anac...]]></summary>
        <author>
            <name>SQL芸人</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第4章: 形態素解析 35. 単語の出現頻度]]></title>
        <id>https://zenn.dev/kurokawa/articles/4019a27e79381b</id>
        <link href="https://zenn.dev/kurokawa/articles/4019a27e79381b"/>
        <updated>2023-01-11T07:30:53.000Z</updated>
        <summary type="html"><![CDATA[問題

 35. 単語の出現頻度
文章中に出現する単語とその出現頻度を求め，出現頻度の高い順に並べよ．

 solution35.py
import itertools
from collections import Counter
from collections import defaultdict

def parse_mecab(block):
    res = []
    for line in block.split('\n'):
        if line == '':
            return res
        (surface, attr)...]]></summary>
        <author>
            <name>kurokawa5</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】Webで使えるPython 基礎編【３リスト】]]></title>
        <id>https://zenn.dev/web_life_ch/articles/2456c7851bc910</id>
        <link href="https://zenn.dev/web_life_ch/articles/2456c7851bc910"/>
        <updated>2023-01-11T05:59:20.000Z</updated>
        <summary type="html"><![CDATA[【３リスト】
YouTube: https://youtu.be/GRV2AqziZso
https://youtu.be/GRV2AqziZso
今回はPythonの「リスト」について解説します。
こちらはjavascriptの配列のようなものになります。

main.py
persons = ["taro", "jiro", "saburo", "shiro"]

# print(persons)
# print(persons[1])

# for v in persons:
#   print(v)

# persons[2] = "hanako"
# persons.app...]]></summary>
        <author>
            <name>Web Life CH</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第4章: 形態素解析 34. 名詞の連接]]></title>
        <id>https://zenn.dev/kurokawa/articles/d6ec1df77b95df</id>
        <link href="https://zenn.dev/kurokawa/articles/d6ec1df77b95df"/>
        <updated>2023-01-11T04:21:51.000Z</updated>
        <summary type="html"><![CDATA[問題

 34. 名詞の連接
名詞の連接（連続して出現する名詞）を最長一致で抽出せよ．

 solution34.py
def parse_mecab(block):
    res = []
    for line in block.split('\n'):
        if line == '':
            return res
        (surface, attr) = line.split('\t')
        attr = attr.split(',')
        lineDict = {
            'surface':...]]></summary>
        <author>
            <name>kurokawa5</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第4章: 形態素解析 33. 「AのB」]]></title>
        <id>https://zenn.dev/kurokawa/articles/f12654deb756bf</id>
        <link href="https://zenn.dev/kurokawa/articles/f12654deb756bf"/>
        <updated>2023-01-11T02:53:41.000Z</updated>
        <summary type="html"><![CDATA[問題

 33. 「AのB」
2つの名詞が「の」で連結されている名詞句を抽出せよ．

 solution33.py
def parse_mecab(block):
    res = []
    for line in block.split('\n'):
        if line == '':
            return res
        (surface, attr) = line.split('\t')
        attr = attr.split(',')
        lineDict = {
            'surface': s...]]></summary>
        <author>
            <name>kurokawa5</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第4章: 形態素解析 32. 動詞の基本形]]></title>
        <id>https://zenn.dev/kurokawa/articles/f31a533c9e1b52</id>
        <link href="https://zenn.dev/kurokawa/articles/f31a533c9e1b52"/>
        <updated>2023-01-10T16:32:28.000Z</updated>
        <summary type="html"><![CDATA[問題

 32. 動詞の基本形
動詞の基本形をすべて抽出せよ．

 solution32.py
def parse_mecab(block):
    res = []
    for line in block.split('\n'):
        if line == '':
            return res
        (surface, attr) = line.split('\t')
        attr = attr.split(',')
        lineDict = {
            'surface': surface,
  ...]]></summary>
        <author>
            <name>kurokawa5</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第4章: 形態素解析 31. 動詞]]></title>
        <id>https://zenn.dev/kurokawa/articles/17b36db9712a26</id>
        <link href="https://zenn.dev/kurokawa/articles/17b36db9712a26"/>
        <updated>2023-01-10T14:51:59.000Z</updated>
        <summary type="html"><![CDATA[問題

 31. 動詞
動詞の表層形をすべて抽出せよ．

 solution31.py
def parse_mecab(block):
    res = []
    for line in block.split('\n'):
        if line == '':
            return res
        (surface, attr) = line.split('\t')
        attr = attr.split(',')
        lineDict = {
            'surface': surface,
      ...]]></summary>
        <author>
            <name>kurokawa5</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-083｜A - Libra]]></title>
        <id>https://zenn.dev/hyperdb/articles/e94bc479080d64</id>
        <link href="https://zenn.dev/hyperdb/articles/e94bc479080d64"/>
        <updated>2023-01-10T10:38:34.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-083 A - Libra



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    a, b, c, d = getIntMap()
    e = a + b
    f = c + d

    print('Balanced' if e == f else 'Left' if e > f else 'Right')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-083｜B - Some Sums]]></title>
        <id>https://zenn.dev/hyperdb/articles/28ea79f1283c67</id>
        <link href="https://zenn.dev/hyperdb/articles/28ea79f1283c67"/>
        <updated>2023-01-10T10:38:34.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-083 B - Some Sums



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    n, a, b = getIntMap()

    r = 0
    for i in range(1, n + 1):
        s = sum(map(int, list(str(i))))
        if s >= a and s <= b:
            r += i
    print(r)


if __name__...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-082｜B - Two Anagrams]]></title>
        <id>https://zenn.dev/hyperdb/articles/36e8176afd248c</id>
        <link href="https://zenn.dev/hyperdb/articles/36e8176afd248c"/>
        <updated>2023-01-10T10:38:18.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-082 B - Two Anagrams



 提出結果
def getString():
    return input()


def main():
    s = list(getString())
    t = list(getString())

    s.sort()
    t.sort()
    t.reverse()

    print('Yes' if s < t else 'No')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-082｜A - Round Up the Mean]]></title>
        <id>https://zenn.dev/hyperdb/articles/2277f16d6b8c5a</id>
        <link href="https://zenn.dev/hyperdb/articles/2277f16d6b8c5a"/>
        <updated>2023-01-10T10:38:18.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-082 A - Round Up the Mean



 提出結果
import math


def getIntMap():
    return map(int, input().split())


def main():
    a, b = getIntMap()

    print(math.ceil((a + b) / 2))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第4章: 形態素解析 30. 形態素解析結果の読み込み]]></title>
        <id>https://zenn.dev/kurokawa/articles/85ba0a5b10594d</id>
        <link href="https://zenn.dev/kurokawa/articles/85ba0a5b10594d"/>
        <updated>2023-01-10T08:54:33.000Z</updated>
        <summary type="html"><![CDATA[問題

 30. 形態素解析結果の読み込み
形態素解析結果（neko.txt.mecab）を読み込むプログラムを実装せよ．ただし，各形態素は表層形（surface），基本形（base），品詞（pos），品詞細分類1（pos1）をキーとするマッピング型に格納し，1文を形態素（マッピング型）のリストとして表現せよ．第4章の残りの問題では，ここで作ったプログラムを活用せよ．

 solution30.py
def parse_mecab(block):
    res = []
    for line in block.split('\n'):
        if line == ''...]]></summary>
        <author>
            <name>kurokawa5</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】Webで使えるPython 基礎編【２変数】]]></title>
        <id>https://zenn.dev/web_life_ch/articles/86aa9386b40509</id>
        <link href="https://zenn.dev/web_life_ch/articles/86aa9386b40509"/>
        <updated>2023-01-10T07:43:33.000Z</updated>
        <summary type="html"><![CDATA[【２変数】
YouTube: https://youtu.be/XekurJvEkKM
https://youtu.be/XekurJvEkKM
今回はPythonの変数について解説します。
最初に「Hello World」をターミナルに表示するのですが、
JSと同様に文字列には
ダブルクォーテーションかシングルクォーテーションを使用します。
Pythonファイルの実行方法は、
VSコードの右上の再生ボタンをクリックするか、
ターミナルに「python main.py」を入力して実行します。
変数につきましては、JSの「const」のようなものをつける必要はなく、
そのまま変数名を入...]]></summary>
        <author>
            <name>Web Life CH</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第3章: 正規表現 29. 国旗画像のURLを取得する]]></title>
        <id>https://zenn.dev/kurokawa/articles/43f2a7dd00b025</id>
        <link href="https://zenn.dev/kurokawa/articles/43f2a7dd00b025"/>
        <updated>2023-01-10T06:42:57.000Z</updated>
        <summary type="html"><![CDATA[問題

 29. 国旗画像のURLを取得する
テンプレートの内容を利用し，国旗画像のURLを取得せよ．（ヒント: [1]MediaWiki APIの[2]imageinfoを呼び出して，ファイル参照をURLに変換すればよい）．

 solution29.py
import pandas as pd
import re
import requests

df_j = pd.read_json('chapter03/jawiki-country.json.gz', lines=True, compression='infer')
text_uk = df_j.query('title==...]]></summary>
        <author>
            <name>kurokawa5</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第3章: 正規表現 28. MediaWikiマークアップの除去]]></title>
        <id>https://zenn.dev/kurokawa/articles/7b0a0fc3c37f37</id>
        <link href="https://zenn.dev/kurokawa/articles/7b0a0fc3c37f37"/>
        <updated>2023-01-10T05:08:13.000Z</updated>
        <summary type="html"><![CDATA[問題

 28. MediaWikiマークアップの除去
27の処理に加えて，テンプレートの値からMediaWikiマークアップを可能な限り除去し，国の基本情報を整形せよ．

 solution28.py
import pandas as pd
import re

df_j = pd.read_json('chapter03/jawiki-country.json.gz', lines=True, compression='infer')
text_uk = df_j.query('title=="イギリス"')['text'].values[0]

template_text = ...]]></summary>
        <author>
            <name>kurokawa5</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第3章: 正規表現 27. 内部リンクの除去]]></title>
        <id>https://zenn.dev/kurokawa/articles/955a8ea3a255ce</id>
        <link href="https://zenn.dev/kurokawa/articles/955a8ea3a255ce"/>
        <updated>2023-01-10T04:00:43.000Z</updated>
        <summary type="html"><![CDATA[問題

 27. 内部リンクの除去
26の処理に加えて，テンプレートの値からMediaWikiの内部リンクマークアップを除去し，テキストに変換せよ（参考: [1]マークアップ早見表）．

 solution27.py
import pandas as pd
import re

df_j = pd.read_json('chapter03/jawiki-country.json.gz', lines=True, compression='infer')
text_uk = df_j.query('title=="イギリス"')['text'].values[0]

template_...]]></summary>
        <author>
            <name>kurokawa5</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ProbSpace pollen counts （PVS 2nd-Code）]]></title>
        <id>https://zenn.dev/saru_da_mon/articles/df34772a14d73e</id>
        <link href="https://zenn.dev/saru_da_mon/articles/df34772a14d73e"/>
        <updated>2023-01-10T02:44:18.000Z</updated>
        <summary type="html"><![CDATA[https://comp.probspace.com/competitions/pollen_counts

 PobSpace 花粉飛散予測_MODEL_STACK
作成者：saru_da_mon（AI-FOX）

 本コードの使用権利
MIT License に準拠する。
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in ...]]></summary>
        <author>
            <name>saru_da_mon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[コード設計]条件分岐2/ポリシーパターン]]></title>
        <id>https://zenn.dev/ryutaro_h/articles/ed58ee31dcd2b4</id>
        <link href="https://zenn.dev/ryutaro_h/articles/ed58ee31dcd2b4"/>
        <updated>2023-01-10T00:51:29.000Z</updated>
        <summary type="html"><![CDATA[初めに
コード設計について「良いコード/悪いコードで学ぶ設計入門 ―保守しやすい 成長し続けるコードの書き方」を手に取り、学んでいます。本記事はこちらを参考に書いています。
今回は前回に引き続き、条件分岐について取り上げます。
!
書籍のコードはJavaで書かれていますが、本記事のコードは私がPythonに書き換えたものです。より良い書き方がありましたらご指摘いただけると泣いて喜びます



 本題

 条件の重複(アンチパターン)
条件の重複はコードを書いているとよくあることではないでしょうか。本書ではECサイトアプリを想定し、優良会員の判定ロジックが一部重複されている例が取り上げ...]]></summary>
        <author>
            <name>Ryutaro</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[駅から一番遠い地点を探る]]></title>
        <id>https://zenn.dev/shimat/articles/149779377ee34b</id>
        <link href="https://zenn.dev/shimat/articles/149779377ee34b"/>
        <updated>2023-01-09T23:26:48.000Z</updated>
        <summary type="html"><![CDATA[ネタ
日本の陸地で、鉄道駅から一番遠い地点はどこか？
普通に考えれば南鳥島[1]になってしまいますが、これを鉄道がある主要5島（本州・北海道・九州・四国・沖縄本島）の中において考えてみます。[2]
道のりで判定できると最高ですが、難しいので[3]直線距離とします。厳密な解ではなく、ある程度この辺、と分かれば満足です。
地図情報もPython数値計算も不得手なので、諸々うまい実装ではないと思います。

 成果物
Streamlit
https://shimat-station-voronoi-main-czmu73.streamlit.app/
東京23区の例です。駅から遠いほど赤・白...]]></summary>
        <author>
            <name>shimat</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第3章: 正規表現 26. 強調マークアップの除去]]></title>
        <id>https://zenn.dev/kurokawa/articles/3f730ca3ca5272</id>
        <link href="https://zenn.dev/kurokawa/articles/3f730ca3ca5272"/>
        <updated>2023-01-09T17:37:28.000Z</updated>
        <summary type="html"><![CDATA[問題

 26. 強調マークアップの除去
25の処理時に，テンプレートの値からMediaWikiの強調マークアップ（弱い強調，強調，強い強調のすべて）を除去してテキストに変換せよ（参考: [1]マークアップ早見表）．

 solution26.py
import pandas as pd
import re

df_j = pd.read_json('chapter03/jawiki-country.json.gz', lines=True, compression='infer')
text_uk = df_j.query('title=="イギリス"')['text'].valu...]]></summary>
        <author>
            <name>kurokawa5</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS Glueの開発環境を整える]]></title>
        <id>https://zenn.dev/tokku5552/articles/glue-verifacation</id>
        <link href="https://zenn.dev/tokku5552/articles/glue-verifacation"/>
        <updated>2023-01-09T15:09:58.000Z</updated>
        <summary type="html"><![CDATA[以下の記事を参考にしながら少し改良して動かすようにしました。
https://docs.aws.amazon.com/ja_jp/glue/latest/dg/aws-glue-programming-etl-libraries.html
https://future-architect.github.io/articles/20220428a/
version: '3.5'
services:
  localstack:
    container_name: glue-docker-sample-localstack
    image: localstack/localstack:...]]></summary>
        <author>
            <name>tokku5552</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第3章: 正規表現 25. テンプレートの抽出]]></title>
        <id>https://zenn.dev/kurokawa/articles/eeeb3c71c18446</id>
        <link href="https://zenn.dev/kurokawa/articles/eeeb3c71c18446"/>
        <updated>2023-01-09T14:17:39.000Z</updated>
        <summary type="html"><![CDATA[問題

 25. テンプレートの抽出
記事中に含まれる「基礎情報」テンプレートのフィールド名と値を抽出し，辞書オブジェクトとして格納せよ．

 solution25.py
import pandas as pd
import re

df_j = pd.read_json('chapter03/jawiki-country.json.gz', lines=True, compression='infer')
text_uk = df_j.query('title=="イギリス"')['text'].values[0]

template_text = re.findall(r'\{\...]]></summary>
        <author>
            <name>kurokawa5</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Python/JAX] 微分可能な量子回路シミュレーターの開発を始めた]]></title>
        <id>https://zenn.dev/ymd_h/articles/ea7f714dddd5af</id>
        <link href="https://zenn.dev/ymd_h/articles/ea7f714dddd5af"/>
        <updated>2023-01-09T11:46:16.000Z</updated>
        <summary type="html"><![CDATA[1. はじめに
（最近全然Zennの記事を書けていなかったので、今年こそは早い段階で記事にしていこうと思います。）
お正月の休暇中に趣味で、微分可能な量子回路シミュレータ diffq の開発をはじめました。
https://github.com/ymd-h/diffq

 2. ポイント

主ターゲットは、量子回路計算と古典計算を組み合わせる量子機械学習

JAX を採用

GPUフレンドリー
ベクトル化が容易 (jax.vmap() etc.)
微分可能 (jax.grad() etc.)
(現時点では) 非Windowsはサポート


開発の動機は、量子機械学習や量子回路シミュレ...]]></summary>
        <author>
            <name>山田(ymd)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[10個の質問に答えるだけで会話型AIキャラを生成できるサービス「Chara.AI Generator」を作った！]]></title>
        <id>https://zenn.dev/makunugi/articles/ebecbb5de562d6</id>
        <link href="https://zenn.dev/makunugi/articles/ebecbb5de562d6"/>
        <updated>2023-01-09T09:52:31.000Z</updated>
        <summary type="html"><![CDATA[概要
こんにちは、maKunugiです
今回は表題の通り、会話型AI(= 会話ができるAI)のキャラクターを簡単に生成できるサービスを作ってみた話について、紹介させていただきます。会話ができるAIに興味がある方、ぜひ読んでみていただけると嬉しいです！

 作ったもの
作ったもの: Chara.AI Generator
読み方: キャラエーアイ　ジェネレーター
https://mebo.work/generator
私はmebo(ミーボ)という会話型AI構築サービスを2年ほど運営しており、そのサービスの１つの機能として開発しました。
Chara.AI Generatorは、下記のような...]]></summary>
        <author>
            <name>maKunugi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-081｜A - Placing Marbles]]></title>
        <id>https://zenn.dev/hyperdb/articles/d5e9cbf0375e40</id>
        <link href="https://zenn.dev/hyperdb/articles/d5e9cbf0375e40"/>
        <updated>2023-01-09T08:54:08.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-081 A - Placing Marbles



 提出結果
def getString():
    return input()


def main():
    s = list(map(int, list(getString())))

    print(sum(s))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-081｜B - Shift only]]></title>
        <id>https://zenn.dev/hyperdb/articles/6ba45884c5b045</id>
        <link href="https://zenn.dev/hyperdb/articles/6ba45884c5b045"/>
        <updated>2023-01-09T08:52:18.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-081 B - Shift only



 提出結果
def getInt():
    return int(input())


def getIntList():
    return list(map(int, input().split()))


def mod(l):
    return sum(list(map(lambda x: x % 2, l)))


def div(l):
    return list(map(lambda x: x // 2, l))


def main():
    n = getInt()
    a =...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[競プロ python 入力チートシート]]></title>
        <id>https://zenn.dev/omusan/articles/90ff71f300c2c8</id>
        <link href="https://zenn.dev/omusan/articles/90ff71f300c2c8"/>
        <updated>2023-01-09T07:42:47.000Z</updated>
        <summary type="html"><![CDATA[久方ぶりにpythonで競プロに挑戦しようと思い、思い出しがてらメモ。

 １行での入力
n = input() # 1つの文字列を受け取る
n = int(input()) # 1つの整数を受け取る
n = float(input())　# 1つの小数を受け取る

n = input().split(sep) # 複数の文字列をリストとして受け取る
n = list(map(int, input().split(sep))) # 複数の整数をリストとして受け取る

 複数行での入力
S = []
for _ in range (X)
S.append(input()) # X回入力があ...]]></summary>
        <author>
            <name>Sota Omura</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第3章: 正規表現 24. ファイル参照の抽出]]></title>
        <id>https://zenn.dev/kurokawa/articles/eefbdbf3c1026e</id>
        <link href="https://zenn.dev/kurokawa/articles/eefbdbf3c1026e"/>
        <updated>2023-01-09T06:30:08.000Z</updated>
        <summary type="html"><![CDATA[問題

 24. ファイル参照の抽出
記事から参照されているメディアファイルをすべて抜き出せ．

 solution24.py
import pandas as pd
import re

df_j = pd.read_json('chapter03/jawiki-country.json.gz', lines=True, compression='infer')
text_uk = df_j.query('title=="イギリス"')['text'].values[0]

media = re.findall(r'\[\[ファイル:(.+?)(?:\|.+)*\]\]', tex...]]></summary>
        <author>
            <name>kurokawa5</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】Webで使えるPython 基礎編 【１環境説明】]]></title>
        <id>https://zenn.dev/web_life_ch/articles/49e39f16a07691</id>
        <link href="https://zenn.dev/web_life_ch/articles/49e39f16a07691"/>
        <updated>2023-01-09T06:29:43.000Z</updated>
        <summary type="html"><![CDATA[【１環境説明】
YouTube: https://youtu.be/iwVYTpC5iZM
https://youtu.be/iwVYTpC5iZM
今回からPythonの基本操作について解説します。
動作環境につきましては、
自分の方では
https://docs.anaconda.com/navigator/index.html
こちらの「Anaconda Navigator」というツールを使用して、
・Python本体
・ライブラリの管理
・仮想環境の構築
これらをまとめて設定しています。
!
こちらのツールですが、いくつか注意が必要です。
・容量が３G程度必要
・PCのユーザ...]]></summary>
        <author>
            <name>Web Life CH</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonコードを暗号化(難読化)【pyarmor】]]></title>
        <id>https://zenn.dev/momiji777/articles/65d0167a39b9c9</id>
        <link href="https://zenn.dev/momiji777/articles/65d0167a39b9c9"/>
        <updated>2023-01-09T06:15:20.000Z</updated>
        <summary type="html"><![CDATA[https://www.youtube.com/watch?v=dTe2_j1qIYc
pythonファイルを共有するときに見られたくない部分があるかと思います。
「pyarmor」を利用することで、それを可能にすることができます。
python -m venv test
.\test\Scripts\Activate
pip install pyarmor
今回暗号化するのはこのarmor.pyファイル
import tkinter
import tkinter.ttk as ttk

class Application(tkinter.Frame):
    def __init__...]]></summary>
        <author>
            <name>momiji777</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第3章: 正規表現 23. セクション構造]]></title>
        <id>https://zenn.dev/kurokawa/articles/7c09df652cd1e1</id>
        <link href="https://zenn.dev/kurokawa/articles/7c09df652cd1e1"/>
        <updated>2023-01-09T05:43:34.000Z</updated>
        <summary type="html"><![CDATA[問題

 23. セクション構造
記事中に含まれるセクション名とそのレベル（例えば”== セクション名 ==”なら1）を表示せよ.

 solution23.py
import re
import pandas as pd

df = pd.read_json('chapter03/jawiki-country.json.gz', lines=True, compression='infer')
text_uk = df.query('title=="イギリス"')['text'].values[0]

section_pattern = r'(={2,})(.+?)={2,}'
s...]]></summary>
        <author>
            <name>kurokawa5</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonプログラムで野村証券のIPOブックビルディング申込を自動化しよう！]]></title>
        <id>https://zenn.dev/toranoko114/books/c087933ac982a3</id>
        <link href="https://zenn.dev/toranoko114/books/c087933ac982a3"/>
        <updated>2023-01-09T05:23:32.000Z</updated>
        <summary type="html"><![CDATA[野村証券のIPOブックビルディング申込を自動化するプログラムを公開します。]]></summary>
        <author>
            <name>toranoko114</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VSCode で極力手を抜いて開発するハンドブック]]></title>
        <id>https://zenn.dev/naa0yama/books/python-boilerplate</id>
        <link href="https://zenn.dev/naa0yama/books/python-boilerplate"/>
        <updated>2023-01-09T04:58:32.000Z</updated>
        <summary type="html"><![CDATA[Windows 環境に Linux をお手軽構築し新規参入とチーム開発に使えるハンドブックとして整理しました。

Windows / WSL2 / VSCode / Python / Docker
asdf / fish / pre-commit / black / flake8 / isort / mypy / pytest / tox]]></summary>
        <author>
            <name>naa0yama</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[レインボーテーブル攻撃とは（＊コードによる実演あり）]]></title>
        <id>https://zenn.dev/oreilly_ota/articles/ad54f3478a832e</id>
        <link href="https://zenn.dev/oreilly_ota/articles/ad54f3478a832e"/>
        <updated>2023-01-09T04:50:09.000Z</updated>
        <summary type="html"><![CDATA[レインボー攻撃とは
レインボー攻撃とは、レインボーテーブルを使ってハッシュ化されたデータを解読する攻撃である。アカウントを乗っ取る目的として、パスワード解読に使われるパスワードクラックの一つとして知られる。

 ハッシュ化
まずハッシュ化とは、「ハッシュ関数」というアルゴリズムによって、平文をハッシュ値に書き換えることである。（例：Password123という平文から、43nfneo43jofde31sdwというハッシュ値へ書き換える）

 ハッシュ化と暗号化の違い
ハッシュ化されたパスワードは、暗号化されたパスワードとは異なり、データを元に戻すことができない。一方で、暗号化されたパ...]]></summary>
        <author>
            <name>オライリーヨッシー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonプログラムでSBI証券のIPOブックビルディング申込を自動化しよう！]]></title>
        <id>https://zenn.dev/toranoko114/books/553d557cb2c12f</id>
        <link href="https://zenn.dev/toranoko114/books/553d557cb2c12f"/>
        <updated>2023-01-09T03:30:12.000Z</updated>
        <summary type="html"><![CDATA[SBI証券のIPOブックビルディング申込を自動化するプログラムを公開します。]]></summary>
        <author>
            <name>toranoko114</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[python軽量exeライブラリNuitkaが本当か検証してみた。]]></title>
        <id>https://zenn.dev/momiji777/articles/30961baceb9897</id>
        <link href="https://zenn.dev/momiji777/articles/30961baceb9897"/>
        <updated>2023-01-08T22:22:51.000Z</updated>
        <summary type="html"><![CDATA[はじめに
以前、「pyinstaller」でexe化する方法をご紹介しました。
https://zenn.dev/momiji777/articles/2e733826b32fa6
https://www.youtube.com/watch?v=4IbA14BPQTI
今回は、「Nuitka」というライブラリを用いて作成します。

 仮想環境を作成し、ライブラリをインストール
python -m venv exe
.\exe\Scripts\activate
pip install nuitka

 exe化するプログラムを作成
実際にexe化していくために、簡単なアプリを作成します...]]></summary>
        <author>
            <name>momiji777</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第3章: 正規表現 22. カテゴリ名の抽出]]></title>
        <id>https://zenn.dev/kurokawa/articles/b4b017a929039e</id>
        <link href="https://zenn.dev/kurokawa/articles/b4b017a929039e"/>
        <updated>2023-01-08T14:49:53.000Z</updated>
        <summary type="html"><![CDATA[問題

 22. カテゴリ名の抽出
記事のカテゴリ名を（行単位ではなく名前で）抽出せよ．

 solution22.py
import pandas as pd

df = pd.read_json('chapter03/jawiki-country.json.gz', lines=True, compression='infer')
text_uk = df.query('title=="イギリス"')['text'].values[0]
splited_text_uk = text_uk.split('\n')
ans = list(filter(lambda x: '[Cate...]]></summary>
        <author>
            <name>kurokawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第3章: 正規表現 21. カテゴリ名を含む行を抽出]]></title>
        <id>https://zenn.dev/kurokawa/articles/53e0c4f61d8801</id>
        <link href="https://zenn.dev/kurokawa/articles/53e0c4f61d8801"/>
        <updated>2023-01-08T13:28:45.000Z</updated>
        <summary type="html"><![CDATA[問題

 21. カテゴリ名を含む行を抽出
記事中でカテゴリ名を宣言している行を抽出せよ

 solution21.py
import pandas as pd

df = pd.read_json('chapter03/jawiki-country.json.gz', lines=True, compression='infer')
text_uk = df.query('title=="イギリス"')['text'].values[0]

splited_text_uk = text_uk.split('\n')
ans = list(filter(lambda x: '[Cat...]]></summary>
        <author>
            <name>kurokawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[COROS(カロス)トレーニングハブのデータをAPI経由で取得する]]></title>
        <id>https://zenn.dev/quiver/articles/304e1833b14ce9</id>
        <link href="https://zenn.dev/quiver/articles/304e1833b14ce9"/>
        <updated>2023-01-08T12:01:13.000Z</updated>
        <summary type="html"><![CDATA[キプチョゲやキリアンが愛用しているスポーツウォッチCOROS(カロス)は、計測したデータをダッシュボードTraining Hubから閲覧できます。
生成されたデータをシステマティックな取得したいことがありますが、残念ながら、Training Hubは公式なAPIが存在しません。
そのため、ブラウザ(アプリ)閲覧時と同じ仕組みを使い、COROS Training HubからAPIでデータをcURL/Python経由で取得する方法を紹介します。

 前提

COROS Training Hubのアカウントを所持している
2023/01/09時点の情報


 APIの流れ
COROS Trai...]]></summary>
        <author>
            <name>quiver</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【たった1分】AtCoder初心者が初めて正解するため知っておくべきこと]]></title>
        <id>https://zenn.dev/sobaotto/articles/2648e20d3ad41f</id>
        <link href="https://zenn.dev/sobaotto/articles/2648e20d3ad41f"/>
        <updated>2023-01-08T10:39:55.000Z</updated>
        <summary type="html"><![CDATA[注釈
自分が競プロを始めたばかりなので、問題を解く上で必要だと思ったことや気づきなどを随時まとめていこうと思います。

 入力を受け取る方法

入力


N
x1
x2
:
xN


入力例


3
2
5
4

n = int(input())
list=[input() for i in range(n)]

print(list) # [2, 5, 4]

 参考
https://qiita.com/jamjamjam/items/e066b8c7bc85487c0785]]></summary>
        <author>
            <name>sobaotto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Visual StudioでPythonを使用する方法]]></title>
        <id>https://zenn.dev/mom/articles/4fd7c02bcc9087</id>
        <link href="https://zenn.dev/mom/articles/4fd7c02bcc9087"/>
        <updated>2023-01-08T09:45:36.000Z</updated>
        <summary type="html"><![CDATA[Python開発では、Visual Studioではなく、Visual Studio Codeを使用することが一般的ですが、C++などの開発経験が豊富で、Visual Studioに使い慣れた方がPythonを使いたい場合は、Visual Studioを選択したいかもしれません。
そんな方のために、Visual StudioでPythonを実行するにあたり、最低限知っておくと、スムーズにPython実行までできる知識を以下にまとめています。

 前提
Visual Studioをインストール済みであること

 準備
Visual Studioは起動していない状態で、以下の手順に沿って、...]]></summary>
        <author>
            <name>TechStar</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-080｜A - Parking]]></title>
        <id>https://zenn.dev/hyperdb/articles/f1b425cb431524</id>
        <link href="https://zenn.dev/hyperdb/articles/f1b425cb431524"/>
        <updated>2023-01-08T09:33:31.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-080 A - Parking



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    n, a, b = getIntMap()
    c = n * a

    print(c if c < b else b)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-079｜A - Good Integer]]></title>
        <id>https://zenn.dev/hyperdb/articles/9365eef7818dde</id>
        <link href="https://zenn.dev/hyperdb/articles/9365eef7818dde"/>
        <updated>2023-01-08T09:33:31.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-078 A - Good Integer



 提出結果
def getString():
    return input()


def main():
    n = list(getString())
    n.sort()

    print('Yes' if n[0] == n[1] and n[0] == n[2] else 'No')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-080｜B - Harshad Number]]></title>
        <id>https://zenn.dev/hyperdb/articles/8e577692cde16a</id>
        <link href="https://zenn.dev/hyperdb/articles/8e577692cde16a"/>
        <updated>2023-01-08T09:33:30.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-080 B - Harshad Number



 提出結果
def getInt():
    return int(input())


def main():
    x = getInt()
    l = map(int, list(str(x)))

    print('Yes' if x % sum(l) == 0 else 'No')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-079｜B - Lucas Number]]></title>
        <id>https://zenn.dev/hyperdb/articles/5fc1c75bbb986b</id>
        <link href="https://zenn.dev/hyperdb/articles/5fc1c75bbb986b"/>
        <updated>2023-01-08T09:33:30.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-079 B - Lucas Number



 提出結果
def getInt():
    return int(input())


def main():
    n = getInt()
    l = [0] * (n + 1)

    l[0] = 2
    l[1] = 1
    for i in range(2, n + 1):
        l[i] = l[i - 1] + l[i - 2]
    print(l[n])


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ESP32でUDP通信する方法を誰よりもわかりやすく解説　お試し編]]></title>
        <id>https://zenn.dev/yuta_enginner/articles/2886f2b41a048f</id>
        <link href="https://zenn.dev/yuta_enginner/articles/2886f2b41a048f"/>
        <updated>2023-01-08T09:18:32.000Z</updated>
        <summary type="html"><![CDATA[「esp32 UDP 方法」でググると、色々な記事がヒットしますが、断片的な情報しか書かれていない記事が多すぎます。
また、ホストやポートなどで、いきなり「127.0.0.1」と書かれても、それが任意の数値なのか何か意味のある数値なのか解説されていないので、初心者にはあまりにも不親切です。
そこで、この記事では工作をするために必要な情報を解説しつつ、読んだ人が誰でも作れることを目的に解説します。
※ ぶっちゃけ、レイヤーとかプロトコルなんて工作する上ではどうでもいいので、その辺の解説はしません

 UDPとTCP どちらを選ぶか
前提として、この記事に辿り着いた時点で、読者は「ESP32...]]></summary>
        <author>
            <name>Yuta</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第3章: 正規表現 20. JSONデータの読み込み]]></title>
        <id>https://zenn.dev/kurokawa/articles/2865e205684475</id>
        <link href="https://zenn.dev/kurokawa/articles/2865e205684475"/>
        <updated>2023-01-08T08:55:19.000Z</updated>
        <summary type="html"><![CDATA[問題

Wikipediaの記事を以下のフォーマットで書き出したファイルjawiki-country.json.gzがある．

1行に1記事の情報がJSON形式で格納される
各行には記事名が”title”キーに，記事本文が”text”キーの辞書オブジェクトに格納され，そのオブジェクトがJSON形式で書き出される
ファイル全体はgzipで圧縮される

以下の処理を行うプログラムを作成せよ．


 20. JSONデータの読み込み
Wikipedia記事のJSONファイルを読み込み，「イギリス」に関する記事本文を表示せよ．問題21-29では，ここで抽出した記事本文に対して実行せよ．

 ...]]></summary>
        <author>
            <name>kurokawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Windows 10】タスクスケジューラで定期的にプログラムを実行する]]></title>
        <id>https://zenn.dev/eito_blog/articles/cf6fbfdc9314b1</id>
        <link href="https://zenn.dev/eito_blog/articles/cf6fbfdc9314b1"/>
        <updated>2023-01-08T08:49:29.000Z</updated>
        <summary type="html"><![CDATA[このページではbatファイルを定期的（毎日15:00）に実行することを例に、設定方法を解説します。

 タスクスケジューラを開く
Cortanaの検索窓に「タスクスケジューラ」と入力し、表示されたタスクスケジューラをクリックして開きます。


 タスクを作成する
基本タスクの作成をクリックします。


 基本タスクの作成
任意の名前と説明を入力して次へをクリックします。


 トリガー
任意の頻度を選択（本ページでは毎日を選択）し、次へをクリックします。

任意の時間を設定（本ページでは15:00:00）し、次へをクリックします。

プログラムの開始を選択し、次へをクリックします。

...]]></summary>
        <author>
            <name>エイト</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第2章: UNIXコマンド 19. 各行の1コラム目の文字列の出現頻度を求め，〜]]></title>
        <id>https://zenn.dev/kurokawa/articles/54b2c1f7b97963</id>
        <link href="https://zenn.dev/kurokawa/articles/54b2c1f7b97963"/>
        <updated>2023-01-08T05:33:22.000Z</updated>
        <summary type="html"><![CDATA[問題

 19. 各行の1コラム目の文字列の出現頻度を求め，出現頻度の高い順に並べる
各行の1列目の文字列の出現頻度を求め，その高い順に並べて表示せよ．確認にはcut, uniq, sortコマンドを用いよ．

 solution19.py
import pandas as pd

df = pd.read_csv('chapter02/popular-names.txt', sep='\t', header=None)
print(df.iloc[:,0].value_counts())
#print(df[0].value_counts())


 output
James   ...]]></summary>
        <author>
            <name>kurokawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第2章: UNIXコマンド 18. 各行を3コラム目の数値の降順にソート]]></title>
        <id>https://zenn.dev/kurokawa/articles/8eb084693fa70d</id>
        <link href="https://zenn.dev/kurokawa/articles/8eb084693fa70d"/>
        <updated>2023-01-08T04:57:30.000Z</updated>
        <summary type="html"><![CDATA[問題

 18. 各行を3コラム目の数値の降順にソート
各行を3コラム目の数値の逆順で整列せよ（注意: 各行の内容は変更せずに並び替えよ）．確認にはsortコマンドを用いよ（この問題はコマンドで実行した時の結果と合わなくてもよい）．

 solution18.py
import pandas as pd

df = pd.read_csv('chapter02/popular-names.txt', sep='\t', header=None)
print(df.sort_values(2 ,ascending=False))


 output
            0  1  ...]]></summary>
        <author>
            <name>kurokawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第2章: UNIXコマンド 17. １列目の文字列の異なり]]></title>
        <id>https://zenn.dev/kurokawa/articles/ada4ad1ef9b260</id>
        <link href="https://zenn.dev/kurokawa/articles/ada4ad1ef9b260"/>
        <updated>2023-01-08T04:05:19.000Z</updated>
        <summary type="html"><![CDATA[問題

 17. １列目の文字列の異なり
1列目の文字列の種類（異なる文字列の集合）を求めよ．確認にはcut, sort, uniqコマンドを用いよ．

 solution17.py
import pandas as pd

df = pd.read_csv('chapter02/popular-names.txt', sep='\t', header=None)
ans = list(set(df.iloc[:,0]))
print(sorted(ans))


 output
['Abigail', 'Aiden', 'Alexander', 'Alexis', 'Alice',...]]></summary>
        <author>
            <name>kurokawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第2章: UNIXコマンド 16. ファイルをN分割する]]></title>
        <id>https://zenn.dev/kurokawa/articles/bf5ce77a0bd7f6</id>
        <link href="https://zenn.dev/kurokawa/articles/bf5ce77a0bd7f6"/>
        <updated>2023-01-07T13:28:25.000Z</updated>
        <summary type="html"><![CDATA[問題

 16. ファイルをN分割する
自然数Nをコマンドライン引数などの手段で受け取り，入力のファイルを行単位でN分割せよ．同様の処理をsplitコマンドで実現せよ．

 solution16.py
import sys
import pandas as pd

if len(sys.argv) == 1:
    print('Set arg n, like "python chapter02/solution16.py 5"')
else:
    n = int(sys.argv[1])
    df = pd.read_csv('chapter02/popular-name...]]></summary>
        <author>
            <name>kurokawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ロググループに保存されているログを定期的にS3にエクスポートしてみた。]]></title>
        <id>https://zenn.dev/kuromame614/articles/3a86349d7addb7</id>
        <link href="https://zenn.dev/kuromame614/articles/3a86349d7addb7"/>
        <updated>2023-01-07T11:30:55.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは、山田です。
現在携わっている案件で、CloudWatchロググループに保存されているログを一定期間経過後に長期保管用に作成したS3バケットにエクスポートするコードを作成したので以下に記載していきます。
よろしくお願いいたします。

 全体概要図
全体概要図は以下の通りです。

①：ロググループ一覧とS3フォルダ一覧を比較します。
②：比較した結果S3フォルダに名前がないもの似関しては、新規でS3フォルダを作成します。

③：ロググループに保存されているログをS3にエクスポートします。

 コード
以下が今回作成したコードは以下になります。
import boto...]]></summary>
        <author>
            <name>黒豆。</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第2章: UNIXコマンド 15. 末尾のN行を出力]]></title>
        <id>https://zenn.dev/kurokawa/articles/d8e944eeafbb4f</id>
        <link href="https://zenn.dev/kurokawa/articles/d8e944eeafbb4f"/>
        <updated>2023-01-07T10:48:37.000Z</updated>
        <summary type="html"><![CDATA[問題

 15. 末尾のN行を出力
自然数Nをコマンドライン引数などの手段で受け取り，入力のうち末尾のN行だけを表示せよ．確認にはtailコマンドを用いよ．

 solution15.py
import sys
import pandas as pd
import fire

if len(sys.argv) == 1:
    print('Set arg n, like "python chapter02/solution15.py 5"')
else:
    n = int(sys.argv[1])
    df = pd.read_csv('chapter02/popula...]]></summary>
        <author>
            <name>kurokawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-078｜A - HEX]]></title>
        <id>https://zenn.dev/hyperdb/articles/e6dc594f04151a</id>
        <link href="https://zenn.dev/hyperdb/articles/e6dc594f04151a"/>
        <updated>2023-01-07T10:07:08.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-078 A - HEX



 提出結果
def getStringMap():
    return input().split()


def main():
    x, y = getStringMap()
    print('=' if x == y else '<' if x < y else '>')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-077｜A - Rotation]]></title>
        <id>https://zenn.dev/hyperdb/articles/2d244241fc1b65</id>
        <link href="https://zenn.dev/hyperdb/articles/2d244241fc1b65"/>
        <updated>2023-01-07T10:07:08.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-077 A - Rotation



 提出結果
def getString():
    return input()


def main():
    s = getString()
    t = getString()

    print('YES' if s == t[::-1] else 'NO')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-078｜B - ISU]]></title>
        <id>https://zenn.dev/hyperdb/articles/1fd089494b7130</id>
        <link href="https://zenn.dev/hyperdb/articles/1fd089494b7130"/>
        <updated>2023-01-07T10:07:08.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-078 B - ISU



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    x, y, z = getIntMap()

    print((x - z) // (y + z))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-077｜B - Around Square]]></title>
        <id>https://zenn.dev/hyperdb/articles/1c05f80c6fe29c</id>
        <link href="https://zenn.dev/hyperdb/articles/1c05f80c6fe29c"/>
        <updated>2023-01-07T10:07:07.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-077 B - Around Square



 提出結果
import math


def getInt():
    return int(input())


def main():
    n = getInt()
    m = int(math.sqrt(n))
    print(m ** 2)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python で実行時型チェックをしよう]]></title>
        <id>https://zenn.dev/wsuzume/articles/5bd0cdd2d227f6</id>
        <link href="https://zenn.dev/wsuzume/articles/5bd0cdd2d227f6"/>
        <updated>2023-01-07T09:27:08.000Z</updated>
        <summary type="html"><![CDATA[私の彼氏、靴磨きクリームを「シュークリームには違いないだろ」って食べちゃうのよ
　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　—— 暗黙の型変換 ——

 はじめに
最近 Python を書いていて少しでも規模が大きくなってくると、事あるごとに型アノテーションと型チェックを仕込むようになってきた。そんなに気になるなら型のある言語を使えばいいじゃないという話だが、データ分析などで書きながら試行錯誤がしやすいという意味では Python のガバさはむしろ有用だと思っている。そうはいうたかてガバすぎるのでちょうどよく引き締めましょうね、という現状の私の局所解を紹介する。
Pyt...]]></summary>
        <author>
            <name>Josh Nobus</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Python]exeファイルを実行するだけで環境構築が完了するWinPython]]></title>
        <id>https://zenn.dev/tremendous1192/articles/3907160eb5b393</id>
        <link href="https://zenn.dev/tremendous1192/articles/3907160eb5b393"/>
        <updated>2023-01-07T09:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
AI、機械学習などの勉強を始めようとインターネットの海に潜ると、日本語圏の情報は大体がPythonです(勿論RやC言語、C++もありますが、主流はPythonと思われます)。
そのため初心者がPythonの環境構築を始めるのは自然な流れですが、この環境構築が曲者で初心者殺しになっています。
もっと簡単にPythonを始める方法は無いのでしょうか?
既にタイトルに結論を書いていますね、WinPythonをお勧めします。
この記事では、WinPythonのダウンロード方法から最初のPythonプログラムの作成まで書きました。

 2023/1/8 誤字修正

 WinPytho...]]></summary>
        <author>
            <name>Tremendous1192</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第2章: UNIXコマンド 14. 先頭からN行を出力]]></title>
        <id>https://zenn.dev/kurokawa/articles/e26aef6b38b0c5</id>
        <link href="https://zenn.dev/kurokawa/articles/e26aef6b38b0c5"/>
        <updated>2023-01-07T08:29:53.000Z</updated>
        <summary type="html"><![CDATA[問題

 14. 先頭からN行を出力
自然数Nをコマンドライン引数などの手段で受け取り，入力のうち先頭のN行だけを表示せよ．確認にはheadコマンドを用いよ．

 solution14.py
import sys
import pandas as pd
#import fire

if len(sys.argv) == 1:
    print('Set arg n, like "python chapter02/solution14.py 5"')
else:
    n = int(sys.argv[1])
    df = pd.read_csv('chapter02/popu...]]></summary>
        <author>
            <name>kurokawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第2章: UNIXコマンド 13. col1.txtとcol2.txtをマージ]]></title>
        <id>https://zenn.dev/kurokawa/articles/274a678b669f87</id>
        <link href="https://zenn.dev/kurokawa/articles/274a678b669f87"/>
        <updated>2023-01-07T07:50:56.000Z</updated>
        <summary type="html"><![CDATA[問題

 13. col1.txtとcol2.txtをマージ
12で作ったcol1.txtとcol2.txtを結合し，元のファイルの1列目と2列目をタブ区切りで並べたテキストファイルを作成せよ．確認にはpasteコマンドを用いよ．

 solution13.py
import pandas as pd

df_col1 = pd.read_csv('chapter02/col1.txt', header=None)
df_col2 = pd.read_csv('chapter02/col2.txt', header=None)
df_merged = pd.concat([df_co...]]></summary>
        <author>
            <name>kurokawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TensorFlow Hubから取得した機械学習モデルをONNX形式に変換する]]></title>
        <id>https://zenn.dev/yuyakato/articles/226faa817ed01d</id>
        <link href="https://zenn.dev/yuyakato/articles/226faa817ed01d"/>
        <updated>2023-01-07T07:32:21.000Z</updated>
        <summary type="html"><![CDATA[4行まとめ

TensorFlow HubからはSavedModel形式で機械学習モデルをダウンロードできる。

tf2onnxを使うことでSavedModel形式からONNX形式に変換できる。

tf2onnxでは--rename-inputs、--rename-outputsオプションを使うことでノード名を指定できる。

onnx、tensorflow、tf2onnxパッケージの依存関係はややこしい。


 はじめに
TensorFlow Hubでは様々な機械学習モデルが配布されています。
これらの機械学習モデルをONNX形式に変換して利用する機会がありましたので、その手順を備忘...]]></summary>
        <author>
            <name>Yuya Kato</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第2章:UNIXコマンド12. 1列目をcol1.txtに,2列目をcol2.txtに保存]]></title>
        <id>https://zenn.dev/kurokawa/articles/ca327241cbfc0f</id>
        <link href="https://zenn.dev/kurokawa/articles/ca327241cbfc0f"/>
        <updated>2023-01-07T04:09:16.000Z</updated>
        <summary type="html"><![CDATA[問題

 12. 1列目をcol1.txtに，2列目をcol2.txtに保存
各行の1列目だけを抜き出したものをcol1.txtに，2列目だけを抜き出したものをcol2.txtとしてファイルに保存せよ．確認にはcutコマンドを用いよ．

 solution12.py
import pandas as pd

df = pd.read_csv('chapter02/popular-names.txt', sep='\t', header=None)
df.iloc[:,0].to_csv('chapter02/col1.txt', index=False, header=False)
...]]></summary>
        <author>
            <name>kurokawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第2章: UNIXコマンド 11. タブをスペースに置換]]></title>
        <id>https://zenn.dev/kurokawa/articles/323f3533ac7da7</id>
        <link href="https://zenn.dev/kurokawa/articles/323f3533ac7da7"/>
        <updated>2023-01-07T03:00:31.000Z</updated>
        <summary type="html"><![CDATA[問題

 11. タブをスペースに置換
タブ1文字につきスペース1文字に置換せよ．確認にはsedコマンド，trコマンド，もしくはexpandコマンドを用いよ．

 solution11.py
import pandas as pd

df = pd.read_csv('chapter02/popular-names.txt', sep='\t', header=None)
df.to_csv('chapter02/solution11.txt', sep=' ', index=False, header=None)


 solution11.txt
Mary F 7065 1880...]]></summary>
        <author>
            <name>kurokawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第2章: UNIXコマンド 10. 行数のカウント]]></title>
        <id>https://zenn.dev/kurokawa/articles/f753807439cee2</id>
        <link href="https://zenn.dev/kurokawa/articles/f753807439cee2"/>
        <updated>2023-01-07T02:39:12.000Z</updated>
        <summary type="html"><![CDATA[問題

 10. 行数のカウント
行数をカウントせよ．確認にはwcコマンドを用いよ．

 solution10.py
import pandas as pd

df = pd.read_csv('chapter02/popular-names.txt', sep='\t', header=None)
print(len(df))


 output
2780


 solution10.sh
wc -l popular-names.txt


 output
2780 popular-names.txt

この問題では、len()を使用します。pandas.DataFrameをlen...]]></summary>
        <author>
            <name>kurokawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【SwitchBot】雨が降りそうなときに廊下ライトの色を変えてお知らせする機能を作る]]></title>
        <id>https://zenn.dev/tanny/articles/808487545eb30f</id>
        <link href="https://zenn.dev/tanny/articles/808487545eb30f"/>
        <updated>2023-01-07T00:36:58.000Z</updated>
        <summary type="html"><![CDATA[やったこと
「午後から雨予報なのに、天気予報を見逃していて、家を出る時に傘を持って行くのを忘れてしまった！」
そんな経験はありませんか？（私はよくあります。朝に晴れている時によくやります 😇）というわけで今回は、雨の予報を絶対に見逃さないように、午後の降水確率に応じて廊下のライトの色を変える機能を作ってみました。さすがにライトの色が違えば気づくはず！
スマートライトは SwichBot のライトを利用します。API 経由で色を制御可能で、それでいて他社製のスマートライトより値段が安いのでおすすめです。

 完成イメージ
以下のイメージのように、降水確率が高くなるにつれてライトが青くな...]]></summary>
        <author>
            <name>Tanny</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonでUTCの日時文字列をJSTに変換する]]></title>
        <id>https://zenn.dev/ymiz/articles/2a915f7861372d</id>
        <link href="https://zenn.dev/ymiz/articles/2a915f7861372d"/>
        <updated>2023-01-06T21:40:55.000Z</updated>
        <summary type="html"><![CDATA[問題

APIから、日時情報として 2023-01-06T21:02:54.87 の文字列を受け取った

仕様上、UTCである


分かりやすさのため、日本時間で扱いたい
どうするか


 対応
import datetime
from dateutil import tz

def convert_exec_date(raw: str):
    jst = tz.gettz("Asia/Tokyo")
    d = datetime.datetime.strptime(raw, '%Y-%m-%dT%H:%M:%S.%f')
    return d.astimezone(js...]]></summary>
        <author>
            <name>ymiz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第1章: 準備運動 09. Typoglycemia]]></title>
        <id>https://zenn.dev/kurokawa/articles/6a5b05e171449e</id>
        <link href="https://zenn.dev/kurokawa/articles/6a5b05e171449e"/>
        <updated>2023-01-06T16:42:00.000Z</updated>
        <summary type="html"><![CDATA[問題

 09. Typoglycemia
スペースで区切られた単語列に対して，各単語の先頭と末尾の文字は残し，それ以外の文字の順序をランダムに並び替えるプログラムを作成せよ．ただし，長さが４以下の単語は並び替えないこととする．適当な英語の文（例えば”I couldn’t believe that I could actually understand what I was reading : the phenomenal power of the human mind .”）を与え，その実行結果を確認せよ.

 solution09.py
import random

def ty...]]></summary>
        <author>
            <name>kurokawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第1章: 準備運動 08. 暗号文]]></title>
        <id>https://zenn.dev/kurokawa/articles/01550a6a91dc46</id>
        <link href="https://zenn.dev/kurokawa/articles/01550a6a91dc46"/>
        <updated>2023-01-06T15:18:23.000Z</updated>
        <summary type="html"><![CDATA[問題

 08. 暗号文
与えられた文字列の各文字を，以下の仕様で変換する関数cipherを実装せよ．

英小文字ならば(219 - 文字コード)の文字に置換
その他の文字はそのまま出力

この関数を用い，英語のメッセージを暗号化・復号化せよ．

 solution08.py
def cipher(s: str) -> str:
    # 変換後の文字列を格納する変数
    result = ""
    # 文字列 s の各文字を処理する
    for c in s:
        # 英小文字の場合は変換する
        if c.islower():
    ...]]></summary>
        <author>
            <name>kurokawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pulpでシフト作成を自動化したりした]]></title>
        <id>https://zenn.dev/uekann/articles/8a26aac5a7de9e</id>
        <link href="https://zenn.dev/uekann/articles/8a26aac5a7de9e"/>
        <updated>2023-01-06T14:15:46.000Z</updated>
        <summary type="html"><![CDATA[はじめに
大学でシフトを組まねばならないことになったので自動化した。
自動でシフトを組む部分だけ(エクセルファイルの集計などを除いて)まとめてコードにしたものがこれ。
import pulp

n = 2  # 一度に入る人数
members = ["A", "B", "C", "D", "E"]  # 　入る人
days = ["月", "火", "水", "木", "金"]  # 入る時間

# request_table[i][j]はdays[i]におけるmembers[j]の希望度
request_table = [
    [3, 1, 1, 2, 3],
    [2, ...]]></summary>
        <author>
            <name>uekann</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第1章: 準備運動 07. テンプレートによる文生成]]></title>
        <id>https://zenn.dev/kurokawa/articles/17f59cbb7e18d3</id>
        <link href="https://zenn.dev/kurokawa/articles/17f59cbb7e18d3"/>
        <updated>2023-01-06T14:09:57.000Z</updated>
        <summary type="html"><![CDATA[問題

 07. テンプレートによる文生成
引数x, y, zを受け取り「x時のyはz」という文字列を返す関数を実装せよ．さらに，x=12, y=”気温”, z=22.4として，実行結果を確認せよ．

 solution07.py
def template_based_sentence_generation(x, y, z):
    return f'{x}時の{y}は{z}'
    #return '{}時の{}は{}'.format(x, y, z)

x = 12
y = "気温"
z = 22.4

print(template_based_sentence_genera...]]></summary>
        <author>
            <name>kurokawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[自作データセットでWhisperをファインチューニングしたら、独自用語だらけのクラロワ実況でも使えるようになった：「ファインチューニング編」]]></title>
        <id>https://zenn.dev/k_sone/articles/4d137d58dd06a6</id>
        <link href="https://zenn.dev/k_sone/articles/4d137d58dd06a6"/>
        <updated>2023-01-06T13:34:24.000Z</updated>
        <summary type="html"><![CDATA[前回のあらずじ
前の記事はこちら
ファインチューニング用の自作データセットをspreadsheetで作れたので、これを使ってファインチューニングしていきたい。

 作った独自データセットでファインチューニングする
スプレッドシートで音声データと正解ラベルを作ることができたので、これを使ってファインチューニングします。
最初に使うライブラリをインストール
!pip install datasets>=2.6.1
!pip install git+https://github.com/huggingface/transformers
!pip install librosa
!pi...]]></summary>
        <author>
            <name>sonken625</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[自作データセットでWhisperをファインチューニングしたら、独自用語だらけのクラロワ実況でも使えるようになった：「データセット作成編」]]></title>
        <id>https://zenn.dev/k_sone/articles/e0c08268986ac2</id>
        <link href="https://zenn.dev/k_sone/articles/e0c08268986ac2"/>
        <updated>2023-01-06T13:33:43.000Z</updated>
        <summary type="html"><![CDATA[とりあえず結果
40分くらいの動画で一旦文字起こししてとりあえずファインチューニングしてみた。
いったん試しくらいでやったから適当だったが、その学習済みモデルで別動画の推論をした結果以下の結果になった

クラロワ実況の一文
正解の文章

めっちゃしやすくてで迫撃にもアチャクイを当てられるでしょ だもうマジで環境でゴレとかにもまあポイズンウッドだから普通に強くてエリポンも別にディガーで潰せると三銃士が来ても勝てるロイホグ系もねゴーストアチャクイゴブリンウッドだからめっちゃ強いんですよ

元のWhisperでpredictした文章

めっちゃしやすくてで迫撃にもあ着いを当てられるでしょ ...]]></summary>
        <author>
            <name>sonken625</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第1章: 準備運動 06. 集合]]></title>
        <id>https://zenn.dev/kurokawa/articles/056345c41dc0dc</id>
        <link href="https://zenn.dev/kurokawa/articles/056345c41dc0dc"/>
        <updated>2023-01-06T12:08:42.000Z</updated>
        <summary type="html"><![CDATA[問題

 06. 集合
“paraparaparadise”と”paragraph”に含まれる文字bi-gramの集合を，それぞれ, XとYとして求め，XとYの和集合，積集合，差集合を求めよ．さらに，’se’というbi-gramがXおよびYに含まれるかどうかを調べよ．

 solution06.py
def n_gram(target, n=2):
    return [target[idx:idx + n] for idx in range(len(target) - n + 1)]

text_x = 'paraparaparadise'
text_y = 'paragraph...]]></summary>
        <author>
            <name>kurokawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Lambda ローカルでサンプルアプリを動かす]]></title>
        <id>https://zenn.dev/nobumichi/articles/1616e54d42b5ec</id>
        <link href="https://zenn.dev/nobumichi/articles/1616e54d42b5ec"/>
        <updated>2023-01-06T11:32:25.000Z</updated>
        <summary type="html"><![CDATA[前回の記事でLambdaのローカル開発環境を構築したので、今回はAWSチュートリアルのサンプルをビルドして動かしてみる。
AWSのチュートリアルは下記を参考にする。
https://docs.aws.amazon.com/ja_jp/serverless-application-model/latest/developerguide/serverless-getting-started-hello-world.html
前回執筆した記事は下記の通り。
https://qiita.com/nobumichi/items/e876a448b7be21e7e51a

 作業環境

Window...]]></summary>
        <author>
            <name>のぶみち</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[構成元素を取り出し化合物を分類する]]></title>
        <id>https://zenn.dev/pejpo/articles/70e9dc0ae59ca0</id>
        <link href="https://zenn.dev/pejpo/articles/70e9dc0ae59ca0"/>
        <updated>2023-01-06T08:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
以前、こちらの記事で、「分子式から元素記号を取り出すロジックを思いつけない」と記載しましたが、正規表現を使って達成できたので、記事にしました。
「特定の元素を含む化合物を抽出する」際にも使用できますが、今回は、「候補化合物のリストから、指定した元素以外の元素を含む化合物を除く、というケースを取り上げます。
「C, H, N, Oの他、Sは含んで良いけど、SiやPを含む化合物は除きたい」といった場合を想定しています。本記事では、SMILES記法での構造式から選別しますが、分子式の場合は、前処理が不要のため、内容の2. 以降を参照ください。

 概要

含んで良い元素をポジティ...]]></summary>
        <author>
            <name>Dr_O</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第1章: 準備運動 05. n-gram]]></title>
        <id>https://zenn.dev/kurokawa/articles/3c7889d540ea1e</id>
        <link href="https://zenn.dev/kurokawa/articles/3c7889d540ea1e"/>
        <updated>2023-01-06T07:22:23.000Z</updated>
        <summary type="html"><![CDATA[問題

 05. n-gram
与えられたシーケンス（文字列やリストなど）からn-gramを作る関数を作成せよ．この関数を用い，”I am an NLPer”という文から単語bi-gram，文字bi-gramを得よ．

 solution05.py
def n_gram(target, n):
    return [target[idx:idx + n] for idx in range(len(target) - n + 1)]

text = 'I am an NLPer'
for i in range(1, 4):
    print(n_gram(text, i))#空白を...]]></summary>
        <author>
            <name>kurokawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2)  第1章: 準備運動 04. 元素記号]]></title>
        <id>https://zenn.dev/kurokawa/articles/37dd9b9d10fa32</id>
        <link href="https://zenn.dev/kurokawa/articles/37dd9b9d10fa32"/>
        <updated>2023-01-06T06:29:48.000Z</updated>
        <summary type="html"><![CDATA[問題

 04. 元素記号
“Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.”という文を単語に分解し，1, 5, 6, 7, 8, 9, 15, 16, 19番目の単語は先頭の1文字，それ以外の単語は先頭の2文字を取り出し，取り出した文字列から単語の位置（先頭から何番目の単語か）への連想配列（辞書型もしくはマップ型）を作成せよ．

 solution04.py
# (1) コンマ(,)、ピリオ...]]></summary>
        <author>
            <name>kurokawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hubspotのカスタムコードを使ってカスタムオブジェクトとコンタクトを関連付ける]]></title>
        <id>https://zenn.dev/readyfor_blog/articles/fd7f74fe13a014</id>
        <link href="https://zenn.dev/readyfor_blog/articles/fd7f74fe13a014"/>
        <updated>2023-01-06T06:15:05.000Z</updated>
        <summary type="html"><![CDATA[この記事で分かること
Hubspotのワークフローを使うと「新規作成」したオブジェクトを既存のオブジェクトに関連付けることができます。しかしワークフローでは既存のオブジェクト同士を関連付けることができません。
このようなときに、カスタムコードを使うと既存のオブジェクト同士を関連付けることができます。ここではその方法をまとめます。

 必要なこと


Operations Hub Professional以上の契約
あった方がいいこと


カスタム コード ワークフロー アクション のスキル

【新機能】カスタム コード アクションでPythonを使用可能です のスキル




 手順...]]></summary>
        <author>
            <name>Shohei Urano</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第1章: 準備運動 03. 円周率]]></title>
        <id>https://zenn.dev/kurokawa/articles/38772df8adf2e9</id>
        <link href="https://zenn.dev/kurokawa/articles/38772df8adf2e9"/>
        <updated>2023-01-06T05:57:08.000Z</updated>
        <summary type="html"><![CDATA[問題

 03. 円周率
“Now I need a drink, alcoholic of course, after the heavy lectures involving quantum mechanics.”という文を単語に分解し，各単語の（アルファベットの）文字数を先頭から出現順に並べたリストを作成せよ．

 solution03.py
# (1) コンマ(,)、ピリオド(.)を置換する
# (2) 文を単語に分割する
# (3) 各単語の文字数をカウントする

original_text = "Now I need a drink, alcoholic of cours...]]></summary>
        <author>
            <name>kurokawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】インスタンス変数をタプル形式でテキストファイルに保存する方法と、読み込む方法]]></title>
        <id>https://zenn.dev/shimotani/articles/0519af6ff4965b</id>
        <link href="https://zenn.dev/shimotani/articles/0519af6ff4965b"/>
        <updated>2023-01-06T05:45:21.000Z</updated>
        <summary type="html"><![CDATA[インスタンスをリストで保持しているときに、それぞれのインスタンス変数をテキストファイルに保存する方法と、保存したテキストファイルからインスタンスを復元する方法のご紹介です。

 インスタンス変数をテキストファイルに保存する方法
以下のようにProfileクラスがあってそのインスタンスをリストで保存している場合
# Profileクラス
class Profile:
  def __init__(self, name, age, email):
    self.name  = name
    self.age   = age
    self.email = email
# Profi...]]></summary>
        <author>
            <name>shimotani</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第1章: 準備運動 02. 「パトカー」＋「タクシー」＝「パタトクカシーー」]]></title>
        <id>https://zenn.dev/kurokawa/articles/dce7bbc530ed93</id>
        <link href="https://zenn.dev/kurokawa/articles/dce7bbc530ed93"/>
        <updated>2023-01-06T04:56:09.000Z</updated>
        <summary type="html"><![CDATA[問題

 02. 「パトカー」＋「タクシー」＝「パタトクカシーー」
「パトカー」＋「タクシー」の文字を先頭から交互に連結して文字列「パタトクカシーー」を得よ．

 solution02.py
text_p = "パトカー"
text_t = "タクシー"

ans = ""
for i in range(len(text_p)):
    ans += text_p[i] + text_t[i]

print(ans)


 output
パタトクカシーー

この問題では、2つの文字の先頭から1文字ずつ取り出します。
https://github.com/kurokawa5/nlp1...]]></summary>
        <author>
            <name>kurokawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第1章: 準備運動 01. 「パタトクカシーー」]]></title>
        <id>https://zenn.dev/kurokawa/articles/df1dad7701bfc4</id>
        <link href="https://zenn.dev/kurokawa/articles/df1dad7701bfc4"/>
        <updated>2023-01-06T03:59:48.000Z</updated>
        <summary type="html"><![CDATA[問題

 01. 「パタトクカシーー」
「パタトクカシーー」という文字列の1,3,5,7文字目を取り出して連結した文字列を得よ
英語版だと「パタトクカシーー」が「schooled」となります。
今回は「schooled」で挑戦してみました。

 solution01.py
text = "schooled"
print(text[::2])


 output
shoe

この問題では、文字列を逆順に並び替えます。
Pythonではlistなどのシーケンスオブジェクトに対してスライスと呼ばれる操作で範囲を指定して要素を選択できます。スライスは以下のように3つの値(start, end...]]></summary>
        <author>
            <name>kurokawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語処理100本ノック 2020 (Rev 2) 第1章: 準備運動 00. 文字列の逆順]]></title>
        <id>https://zenn.dev/kurokawa/articles/cf31a679a95020</id>
        <link href="https://zenn.dev/kurokawa/articles/cf31a679a95020"/>
        <updated>2023-01-05T14:56:54.000Z</updated>
        <summary type="html"><![CDATA[問題

 00. 文字列の逆順
文字列”stressed”の文字を逆に（末尾から先頭に向かって）並べた文字列を得よ．

 solution00.py
# Sequence types (list, tuple, string, range) support slicing.
# Therefore, you can sort in reverse order by setting text[::-1] in the slice operation.
text = "stressed"
print(text[::-1])

# You can also use reversed() m...]]></summary>
        <author>
            <name>kurokawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pytestが実行できる環境を作ってみる]]></title>
        <id>https://zenn.dev/ttttttttttakuya/articles/3b5e8936ca6372</id>
        <link href="https://zenn.dev/ttttttttttakuya/articles/3b5e8936ca6372"/>
        <updated>2023-01-05T13:31:10.000Z</updated>
        <summary type="html"><![CDATA[Pytest環境構築

 はじめに
テスト駆動 Python第2版のCHAPTER1を読み終えたので、環境構築の手順を自分のPC環境で行う場合
どのような手順を踏めばpytestが実行できる環境を用意できるのか、その手順をまとめてみました。

 環境

macOS Ventura 13.0.1
Python 3.9
Visual Studio Code
ターミナルで使うシェルはzshを使用


 前提

Visual Studio Code上でPythonが実行できる状態になってること。
pyenvインストール済みでターミナル上でpyenvコマンドが実行できること。


 構築手順
...]]></summary>
        <author>
            <name>Takuya Yamamura</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで動画ファイルからGIFアニメーションを作成]]></title>
        <id>https://zenn.dev/naoji/articles/python-video-export</id>
        <link href="https://zenn.dev/naoji/articles/python-video-export"/>
        <updated>2023-01-05T10:54:46.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Scratchで作った作品の解説のために、youtubeで動画を公開し記事にリンクを貼っていましたが、再生ボタンを押すという一手間、と、再生した後におすすめ動画一覧が表示されてしまう点、を改善したかったため、今回、GIFアニメーションに置き換えました。その際、色々な調整を効率化するためPythonのスクリプトで動画を変換してみました。

 GIFアニメーションとは
GIFは画像ファイルフォーマットの一つで、静止画だけでなくアニメーションも表示できます（詳しくはこちら）。音声はファイルに保存できない、256色までしか表示できない、等の短所がありますが、古くあるフォーマットなの...]]></summary>
        <author>
            <name>naoji</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DialogflowのログをJSONにパースするためのPythonパッケージをPYPIにあげてみた]]></title>
        <id>https://zenn.dev/peter_yusuke/articles/a1ab1e14115c5b</id>
        <link href="https://zenn.dev/peter_yusuke/articles/a1ab1e14115c5b"/>
        <updated>2023-01-05T09:59:02.000Z</updated>
        <summary type="html"><![CDATA[Dialogflowの会話データログをJSON形式に変換するPythonパッケージを作成しPYPIにあげたので紹介します。

 Dialogflowとは？
DialogflowとはGoogleが提供しているチャットボットの自然言語理解プラットフォームです。
簡単にNLPが搭載されたチャットボットを作成することができ、WEBやSNSに連携しやすいよう設計されている環境です。

 作ったもの
Dialogflowから出力されるResponsのログをJSONにパースするdialogflow-log-parserというPythonパッケージを作成しました。
https://pypi.org/pr...]]></summary>
        <author>
            <name>peter_yusuke</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Streamlit + Snowpark for Python を 2023 年な感じで動かしてみる]]></title>
        <id>https://zenn.dev/tmasuo/articles/41ee0bdbb5a8c2</id>
        <link href="https://zenn.dev/tmasuo/articles/41ee0bdbb5a8c2"/>
        <updated>2023-01-05T07:58:30.000Z</updated>
        <summary type="html"><![CDATA[🎍 2023 年な感じ？
Snowflake Advent Calendar 2022 でこんな記事を作成していました。
https://zenn.dev/tmasuo/articles/7d32bbe9a7532a
こちらで、

Streamlit の引数として取るのは Pandas DataFrame

と書いていたのですが、実は 2022 年末にリリースされた v1.16.0 で Pandas DataFrame のみならず、Snowpark DataFrame および PySpark DataFrame を引数として取ることができるようになっています🎉
https://dis...]]></summary>
        <author>
            <name>tmasuo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ubuntuにpyenvをインストール]]></title>
        <id>https://zenn.dev/hr0t15/articles/8ae3564bde2cce</id>
        <link href="https://zenn.dev/hr0t15/articles/8ae3564bde2cce"/>
        <updated>2023-01-04T13:33:01.000Z</updated>
        <summary type="html"><![CDATA[はじめに
基本的にはUbuntu向けのインフラの備忘録兼自分のためのリンク用。

 Python環境のインストールについて
UbuntuへのPythonをインストールするにあたり、考えられる主なアプローチとしては、以下がある。

PPAリポジトリよりaptでインストールする。
自前でビルドする。
pyenvを用いる。

このなかでpyenvがもっともインストールおよび操作が容易であることから、pyenvによるインストールを採用し、関連する作業について記載を行う。
pyenvのドキュメントはgithubのみに存在する。

pyenv github
https://github.com/...]]></summary>
        <author>
            <name>hr0t15</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python 週番号取得で気をつけること (Week Number in Python)]]></title>
        <id>https://zenn.dev/ystknsh/articles/96b5449b786366</id>
        <link href="https://zenn.dev/ystknsh/articles/96b5449b786366"/>
        <updated>2023-01-04T13:27:56.000Z</updated>
        <summary type="html"><![CDATA[Python を利用した週次レポートを作成していました。
しかし、年跨ぎを考慮しておらずデータ分析に支障が出たため修正した内容を記録に残しておきます。
ポイントとしては、2023年1月1日を

2023年 第00週としてデータ分析する
2022年 第52週としてデータ分析する

かです。自分は後者の 2023年1月1日は2022年 第52週としてデータ分析する 必要がありました。
Jan 1st 2023 is 52nd week of 2022 or 0th week of 2023?
I need to analysis data using Jan 1st 2023 as 52nd...]]></summary>
        <author>
            <name>Bull</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ラズベリーパイをラズベリーパイで焼く仕組みを作った]]></title>
        <id>https://zenn.dev/nkte8/articles/2023-01-04-r01</id>
        <link href="https://zenn.dev/nkte8/articles/2023-01-04-r01"/>
        <updated>2023-01-04T12:03:32.000Z</updated>
        <summary type="html"><![CDATA[ラズベリーパイの初期設定をするラズベリーパイを作りました。
といっても見た目にインパクトがあるわけではありませんが...

（上のRaspberryPi 3Aが本記事の対象マシンです）
以下のようなデーモンが動いており、USB接続を自動で感知＆SDカードに書き込みを行ってくれます。

※Cloud-initのバグについては参考を確認してください

 概要

 目的
ラズパイをサーバーとしてセットアップする際、色々面倒くさいです。
ubuntu serverを初期設定する手順をざっと羅列するだけでも...

SDカードをSDカードリーダーに差し込む
RaspberryPi Imagerを使...]]></summary>
        <author>
            <name>ねこの</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-076｜A - Rating Goal]]></title>
        <id>https://zenn.dev/hyperdb/articles/92c3630390c1b1</id>
        <link href="https://zenn.dev/hyperdb/articles/92c3630390c1b1"/>
        <updated>2023-01-04T09:57:35.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-076 A - Rating Goal



 提出結果
def getInt():
    return int(input())


def main():
    r = getInt()
    g = getInt()

    print(2 * g - r)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-075｜A - One out of Three]]></title>
        <id>https://zenn.dev/hyperdb/articles/8192e5d0540c86</id>
        <link href="https://zenn.dev/hyperdb/articles/8192e5d0540c86"/>
        <updated>2023-01-04T09:57:35.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-075 A - One out of Three



 提出結果
def getIntList():
    return list(map(int, input().split()))


def main():
    l = getIntList()
    l.sort()

    print(l[0] if l[0] != l[1] else l[2])


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-074｜A - Bichrome Cells]]></title>
        <id>https://zenn.dev/hyperdb/articles/70af9364f037b9</id>
        <link href="https://zenn.dev/hyperdb/articles/70af9364f037b9"/>
        <updated>2023-01-04T09:57:34.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-071 A - Bichrome Cells



 提出結果
def getInt():
    return int(input())


def main():
    n = getInt()
    a = getInt()

    print(n ** 2 - a)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-075｜B - Minesweeper]]></title>
        <id>https://zenn.dev/hyperdb/articles/2edfb4fa04c975</id>
        <link href="https://zenn.dev/hyperdb/articles/2edfb4fa04c975"/>
        <updated>2023-01-04T09:57:34.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-075 B - Minesweeper



 提出結果
def getIntMap():
    return map(int, input().split())


def getStringListRow(N):
    return [list(input()) for _ in range(N)]


def check(x, y, h, w, s):
    a = x - 1
    b = y - 1

    c = 0
    for i in range(3):
        for j in range(3):
           ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-074｜B - Collecting Balls (Easy Version)]]></title>
        <id>https://zenn.dev/hyperdb/articles/19a1071c792536</id>
        <link href="https://zenn.dev/hyperdb/articles/19a1071c792536"/>
        <updated>2023-01-04T09:57:34.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-074 B - Collecting Balls (Easy Version)



 提出結果
def getInt():
    return int(input())


def getIntList():
    return list(map(int, input().split()))


def main():
    n = getInt()
    k = getInt()
    x = getIntList()

    r = 0
    for i in range(n):
        r += (x[i] if x[i] * 2...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-076｜B - Addition and Multiplication]]></title>
        <id>https://zenn.dev/hyperdb/articles/0e87c01be883a1</id>
        <link href="https://zenn.dev/hyperdb/articles/0e87c01be883a1"/>
        <updated>2023-01-04T09:57:33.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-076 B - Addition and Multiplication



 提出結果
def getInt():
    return int(input())


def main():
    n = getInt()
    k = getInt()

    r = 1
    for i in range(n):
        a = 2 * r
        b = r + k
        r = a if a <= b else b
    print(r)


if __name__ == "__main__":
    ma...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS Price List APIの出力をPython ijsonでパースしたい]]></title>
        <id>https://zenn.dev/shimo_s3/articles/64271a20066c6b</id>
        <link href="https://zenn.dev/shimo_s3/articles/64271a20066c6b"/>
        <updated>2023-01-04T09:06:30.000Z</updated>
        <summary type="html"><![CDATA[動機
AWSの料金を調べられるAPIで、Price List APIというものがあります。
https://docs.aws.amazon.com/ja_jp/awsaccountbilling/latest/aboutv2/price-changes.html
これを使うとき、巨大なJSONをダウンロードして、データを読まないといけません。Pythonのijsonというモジュールで頑張ってみました。
!
300MBとか3GBのデータをダウンロードすることになります。


 バルクAPIを使う

AWS Price List Bulk API を使用すると、AWS のサービスの料金を...]]></summary>
        <author>
            <name>shimo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Snowpark for PythonのUDFs(UDTFs)/Stored Proceduresについてまとめてみた]]></title>
        <id>https://zenn.dev/tjjj/articles/6b766d0bc6d771</id>
        <link href="https://zenn.dev/tjjj/articles/6b766d0bc6d771"/>
        <updated>2023-01-04T08:35:23.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Snowpark for Pythonがリリースされたことにより、Pythonを実行できるようになった。そこでSnowparkでPythonを実行するやりかたについてまとめてみた。実行パターンは大きくSnowpark API/UDFs/Stored Procedures(以下、SPとも記載)の3つのパターンがある。これらの実装パターンについてまとめる(パータンのまとめのため、各実装のパラメータの詳細などには言及しない。）
Snowpark for Pythonのコンポーネント構成などはこちらの記事がわかりやすい。
https://zenn.dev/tmasuo/articl...]]></summary>
        <author>
            <name>tjjj</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[そのPythonパッケージ管理、venv + pipでよくないですか? in 2023/1]]></title>
        <id>https://zenn.dev/peacock0803sz/articles/python-packaging-2023-01</id>
        <link href="https://zenn.dev/peacock0803sz/articles/python-packaging-2023-01"/>
        <updated>2023-01-04T01:12:45.000Z</updated>
        <summary type="html"><![CDATA[そのPythonパッケージ管理、venv + pipでよくないですか? in 2023/1
各所(主にPython界隈の外)で「Pythonパッケージ管理どうするのが正解なの?」とよく耳にするので2023年初頭時点での私の見解を書きます。
!
この記事はvenv + pip以外のツール(特にpoetry, pipenv, pip-toolsへのアンチテーゼ要素を多分に含みます。
私はいわゆる「venvでよくないですか? おじさん」をよくやるのでそれのまとめだと思って頂ければと思います。


 tl;dr
多くの場合のPythonパッケージ管理はvenv(virtualenv) + p...]]></summary>
        <author>
            <name>Peacock</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FastAPIを使ってみる]]></title>
        <id>https://zenn.dev/youichiro/articles/c87fe6e68907bb</id>
        <link href="https://zenn.dev/youichiro/articles/c87fe6e68907bb"/>
        <updated>2023-01-03T16:49:37.000Z</updated>
        <summary type="html"><![CDATA[FastAPI

公式ドキュメント

https://fastapi.tiangolo.com


GitHub

https://github.com/tiangolo/fastapi


この記事で使用するFastAPIのバージョン

0.88.0




 作るもの
FastAPIでシンプルなTODOアプリのAPIを作る
以下のようなデータモデルを想定する
以下のCRUDを用意する

create a user
get a user
get all users
create a task
get all tasks for user


 やること

プロジェクトを作成する
デ...]]></summary>
        <author>
            <name>youichiro</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】getattr,setattrの改良]]></title>
        <id>https://zenn.dev/sergicalsix/articles/47ff9c836cebca</id>
        <link href="https://zenn.dev/sergicalsix/articles/47ff9c836cebca"/>
        <updated>2023-01-03T14:22:59.000Z</updated>
        <summary type="html"><![CDATA[結論
def getattr_(object,attrs):
    v = object #objectによってはcopy.copy(),copy.deepcopy()した方が良い
    for a in attrs.split('.'):
        v = getattr(v,a)
    return v
setattrを改良したい場合はこちら
def setattr_(object,attrs,value):
    v = object #objectによってはcopy.copy(),copy.deepcopy()した方が良い
    split_attr = at...]]></summary>
        <author>
            <name>sergicalsix</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[プログラミング初心者がDjangoとTwitter APIでツイート自動まとめBot（リアルタイム）を作成したら予想以上に便利だった件]]></title>
        <id>https://zenn.dev/tree_pies/articles/6f162d0d74f9eb</id>
        <link href="https://zenn.dev/tree_pies/articles/6f162d0d74f9eb"/>
        <updated>2023-01-03T10:55:45.000Z</updated>
        <summary type="html"><![CDATA[初心者がゆえ四苦八苦しながら作成しました。その過程と成果を備忘録がてらこちらに残しておきたいと思います。

 まずは完成物のご紹介
完成したサイトは以下になります。
Tree Pies
https://treepies.com/
Twitterアカウント

そもそもこれは何かというと、Twitter上に存在するスレッド上のツイートをTwitterAPIを使い、自動でまとめて記事のように表示してくれるアプリケーションになります。
これを使うと以下のような長文スレッドもリプライ一つで記事のようにまとめを作成する事が出来ます。

まとめの依頼をすると即座にBotが反応して記事のURL添付と共に...]]></summary>
        <author>
            <name>Tree_Pies</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[API Gateway+Lambda CORS対策(Lambdaプロキシ統合 FastAPI編)]]></title>
        <id>https://zenn.dev/go6887/articles/5c2de65ee0970f</id>
        <link href="https://zenn.dev/go6887/articles/5c2de65ee0970f"/>
        <updated>2023-01-03T09:34:06.000Z</updated>
        <summary type="html"><![CDATA[年末年始、アイディアはあったものの時間がなく開発できていなかったものを一気に仕上げました。最初はユーザ数が見込めないので従量課金の簡単に開発することができる今となってはありふれたアーキテクチャであるAPI Gateway+Lambdaで開発したのですが、その際にReactでつくったwebアプリからAPIを呼び出す際のCORSの対応で時間を使ったので備忘録と残しておきます。

 背景・問題
今回のアーキテクチャです。Reactで作られたWebアプリからFastAPIで作成したAPIをLambdaにデプロイし、API Gateway経由でよんでいます。この際に適切に設定をしてあげないと、CO...]]></summary>
        <author>
            <name>pino</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python初心者のためのWindows実行環境構築ハンドブック]]></title>
        <id>https://zenn.dev/mom/books/ca5cefe5d0855e</id>
        <link href="https://zenn.dev/mom/books/ca5cefe5d0855e"/>
        <updated>2023-01-03T07:18:06.000Z</updated>
        <summary type="html"><![CDATA[Windows上でPythonの実行環境を構築する際に、必要十分な基礎知識を習得するための本。]]></summary>
        <author>
            <name>TechStar</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[数値を大字（だいじ）に変換するPythonモジュールを作成しました]]></title>
        <id>https://zenn.dev/windvoice/articles/511156796980e6</id>
        <link href="https://zenn.dev/windvoice/articles/511156796980e6"/>
        <updated>2023-01-03T06:54:03.000Z</updated>
        <summary type="html"><![CDATA[前置き
数値を大字（だいじ）に変換するDaijiJa Pythonモジュールを作成しました。Pythonは趣味で長いこと使ってきましたが、モジュールを作成してGitHubにレポジトリを作成したのは初めてのことなので、記録として残しておきます。

 モジュールの紹介
DaijiJaモジュールは、日本で領収書などを作成するときに使用される漢数字表記（例：壱万弐千円也）を整数値から作成する機能を持っています。例えば下のように使います。
import DaijiJa
print(DaijiJa.daiji(123456))
壱拾弐万参千四百五拾六
旧式の文字を使いたい場合もあると思われます。...]]></summary>
        <author>
            <name>WindVoice</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jupyter Notebook で python側の変数 と LaTeX を組み合わせて表示したい。]]></title>
        <id>https://zenn.dev/t4aru/articles/130b80176c06fa</id>
        <link href="https://zenn.dev/t4aru/articles/130b80176c06fa"/>
        <updated>2023-01-03T06:52:15.000Z</updated>
        <summary type="html"><![CDATA[やりたいこと
SymPyの計算結果を良い感じに \LaTeX 形式で出力したい。

 例
SymPyで対角行列を計算して、その結果をP^{-1}APに続く形に出力したい。

P^{-1}AP = \begin{pmatrix}
2 & 0 \\
0 & -3
\end{pmatrix}


 方法

 display.Math と 書式化演算子 を使う

コード
import sympy as sp
from IPython.display import display, Math

result = sp.Matrix([
    [2, 0],
    [0, -...]]></summary>
        <author>
            <name>r4ai</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[sklearnのMLPRegressorで簡易な転移学習]]></title>
        <id>https://zenn.dev/yoshida0312/articles/3ccda8b3c2c8b5</id>
        <link href="https://zenn.dev/yoshida0312/articles/3ccda8b3c2c8b5"/>
        <updated>2023-01-03T05:12:18.000Z</updated>
        <summary type="html"><![CDATA[初めに
転移学習など少し高度なモデルや手法を実装する際はpytorchを採用することが多いのですが、簡単なNNであればsklearnにもsklearn.neural_network.MLPRegressorで実装されています。
今回は、簡易な転移学習をMLPRegressor.partial_fit()を使用して実施した際に、学習率を変える箇所にハマったので備忘録がてら残します。

 コード
import pickle
import itertools

import numpy as np
import pandas as pd
import matplotlib.pyplot a...]]></summary>
        <author>
            <name>よしだ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[botocoreのエラーハンドリング]]></title>
        <id>https://zenn.dev/pontsuyo/articles/c510856e349e40</id>
        <link href="https://zenn.dev/pontsuyo/articles/c510856e349e40"/>
        <updated>2023-01-03T04:12:31.000Z</updated>
        <summary type="html"><![CDATA[状況

 やりたいこと
S3のオブジェクトを適当にパースしてredshiftに書き込む。
書き込みはlambdaに載せたPythonスクリプトで実行する。S3へのオブジェクト追加時にイベント通知をlambdaに送信することでトリガーする。
スクリプトは大体以下です
def lambda_handler(event: dict, context) -> None:
    """
    :param event: S3バケットへのオブジェクト追加イベント
    :param context:
    :return:
    """
    bucket_name = eve...]]></summary>
        <author>
            <name>neginasubi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで三次元データの補間を行う]]></title>
        <id>https://zenn.dev/tab_ki/articles/interpolation_of_3d_data</id>
        <link href="https://zenn.dev/tab_ki/articles/interpolation_of_3d_data"/>
        <updated>2023-01-03T03:42:49.000Z</updated>
        <summary type="html"><![CDATA[1. 概要
「地点 A (x_a, y_a, z_a) における気温 T_a と地点 B (x_b, y_b, z_b) における気温 T_b から、その間にある地点 C (x_c, y_c, z_c) の気温 T_c を推測したい」など、三次元やより高次のデータに対して補間を行いたい場合があります。Python で N 次元データの補間を行いたい場合、SciPy の RegularGridInterpolator を利用するといいですよと教わったのですが、日本語記事が少なかったためメモを残します。

 1.1. 環境



Name
Version




Python
3.10....]]></summary>
        <author>
            <name>Tab_Ki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[rinnaのCLIPのサンプルコードを解説]]></title>
        <id>https://zenn.dev/yagiyuki/articles/clip_rinna_sample</id>
        <link href="https://zenn.dev/yagiyuki/articles/clip_rinna_sample"/>
        <updated>2023-01-03T02:07:18.000Z</updated>
        <summary type="html"><![CDATA[2022年/5月にrinna社により、日本語特化した事前学習済みの言語画像モデルCLIPが公開されました。
https://prtimes.jp/main/html/rd/p/000000031.000070041.html
CLIPについては、以下の記事を参照ください。
https://qiita.com/sonoisa/items/00e8e2861147842f0237
以下、上記記事からCLIPの特徴を抜粋した情報です。
1. 従来のモデルに比べて、非常に広いクラスのオブジェクトを認識できる。
2. 画像とテキストの両方の埋め込みができる。画像から類似画像を探したり、テキストから...]]></summary>
        <author>
            <name>yagiyuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dagger入門（Python SDK）]]></title>
        <id>https://zenn.dev/syfut/articles/3b4ddea324c69f</id>
        <link href="https://zenn.dev/syfut/articles/3b4ddea324c69f"/>
        <updated>2023-01-02T16:25:34.000Z</updated>
        <summary type="html"><![CDATA[概要
Docker創始者らが開発したソフトウェアのビルド・テスト・デプロイの自動化（CI/CD）ツールDaggerを使用してみました。
　本記事では公式リファレンスに則りDaggerを導入する方法とDaggerを使う上で認識しておくべきと感じた前提知識をまとめました。
　(Daggerはまだ新しい技術であり、アップデートも繰り返されているため、今後執筆時点(2023.1.3)と状況が大きく変わって来る可能性があるのでその点ご了承下さい。)

 Daggerの前提知識・使用イメージ

 (1)既存のシステムを置き換えるか
Daggerは既存のCI/CDツール(GitHubActionや...]]></summary>
        <author>
            <name>Boushipan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2022年にpythonとAWS Lambdaで作ったもの]]></title>
        <id>https://zenn.dev/motokoike/articles/dc9224e84d7c4e</id>
        <link href="https://zenn.dev/motokoike/articles/dc9224e84d7c4e"/>
        <updated>2023-01-02T15:38:35.000Z</updated>
        <summary type="html"><![CDATA[1. まえがき
去年作ったプログラムのまとめ記事となります。

 2. 競馬関係のTwitter BOT
2022年の初めに、「AWSではじめるインフラ構築入門」の本を購入し、アプリを作成
自分でも作成して見ようと、興味がある競馬関連のTwitterのBOTを4つ作成

1号機（今日のハクサン地方競馬出走情報Bot）

https://twitter.com/hakusan_keiba

2号機（明日のメイショウ冠名馬中央競馬出走情報と今日の競走結果情報BOT）

https://twitter.com/MeishoBot

3号機（マカオ競馬の日本人騎手レース結果Bot）

htt...]]></summary>
        <author>
            <name>元小池</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[codeの再利用性とは何か。]]></title>
        <id>https://zenn.dev/jim_soros/articles/fba449fc39dcf1</id>
        <link href="https://zenn.dev/jim_soros/articles/fba449fc39dcf1"/>
        <updated>2023-01-02T13:13:16.000Z</updated>
        <summary type="html"><![CDATA[codeの再利用性とは何か。
#再利用性が高いと判断する材料は何か。それは同じ変数を使った回数を数えればよいのである。
#ん？と思うかもしれないが、以下のcodeを見ながら計算してみると分かりやすい。
secret_items = {0:'タケコプター', 1:'コンピューターペンシル', 2:'音消しマイク', 3:'どこでもドア'} #変数

def get_item(item, num):
    print(f'ジャジャーン、{item[num]}!! 変数が{num + 1}回使われた')

for num in range(4):
    get_item(secret_...]]></summary>
        <author>
            <name>jim_soros</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VSCode + DockerでAtCoderのテスト・提出ができる環境構築【Python,PyPy】]]></title>
        <id>https://zenn.dev/gomatofu/articles/282adadcb5d769</id>
        <link href="https://zenn.dev/gomatofu/articles/282adadcb5d769"/>
        <updated>2023-01-02T11:54:32.000Z</updated>
        <summary type="html"><![CDATA[はじめに
私は2022年9月からAtCoderを始めて、今までサイト内にあるコードテストを使ってPython・PyPy3で問題を解いていました。
しかし、サンプルのテスト・提出をするのに毎度コピー＆ペーストするのが煩わしくコマンド一つで完結させたいのと、ローカル環境下に色々インストールすると今後依存関係等で大変になるかと思い、VSCode + Dockerを使って簡単にテスト・提出ができる環境構築を行いました。
環境はWindows10を使用しています。

 準備
以下のものがインストールされていない場合は事前に準備をしておきます。
細かいインストール手順等は今回のメインではないため...]]></summary>
        <author>
            <name>gomatofu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-073｜ B Theater]]></title>
        <id>https://zenn.dev/hyperdb/articles/f61c00de2843f3</id>
        <link href="https://zenn.dev/hyperdb/articles/f61c00de2843f3"/>
        <updated>2023-01-02T05:25:12.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-073 B - Theater



 提出結果
def getInt():
    return int(input())


def getIntListRow(N):
    return [list(map(int, input().split())) for _ in range(N)]


def main():
    n = getInt()
    d = getIntListRow(n)

    r = 0
    for i in range(n):
        r += (d[i][1] - d[i][0] + 1)
    pr...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-071｜ B Not Found]]></title>
        <id>https://zenn.dev/hyperdb/articles/ecb969422e5541</id>
        <link href="https://zenn.dev/hyperdb/articles/ecb969422e5541"/>
        <updated>2023-01-02T05:25:12.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-071 B - Not Found



 提出結果
def getString():
    return input()


def az_array():
    c = ord('a')
    l = []
    for i in range(26):
        l.append(chr(c + i))
    return l


def main():
    s = list(getString())
    t = list(set(s))
    t.sort()

    r = 'None'
    for c in az_ar...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-071｜ A Meal Delivery]]></title>
        <id>https://zenn.dev/hyperdb/articles/e3ce7cca8bc961</id>
        <link href="https://zenn.dev/hyperdb/articles/e3ce7cca8bc961"/>
        <updated>2023-01-02T05:25:11.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-071 A - Meal Delivery



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    x, a, b = getIntMap()
    print('A' if abs(a - x) <= abs(b - x) else 'B')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-072｜ A Sandglass2]]></title>
        <id>https://zenn.dev/hyperdb/articles/dfb35a0fcc045f</id>
        <link href="https://zenn.dev/hyperdb/articles/dfb35a0fcc045f"/>
        <updated>2023-01-02T05:25:11.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-072 A - Sandglass2



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    x, t = getIntMap()

    r = x - t
    print(r if r >= 0 else 0)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-073｜ A September 9]]></title>
        <id>https://zenn.dev/hyperdb/articles/d1915faa0017e1</id>
        <link href="https://zenn.dev/hyperdb/articles/d1915faa0017e1"/>
        <updated>2023-01-02T05:25:10.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-073 A - September 9



 提出結果
def getInt():
    return int(input())


def main():
    n = getInt()

    print('Yes' if n // 10 == 9 or n % 10 == 9 else 'No')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-072｜ B OddString]]></title>
        <id>https://zenn.dev/hyperdb/articles/bedcfcc993d823</id>
        <link href="https://zenn.dev/hyperdb/articles/bedcfcc993d823"/>
        <updated>2023-01-02T05:25:10.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-072 B - OddString



 提出結果
def getString():
    return input()


def main():
    s = list(getString())

    r = ''
    for i in range(len(s)):
        if i % 2 == 0:
            r += s[i]
    print(r)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pipでインストールしたモジュールを削除する手順]]></title>
        <id>https://zenn.dev/ttttttttttakuya/articles/7d360d616a66a4</id>
        <link href="https://zenn.dev/ttttttttttakuya/articles/7d360d616a66a4"/>
        <updated>2023-01-02T05:09:53.000Z</updated>
        <summary type="html"><![CDATA[この記事を書いた背景
venvで仮想環境を構築せずにPythonを実行していたので
これまでpipでインストールしたモジュールの管理が煩雑になってしまっていた。
仮想環境を構築してプロジェクトごとにモジュールを管理したいと思ったので
環境を整える前に、一旦システム直下にインストールされてしまったモジュールたちを
削除してスッキリさせておきたいので、その時に実施した手順をメモ書きしておく。

 この記事を読むとできるようになること
pipでインストールしたモジュールを削除できるようになる。

 手順について

 削除コマンド実行に向けての下準備
1.　現状を確認しよう！
現状、どんなモ...]]></summary>
        <author>
            <name>マイル山村</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[読書]自走プログラマー　～Pythonの先輩が教えるプロジェクト開発のベストプラクティス120]]></title>
        <id>https://zenn.dev/satokiyo/articles/20230102-book-jisou-programmer</id>
        <link href="https://zenn.dev/satokiyo/articles/20230102-book-jisou-programmer"/>
        <updated>2023-01-02T03:10:36.000Z</updated>
        <summary type="html"><![CDATA[https://www.amazon.co.jp/自走プログラマー-Pythonの先輩が教えるプロジェクト開発のベストプラクティス120-清水川-貴之/dp/4297111977

 感想
Python での開発のベストプラクティスが実践に即して学べるいい本でした。
個人的には dataclass の使い方やログ、例外のあたりの内容が勉強になりました。
忘れていた知識とか、使えそうなプラクティスを以下にメモします。

 デフォルト引数に更新可能（mutable）な値は指定せず、None を設定する。
def foo(values=None) -> List[str]:
    va...]]></summary>
        <author>
            <name>satokiyo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python × GiNZAで固有名詞を抽出してみる]]></title>
        <id>https://zenn.dev/yuji207/articles/f26f277ae80a94</id>
        <link href="https://zenn.dev/yuji207/articles/f26f277ae80a94"/>
        <updated>2023-01-01T15:28:08.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは。エンジニアのアルバイトをしている大学生です！
ここ最近は業務で「社内の知見を整理しよう」みたいなプロジェクトに携わっています。
先日、上記プロジェクトの一環としてドキュメントから社内用語を洗い出す作業があったのですが、ドキュメントの量が多くめんどくさかったので、ディープラーニングを使って用語を洗い出してみました。
今回の記事は、その備忘録になります。

 対象読者

文章から固有名詞を抽出したい方
Pythonの文法について基本的な理解がある方


 実装
単語抽出・品詞の推定にはGiNZA[1][2]という自然言語処理モデルを使いました。モデルはgenerat...]]></summary>
        <author>
            <name>winnie279</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[オブジェクト指向はなぜ生まれたのか(ドラえもんに聞いてみた)]]></title>
        <id>https://zenn.dev/jim_soros/articles/46b74c2d60460f</id>
        <link href="https://zenn.dev/jim_soros/articles/46b74c2d60460f"/>
        <updated>2023-01-01T10:14:44.000Z</updated>
        <summary type="html"><![CDATA[#オブジェクト指向はなぜ生まれたのか(ドラえもんに聞いてみた)
#理由ⅰ) グローバル変数を使わなくてよいから 。
#理由ⅱ) 変数を使ってcode再利用性がよくなるから(関数の変数では限界があるから)
#この二点である。
#ではこの二点の説明を詳しく説明するために、プログラミングの核である『変数』を『ドラえもんの四次元ポケット』だと仮定する。下記に四次元ポケットとドラえもん達を記した地図を見ながら説明をする。

#関数内の『②ローカル変数』は野比家の中にある『四次元ポケット』であり、家族以外と家の外では使用できない条件とする。
#『①グローバル変数』は世界の中にある『四次元ポケット』で...]]></summary>
        <author>
            <name>jim_soros</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Lambdaローカル開発環境構築手順]]></title>
        <id>https://zenn.dev/nobumichi/articles/42335c7a48e59b</id>
        <link href="https://zenn.dev/nobumichi/articles/42335c7a48e59b"/>
        <updated>2023-01-01T10:05:05.000Z</updated>
        <summary type="html"><![CDATA[下記ブログを参考に、Lambdaのローカル開発環境構築手順をまとめる。
https://cloud5.jp/local-lambda-environment/#awscli

 本記事執筆時の作業環境

Windows11 Pro 22H2
Windows Terminal
PowerShell 7.3.1


 Pythonインストール
下記を参考にPythonをインストールする。
https://blog.pyq.jp/entry/python_install_221102_win
下記コマンドでPythonのインストールを確認する。
python -V
結果、下記のようにインストー...]]></summary>
        <author>
            <name>のぶみち</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FastAPIでJWTトークンを取得するためのリクエストに失敗したとき]]></title>
        <id>https://zenn.dev/yuji207/articles/1256d75878dca3</id>
        <link href="https://zenn.dev/yuji207/articles/1256d75878dca3"/>
        <updated>2023-01-01T09:43:08.000Z</updated>
        <summary type="html"><![CDATA[はじめに
FastAPIでJWTトークンを取得するためのエンドポイントを実装しました[1]。
ところがREST Client[2]を使って実装したエンドポイントを叩こうとしたところ、422 Unprocessable Entityが出てしまい少しだけハマったので、ここに解決方法を残しておきます。

 結論
以下のようにhttpファイルを作成し[3]、リクエストを飛ばせばOKです。

 token_success.http
POST http://127.0.0.1:8000/token/
content-type: application/x-www-form-urlencoded
...]]></summary>
        <author>
            <name>winnie279</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dagger(python SDK)にてPermissionErrorがでた際の対処法]]></title>
        <id>https://zenn.dev/syfut/articles/dbf241cfa131c0</id>
        <link href="https://zenn.dev/syfut/articles/dbf241cfa131c0"/>
        <updated>2023-01-01T08:40:09.000Z</updated>
        <summary type="html"><![CDATA[概要
Dagger公式ドキュメントのサンプルプログラムを実行した際に以下のようなエラーに当たったので解決法を記載しておきます。
PermissionError: [WinError 32] プロセスはファイルにアクセスできません。別のプロセスが使用中です。: 'C:\\Users\\user\\.cache\\dagger\\temp-dagger-engine-session-h4u3yu6s' -> 'C:\\Users\\user\\.cache\\dagger\\dagger-engine-session-9ad18aca71b1b1ba.exe'

 解決方法
Dag...]]></summary>
        <author>
            <name>Boushipan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[社説のタイトルの言葉が強いのをMeCabで調べてみる]]></title>
        <id>https://zenn.dev/shimo_s3/articles/e9ce69c9da4db9</id>
        <link href="https://zenn.dev/shimo_s3/articles/e9ce69c9da4db9"/>
        <updated>2023-01-01T06:22:23.000Z</updated>
        <summary type="html"><![CDATA[やりたいこと
新聞の社説では、タイトルに強い言葉が使われがちな気がします。例えば、下のように「急げ」「認められぬ」とか、「徹底せよ」「生かせ」「許すな」「万全尽くせ」「忘れるな」という感じです。
https://www.yomiuri.co.jp/editorial/20221230-OYT1T50165/
https://www.asahi.com/articles/DA3S15509791.html
これをカウントできないかと、MeCab(形態素解析)を使って調べてみようと思いました。

 MeCabとは
文章の品詞とか活用とか調べてくれるソフトです。ここでは解説しませんので公式...]]></summary>
        <author>
            <name>shimo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[UE4][UE5] PythonからアセットのReimport処理を呼ぶ]]></title>
        <id>https://zenn.dev/kta552/articles/bf11b5cc958319</id>
        <link href="https://zenn.dev/kta552/articles/bf11b5cc958319"/>
        <updated>2023-01-01T02:39:59.000Z</updated>
        <summary type="html"><![CDATA[概要
コンテンツブラウザのContextMenu→ReimportをPythonで呼び出す方法


 コード
エラーとか例外処理は一切してないので使う際はやってあげてください。
書いてある通り、ImportTaskを作成してプロパティを設定してAssetToolsに投げてあげます。]]></summary>
        <author>
            <name>KTA552</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[インクリメンタルに複数の時系列データに対する平均・標準偏差を計算する]]></title>
        <id>https://zenn.dev/utcarnivaldayo/articles/ffeed5ac2e62bb</id>
        <link href="https://zenn.dev/utcarnivaldayo/articles/ffeed5ac2e62bb"/>
        <updated>2022-12-31T14:46:41.000Z</updated>
        <summary type="html"><![CDATA[はじめに
データ分析を行う際、それらのデータの特徴を知るために頻繁に平均や分散（データのばらつき）を計算します。
それらは、n個のデータをx_1,x_2,\ldots,x_nと表すと、それぞれ次のような式で計算できました。

平均


m_n = \frac{1}{n}\sum_{i=1}^{n}x_i


分散


\sigma_{n}^2 = \frac{1}{n}\sum_{i=1}^{n} (x_i - m_n)^2

この計算式を愚直にコード(rust)に落とし込むと次のように記述できます。（もしrustを書いたことない方でもプログラミングに馴染みのある方であればなんとなく...]]></summary>
        <author>
            <name>ut</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[機械学習モデルの解析: surgeon-pytorch]]></title>
        <id>https://zenn.dev/sergicalsix/articles/525459b6e98ed4</id>
        <link href="https://zenn.dev/sergicalsix/articles/525459b6e98ed4"/>
        <updated>2022-12-31T13:29:29.000Z</updated>
        <summary type="html"><![CDATA[surgeon-pytorchとは
surgeon-pytorchとは機械学習モデルの層の解析のためのライブラリです。
surgeon-pytorchを使うと解析が楽に実装できるのでオススメです。
https://github.com/archinetai/surgeon-pytorch
主にできることは以下です。

層の名前の取得(get_layers)
計算ノードの名前の取得(get_nodes)
隠れ層の出力の取得(Inspect,Extract)
隠れ層の内部(計算ノード)の計算の取得(Extract)


 surgeon-pytorchの使い方

 モデルの情報を取得
i...]]></summary>
        <author>
            <name>sergicalsix</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2022を振り返る]]></title>
        <id>https://zenn.dev/u_tan/articles/a7ecd9767cc251</id>
        <link href="https://zenn.dev/u_tan/articles/a7ecd9767cc251"/>
        <updated>2022-12-31T12:57:58.000Z</updated>
        <summary type="html"><![CDATA[今年を振り返ります

 今年取り組んだこと
ハッカソンやインターンシップ、技術書典に参加しました。また、TypeScriptに入門しました。ゲーム制作サークルにエンジニアとして迎えていただけた。
ゲーム制作サークル
https://twitter.com/STail_Official/
TypeScriptで書きました。
https://animes-library2.netlify.app/
フロントエンド
https://github.com/OHMORIYUSUKE/animeapp-web
アニメのデータ管理ツール
https://github.com/OHMORIYUSUK...]]></summary>
        <author>
            <name>うーたん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Solafune 衛星画像の5倍超解像度化 (for OSS) コンペの Pytorch Lightning Baseline]]></title>
        <id>https://zenn.dev/syu_tan/articles/007fb4c90fd7c5</id>
        <link href="https://zenn.dev/syu_tan/articles/007fb4c90fd7c5"/>
        <updated>2022-12-31T11:44:53.000Z</updated>
        <summary type="html"><![CDATA[皆さん年末はいかがお過ごしでしょうか？　私は今日まさに帰省している最中です！
そのちょうど良いタイミングで Solafuneにて 衛星画像の5倍超解像度化 (for OSS) のコンペが開催されたので新幹線内の移動時間の 3時間のRTAで baseline を作成したので共有します
このコンペの参加者が増えるとともに超解像が発展してくれることを願っています

cf. @solafune (https://solafune.com)コンテストの参加以外の目的とした利用及び商用利用は禁止されています。商用利用・その他当コンテスト以外で利用したい場合はお問い合わせください。(https://s...]]></summary>
        <author>
            <name>syu-tan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[LangChainで対話テキストからイベント情報をまとめる]]></title>
        <id>https://zenn.dev/sator926/articles/92f10e233a5aeb</id>
        <link href="https://zenn.dev/sator926/articles/92f10e233a5aeb"/>
        <updated>2022-12-31T11:37:14.000Z</updated>
        <summary type="html"><![CDATA[「LangChain」を使い対話テキストからイベント情報をまとめる機能を試作しました。
記事では具体例として飲み会としましたが、広義のイベント情報を対話テキストから抽出することを目的としています。

 前提
LLMの力を活用して、エージェントのようにふるまうAIを実現してみたく、トライアルとしてチャレンジしました。
私の普段の仕事はデータアナリティクスでプログラミングではないので、解説もそれほど専門的ではありません。この点ご容赦ください。
先にインプットとアウトプットをお見せします。興味があれば読み進めていただきコメントなどいただけるとうれしいです。
# インプットする対話テキスト

"...]]></summary>
        <author>
            <name>りすけん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-070｜ B Two Switches]]></title>
        <id>https://zenn.dev/hyperdb/articles/f78a4a1fb9426b</id>
        <link href="https://zenn.dev/hyperdb/articles/f78a4a1fb9426b"/>
        <updated>2022-12-31T08:10:54.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-070 B - Two Switches



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    a, b, c, d = getIntMap()

    s = a if c < a else c
    e = b if d > b else d

    print(0 if b < c or d < a else e - s)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-070｜A Palindromic Number]]></title>
        <id>https://zenn.dev/hyperdb/articles/bfa7fe6c9a4dc8</id>
        <link href="https://zenn.dev/hyperdb/articles/bfa7fe6c9a4dc8"/>
        <updated>2022-12-31T08:10:54.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-070 A - Palindromic Number



 提出結果
def getString():
    return input()


def main():
    s = getString()
    r = s[::-1]

    print('Yes' if s == r else 'No')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-066｜A ringring]]></title>
        <id>https://zenn.dev/hyperdb/articles/b14d103f6a2967</id>
        <link href="https://zenn.dev/hyperdb/articles/b14d103f6a2967"/>
        <updated>2022-12-31T08:10:53.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-066 A - ringring



 提出結果
def getIntList():
    return list(map(int, input().split()))


def main():
    n = getIntList()

    n.sort()

    print(n[0] + n[1])


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-068｜A Snake Toy]]></title>
        <id>https://zenn.dev/hyperdb/articles/ac323bc73a4d90</id>
        <link href="https://zenn.dev/hyperdb/articles/ac323bc73a4d90"/>
        <updated>2022-12-31T08:10:53.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-068 A - ABCxxx



 提出結果
def getInt():
    return int(input())


def main():
    n = getInt()

    print('ABC' + str(n))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-068｜B Break Number]]></title>
        <id>https://zenn.dev/hyperdb/articles/9a04b24a194852</id>
        <link href="https://zenn.dev/hyperdb/articles/9a04b24a194852"/>
        <updated>2022-12-31T08:10:53.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-068 B - Break Number



 提出結果
def getInt():
    return int(input())


def main():
    n = getInt()

    m = 0
    for i in range((n // 2) + 1):
        if 2 ** i <= n:
            m = 2 ** i

    print(m)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-067｜A Sharing Cookies]]></title>
        <id>https://zenn.dev/hyperdb/articles/60bb4624029c6b</id>
        <link href="https://zenn.dev/hyperdb/articles/60bb4624029c6b"/>
        <updated>2022-12-31T08:10:52.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-067 A - Sharing Cookies



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    a, b = getIntMap()

    print('Possible' if a % 3 == 0 or b %
          3 == 0 or (a + b) % 3 == 0 else 'Impossible')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-067｜B Snake Toy]]></title>
        <id>https://zenn.dev/hyperdb/articles/50adad74dcdcd9</id>
        <link href="https://zenn.dev/hyperdb/articles/50adad74dcdcd9"/>
        <updated>2022-12-31T08:10:52.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-067 B - Snake Toy



 提出結果
def getIntMap():
    return map(int, input().split())


def getIntList():
    return list(map(int, input().split()))


def main():
    n, k = getIntMap()
    l = getIntList()

    d = sorted(l, reverse=True)

    print(sum(d[:k]))


if __name__ == "__main_...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-066｜B ss]]></title>
        <id>https://zenn.dev/hyperdb/articles/497cb5dead52de</id>
        <link href="https://zenn.dev/hyperdb/articles/497cb5dead52de"/>
        <updated>2022-12-31T08:10:51.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-066 B - ss



 提出結果
def getString():
    return input()


def main():
    s = list(getString())

    for i in range(len(s) - 1):
        s.pop(-1)
        l = len(s)

        if l % 2 == 1:
            continue

        if s[:int(l / 2)] == s[int(l / 2) * -1:]:
            print(l)
...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-069｜B i18n]]></title>
        <id>https://zenn.dev/hyperdb/articles/44615cc91980a3</id>
        <link href="https://zenn.dev/hyperdb/articles/44615cc91980a3"/>
        <updated>2022-12-31T08:10:51.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-069 B - i18n



 提出結果
def getString():
    return input()


def main():
    s = getString()

    print(s[0] + str(len(s) - 2) + s[-1])


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-069｜A K-City]]></title>
        <id>https://zenn.dev/hyperdb/articles/03a415f6453cbf</id>
        <link href="https://zenn.dev/hyperdb/articles/03a415f6453cbf"/>
        <updated>2022-12-31T08:10:51.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-069 A - K-City



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    n, m = getIntMap()

    print((n - 1) * (m - 1))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[discord.pyを利用した作業管理bot 開発メモ]]></title>
        <id>https://zenn.dev/tsubame_misa/articles/692b6990494c04</id>
        <link href="https://zenn.dev/tsubame_misa/articles/692b6990494c04"/>
        <updated>2022-12-31T07:01:18.000Z</updated>
        <summary type="html"><![CDATA[作業管理botを作った
研究室のアルバイトなどをしていて、discord上で作業時間の管理できたらいいなぁと思ったのをきっかけに作ってみました。せっかくなので作業ログを残しておきます。雑めです。
ちょうど後輩くんがアドベントカレンダーでdiscord bot使った記事を載せていたのでたくさん参考にしました。ありがとう後輩くん。この後ちょくちょく引用します。

 作ったもの

 要件

プロジェクトごとに作業時間を管理できる

作業内容も任意でのこせると嬉しい


後から作業時間の確認ができる

累計作業時間
作業時間の履歴が見れても嬉しい




 作成したコマンド


\start...]]></summary>
        <author>
            <name>Tsubame</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[機械学習で因果推論~Double Machine Learning~]]></title>
        <id>https://zenn.dev/s1ok69oo/articles/4da9e3b01a0a93</id>
        <link href="https://zenn.dev/s1ok69oo/articles/4da9e3b01a0a93"/>
        <updated>2022-12-31T06:50:19.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Double Machine Learning(以下、DML)について、Pythonによる実装を交えてまとめました。内容について誤り等ございましたら、コメントにてご指摘いただけますと幸いです。

 DMLの概要
DMLとは、機械学習手法を用いつつ2段階に分けて処置効果を推定する手法です。1段階目で2つの予測タスクを行い、2段階目で処置効果を推定するモデルを作成します。

 DMLの利点
DMLを用いる利点はたくさんありますが、次の4つを紹介させていただきます。

処置効果の異質性(HTE: Heterogeneous Treatment Effect)を考慮した推定が可能
...]]></summary>
        <author>
            <name>Shingo Uto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ハンズオンで学ぶ、初心者向けのFastAPI～その2～]]></title>
        <id>https://zenn.dev/hirohiroeng/articles/3cba23072bde39</id>
        <link href="https://zenn.dev/hirohiroeng/articles/3cba23072bde39"/>
        <updated>2022-12-31T06:25:21.000Z</updated>
        <summary type="html"><![CDATA[はじめに
前回に続き第二回目のfastapiに関する記事です。前回の記事を未読の方は、前回の記事を読んで頂ければと思います。
https://zenn.dev/hirohiroeng/articles/eb7e56a31383c1
今回は、DB との接続を行いデータの処理をやってみようと思います。まず今回、新しく使用するフレームワークを紹介しようと思います。

 今回新しく使用するフレームワーク
今回、新しく使用するフレームワークは前回の記事でもチラッと出しましたがsqlalchemyというフレームワークを使用します。（下記は、sqlalchemyの公式ドキュメントです。）
http...]]></summary>
        <author>
            <name>hirohiro_eng</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【個人開発】ストリートファイタープロ選手の配信・動画を一覧できるポータルサイトを作りました]]></title>
        <id>https://zenn.dev/kangetsu_121/articles/dede89a997fa89</id>
        <link href="https://zenn.dev/kangetsu_121/articles/dede89a997fa89"/>
        <updated>2022-12-31T06:10:59.000Z</updated>
        <summary type="html"><![CDATA[約4ヶ月前、文学作品の冒頭を読んで作者を当てる Web サービス、「文豪推理」をリリースしました。
https://zenn.dev/kangetsu_121/articles/d99e8306c0d895
そして昨日、個人開発サービス第二弾として、ストリートファイターシリーズのプロ選手の YouTube 配信・動画を一覧できるサービス、SF Streaming Portal (SF-SP) をリリースしました！
今回も友人の @kokokocococo555 さんとの開発です。

SF-SPトップページ
どんな配信・動画があるかをぱっと見られますので、ぜひストリートファイターシリーズに...]]></summary>
        <author>
            <name>kangetsu_121</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Quartoを使ってJupyterより綺麗なPythonコード入りドキュメントを作る]]></title>
        <id>https://zenn.dev/mosamosa/articles/3e57cb1fe0f1a5</id>
        <link href="https://zenn.dev/mosamosa/articles/3e57cb1fe0f1a5"/>
        <updated>2022-12-31T05:54:55.000Z</updated>
        <summary type="html"><![CDATA[何かしらのデータを解析するなどする場合に、Jupyter系をいままでは利用してきました。
もちろん、Jupyterを個人で単なる実行環境と利用する分にはそこまで大きな問題はないと思います。
ただ、Jupyter系はMarkdownを書くのには流石にあまり向いていないこと、pdfなどの出力がイマイチ綺麗にいかないことから、「分析してそれをそのままアウトプットしたい」という時にやや不満が残る点がありました。
そこで調べてみたところ、Quartoというものが使えそうだったので、今回セッティングと少し使ってみようと思った次第です。
まずは、公式のGalleryを見てみてください。結構いい感じと思...]]></summary>
        <author>
            <name>mosamosa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Junc Times #1: 2022年12月号]]></title>
        <id>https://zenn.dev/uribo/articles/cf39bb2f60d08f</id>
        <link href="https://zenn.dev/uribo/articles/cf39bb2f60d08f"/>
        <updated>2022-12-30T22:54:16.000Z</updated>
        <summary type="html"><![CDATA[!

 これは何？
@u_riboが関心のあるデータサイエンス、機械学習、統計モデリングを扱う（言語の）情報をまとめて月に1度発信するものです。対象の言語はR、Python、Juliaです。各言語の情報、ユーザーが合流する場所、ジャンクション junctionにしたい気持ちを込めて Junc Timesと名付けました。
専用のTwitterアカウント @junctimes もありますので良かったらフォローしてください。このアカウントでは、即時的に共有したいもの、細かなネタやtipsをお知らせします。

https://twitter.com/u_ribo

 一言
年の瀬で仕事が落ち着...]]></summary>
        <author>
            <name>Uryu Shinya</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GPT-3を理解したい]]></title>
        <id>https://zenn.dev/sunbluesome/articles/3cc782f31b2e20</id>
        <link href="https://zenn.dev/sunbluesome/articles/3cc782f31b2e20"/>
        <updated>2022-12-30T15:10:43.000Z</updated>
        <summary type="html"><![CDATA[GPT-3を理解したい記事です。GPT-3はGPT-2の後継モデルで、GPT-2のさらに100倍以上のパラメータを持つ超巨大モデルです。2022年11月30日にChatGPTが発表されましたが、この背景にはGPT-3があります。
!
細かいことを言うと、ChatGPTはInstructGPTというモデルとの関連が深いようです。InstructGPTはGPT-3を強化学習したモデルのようです。気になる方は論文を読んでみると良いと思います。


 GPT-3の凄いポイント

自然言語による指示を与えるだけで様々なタスクを実行可能
zero-shot、one-shot、few-shotにおい...]]></summary>
        <author>
            <name>sunbluesome</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2022年に作ったものを振り返ってみる]]></title>
        <id>https://zenn.dev/danchinocto/articles/looking-back-to-2022</id>
        <link href="https://zenn.dev/danchinocto/articles/looking-back-to-2022"/>
        <updated>2022-12-30T14:31:20.000Z</updated>
        <summary type="html"><![CDATA[はじめに
はじめまして。Virtual Motorsport Lab Inc. (VML) でプロダクト開発をしている@danchinoctoです。2022年の下半期からVMLに本格的にコミットし始め、自動運転シミュレータからdappsまで幅広い技術に触れました。
今年は勉強することだらけの一年で、開発過程やプロダクトに対するアウトプットをする余裕がありませんでした。年の瀬ということで一気に振り返ってみようと思います。記念すべきZennの初投稿です！

 前提
もともとアカデミア出身で、半年前まではシステム制御理論の学術研究をしていました。ただ基本的には数式をこねくり回して遊ぶ理論系...]]></summary>
        <author>
            <name>団地のCTO</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[統計学] ガンマ分布の期待値・分散, 積率母関数, 可視化]]></title>
        <id>https://zenn.dev/shundeveloper/articles/eba111782c85cf</id>
        <link href="https://zenn.dev/shundeveloper/articles/eba111782c85cf"/>
        <updated>2022-12-30T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[確率密度関数
ガンマ分布の確率密度関数は以下で表される

\begin{align*}
&f(x|\alpha, \beta) =
\frac{1}{\beta^\alpha \Gamma{(\alpha)}}
x^{\alpha-1} e^{-\frac{x}{\beta}} \quad \text{if}\quad 0<x, \quad f(x|\alpha, \beta)=0 \quad \text{otherwise} 
\\
&\text{Where,}\quad \Gamma{(\alpha)}=\int_0^\infty x^{\alpha-1} ...]]></summary>
        <author>
            <name>ShunDev</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ubuntu 22.04 + Python × Selenium 環境構築まとめ]]></title>
        <id>https://zenn.dev/techike/articles/a8e28c55c9aa11</id>
        <link href="https://zenn.dev/techike/articles/a8e28c55c9aa11"/>
        <updated>2022-12-30T05:29:47.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Ubuntu 22.04上でPython×Seleniumでスクレイピングをするための環境構築をブラウザごとにまとめていきます。
ここで取り扱うブラウザは、Chrome, Microsoft Edge, Firefoxの3つです。
何も考えずにサクッと構築したい人向けなので、細かいことを知りたい方は参考リンクなどからたどっていただければと思います。

 環境
下記環境では構築できることを確認済みです。
OS : Ubuntu 22.04
Python : 3.10.6
sudo を使用している所は適宜パスワード入力をするか、パスワード無しでsudoを使える設定にするかしてう...]]></summary>
        <author>
            <name>Fossa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChatGPTを使ってハニーポットを実装した話]]></title>
        <id>https://zenn.dev/tatsui/articles/51fc73926bac8b</id>
        <link href="https://zenn.dev/tatsui/articles/51fc73926bac8b"/>
        <updated>2022-12-30T03:18:56.000Z</updated>
        <summary type="html"><![CDATA[はじめに
「ハニーポット」とは脆弱性のあるサーバを偽装することで、脆弱性を利用された場合に攻撃者が実行するコマンドやツールを収集することができるセキュリティツールです。そのため、ハニーポット上では、複数のLinuxコマンドを安全に実行することが求められます。
しかし、Linuxコマンドは数多くあり、それぞれが複雑な挙動をするため、手動で実装するのは大変な作業です。
そこで、最近話題のChatGPTにLinuxコマンドエミュレータのソースコードを書いてもらい、実装の効率化を試みました。
実装したコードはGithubに公開しています。


 仕様の検討
はじめに全体のざっくりとした仕様を...]]></summary>
        <author>
            <name>phishing-hunter</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[boto3で特定のメソッドをmockする]]></title>
        <id>https://zenn.dev/shimo_s3/articles/69be3cc07d2313</id>
        <link href="https://zenn.dev/shimo_s3/articles/69be3cc07d2313"/>
        <updated>2022-12-29T22:40:06.000Z</updated>
        <summary type="html"><![CDATA[やりたいこと
Pythonのユニットテストで、boto3クライアントの特定メソッド(だけ)をモックしたいときがあります。こちらのstackoverflowに良さそうのやり方があったのでメモ。解はいろいろありそうですが、そのうち2つに関して書きます。(※motoは使わない)
https://stackoverflow.com/questions/37143597/mocking-boto3-s3-client-method-python/

 方法1. botocoreのstubを使う
boto3のドキュメントよりコードをコピペ
import datetime
import botoc...]]></summary>
        <author>
            <name>shimo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonでWebページをPDF化する]]></title>
        <id>https://zenn.dev/momiji777/articles/70c897ddff016c</id>
        <link href="https://zenn.dev/momiji777/articles/70c897ddff016c"/>
        <updated>2022-12-29T11:21:00.000Z</updated>
        <summary type="html"><![CDATA[仮想環境を作成し、ライブラリをインストール
python -m venv pdf
.\pdf\Scripts\activate
pip install pdfkit

 次にWkhtmltopdfをインストールする
wkhtmltopdfを操作する必要があるため、元アプリケーションをインストールします。
↓インストーラーダウンロードサイト↓
https://wkhtmltopdf.org/downloads.html

 インストールできているか確認
wkhtmltopdf -V
以下の通り表示されていれば、正常にインストールできています。

※エラーが出る場合は環境変数設定ができて...]]></summary>
        <author>
            <name>momiji777</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Serverless Framework で作成した Lambda の関数名を直書きしないためにちょっとしたツールを作った]]></title>
        <id>https://zenn.dev/hayata_yamamoto/articles/3272e136601ba7</id>
        <link href="https://zenn.dev/hayata_yamamoto/articles/3272e136601ba7"/>
        <updated>2022-12-29T10:54:09.000Z</updated>
        <summary type="html"><![CDATA[個人的にServerless Framework を運用する際にちょっとした面倒ポイントになっていた「Lambdaの関数名を直書きしなくてはいけない」問題を解決するために、ちょっとしたツールを開発した話をまとめました。もし共感する人がいたら、ちょっとずつでも育てていこうかと思っており、Contribution もらえると嬉しいです！（歓迎します）
https://github.com/hayata-yamamoto/ptmpdy

 どのような問題を解決したかったのか
サーバーレスアプリケーションを構築する際にはさまざまな選択肢があります。例えば、Serverless Framework...]]></summary>
        <author>
            <name>山本隼汰 | Hayata Yamamoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[「Fakeshell」で標的型攻撃の演習環境を作る]]></title>
        <id>https://zenn.dev/tatsui/articles/e2e82d844740b3</id>
        <link href="https://zenn.dev/tatsui/articles/e2e82d844740b3"/>
        <updated>2022-12-29T10:02:45.000Z</updated>
        <summary type="html"><![CDATA[標的型攻撃（APT: Advanced Persistent Threat）とは、特定の目的を達成するために特定の組織や個人を標的とする、長期的で持続的な攻撃のことを指します。この攻撃の特徴は、標的となる組織や個人を攻撃するために、様々な手段を用いることです。例えば、脆弱性を突いたり、フィッシング攻撃を行ったり、マルウェアを埋め込んだり、盗聴することなどです。
このような攻撃は、企業や政府機関をはじめとする、様々な組織が標的となることがあります。そのため、防御のためには、常に最新のセキュリティ対策を行い、社内でのセキュリティ意識の向上のための継続的なセキュリティトレーニングが求められます...]]></summary>
        <author>
            <name>phishing-hunter</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python プログラムを常駐させて動かし続けるための Dockerfile を書いていた]]></title>
        <id>https://zenn.dev/imksoo/articles/233f59e5b84867</id>
        <link href="https://zenn.dev/imksoo/articles/233f59e5b84867"/>
        <updated>2022-12-29T09:54:12.000Z</updated>
        <summary type="html"><![CDATA[Websocket を受信し続けるプログラムを書いていた の Python コードを継続的に動かし続けるためのコンテナを Dockerfile で組み立てていました。
Python 標準ライブラリ以外のパッケージ一覧を requirements.txt にリストアップしておきます。

requirements.txt 
asyncio
boto3
websockets

Alpine ベースの Python3 イメージに対して pip install -r requirements.txt コマンドを実行して依存パッケージをインストールし、動かしたい Python スクリプト一式をコンテ...]]></summary>
        <author>
            <name>きりの</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Websocket を受信し続けるプログラムを書いていた]]></title>
        <id>https://zenn.dev/imksoo/articles/07a92955c77d7a</id>
        <link href="https://zenn.dev/imksoo/articles/07a92955c77d7a"/>
        <updated>2022-12-29T09:46:56.000Z</updated>
        <summary type="html"><![CDATA[リアルタイムなメッセージングをブラウザー上で実現する Websocket を継続的に受信し続ける Python プログラムを書いてました。
メッセージには Update(更新)イベント と Delete(削除)イベント の2種類があるのでそれぞれ場合分けしています。
受信した内容は　Amazon SQS にキューイングすることで、一度に許容量を超える大量にメッセージが配信されてきたときにも貯め込んでおいて後からゆっくり処理することが出来ます。

tootprobe.js
import os, json, datetime
import asyncio
import boto3
impor...]]></summary>
        <author>
            <name>きりの</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonでclassを使う: 設計編(2) 汎用親クラスの設計]]></title>
        <id>https://zenn.dev/sergicalsix/articles/d9357dac6e0059</id>
        <link href="https://zenn.dev/sergicalsix/articles/d9357dac6e0059"/>
        <updated>2022-12-29T07:12:52.000Z</updated>
        <summary type="html"><![CDATA[結論
from abc import ABCMeta, abstractmethod

class BaseModel(metaclass=ABCMeta):
    __slots__ = ('name')
    @abstractmethod
    def calc(self):
        pass
    
class Model(BaseModel):
    __slots__ = ('name')
    def calc(self):
        #具体的な処理を記述
	pass 

 はじめに
似たようなclassを複数作成する場合の汎用的な親クラスの作...]]></summary>
        <author>
            <name>sergicalsix</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-065｜B Trained?]]></title>
        <id>https://zenn.dev/hyperdb/articles/f5c30c90fd11b0</id>
        <link href="https://zenn.dev/hyperdb/articles/f5c30c90fd11b0"/>
        <updated>2022-12-29T04:18:33.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-065 B - Trained?



 提出結果
def getInt():
    return int(input())


def getIntRow(N):
    return [int(input()) for _ in range(N)]


def main():
    n = getInt()
    a = getIntRow(n)

    a.insert(0, 0)
    b = 1
    c = 0
    f = False
    for i in range(n):
        c += 1
        b =...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-064｜B Traveling AtCoDeer Problem]]></title>
        <id>https://zenn.dev/hyperdb/articles/ced9b53c0ebbd5</id>
        <link href="https://zenn.dev/hyperdb/articles/ced9b53c0ebbd5"/>
        <updated>2022-12-29T04:18:32.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-064 B - Traveling AtCoDeer Problem



 提出結果
def getInt():
    return int(input())


def getIntList():
    return list(map(int, input().split()))


def main():
    n = getInt()
    a = getIntList()

    a.sort()

    print(a[n - 1] - a[0])


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-063｜A Restricted]]></title>
        <id>https://zenn.dev/hyperdb/articles/939309dd85a4bd</id>
        <link href="https://zenn.dev/hyperdb/articles/939309dd85a4bd"/>
        <updated>2022-12-29T04:18:32.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-063 A - Restricted



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    a, b = getIntMap()
    c = a + b

    print(c if c < 10 else 'error')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-065｜A Expired?]]></title>
        <id>https://zenn.dev/hyperdb/articles/42d6fd0597b6ec</id>
        <link href="https://zenn.dev/hyperdb/articles/42d6fd0597b6ec"/>
        <updated>2022-12-29T04:18:31.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-065 A - Expired?



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    x, a, b = getIntMap()

    print('delicious' if b - a <= 0 else 'dangerous' if b - a > x else 'safe')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-063｜B Varied]]></title>
        <id>https://zenn.dev/hyperdb/articles/3f9794654d30c1</id>
        <link href="https://zenn.dev/hyperdb/articles/3f9794654d30c1"/>
        <updated>2022-12-29T04:18:31.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-043 B - Varied



 提出結果
def getString():
    return input()


def main():
    s = list(getString())
    t = list(set(s))

    print('yes' if len(s) == len(t) else 'no')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-064｜A RGB Cards]]></title>
        <id>https://zenn.dev/hyperdb/articles/1881c34d011cd6</id>
        <link href="https://zenn.dev/hyperdb/articles/1881c34d011cd6"/>
        <updated>2022-12-29T04:18:31.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-064 A - RGB Cards



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    r, g, b = getIntMap()

    print('YES' if ((r * 100 + g * 10 + b) % 4) == 0 else 'NO')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】ファイル一覧をsortして取得(glob, natsort)]]></title>
        <id>https://zenn.dev/sergicalsix/articles/2393ab1172952f</id>
        <link href="https://zenn.dev/sergicalsix/articles/2393ab1172952f"/>
        <updated>2022-12-29T03:43:01.000Z</updated>
        <summary type="html"><![CDATA[結論
python
import glob
from natsort import natsorted

def get_sort_files(path):
    """
    usage:
    (i) :get_sort_files('dir/*')
    (ii):get_sort_files('dir/*.txt')
    """
    files = glob.glob(path)
    return natsorted(files)
bash
(venv)$ pip install natsort

 内容
ディレクトリのファイル名をsortして表示すること...]]></summary>
        <author>
            <name>sergicalsix</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FastAPIに触れてみる]]></title>
        <id>https://zenn.dev/hirohiroeng/articles/eb7e56a31383c1</id>
        <link href="https://zenn.dev/hirohiroeng/articles/eb7e56a31383c1"/>
        <updated>2022-12-29T01:56:26.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回は、React から離れて Python のフレームワークであるFastAPIに触れてみました。
色々と分かった事を自分の備忘録として、まとめていこうと思います。

 参考にした記事
https://fastapi.tiangolo.com/ja/

 触った理由
フロントの知識も少しずつ深まり、バックエンドの知識や技術を知る必要が今後必要だと感じて、色々ネットを漁った結果FastAPIにたどり着いたという感じです。
初心者が学ぶには丁度いいとのことで、今回学習してみました。まだまだFlaskの利用者が多いですが今後流行ればいいなと思います。

 FastAPI の構造...]]></summary>
        <author>
            <name>hirohiro_eng</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】Aを変えると、Bが変わる不思議な変数とIDの話]]></title>
        <id>https://zenn.dev/unico417/articles/950452926f2ac1</id>
        <link href="https://zenn.dev/unico417/articles/950452926f2ac1"/>
        <updated>2022-12-28T13:34:45.000Z</updated>
        <summary type="html"><![CDATA[不思議な変数のトリック
世の中には不思議なことがたくさんあるもので、プログラムも例外ではありません。
次のコードを実行してみてください。
a = [79, 58, 45, 4, 38]
b = a
b.append(32)
print(a)
# [79, 58, 45, 4, 38, 32]
これ、最初に見た時は「えっ？バグ？」って思いました。
でも実際はバグでもなんでもありません。
aのリストをbにコピーして、bに要素を追加したらaにも要素が追加されているんです。
パッと見、ホラーですよね。

 学習時のイメージが逆
実はこれ、一般的にプログラミングを教えている時に使う表現と実際の...]]></summary>
        <author>
            <name>Unico417</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Pythonで解く】AIZU ONLINE JUDGEのプログラミング入門（ITP1）]]></title>
        <id>https://zenn.dev/yadonn/articles/0addc3d7d34774</id>
        <link href="https://zenn.dev/yadonn/articles/0addc3d7d34774"/>
        <updated>2022-12-28T11:20:40.000Z</updated>
        <summary type="html"><![CDATA[はじめに
10月にITパスポート，Python3基礎認定試験と連続で合格したので，次はアルゴリズムとデータ構造について学びPython3で実装できるようになりたいと考え，11月頃から少しずつ着手を開始していました．
最初は有名な書籍「プログラミングコンテスト攻略のためのアルゴリズムとデータ構造（マイナビ）」を解き進めようと思いました．しかし当初の自分にとっては難易度がまだほんの少し高く感じました．
冒頭の「準備編」ではオンラインジャッジについて記載があったため，まずは入門レベルから着手した方がいいと考え本講座に取り組むことに決めました．

記事の内容
本記事では，AIZU ONLINE ...]]></summary>
        <author>
            <name>YADON</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonでファイルマネージャーを作ったのでその説明(日本語で)]]></title>
        <id>https://zenn.dev/eunie/articles/e63bdc0bf17836</id>
        <link href="https://zenn.dev/eunie/articles/e63bdc0bf17836"/>
        <updated>2022-12-28T10:55:14.000Z</updated>
        <summary type="html"><![CDATA[Pythonでファイルマネージャーを作った
今回は、ファイルマネージャーを作ったので、かんたんな使い方をシェアしようと思います。
詳しい説明はGithubのREADEME.mdを直接読んでみてください XD
Github/file_manager

 目次



Pythonでファイルマネージャーを作った

起動方法
入力できる命令とその命令のできること
How to use copy
How to use delete
How to use duplication
How to use move
How to use create
Summary





 起動方法
python...]]></summary>
        <author>
            <name>Eunie</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【チートシート】Markdown記法一覧]]></title>
        <id>https://zenn.dev/yadonn/articles/94f12b3c9dcbc6</id>
        <link href="https://zenn.dev/yadonn/articles/94f12b3c9dcbc6"/>
        <updated>2022-12-28T09:26:37.000Z</updated>
        <summary type="html"><![CDATA[はじめに
はじめまして．Zennを始めました．
来年4月から未経験でソフトウェアエンジニアとして働きます．
転職に向けて勉強を進めていましたが，アウトプットをしながらの方が効率が高いと考え，今後学習したことなどを記録していこうと思います．
Zenn独自の記法が必要なところもありますが．そもそもMarkdown記法が初めてなのでまずは自身の備忘録として記事に残したいと思います．


 【テキストの表記】

 見出し

書き方
# これはH1タグです
## これはH2タグです
#### これはH4タグで


 リスト

書き方
- Hello!
- Hola!
  - Bonjour!
  ...]]></summary>
        <author>
            <name>YADON</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】ファイル名の一括変更 (glob)]]></title>
        <id>https://zenn.dev/sergicalsix/articles/f1284932a108c5</id>
        <link href="https://zenn.dev/sergicalsix/articles/f1284932a108c5"/>
        <updated>2022-12-28T08:20:01.000Z</updated>
        <summary type="html"><![CDATA[結論

import glob
import os

def rename_file_names(dir_ = '' , suffix = 'out', add_name = 'hoge_'):
    """
    usage:
    (i)  rename_file_names(suffix='out', add_name='hoge_')
    (ii) rename_file_names(dir_='parent',suffix='out', add_name='hoge_')
    (iii)rename_file_names(dir_='parent/parent...]]></summary>
        <author>
            <name>sergicalsix</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】内包記法でリストの抽出を1行で]]></title>
        <id>https://zenn.dev/unico417/articles/ebbb06acde2969</id>
        <link href="https://zenn.dev/unico417/articles/ebbb06acde2969"/>
        <updated>2022-12-28T07:14:31.000Z</updated>
        <summary type="html"><![CDATA[要素の抽出にappendはちょっとダサい
要素から、特定のものだけ抽出したいな～と思うこと、ありますよね。
（もしくは、ちょっとしたフィルタリングとか。）
でも、各要素にアクセスして分類するのはちょっと面倒･･･。
試しに、適当に生成したリストからifとforを使って、自然数だけを抽出してみようと思います。
values = [5, -26, 49, -92, -3, 10, 97]
result = []
for v in values:
    if 0 < v:
        result.append(v)
print(result)
# [5, 49, 10, 97...]]></summary>
        <author>
            <name>Unico417</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonでAWS全RegionのAZを出してみた]]></title>
        <id>https://zenn.dev/keni_w/articles/b4d8521407eed6</id>
        <link href="https://zenn.dev/keni_w/articles/b4d8521407eed6"/>
        <updated>2022-12-28T06:45:57.000Z</updated>
        <summary type="html"><![CDATA[今回は完全に備忘録です。

師走の、しかも仕事終わりの日に、AWSのリージョンのAZを抽出したくて、Pythonのコードで書いた人です。

 コード

import boto3
import datetime

def Execute():
    print('Run!')

    ec2 = boto3.client('ec2')
    regions = ec2.describe_regions(AllRegions=True)['Regions']
    regions_list = []
    for region in regions:
      regions_l...]]></summary>
        <author>
            <name>Kenichiro Wada</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-059｜A Three-letter acronym]]></title>
        <id>https://zenn.dev/hyperdb/articles/e0d276b33a1433</id>
        <link href="https://zenn.dev/hyperdb/articles/e0d276b33a1433"/>
        <updated>2022-12-28T05:09:22.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-059 A - Three-letter acronym



 提出結果
def getStringList():
    return list(input().split())


def main():
    s = getStringList()

    r = ''
    for w in s:
        r += w[0]
    print(r.upper())


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-060｜A Shiritori]]></title>
        <id>https://zenn.dev/hyperdb/articles/cb57d9b00f7019</id>
        <link href="https://zenn.dev/hyperdb/articles/cb57d9b00f7019"/>
        <updated>2022-12-28T05:09:22.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-060 A - Shiritori



 提出結果
def getStringMap():
    return input().split()


def main():
    a, b, c = getStringMap()

    print('YES' if a[-1] == b[0] and b[-1] == c[0] else 'NO')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-061｜B Counting Roads]]></title>
        <id>https://zenn.dev/hyperdb/articles/c05953e1780cdf</id>
        <link href="https://zenn.dev/hyperdb/articles/c05953e1780cdf"/>
        <updated>2022-12-28T05:09:21.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-061 B - Counting Roads



 提出結果
def getIntMap():
    return map(int, input().split())


def getIntListRow(N):
    return [list(map(int, input().split())) for _ in range(N)]


def main():
    n, m = getIntMap()
    ab = getIntListRow(m)
    c = []
    for i in range(0, n + 1):
      ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-062｜A Grouping]]></title>
        <id>https://zenn.dev/hyperdb/articles/baab99949d7986</id>
        <link href="https://zenn.dev/hyperdb/articles/baab99949d7986"/>
        <updated>2022-12-28T05:09:21.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-062 A - Grouping



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    a, b = getIntMap()
    s = [4, 6, 9, 11]

    print('No' if a == 2 or b == 2 else 'No' if (a in s) ^ (b in s) else 'Yes')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-062｜B Picture Frame]]></title>
        <id>https://zenn.dev/hyperdb/articles/b7892ae809e2ce</id>
        <link href="https://zenn.dev/hyperdb/articles/b7892ae809e2ce"/>
        <updated>2022-12-28T05:09:21.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-062 B - Picture Frame



 提出結果
def getIntMap():
    return map(int, input().split())


def getStringRow(N):
    return [input() for _ in range(N)]


def main():
    h, w = getIntMap()
    a = getStringRow(h)

    a.append('')
    a.insert(0, '')

    f = '{:#^' + str(w + 2) + 's}'

...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-059｜B Comparison]]></title>
        <id>https://zenn.dev/hyperdb/articles/537c430f9d6169</id>
        <link href="https://zenn.dev/hyperdb/articles/537c430f9d6169"/>
        <updated>2022-12-28T05:09:20.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-059 B - Comparison



 提出結果
def getInt():
    return int(input())


def main():
    a = getInt()
    b = getInt()

    print('GREATER' if a > b else 'LESS' if a < b else 'EQUAL')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-060｜B Choose Integers]]></title>
        <id>https://zenn.dev/hyperdb/articles/35a6162a57b311</id>
        <link href="https://zenn.dev/hyperdb/articles/35a6162a57b311"/>
        <updated>2022-12-28T05:09:20.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-060 B - Choose Integers



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    a, b, c = getIntMap()

    f = False
    for i in range(b):
        if a * i % b == c:
            f = True
            break
    print('YES' if f else 'NO')


if __name__ == "__...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-061｜A Between Two Integers]]></title>
        <id>https://zenn.dev/hyperdb/articles/214f49b07bec6c</id>
        <link href="https://zenn.dev/hyperdb/articles/214f49b07bec6c"/>
        <updated>2022-12-28T05:09:19.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-061 A - Between Two Integers



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    a, b, c = getIntMap()
    print('Yes' if a <= c and c <= b else 'No')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】関数に振り分ける分岐処理を簡略化しよう]]></title>
        <id>https://zenn.dev/unico417/articles/84ff07030bc6c7</id>
        <link href="https://zenn.dev/unico417/articles/84ff07030bc6c7"/>
        <updated>2022-12-28T03:34:56.000Z</updated>
        <summary type="html"><![CDATA[こんな処理、ありがち
変数をステータスとして、そのステータスによって分岐させることってよくありますよね。
私もよくあります。
例えば、以下のような状態だとしましょう。
# 分岐先の関数を定義
def one():
    print('one()が実行されました。')

def two():
    print('two()が実行されました。')

def three():
    print('three()が実行されました。')

def default():
    print('default()が実行されました。')

# xをもとに各関数に分岐する 
x = 2

if ...]]></summary>
        <author>
            <name>Unico417</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【決定版】2022年～2023年で必ず確認するべきGitHubリポジトリ 40選]]></title>
        <id>https://zenn.dev/nameless_sn/articles/awesome_githubrepo_for_2022</id>
        <link href="https://zenn.dev/nameless_sn/articles/awesome_githubrepo_for_2022"/>
        <updated>2022-12-28T03:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回の記事では、個人の独断と偏見で2022年～2023年で必ず確認するべきGitHubのリポジトリを紹介する。私のTwitterでこれまで紹介したものもあれば、そうではないものもある。
GitHubはプログラマーにとって、普段の学習・開発を進めるうえでもっとも重要な情報源の１つである。本記事では、分野ごとに確認するべきGitHubリポジトリを紹介する。
なお、今回の記事で紹介するGitHubリポジトリの分野は以下の通り。内容はWeb開発に特化している。

確認必須
Web
Python
JavaScript
TypeScript

ちなみに、「確認必須」は分野を問わずすべて...]]></summary>
        <author>
            <name>Shota Nukumizu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AirflowでFTPを使用してファイルを取得する]]></title>
        <id>https://zenn.dev/thimi0412/articles/a604f563f3f9ef</id>
        <link href="https://zenn.dev/thimi0412/articles/a604f563f3f9ef"/>
        <updated>2022-12-28T02:53:58.000Z</updated>
        <summary type="html"><![CDATA[株式会社WEDでデータエンジニアをしているthimi0412こと清水です。

 AirflowでFTPしたい
データを他企業からダウンロードする際にFTPを使用する必要があり、整形してBigQueryのテーブルにappendしていく必要があったのでAirflowでFTPを使用してファイルを取得しました。(FTPがセキュリティ的にリスクがある話は置いておいて)
やりたい処理

FTPで対象のファイルを取得
取得したファイルをGCSに保存
GCSに保存したファイルをBigQueryに入れる ← ここは今回は触れない


 Airflowのprovidersを見てみる
AirflowにはPyt...]]></summary>
        <author>
            <name>thimi0412</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Netlify で No such file or directory となって困ったら]]></title>
        <id>https://zenn.dev/ainellc/articles/cf2eb3f35155e0</id>
        <link href="https://zenn.dev/ainellc/articles/cf2eb3f35155e0"/>
        <updated>2022-12-28T01:59:15.000Z</updated>
        <summary type="html"><![CDATA[Netlify で UNSUPPORTED BUILD IMAGE となって困ったらを対応すると以下のような出力となり、ビルドに通らなくなってしまいました。
10:51:09 AM: /opt/build-bin/run-build-functions.sh: line 351: /opt/buildhome/python3.7/bin/activate: No such file or directory
Included Softwareを確認すると、以下のようになっていました。
Python - PYTHON_VERSION, runtime.txt, Pipfile
3.8 (d...]]></summary>
        <author>
            <name>Aine LLC.</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Postmanの基本的な使い方]]></title>
        <id>https://zenn.dev/oreilly_ota/articles/a26e7f88aeeaa5</id>
        <link href="https://zenn.dev/oreilly_ota/articles/a26e7f88aeeaa5"/>
        <updated>2022-12-28T01:55:11.000Z</updated>
        <summary type="html"><![CDATA[Postmanインストール
下記サイトよりPostmanをインストールする。
https://www.postman.com/

 GitHub repoをローカルに落とす
Postmanの使い方を学ぶため、下記GitHubのrepositoryを使用する。
https://github.com/yxo5017/cd0039-Identity-and-Access-Management/tree/master/lesson-1-Foundation/FlaskRecap

 ローカルの環境構築
ローカルに落としたら、Readmeに記載の通り下記操作を実行する。

Install De...]]></summary>
        <author>
            <name>オライリーヨッシー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[discord.pyでサーバーのオンラインユーザー数の変化を分析してみた]]></title>
        <id>https://zenn.dev/yutakobayashi/articles/discord-online-members-chart</id>
        <link href="https://zenn.dev/yutakobayashi/articles/discord-online-members-chart"/>
        <updated>2022-12-28T00:09:13.000Z</updated>
        <summary type="html"><![CDATA[最適なオンラインイベント開催時間を見つけるために、Discord サーバーのオンラインユーザー数の変化を収集する必要がありました。
そこで、今回は Discord の API ラッパーである discord.py を使用して、サーバーのオンラインユーザー数を収集し、matplotlib を使用して可視化する一連の手順を紹介します。

 BOT の作成と招待

!
既に BOT をサーバーに招待済みであれば、次のセクションに進んでください。

BOT アカウントを作成し、サーバーに招待することで、Discord サーバーでの情報収集を開始できます。BOT アカウントの作成には Discor...]]></summary>
        <author>
            <name>Yuta Kobayashi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VSCODEでPoetryで設定した仮想環境を選択する]]></title>
        <id>https://zenn.dev/pitta/articles/d936e3999d9af9</id>
        <link href="https://zenn.dev/pitta/articles/d936e3999d9af9"/>
        <updated>2022-12-27T14:22:31.000Z</updated>
        <summary type="html"><![CDATA[なぜかPoetryで作った仮想環境が検索できない
VSCODEでPoetryで作った仮想環境を選択しようとしても出てこなくて困ったぜ🌟

 VSCODEの記述を確認する
VSCODEドキュメントで確認できる

Virtual environments located in the folder identified by the python.venvPath setting (see General Python settings), which can contain multiple virtual environments. The extension looks for v...]]></summary>
        <author>
            <name>pittachan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pixivをスクレイピングする]]></title>
        <id>https://zenn.dev/yunkai/articles/55c6de4a47bb91</id>
        <link href="https://zenn.dev/yunkai/articles/55c6de4a47bb91"/>
        <updated>2022-12-27T13:08:12.000Z</updated>
        <summary type="html"><![CDATA[pixivの検索結果の画像を大量にダウンロードするスクリプトを書きました。
pixivのAPIの非公式ラッパーであるpixivpyを使って実装しました。

 pixivpyの使い方

 pixivにログイン
pixiv apiを使用するにはpixivにログインする必要があります。
ログインにはrefresh tokenというものを使用します。
refresh tokenを取得する方法はこのブログを見てください。
api = AppPixivAPI()
api.auth(refresh_token=TOKEN)

 ログインできない問題
pixivはbotを弾くためにcloudflareを...]]></summary>
        <author>
            <name>yunkai</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PycordでDiscordの音声を拾ってみる]]></title>
        <id>https://zenn.dev/eeharumt/articles/a440dad4358286</id>
        <link href="https://zenn.dev/eeharumt/articles/a440dad4358286"/>
        <updated>2022-12-27T07:00:01.000Z</updated>
        <summary type="html"><![CDATA[Pycordにはボイスチャンネルの音声を録音する機能がある。
https://guide.pycord.dev/voice/receiving
この機能で参加させた音声チャンネル内の音声を sink というオブジェクトに溜めファイルに変換することができるのだが、今回、ボットAが参加したチャンネル音声をボットBが参加している別のチャンネルに転送するみたいなことをしたかったため、ライブラリ内部でどんなことしているかを覗いてみた。
Pycordのstart_recording の内部を見てみるとrecv_audioをスレッドで実行していそうである。
self.decoder = opus.De...]]></summary>
        <author>
            <name>eeharu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-058｜A ι⊥l]]></title>
        <id>https://zenn.dev/hyperdb/articles/c4f4b328651e60</id>
        <link href="https://zenn.dev/hyperdb/articles/c4f4b328651e60"/>
        <updated>2022-12-27T05:14:55.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-058 A - ι⊥l



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    a, b, c = getIntMap()
    print('YES' if a + b + c == 3 * b else 'NO')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-057｜A Remaining Time]]></title>
        <id>https://zenn.dev/hyperdb/articles/7eae9a5c063aca</id>
        <link href="https://zenn.dev/hyperdb/articles/7eae9a5c063aca"/>
        <updated>2022-12-27T05:14:55.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-057 A - Remaining Time



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    a, b = getIntMap()

    print((a + b) % 24)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-058｜B ∵∴∵]]></title>
        <id>https://zenn.dev/hyperdb/articles/7e35de29207bd1</id>
        <link href="https://zenn.dev/hyperdb/articles/7e35de29207bd1"/>
        <updated>2022-12-27T05:14:54.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-058 B - ∵∴∵



 提出結果
def getString():
    return input()


def main():
    o = getString()
    e = getString()

    r = len(o) if len(o) <= len(e) else len(e)

    s = ''
    for i in range(r):
        s = s + o[i] + e[i]
    if len(o) > r:
        s = s + o[-1 * (len(o) - r)]...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-057｜B Checkpoints]]></title>
        <id>https://zenn.dev/hyperdb/articles/3a1d2389271d95</id>
        <link href="https://zenn.dev/hyperdb/articles/3a1d2389271d95"/>
        <updated>2022-12-27T05:14:54.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-057 B - Checkpoints



 提出結果
def getIntMap():
    return map(int, input().split())


def getIntListRow(N):
    return [list(map(int, input().split())) for _ in range(N)]


def main():
    n, m = getIntMap()
    ab = getIntListRow(n)
    cd = getIntListRow(m)

    for i in range(len(...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitLFSを使用せずに100MB以上のファイルを扱う方法]]></title>
        <id>https://zenn.dev/aidemy/articles/42c4cda2d42667</id>
        <link href="https://zenn.dev/aidemy/articles/42c4cda2d42667"/>
        <updated>2022-12-27T01:21:03.000Z</updated>
        <summary type="html"><![CDATA[1.はじめに
ここ一年ほど使用していたクラウドアプリケーションプラットホームであるHerokuは、2022年11月28日より無料プランが廃止されてしまったため、他のサービスであるRenderに移行しました。
RenderはGithub連携で簡単にデプロイを行うことができるサービスですが、Githubでは100MB以上のファイルを管理できないという欠点があり、 Git Large File Storageなるものがあるのですが、無料枠は1GBまで。。色々調べているとGoogleDriveからダウンロードする方法を見つけたので備忘録として記述していきます。

 2.本記事のゴール
ローカ...]]></summary>
        <author>
            <name>shigeyuu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのdataclassを知る]]></title>
        <id>https://zenn.dev/karaage0703/articles/3508b20ece17d4</id>
        <link href="https://zenn.dev/karaage0703/articles/3508b20ece17d4"/>
        <updated>2022-12-26T15:10:52.000Z</updated>
        <summary type="html"><![CDATA[dataclassがよく分からなかった
たまに、dataclassを使っているコードを見かけて、今までよくわからずあまり気にせず雰囲気でよんでいたのですが、知らないと困ることがでてきたので少し調べてみました。
公式情報としては、PEP-557にかかれています。
https://peps.python.org/pep-0557/
読んでもよく使いどころが分かりませんね。というわけで、疑問点を1つ1つ確認していきます。

 dataclassはデコレータをつかう必要がある
そもそもデコレータがあんまり分かってなかったり…以下がわかりやすかったです。
https://qiita.com/m...]]></summary>
        <author>
            <name>karaage0703</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hubspotのカスタムコードを使って期日を指定したタスクを作る]]></title>
        <id>https://zenn.dev/readyfor_blog/articles/12aed242e8e8b4</id>
        <link href="https://zenn.dev/readyfor_blog/articles/12aed242e8e8b4"/>
        <updated>2022-12-26T13:00:28.000Z</updated>
        <summary type="html"><![CDATA[この記事で分かること
Hubspotではワークフローを使うと「タスク」を自動的に作ることができます。しかしこの機能を使っても期日の設定はこの2パターンしか存在しません。

即時
oo日後


一方でタスクの期日には、これらの日付を使いたいという要望がしばしばありました。ここではカスタムコードを使ってこれを実現する方法をまとめます。

カレンダーの特定の日付を指定する
オブジェクトのプロパティに入れた日付


 必要なこと


Operations Hub Professional以上の契約
あった方がいいこと


カスタム コード ワークフロー アクション のスキル

【新機能】カス...]]></summary>
        <author>
            <name>Shohei Urano</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[大学数学] マクローリン展開の可視化]]></title>
        <id>https://zenn.dev/shundeveloper/articles/639b05f3a45181</id>
        <link href="https://zenn.dev/shundeveloper/articles/639b05f3a45181"/>
        <updated>2022-12-26T11:13:28.000Z</updated>
        <summary type="html"><![CDATA[概要
無限微分可能な関数 f(x) について, 多くの場合下記が成立する.

f(x)=\sum_{k=0}^\infty f^{(k)}(0)\frac{x^k}{k!}

ただし, f^{(k)}(\cdot) はfのk階微分である. この式はテイラー展開を a=0 を代入すれば求められる.
以前下記の記事を書いていた時に, よく使う式だがどれぐらい近似できているか考えたことがないなと思い立ったのでPythonを用いて描画し, 検証することにした.
[統計学] ポアソン分布の期待値, 分散, 積率母関数, 最尤推定, 可視化

 よく用いられる関数のマクローリン展開
せっかくなの...]]></summary>
        <author>
            <name>ShunDev</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PyTorch3D入門]]></title>
        <id>https://zenn.dev/k_s/articles/91ae8c42e9fc6a</id>
        <link href="https://zenn.dev/k_s/articles/91ae8c42e9fc6a"/>
        <updated>2022-12-26T07:04:19.000Z</updated>
        <summary type="html"><![CDATA[はじめに
ほぼ横浜の民 Advent Calendar 2022の2022年12月26日の記事です。
近年Computer Visionと深層学習は切り離せない関係にありますね。
最近注目を集めている3Dに関する技術[1]でも深層学習の活用が発展しています。
というわけで、3D Computer Visionで深層学習を活用する手段であるPyTorch3Dについて、公式のチュートリアルをなぞりながら雰囲気を掴んでみようと思います。
※「3D Computer Visionで深層学習の技術を活用する手段」は他にも多くあり、点群DNNではPyTorch Geometricが、アカデミアの...]]></summary>
        <author>
            <name>k_s</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[二分探索（binary search）のサンプル（Python3）]]></title>
        <id>https://zenn.dev/yutabeee/articles/e2b9557981e62c</id>
        <link href="https://zenn.dev/yutabeee/articles/e2b9557981e62c"/>
        <updated>2022-12-26T06:12:19.000Z</updated>
        <summary type="html"><![CDATA[プログラミング初心者の備忘録ですです。

 二分探索（binary search)とは
二分探索とは、データ検索アルゴリズムの一つで、ソート（整列）済みのデータ群の探索範囲を半分に絞り込むを操作を繰り返すことで高速に探索を行う手法。
https://e-words.jp/w/二分探索.html

 Python3による二分探索の例
大きさnの数列Aにkの値が存在すればTrueなければFalseを返すbinary_search関数。

binary_search1.py
def binary_search(A, n, k):
    left, right = 0, n - 1
    w...]]></summary>
        <author>
            <name>yutabeeee</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DeadlineのRezサポートについて調査]]></title>
        <id>https://zenn.dev/hsuzuki_gcs/articles/b5cc341d0dc792</id>
        <link href="https://zenn.dev/hsuzuki_gcs/articles/b5cc341d0dc792"/>
        <updated>2022-12-26T05:55:54.000Z</updated>
        <summary type="html"><![CDATA[DeadlineのRez対応
Deadlineは10.2.0.10リリースでRezへのサポートを発表したため、調べてみます。

 課題
Rezによる環境構築をベースとするパイプラインでは、作業者はRez環境で作業を行い、レンダーファームを使用する場合はRez環境内からジョブを送信します。
ジョブがレンダーマシン中で実行される際には、同じRez環境を構成して、環境変数の設定やプラグインの読み込みなどが行われた状態でジョブが行されるようになってほしいです。

 これまでの方法
今までは、使用者は各々の方法でDeadlineにRezを統合する実装を施す必要がありました。
実装の方法はいくつ...]]></summary>
        <author>
            <name>hsuzuki_gcs</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[高速なPythonの静的コード解析ツールを作った話]]></title>
        <id>https://zenn.dev/mtshiba/articles/2848e416e4bcca</id>
        <link href="https://zenn.dev/mtshiba/articles/2848e416e4bcca"/>
        <updated>2022-12-26T04:02:21.000Z</updated>
        <summary type="html"><![CDATA[TL;DR
pylyzerというPython向けの静的コード解析ツールを開発した。
https://github.com/mtshiba/pylyzer
pylyzerは既存の静的解析ツール(e.g. pytype, pyright)よりも細かいコードの欠陥を指摘でき、エラー表示が丁寧であり、更に高速である。コードによっては100倍以上速く検査できた。

pylyzerはcargo(Rustのパッケージマネージャ)がインストールされている場合は以下のコマンドでインストール出来る。
cargo install pylyzer
pipでもインストール出来るが、現時点ではこの場合、標準ライ...]]></summary>
        <author>
            <name>shiba</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[シュミレータ上のmycobotをPythonで動かしてみた]]></title>
        <id>https://zenn.dev/kmiura55/articles/mycobot-sim-python</id>
        <link href="https://zenn.dev/kmiura55/articles/mycobot-sim-python"/>
        <updated>2022-12-25T16:58:00.000Z</updated>
        <summary type="html"><![CDATA[この記事は ROS Advent Calendar 202217日目の記事です。
前からmycobotがすごく気になってしょうがないです。
執筆時点(2022年12月)にはスイッチサイエンスさんでセールで安くなっていたので本当に買うかどうか悩ましいですね。
というわけでまずは手軽にイメージをつかむためにmycobotのシュミレーターを動かしてみたいと思います。

 動作環境

Ubuntu 20.04
ROS Noetic


 とりあえず動かす

 ワークスペースの用意
まずは以下のコマンドでワークスペースを用意します
mkdir -p ~/catkin_ws/src
cd ~/cat...]]></summary>
        <author>
            <name>KMiura</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[gunicornとflaskによるDockerでの開発]]></title>
        <id>https://zenn.dev/4kzknt/articles/1baf245b3caca8</id>
        <link href="https://zenn.dev/4kzknt/articles/1baf245b3caca8"/>
        <updated>2022-12-25T14:41:32.000Z</updated>
        <summary type="html"><![CDATA[はじめに
クラウドサービスでコンテナーの検証をすることが多くその際に作ったものを備忘録として残しておきます。
そのため、flask アプリの方の内容は薄いです。あくまでもコンテナーで使用するために作成したものなので、Hello worldのみとなっています。

 環境
ローカル環境: Linux(WSL)
Python 3.10.9
Docker version 20.10.21

 ディレクトリ
最終的に作成するディレクトリ構成は以下のようになります。
project
 ├── src 
 ├── Dockerfile 
 └── requirements.txt # これはなくて...]]></summary>
        <author>
            <name>4kzknt</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AtCoder Beginner Contest 283 レポート]]></title>
        <id>https://zenn.dev/hannah/articles/20221225_001</id>
        <link href="https://zenn.dev/hannah/articles/20221225_001"/>
        <updated>2022-12-25T12:10:42.000Z</updated>
        <summary type="html"><![CDATA[概要
ABCD4完でした．本当にしょうもない結果で書くことがないです．

 ABC283


コンテスト名: ユニークビジョンプログラミングコンテスト2022 冬(AtCoder Beginner Contest 283)
順位: 1850th / 8272
パフォーマンス: 1075
レーティング: 1268 → 1250 (-18)
コンテスト参加回数: 68

https://atcoder.jp/users/hannaheptapod/history/share/abc283

 A - Power


 A - 問題
A^Bを出力せよ．

 A - 解法
特筆事項なし．

...]]></summary>
        <author>
            <name>はんな</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[メトリクスフィルター設定後、自動的にCloudWatchAlarmが作成されるようにしてみた]]></title>
        <id>https://zenn.dev/kuromame614/articles/c81726e4c3c6d0</id>
        <link href="https://zenn.dev/kuromame614/articles/c81726e4c3c6d0"/>
        <updated>2022-12-25T11:49:26.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは、山田です。
今回はメトリクスフィルターが設定されたら、自動的にCloudWatchAlarmが作成されるようにLambda関数を作成したので記載していきます。
よろしくお願いいたします。

 概要図
概要図は以下の通りです。

①：メトリクスフィルターとCLoudWatchAlarmの一覧を取得する。
②：取得した結果、CloudWatchAlarmに名前がないものに関しては、アラームを作成する。
※前提条件※
メトリクスフィルター名とCLoudWatchAlarm名は同名とします。

 Lambda関数
作成したLambda関数は以下になります。
import...]]></summary>
        <author>
            <name>黒豆。</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-055｜B Training Camp]]></title>
        <id>https://zenn.dev/hyperdb/articles/f9231fb231072e</id>
        <link href="https://zenn.dev/hyperdb/articles/f9231fb231072e"/>
        <updated>2022-12-25T11:48:48.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-055 B - Training Camp



 提出結果
def getInt():
    return int(input())


def main():
    n = getInt()
    p = 10 ** 9 + 7

    r = 1
    for i in range(n):
        r = (r * (i + 1)) % p
    print(r)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-056｜B NarrowRectanglesEasy]]></title>
        <id>https://zenn.dev/hyperdb/articles/5471dc8cf18e9c</id>
        <link href="https://zenn.dev/hyperdb/articles/5471dc8cf18e9c"/>
        <updated>2022-12-25T11:48:48.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-056 B - NarrowRectanglesEasy



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    w, a, b = getIntMap()

    d = b - (a + w) if b > a else a - (b + w)
    print(d if d >= 0 else 0)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-056｜A HonestOrDishonest]]></title>
        <id>https://zenn.dev/hyperdb/articles/2d1ad5bbcdaa39</id>
        <link href="https://zenn.dev/hyperdb/articles/2d1ad5bbcdaa39"/>
        <updated>2022-12-25T11:48:48.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-056 A - HonestOrDishonest



 提出結果
def getStringMap():
    return input().split()


def main():
    a, b = getStringMap()

    if a == 'H':
        print('H' if b == 'H' else 'D')
    else:
        print('D' if b == 'H' else 'H')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-055｜A Restaurant]]></title>
        <id>https://zenn.dev/hyperdb/articles/27463f33130688</id>
        <link href="https://zenn.dev/hyperdb/articles/27463f33130688"/>
        <updated>2022-12-25T11:48:47.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-055 A - Restaurant



 提出結果
def getInt():
    return int(input())


def main():
    n = getInt()

    print((n * 800) - ((n // 15) * 200))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで使える四捨五入関数を作ってみた]]></title>
        <id>https://zenn.dev/techike/articles/f364694b748af8</id>
        <link href="https://zenn.dev/techike/articles/f364694b748af8"/>
        <updated>2022-12-25T10:00:30.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Pythonでデータを扱う場合、整数や小数に対して小学校でならうようないわゆる四捨五入をいい感じでしてくれる関数がなかったので自作してみました。
整数と小数それぞれの四捨五入方法に関しては、こちらのページを参考にさせて頂きました。
完成形のコードだけ見たいよという方は私のGithubからどうぞ。

 環境
OS : AlmaLinux release 8.7
Python 3.8.0
numpy 1.23.4
とりあえず必要なライブラリ・モジュールをimportしておきます。
import numpy as np
from decimal import Decimal, R...]]></summary>
        <author>
            <name>Fossa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[install pyenv on 2022-12]]></title>
        <id>https://zenn.dev/keikuchen/articles/9eb8860ef68722</id>
        <link href="https://zenn.dev/keikuchen/articles/9eb8860ef68722"/>
        <updated>2022-12-25T09:47:23.000Z</updated>
        <summary type="html"><![CDATA[Macを買い替えて、久々にpyenvとvirtualenv入れ直すか〜というところで改めて導入方法を調べながら進めていったのでそのメモ on 2022-12-25

 TL;DR
# Xcode Command Line Toolsを入れる
xcode-select --install
# homebrewを入れる
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
# pyenvを入れる
brew update
brew install pyenv...]]></summary>
        <author>
            <name>keikuchen</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[M1 mac] VSCodeをcodeコマンドで開きたい]]></title>
        <id>https://zenn.dev/minamiso/articles/47e2f97eb1e4eb</id>
        <link href="https://zenn.dev/minamiso/articles/47e2f97eb1e4eb"/>
        <updated>2022-12-25T03:42:11.000Z</updated>
        <summary type="html"><![CDATA[はじめに
M1macでVSCodeを利用しています。今までローカルのフォルダをワークスペースに追加するにはGUIでポチポチしていたのですが、codeコマンドを利用してスムーズに同様の動作ができることを知ったのでこれを使えるようにしていきます。

 VSCodeから設定してみる
Shift + Cmd + Pで"Shell"と入力して"Install code command in PATH"を選択します。

本来はこれだけでcodeコマンドが使えるようになるはずですが、私の環境では以下エラーが出ました。
% code
/usr/local/bin/code: line 6: pyth...]]></summary>
        <author>
            <name>minami</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[無料主義〜資本主義の上位互換を目指して〜]]></title>
        <id>https://zenn.dev/329/articles/be35a420460da0</id>
        <link href="https://zenn.dev/329/articles/be35a420460da0"/>
        <updated>2022-12-25T02:34:56.000Z</updated>
        <summary type="html"><![CDATA[無料主義について
資本主義を代替する経済の仕組みとして「無料主義」という仕組みを考えました。
資本主義と社会主義など、限られた選択しかなかった経済の仕組みに新たな選択肢を与えます。
既にこのようなことを考えている人が多いとは思いますが、僕は机上の空論ではなく本当に社会の仕組みの1部として実装していき、
最終的には経済全体が資本主義ではなく無料主義で回る社会にしていきたいと考えています。

 無料主義の基本的な仕組み
無料主義の基本となる仕組みについて解説します。
下記のような経済の仕組みを、「無料主義」と呼びます。

「幸福度の向上」「生産性の向上」「人権規範を守る」などの目標を掲げ...]]></summary>
        <author>
            <name>スギ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WARNING:Ignore distutils configs in setup.cfg due to encoding errorの対策]]></title>
        <id>https://zenn.dev/masafuro/articles/d046f86f04f69c</id>
        <link href="https://zenn.dev/masafuro/articles/d046f86f04f69c"/>
        <updated>2022-12-25T01:37:17.000Z</updated>
        <summary type="html"><![CDATA[yolo v5を入れていたら
pip install -r requirements.txt 
の時にわわわーって
WARNING:Ignore distutils configs in setup.cfg due to encoding error
が出てきた。色々調べた結果、対策は次のようにするらしい。
https://jingyan.baidu.com/article/25648fc1471e6a9191fd002e.html
Windowsの言語の設定、地域から、ワールドワイド言語サポートにチェックを入れて再起動。

WARNINGでなくなりました。
＝＝＝
古川企画では長崎県佐...]]></summary>
        <author>
            <name>masafuro</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pandas-likeなラッパー、Ibis触ってみた]]></title>
        <id>https://zenn.dev/notrogue/articles/0dce33f14c65b3</id>
        <link href="https://zenn.dev/notrogue/articles/0dce33f14c65b3"/>
        <updated>2022-12-24T23:40:11.000Z</updated>
        <summary type="html"><![CDATA[気にはなってるけど触ってないビッグデータ系のツール・サービスを触る Advent Calendar 2022の#25です。

 tl;dr

Pandas-likeな記法で、各種データベース（SQLiteやPostgreSQL）や分散処理エンジン（DaskやSpark）にアクセスできるよ
基本的には処理は各種データベースや分散処理エンジン側で実行されるよ

＝ローカルマシンに載らないデータ量も処理できるはず




 Ibisとは
公式ページ曰く、

Ibis is a Python framework to access data and perform analytical comp...]]></summary>
        <author>
            <name>notrogue</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonでスクレイピングできるツール作成してみた。]]></title>
        <id>https://zenn.dev/sou3515/articles/8d5984f91d3895</id>
        <link href="https://zenn.dev/sou3515/articles/8d5984f91d3895"/>
        <updated>2022-12-24T21:14:36.000Z</updated>
        <summary type="html"><![CDATA[🐣 はじめに
既定のExcelシートにxpathを入力すると、スクレイピングできるデスクトップアプリを作成しました。作成した経緯としては情報収集のためにスクレイピングしたい機会もあり、スクレイピングする媒体のごとにpythonを書くのが手間だったので、簡単なスクレイピングできるツールを作ってしまおう！っと思い作成しました。

 🎯 使用した環境・構築方法
今回はPythonの3.9.13バージョンで開発しました。
フレームワークとしてはpythonのtkinterを使用しています。
使用してみたい場合は以下手順でダウンロード実行お願いします。

 実行方法

ソースコードのgithu...]]></summary>
        <author>
            <name>sou</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[tkinterのGUIデザイナーPAGEを使ってみる]]></title>
        <id>https://zenn.dev/naonaorange/articles/20220807_tkinter_gui_page</id>
        <link href="https://zenn.dev/naonaorange/articles/20220807_tkinter_gui_page"/>
        <updated>2022-12-24T15:29:15.000Z</updated>
        <summary type="html"><![CDATA[pythonを使ってGUIソフトを作りたいと思う機会は多いのですが、気軽に作ることができないのが難点です。
pythonをインストールすることでデフォルトで入っていることが多いのでライブラリはtkinterを使おうと思うのですが、
画面のモジュール配置やレイアウトをコードで書いていくのは中々辛いです。。。
そこでPAGEというソフトを使ってVisual StudioのようにGUIでマウスを使ってウィンドウのレイアウトを作っていきます。

 インストール
PAGEのインストールは下記サイトからできます。
http://page.sourceforge.net/:embed:cite

 起...]]></summary>
        <author>
            <name>naonaorange</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonデフォルトの仮想環境venvを使う]]></title>
        <id>https://zenn.dev/naonaorange/articles/20220807_python_venv</id>
        <link href="https://zenn.dev/naonaorange/articles/20220807_python_venv"/>
        <updated>2022-12-24T15:28:24.000Z</updated>
        <summary type="html"><![CDATA[最近はpythonを色々な分野で使用することが多くなりました。
その時に便利なのがpythonの仮想環境です。
今回はデフォルトで使用できるvenvのよく使うコマンドを記載します。
環境はmacを想定しています。

 新しい仮想環境の作成
python -m venv XXX

 仮想環境の有効化
source /XXX/bin/active

 仮想環境の無効化
deactivate]]></summary>
        <author>
            <name>naonaorange</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Embeddable packageでPortableなPython環境を構築する]]></title>
        <id>https://zenn.dev/naonaorange/articles/20211010_embeddable_python</id>
        <link href="https://zenn.dev/naonaorange/articles/20211010_embeddable_python"/>
        <updated>2022-12-24T15:22:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
最近はPythonがポピュラーになってきており、簡単な便利ツールをPythonで作成することが多くなってきました。
そうすると自分以外の人がそのツールを使う機会も多くなってきますが、
一般的なPythonのデメリットとしてはPythonがインストールされている環境でないと動作しないということです。
解決策の一つとして、Pythonファイルをexe化してPythonがないPCでも動かせるようにすることがあります。
https://naonaorange.hatenablog.com/entry/2019/08/17/185150
しかしこの方法も万能ではなく、下記のような長所...]]></summary>
        <author>
            <name>naonaorange</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【VOICEVOX】GPU 動作確認,処理速度 一覧リスト まとめ]]></title>
        <id>https://zenn.dev/kuronekoserver/articles/d63fc8c71c44e3</id>
        <link href="https://zenn.dev/kuronekoserver/articles/d63fc8c71c44e3"/>
        <updated>2022-12-24T15:13:32.000Z</updated>
        <summary type="html"><![CDATA[GPUリストについて
このブログに記入してあるGPUリストにはNVIDIA製のGPUのみしか記入しておりません。
また、処理速度に関しては10文字 50文字 100文字の文字処理を、平均した秒数を表示しております。
この、GPUリスト活動はボランティアで運営を行っております。
最終更新日: 2022/12/04

 リスト表記申請
以下のフォームにてリストに載せさせていただきます。
ご協力よろしくお願いいたします。
また、リストにGPUが載って場合も以下のフォームにてご報告いただけると助かります。
https://forms.gle/eGi3e37r4YLoyHbk7
測定方法につい...]]></summary>
        <author>
            <name>KuronekoServer</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonでjsonファイルを読み書きする]]></title>
        <id>https://zenn.dev/naonaorange/articles/20200916_python_json</id>
        <link href="https://zenn.dev/naonaorange/articles/20200916_python_json"/>
        <updated>2022-12-24T15:01:22.000Z</updated>
        <summary type="html"><![CDATA[Pythonでソフトを作るとき、設定値を保存したい時が多くあります。
そんな時に使うのがjsonファイルですよね。
Pythonでjsonファイルを扱うのはとても簡単です。
サンプルプログラムを載せます。
import json

def write():
    with open('sample.json', 'w') as f:
        w_data = {}
        w_data['num'] = 0
        w_data['str'] = 'Hello'
        w_data['array'] = []
        w_data['array...]]></summary>
        <author>
            <name>naonaorange</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pyコマンドとpipenvを使ったWindowsでのPython仮想環境構築]]></title>
        <id>https://zenn.dev/naonaorange/articles/20200819_pipenv_python</id>
        <link href="https://zenn.dev/naonaorange/articles/20200819_pipenv_python"/>
        <updated>2022-12-24T14:59:43.000Z</updated>
        <summary type="html"><![CDATA[Pythonでの仮想環境構築はツールが色々あるが故に様々な方法があるのでわかりにくいです。
今まではAnacondaをインストールしてcondaコマンドを使っていたのですが、今回色々調べた結果をまとめます。
簡潔に説明すると下記になります。


Pythonは公式からVanilla Pythonをインストールする


Pythonバージョン管理はpyコマンドで行う


Pythonのパッケージ管理はpipenvコマンドで行う



 pyコマンドを使ったPythonバージョン管理
WindowsではPythonをインストールするとPowershellでpyコマンドを使えるようになります。...]]></summary>
        <author>
            <name>naonaorange</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pyenvの仮想環境下でpybluezをインストール]]></title>
        <id>https://zenn.dev/naonaorange/articles/20200129_pyenv_pybluez</id>
        <link href="https://zenn.dev/naonaorange/articles/20200129_pyenv_pybluez"/>
        <updated>2022-12-24T14:43:58.000Z</updated>
        <summary type="html"><![CDATA[タイトルのようにpyenv仮想環境下でpybluezをインストールしようとしたのですが、
色々躓いたことがあったので、メモします。
環境はUbuntu18.04 64bit、Python3.6です。
また、pyenvによる仮想環境作成方法は省略します。
まだの方は下記のURLを参考に作成してください。
https://naonaorange.hatenablog.com/entry/pyenvとpyenv-virtualenvのインストール

 必要なソフトウェアをインストール
今回試行錯誤したので、不要なものや重複しているものがあると思いますが、インストールします。
sudo apt ...]]></summary>
        <author>
            <name>naonaorange</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pillowで塗りつぶしのない四角形を描画する]]></title>
        <id>https://zenn.dev/naonaorange/articles/20191213_python_pillow</id>
        <link href="https://zenn.dev/naonaorange/articles/20191213_python_pillow"/>
        <updated>2022-12-24T14:35:54.000Z</updated>
        <summary type="html"><![CDATA[今回はtipsですが、pillowでの描画を取り上げます。
中の塗りつぶしのない四角形を書きたかったのですが、ネットでサンプルがなかったので実際にやってみたことを載せておきます。
四角形はrectangle関数で書けるのですが、引数のfillに何も入れないと塗りつぶしがなくなるようです。
from PIL import Image, ImageDraw

img = Image.new('RGB', (300, 300), 'gray')
d = ImageDraw.Draw(img)
d.rectangle([(50, 50), (150, 150)], outline='green'...]]></summary>
        <author>
            <name>naonaorange</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonからdllを呼び出す]]></title>
        <id>https://zenn.dev/naonaorange/articles/20191004_python_dll</id>
        <link href="https://zenn.dev/naonaorange/articles/20191004_python_dll"/>
        <updated>2022-12-24T14:32:14.000Z</updated>
        <summary type="html"><![CDATA[前回、dllの作成方法を書きましたが、次はそれをPythonから呼び出します。
ポイントとしては、

dllとpythonを同じディレクトリにいれること
charなどの方はctypesからC言語用の型を取ってきて、それを使う。intとかはそのままでもできることはできる

from ctypes import cdll, c_char

lib = cdll.LoadLibrary('hoge.dll')
char_array = c_char * 2
input_data = char_array()

for i in range(2):
    input_data[i] = i

...]]></summary>
        <author>
            <name>naonaorange</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[wxpythonを使ったGUIアプリをpyinstallerでexeファイルにしたらエラーで動かない]]></title>
        <id>https://zenn.dev/naonaorange/articles/20190817_wxpython_pyinstaller</id>
        <link href="https://zenn.dev/naonaorange/articles/20190817_wxpython_pyinstaller"/>
        <updated>2022-12-24T14:30:51.000Z</updated>
        <summary type="html"><![CDATA[最近はpythonでGUIアプリを作るときにはwxpythonを使っています。
pyinstallerでexeファイル作成まではうまくいくのですが、実行すると下記エラーで動かないです。
ModuleNotFoundError: No module named 'wx._adv'
[10536] Failed to execute script main
その対処法として、下記ライブラリをmainでインクルードすると動きます。
#import wx._adv
#import wx._html
下記サイトを参考にしました。
このサイトでは上記2つのほかにwx._xmlをインクルードしろと書い...]]></summary>
        <author>
            <name>naonaorange</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pyinstallerでexeファイルを作成する]]></title>
        <id>https://zenn.dev/naonaorange/articles/20190817_pyinstaller_exe</id>
        <link href="https://zenn.dev/naonaorange/articles/20190817_pyinstaller_exe"/>
        <updated>2022-12-24T14:29:36.000Z</updated>
        <summary type="html"><![CDATA[pythonでプログラムを書く機会が多いですが、
pythonの問題点として、実行するPCにpythonがインストールされていないといけないということがあります。
また、pythonのバージョンが変わると動作が異なることもあるため、
他の環境ではエラーになってしまう可能性もあります。
(Visual Studioでアプリを作るのに比べると面倒なことが多いですね。)
そこで、pyinstallerというソフトを使用して、pythonファイルをexeファイルに変換します。
pyinstallerはpipでインストールできます。
pip install pyinstaller
簡単な使い方とし...]]></summary>
        <author>
            <name>naonaorange</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[wxPythonのGUIデザイナーwxFormBuilderを使ってみる]]></title>
        <id>https://zenn.dev/naonaorange/articles/20190815_wxpython_wxformbuilder</id>
        <link href="https://zenn.dev/naonaorange/articles/20190815_wxpython_wxformbuilder"/>
        <updated>2022-12-24T14:28:08.000Z</updated>
        <summary type="html"><![CDATA[PythonでGUIアプリを作るとき、ライブラリの選択がとても難しいです。
私の希望としては下記なのですが、

無料版があること
GPL系のライセンスではないこと
コーディングでレイアウトを書くのはやはり面倒なので、Visual Studioのようにグラフィカルに書きたい
特に最後のGUIデザイナーについてはQt以外は良いものがあまりなく、あってもしばらく更新されていなかったり、情報がほとんどなかったりするので、
これだというものがあまりありません。

色々調べた結果、タイトル通りライブラリはwxPython。GUIデザイナーはwxFormBuilderが1番良さそうですので、
とりあえ...]]></summary>
        <author>
            <name>naonaorange</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[multiprocessingとqueueを使ってマルチプロセスのsocket通信をしてみる]]></title>
        <id>https://zenn.dev/naonaorange/articles/20181110_multiprocessing_queue_socket</id>
        <link href="https://zenn.dev/naonaorange/articles/20181110_multiprocessing_queue_socket"/>
        <updated>2022-12-24T14:20:57.000Z</updated>
        <summary type="html"><![CDATA[前回、socekt通信のサンプルプログラムを書きましたが、
https://naonaorange.hatenablog.com/entry/2018/11/06/070039
何かsocket通信するときには普通はPublisher-Subscriberのデザインパターンを使って、socket通信部と、データ供給部を別プロセスにしたくなります。
ですので、そのようなサンプルプログラムを記載しました。
下記はsocket送信プログラム
import time
from multiprocessing import Process
from multiprocessing import Q...]]></summary>
        <author>
            <name>naonaorange</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Heroku, PythonでLine Botを作る]]></title>
        <id>https://zenn.dev/naonaorange/articles/20180403_heroku_python_line</id>
        <link href="https://zenn.dev/naonaorange/articles/20180403_heroku_python_line"/>
        <updated>2022-12-24T14:10:13.000Z</updated>
        <summary type="html"><![CDATA[ここでは送信したメッセージをオウム返しするLine Botを作ります。
基本的に他のブログの引用ですが、体系的にまとめました。

 Lineアカウント作成
Botを作るためには、下記の2アカウントを作る必要があります。

Line Business
Messasing API

ここは下記URLを参考に
https://qiita.com/yoshizaki_kkgk/items/bd4277d3943200beab26

 Herokuアカウント作成
下記URLを参考に
https://j-hack.gitbooks.io/deploy-meteor-app-to-heroku/con...]]></summary>
        <author>
            <name>naonaorange</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[マーケットAI開発プロジェクトにおけるプロジェクトマネジメントのエッセンス]]></title>
        <id>https://zenn.dev/gamella/articles/3cd1bf254b68b8</id>
        <link href="https://zenn.dev/gamella/articles/3cd1bf254b68b8"/>
        <updated>2022-12-24T13:16:22.000Z</updated>
        <summary type="html"><![CDATA[マケデコ( https://discord.gg/xg6P5RXwaa )という主に株式関連のマーケットAPIを活用し、分析や予測モデルを構築しているbotterのコミュニティをJPX総研様、AlpacaJapanの協賛で運営しています。今日はそのアドベントカレンダーの一環で過去に自分が実施してきたマーケットAI開発プロジェクトにおけるプロジェクトマネジメントのエッセンスをまとめてみたいとおもいます。
https://qiita.com/advent-calendar/2022/market-jquants
なお、現在は証券システムの開発やプロダクト設計の統括を主に会社では担当しており、...]]></summary>
        <author>
            <name>tomo@Alpaca</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Numerai Tips] Numeraiの現状使用されていないTargetの基礎的な解析]]></title>
        <id>https://zenn.dev/nishimoto/articles/2f1e2a8bfae84a</id>
        <link href="https://zenn.dev/nishimoto/articles/2f1e2a8bfae84a"/>
        <updated>2022-12-24T10:18:52.000Z</updated>
        <summary type="html"><![CDATA[サマリー

Numeraiのtargetは現状nomi_20が使われているが、その他の変数を使うとCorrやTCが改善する可能性がある。
20 daysの変数は相関が高く、スピアマン相関係数値が0.70〜0.80を超えているものが多いので、これら変数を使うと特にCorrが改善するかも？（以下がSharpe ratioが高かったです）

target_arthur_20
target_william_20
target_jerome_20





 はじめに
Numeraiにおいて現状スコアリングに使われているターゲットは普段1つだけですが、他のターゲットにも予測に重要な情報が眠って...]]></summary>
        <author>
            <name>nishimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[忙しい人のためのDjango + DjangoRestFramework]]></title>
        <id>https://zenn.dev/geb/articles/221224_django_summarize_perspective</id>
        <link href="https://zenn.dev/geb/articles/221224_django_summarize_perspective"/>
        <updated>2022-12-24T07:09:43.000Z</updated>
        <summary type="html"><![CDATA[概要

 Django
Webアプリを作るPythonライブラリ
機能一覧：https://docs.djangoproject.com/en/4.1/intro/overview/

 Django REST Framework (DRF)
DjangoにREST APIを作る機能を追加するライブラリ
DRF機能概要：https://www.django-rest-framework.org/
REST APIとは：https://learn.microsoft.com/ja-jp/azure/architecture/best-practices/api-design
Djang...]]></summary>
        <author>
            <name>Geb</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AutoMLで手軽に競馬予想AIを作ろう(2022年12月版) 祝有馬記念! (Pycaret, Octoparse)]]></title>
        <id>https://zenn.dev/keivacance/books/e4c04e4bf11382</id>
        <link href="https://zenn.dev/keivacance/books/e4c04e4bf11382"/>
        <updated>2022-12-23T16:14:07.000Z</updated>
        <summary type="html"><![CDATA[プログラミング・データサイエンスを学習したい方に、競馬を題材にして、プログラミング(python)やデータサイエンス(AIの作成)が学べるようなコンテンツを用意しました。また、競馬予想で実際に使いたい方には、こちら側で作成した競馬予想AIを使って、実際にAIを作って予想する方法をコードベースで情報提供させてもらおうと思います。

アジェンダは下記のようになっています。
1. データ収集
2. データの前処理
3. AIの学習
4. AIの評価
5. 馬券をどう購入するか？]]></summary>
        <author>
            <name>ケイバカンス</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[RubyエンジニアがPythonコードを1週間書いた感想]]></title>
        <id>https://zenn.dev/kunikata/articles/cef6130ba877ed</id>
        <link href="https://zenn.dev/kunikata/articles/cef6130ba877ed"/>
        <updated>2022-12-23T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Xbit Advent Calendar 2022 24日目の記事です。
シフト管理SaaSであるらくしふを提供するクロスビットのバックエンドではRailsを採用することが多いですが、一部Pythonで書かれたAPIも存在します。WebフレームワークにはFastAPI、ORMにはSQLAlchemy、静的型解析にはmypyを使っています。
私はここ数年はRubyやTypeScriptでコードを書くことが多いですが、今回初めてPythonで書かれたプロダクトを触る機会がありましたので、その際に感じた点の中からいくつかピックアップしてみます。

 リスト(辞書)内包表記に慣れる...]]></summary>
        <author>
            <name>kuniaki ishikawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[統計学] ポアソン分布の期待値, 分散, 積率母関数, 最尤推定, 可視化]]></title>
        <id>https://zenn.dev/shundeveloper/articles/ecfea8a4a01309</id>
        <link href="https://zenn.dev/shundeveloper/articles/ecfea8a4a01309"/>
        <updated>2022-12-23T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[確率質量関数

f(x|\lambda)= \frac{\lambda^x e^{-\lambda}}{x!}


 期待値・分散

 指数関数のマクローリン展開
導出にあたり以下の式を用いるので先に証明する.

e^x = \sum_{k=0}^{\infty} \frac{x^k}{k!} \cdots (1)

証明:
下記のマクローリン展開を実行する. なお, f^{(k)} はfのk回微分とする.

\begin{align*}
f(x)
&=
\sum_{k=0}^{\infty} f^{(k)}(0) \frac{(x-0)^k}{k!}
\\
&=
\...]]></summary>
        <author>
            <name>ShunDev</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで音声を結合する]]></title>
        <id>https://zenn.dev/akkunlab/articles/b1c9547b45393e</id>
        <link href="https://zenn.dev/akkunlab/articles/b1c9547b45393e"/>
        <updated>2022-12-23T10:21:13.000Z</updated>
        <summary type="html"><![CDATA[この記事は 福島高専 Advent Calendar 2022 23日目の記事です。

 1. はじめに
こんにちは、高専5年のAkkunlabです。主にプログラミングや電子工作などをしています。
去年のAdvent Calendarでは「【Socket.IO】PC50台を無線でつなげてアートを作ってみた」というタイトルで、50台のPCを使用したデジタルアートについて記事を書きました。
今回は、動画・音声をPythonで扱う際にとても便利なものがあったので、記事にしていきたいと思います。
読みにくいところがあるかもしれませんが、最後まで読んでいただけたら幸いです。

 2. ffmpeg...]]></summary>
        <author>
            <name>Akkun</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django を使用しているプロジェクトでのディレクトリ構造に関して考える]]></title>
        <id>https://zenn.dev/k0kishima/articles/5a02d0fb3c811e</id>
        <link href="https://zenn.dev/k0kishima/articles/5a02d0fb3c811e"/>
        <updated>2022-12-23T10:19:21.000Z</updated>
        <summary type="html"><![CDATA[概要

以前在籍した案件での技術的負債の解消の一環として掲題の取り組みをした
Github の issue にアップしていたが契約終了に伴って見れなくなるので別途残しておきたい → ここに移植


 発生していた問題点

 namespace の粒度にばらつきがある

サービス名の namespace があるのと同じ階層にリソース単位の namespace が切られている

例えば、法人向けと消費者向けのサービスを提供してて各々をモノレポで管理しているとする

法人向けの namespace が b2b だとしたら、これと同じ階層に company とか subscription み...]]></summary>
        <author>
            <name>k0kishima</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-054｜A One Card Poker]]></title>
        <id>https://zenn.dev/hyperdb/articles/e8c6ca24186eab</id>
        <link href="https://zenn.dev/hyperdb/articles/e8c6ca24186eab"/>
        <updated>2022-12-23T09:11:59.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-054 A - One Card Poker



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    a, b = getIntMap()
    p = [0, 13, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]

    print('Draw' if a == b else 'Alice' if p[a] > p[b] else 'Bob')


if __name__ == "__main__":
    m...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-054｜B Template Matching]]></title>
        <id>https://zenn.dev/hyperdb/articles/c827d8ea0c44c3</id>
        <link href="https://zenn.dev/hyperdb/articles/c827d8ea0c44c3"/>
        <updated>2022-12-23T09:11:58.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-054 B - Template Matching



 提出結果
def getIntMap():
    return map(int, input().split())


def getStringRow(N):
    return [list(input()) for _ in range(N)]


def check_area(rectangle, template, i, j):
    for x in range(len(template)):
        for y in range(len(template)):
       ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[StreamlitをGoogle Colabで速攻で試そう！]]></title>
        <id>https://zenn.dev/aidemy/articles/9c2f959d08566a</id>
        <link href="https://zenn.dev/aidemy/articles/9c2f959d08566a"/>
        <updated>2022-12-23T08:29:15.000Z</updated>
        <summary type="html"><![CDATA[本記事執筆の背景

データ分析結果の可視化結果等をWebUIで表現するアプリケーションを簡単に作るツールとして、PythonのStreamlitというツールを知った。
Streamlitは、ひとまず動くものを見せてアプリのイメージを沸かせたり、少人数で試しに使うレベルのプロトタイプを作るフェーズに適している。
今回はそんなStreamlitをGoogle Colabで簡単に試す方法を紹介し、誰もが「Streamlitってこんなことができるんだね～」と10分ほどで思えるようになることを目指します。


 本記事の想定対象

Pythonを用いたデータ分析結果をWebUI上で可視化してみ...]]></summary>
        <author>
            <name>ErikaOta</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Streamlit + Snowpark for Python してみた]]></title>
        <id>https://zenn.dev/tmasuo/articles/7d32bbe9a7532a</id>
        <link href="https://zenn.dev/tmasuo/articles/7d32bbe9a7532a"/>
        <updated>2022-12-23T05:30:56.000Z</updated>
        <summary type="html"><![CDATA[📜 この記事は
Snowflake Advent Calendar 2022 Calendar 2 Day 25 の記事になります。Snowflake で Sales Engineer をしております、@tmasuo がお届けします。
この記事で触れる Snowflake の各機能のリリース状態は 2022 年 12 月 1 日時点に基づきます。

 Snowflake ❤️ Python
Snowflake は製品の重要な特徴として PROGRAMMABLE という要素があります。SQL はもちろん、好みの言語で開発ができる選択肢を提供しています。

Snowflake Summi...]]></summary>
        <author>
            <name>tmasuo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[dbt Python Model + Snowpark for Python を動かしてみた]]></title>
        <id>https://zenn.dev/tmasuo/articles/df953dbbf40616</id>
        <link href="https://zenn.dev/tmasuo/articles/df953dbbf40616"/>
        <updated>2022-12-23T05:29:29.000Z</updated>
        <summary type="html"><![CDATA[📜 この記事は
dbt Advent Calendar 2022 Day 24 の記事になります。Snowflake で Sales Engineer をしております、@tmasuo がお届けします。
この記事で触れる Snowflake の各機能のリリース状態は 2022 年 12 月 1 日時点に基づきます。

 Inspired by ...
Advent Calendar って良い文化ですよね。Snowflake Advent Calendar ばかりに投稿していましたが、こちらの記事は dbt Advent Calendar の以下の記事からインスピレーションを受けました。...]]></summary>
        <author>
            <name>tmasuo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CLI内のpythonのバージョン設定とそれに付随する不具合]]></title>
        <id>https://zenn.dev/t13row/articles/0434a22888f270</id>
        <link href="https://zenn.dev/t13row/articles/0434a22888f270"/>
        <updated>2022-12-23T04:03:55.000Z</updated>
        <summary type="html"><![CDATA[python3→python3.10に移行するにあたって、gnomeのターミナルのデフォルト設定が、固定またはオートになっていることが原因で、pythonのバージョンが（適切に）更新できず、すべてのアプリケーション更新できなくなり続ける『負の連鎖』でpythonが更新できないと、ufwやらvpnやらセキュリティ関連まで更新できず青ざめることになりました（笑）
dpkg: error processing package swift (--configure):
 dependency problems - leaving unconfigured
No apport report wri...]]></summary>
        <author>
            <name>t13row</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[質問対応業務を DX した話]]></title>
        <id>https://zenn.dev/aidemy/articles/425cf7d9f31945</id>
        <link href="https://zenn.dev/aidemy/articles/425cf7d9f31945"/>
        <updated>2022-12-23T03:00:00.000Z</updated>
        <summary type="html"><![CDATA[この記事は「 Aidemy Advent Calendar 2022 」の 23 日目の記事です。

 はじめに
アイデミーでインターンをしている山本です。インターンでは、受講者からの質問に回答する業務（以下、質問対応業務）に携わっています。
この記事では、質問対応チームで質問管理システム「質問箱」を開発し、質問対応業務の DX を図った話について記したいと思います。

 質問対応の業務フロー
Aidemy では、次の 4つのステップで質問対応業務を行なっています。

質問まとめ上げ
回答執筆
レビュー
返信

図にするとこのようになります:

各ステップで行なっていることは次のとおりで...]]></summary>
        <author>
            <name>Yuta YAMAMOTO</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ヤマト運輸「送り状発行システムB2クラウド」のAPIを開発してパッケージを公開した]]></title>
        <id>https://zenn.dev/naofumi/articles/5bc2cf051211bd</id>
        <link href="https://zenn.dev/naofumi/articles/5bc2cf051211bd"/>
        <updated>2022-12-23T02:15:20.000Z</updated>
        <summary type="html"><![CDATA[結論
ヤマト運輸さんの「送り状発行サービスB2クラウド」のAPIパッケージをPythonで開発して公開しました。

 動機：APIがなくて不便だった

データのやり取りは基本CSV
シールに印刷してDMに貼る
シールを貼りに時間がかかる。直接印刷する方式は提供されていない。
宛先データに不備があるとリジェクトされる
自動補正の機能はない。


 なのでAPIを開発しました

データの送受信はAPI経由で
伝票毎にイメージが分割されるので、直接DMに印刷可能になった
宛先を郵便番号、都道府県、市区、町村・番地に分割する


 ちょっと宣伝
住所を都道県、市区、町、番地、ビル名に仕分ける...]]></summary>
        <author>
            <name>Naofumi.Higashikawauchi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[MicroPythonでRaspberry Pi PicoのPIOを動かしてみる]]></title>
        <id>https://zenn.dev/parityc3/articles/a9ae5d65e1f30b</id>
        <link href="https://zenn.dev/parityc3/articles/a9ae5d65e1f30b"/>
        <updated>2022-12-23T01:27:51.000Z</updated>
        <summary type="html"><![CDATA[はじめに
これはモダン言語によるベアメタル組込み開発 Advent Calendar 2022 19日目の記事です。（遅れてすみません...）

 Programable I/O(PIO)とは
Raspberry Pi PicoはRP2040というマイコンを載せていますが、特徴的な機能としてPIOというモジュールを持っています。CPUの動作周波数以下で動作させられ、クロック刻みでI/Oが制御できます。PIOのような機能を持っていないマイコンでは、GPIOをLowからHighにするにも数クロックかかってしまうので、PIOほど即座に精確な信号をGPIOから出力できません。
PIOの用途と...]]></summary>
        <author>
            <name>parityC3</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[在宅会議乱入防止システム]]></title>
        <id>https://zenn.dev/ysmoo/articles/4d74f60ac55674</id>
        <link href="https://zenn.dev/ysmoo/articles/4d74f60ac55674"/>
        <updated>2022-12-22T22:45:37.000Z</updated>
        <summary type="html"><![CDATA[これは 身の回りの困りごとを楽しく解決！ by Works Human Intelligence Advent Calendar 2022 23日目の記事です。

 背景
流行に乗っかって在宅デビューしたものの、Zoom会議中に乱入されるという苦しい日々が続きました。
（Zoom会議中）
BOSS「このプロジェクト進捗がよくないね」
我「すみません」
（ガチャ（扉が開く音））
妻「今週末のキャンプ場、候補が３つほどあるから選べ」
我「すいません会議中です」
妻「先に教えとけよ」
我「申し訳ありません」
みたいなことが時々あったので、何とかならないかなって悩んでいました。

 既存のアプロ...]]></summary>
        <author>
            <name>Yushi Omote</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[機械学習による競馬予想で安定して勝てるのか？ (2022年に半年奮闘した上での考察)]]></title>
        <id>https://zenn.dev/nyanyanyanyanya/articles/ff16a824566376</id>
        <link href="https://zenn.dev/nyanyanyanyanya/articles/ff16a824566376"/>
        <updated>2022-12-22T19:12:48.000Z</updated>
        <summary type="html"><![CDATA[この記事は 競馬AI / 予想Tech Advent Calendar 2022 の23日目です。

 はじめに
「機械学習による競馬予想で安定して勝てるのか？」
ということで、半年ほど奮闘して実感したことや思ったことを書きます。
「馬柱」や「上がり3ハロン」のような一般的な競馬用語は知っている前提で書くので、競馬初心者の方は調べて詳しくなりながらお読みください。
また、この記事では詳細なコードの内容までは紹介しません。

 自己紹介
普段はLinuxサーバ上でコマンドを叩いて生計を立てています。開発職ではありません。得意なコマンドは uptime です。
競馬歴はダイワスカーレットが現...]]></summary>
        <author>
            <name>にゃにゃ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで点群処理ワンライナー]]></title>
        <id>https://zenn.dev/neka_nat/articles/fb47ab06af6318</id>
        <link href="https://zenn.dev/neka_nat/articles/fb47ab06af6318"/>
        <updated>2022-12-22T12:25:25.000Z</updated>
        <summary type="html"><![CDATA[はじめに
2022年も終わりますね。
今年は点群処理が網羅的に解説された本が出たり、テキストから点群生成できるAIが出てきたり、いろいろ点群界隈も盛り上がっていたかと思います。
https://www.amazon.co.jp/詳解-3次元点群処理-Pythonによる基礎アルゴリズムの実装-KS理工学専門書-金崎/dp/406529343X
https://github.com/openai/point-e
そんな正統派点群技術が盛り上がった年の最後に、闇の点群技術を紹介できればと思います。

 Pythonワンライナーの世界
Pythonワンライナーとは、普通に書くと数行に渡りそう...]]></summary>
        <author>
            <name>neka-nat</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-053｜A ABC/ARC]]></title>
        <id>https://zenn.dev/hyperdb/articles/4a5976399ffe4d</id>
        <link href="https://zenn.dev/hyperdb/articles/4a5976399ffe4d"/>
        <updated>2022-12-22T10:14:51.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-053 A - ABC/ARC



 提出結果
def getInt():
    return int(input())


def main():
    x = getInt()
    print('ABC' if x < 1200 else 'ARC')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-053｜B A to Z String]]></title>
        <id>https://zenn.dev/hyperdb/articles/018a7803515dea</id>
        <link href="https://zenn.dev/hyperdb/articles/018a7803515dea"/>
        <updated>2022-12-22T10:14:51.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-053 B - A to Z String



 提出結果
def getString():
    return input()


def main():
    s = getString()

    print(s.rfind('Z') - s.find('A') + 1)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[データ分析の健全性を保つために行っている機械的データチェック（Pandera）の話]]></title>
        <id>https://zenn.dev/luup/articles/data-hasegawa-20221222</id>
        <link href="https://zenn.dev/luup/articles/data-hasegawa-20221222"/>
        <updated>2022-12-22T00:00:01.000Z</updated>
        <summary type="html"><![CDATA[この記事は、Luup Advent Calendar の 22日目の記事です。
こんにちは、Data Scienceチームの長谷川（@chase0213）です。
Data Scienceチームでは、社内の様々な部署からデータ分析に関する依頼を受けたり、自ら課題を見つけ仮説検証したりして、単純な集計から複雑なモデリングまでデータにまつわることを幅広く行っています。
分析用のデータは基本的にデータウェアハウス（BigQuery）に格納されており（参考: 冪等性を担保したGoogle Cloud Composerの設計と実装）、単純な集計や日常的な指標の監視には、可視化や共有のしやすさから R...]]></summary>
        <author>
            <name>Luup Developers Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google ColabによるPython環境構築（HelloWorldまで）]]></title>
        <id>https://zenn.dev/masahiro_toba/articles/78de19629ab71a</id>
        <link href="https://zenn.dev/masahiro_toba/articles/78de19629ab71a"/>
        <updated>2022-12-21T23:45:48.000Z</updated>
        <summary type="html"><![CDATA[この記事ではGoogle ColabによるPythonの環境構築についてまとめます。プログラミングを学ぶことの１番のハードルは環境構築ですが、Google Colabなら5分程度の簡単な初期設定を行えばすぐに使うことができます。ぜひこちらお試し下さい。

Googleドライブの左上「新規」を選択。

「その他」から「アプリを追加」を選択。

上部の検索バーからgoogle colabを検索し、こちらを選択。

画面が開くのでこちらからインストール。

もう一度先ほどのドライブの画面に戻って、左上の「新規」→「その他」を選択。「Google Colaboratory」が追加されていることを...]]></summary>
        <author>
            <name>鳥羽眞嘉</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Lambdaのタスク実行中に実行可能な残り時間を確認する]]></title>
        <id>https://zenn.dev/pontsuyo/articles/eb84c23bdd19e0</id>
        <link href="https://zenn.dev/pontsuyo/articles/eb84c23bdd19e0"/>
        <updated>2022-12-21T13:54:57.000Z</updated>
        <summary type="html"><![CDATA[状況

AWS Lambda関数でPythonのスクリプトを実行したい。
処理には長い時間がかかることが見込まれており、実行時間上限の15分以内には完了しない場合がある。
残り時間が短くなったら適当に返り値を生成し、lambdaの処理を正常に完了させたい（実行時間超過でのエラーにより落としたくない）


 対策
handlerの関数の引数であるcontextから、関数の実行可能な残り時間を取得することができるので、この値を元に分岐させる。
def main(event: dict, context) -> str:
	# context.get_remaining_time_i...]]></summary>
        <author>
            <name>neginasubi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonガール① 環境構築・データ型・制御構文編]]></title>
        <id>https://zenn.dev/drip200/books/2a23e1dcaeef37</id>
        <link href="https://zenn.dev/drip200/books/2a23e1dcaeef37"/>
        <updated>2022-12-21T12:14:37.000Z</updated>
        <summary type="html"><![CDATA[プログラミング言語「Python」を対話形式で楽しくテンポよく学べる入門書。

シンプルで学びやすい言語Python。そんなPythonを楽しくテンポよく学べるのが本書です。ふたりの女性エンジニアの対話を読みながらPythonの基本を学べます。他の言語とは異なるPython特有の仕様に関する疑問にも、Pythonの歴史と思想を踏まえてお答えします。

最新のPyhtonに対応しており、Python3.5から導入された型ヒントについてもサポート。静的型付け言語の経験者でも違和感なく扱えるよう、できる限り型を明記したサンプルコードを用意して説明しています。

本作は三部作構成です。本書は第一部である「環境構築・データ型・制御構文編」です。開発環境構築からはじまり、intやstrなどの組み込み型、if文やfor文などの制御構文までの範囲を学ぶことができます。

★2022年11月01日 第1版発行/173ページ/PDFフォーマット
★ご購入前に無料サンプルをご覧いただけます。「無料サンプル」のボタンからダウンロードしてください。
こんな方におすすめ！
🧑‍🎓大学でＣ言語やFORTRANを学んだことがあるが、仕事や研究のためにPythonを使う方

👨‍💻JavaやPHP、Rubyなどでバックエンドを実装していたが、Pythonで実装することになった方

👩‍💻フロントエンドでJavaScriptやTypeScriptを書いていたが、バックエンドでPythonの実装をすることになった方

🧑‍🔬R言語でデータ分析をしていたがPythonでのデータ分析をはじめたい方

🙍‍♂️Pythonを他の入門書や公式チュートリアルで勉強したが物足りない方

👨‍💼仕事でPython案件に関わることになったが、Pythonの経験がない方

【読者の感想】
Pythonの入門書という位置付けだけど読み物としても面白い」

「読みやすい！続編まってます！」

「対話形式になっているからかサクサク読める」

【推薦文】
こんなにサクサク読める技術書は見たことがない。技術書は積読派だけどこれはすぐに読み終えた。]]></summary>
        <author>
            <name>どりっぷ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[HATETRISのPythonエミュレータを作ってみた]]></title>
        <id>https://zenn.dev/decfrr/articles/1c9d7be7346413</id>
        <link href="https://zenn.dev/decfrr/articles/1c9d7be7346413"/>
        <updated>2022-12-21T11:58:09.000Z</updated>
        <summary type="html"><![CDATA[この記事はEEIC Advent Calendar 2022 21日目の記事として作成しました

 はじめに
こんにちは。EEIC2022の Hirota (@decfrr) です。Advent Calender主催のくらげ君に何か記事を書くように言われたので記事を書きます。
後期にやったことで何か記事を書こう、とぼんやりと考えていました。後期学生実験で取り扱った内容で何か記事を書けば良いかなと思っていましたが、第1,3期の実験で取り扱った内容は公開しづらい内容で、第2期の人工知能演習で作成した成果物は1位を取れなかったのでボツになりました。（成果物は ここ にあります。）
そこで、人工...]]></summary>
        <author>
            <name>decfrr</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[面倒な双一次変換の計算をPythonに任せてみる]]></title>
        <id>https://zenn.dev/reyura/articles/e338629912fb5b</id>
        <link href="https://zenn.dev/reyura/articles/e338629912fb5b"/>
        <updated>2022-12-21T11:13:23.000Z</updated>
        <summary type="html"><![CDATA[上の写真の系について，運動方程式は，
 M \ddot{x} + B \dot{x} + K x = f 
ですね．ではこの物体を人間が握るものとして，アドミタンス提示型のインピーダンス制御をかけるましょう．つまり，アクチュエータを用いて任意のM,B,Kを表現したいのです．入力をF(s)，出力を\dot{X}(s)とすると，伝達関数Gは
 G = \frac{s}{Ms^2 + Bs + K} 
という2型になります．(本当は剛性いらないので1型にできるが...)
そろそろ本題に入りますが，目標速度\dot{x}はどうやって計算しますか? 僕は双一次変換を使います．今回の例の正解は，
...]]></summary>
        <author>
            <name>yura</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Maya】Pythonでアニメーションベイクを実行するとキーが一致しなくなる]]></title>
        <id>https://zenn.dev/khrtz/articles/3c1e61d7979283</id>
        <link href="https://zenn.dev/khrtz/articles/3c1e61d7979283"/>
        <updated>2022-12-21T11:10:19.000Z</updated>
        <summary type="html"><![CDATA[スクリプトでベイクした際にモーションがズレる
cmds.bakeResultsを使ってベイクした際にモーションがガクガクしたりキーがおかしくなることがあって解決するために検証したことをまとめました。このAPIがちょっと癖があって何も考えず使えるものではなさそうです。Mayaのメニューからベイクした際には問題ないのですが。

 環境
Maya2020.4 Python2.7

 実装方法
すでに手動でベイクして調整している場合は現在実行しているコマンドを確認します。
これをスクリプトで実現するようにします。
bakeResults -simulation true -t "0:254"...]]></summary>
        <author>
            <name>へるつ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[大学の研究室でClearMLをホストして研究を効率化する]]></title>
        <id>https://zenn.dev/siy1121/articles/5f44bcfb65ca10</id>
        <link href="https://zenn.dev/siy1121/articles/5f44bcfb65ca10"/>
        <updated>2022-12-21T10:00:00.000Z</updated>
        <summary type="html"><![CDATA[!
この記事は MLOps Advent Calendar 2022 21日目の記事です。


 要約
大学の研究室でClearMLを導入して実験記録やデータセットの管理を自動化した結果、
研究の本質的な作業に使える時間が増えたよという話です。
単にMLOps導入の話であれば既に多くの知見がありますが、それほど規模が大きくない大学の研究室でMLOpsツールを活用する一つの事例として参考になれば幸いです。
（特に自分の研究室でこういったツールを使ってみたいけど、周りが興味なくて導入に踏み切れない同士がいたら参考にしてください。）

 はじめに
zennでは初めまして、SIY1121です。
...]]></summary>
        <author>
            <name>siy1121</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Unity】Unexpected stdin とエラーが出てビルドできない時の対処法メモ]]></title>
        <id>https://zenn.dev/harusaki_32/articles/803de627440089</id>
        <link href="https://zenn.dev/harusaki_32/articles/803de627440089"/>
        <updated>2022-12-21T08:07:59.000Z</updated>
        <summary type="html"><![CDATA[結論
パッケージのアップデートでビルドが通るようになりました


 環境

MacBook Air M2 2022

Ventura 13.1

Unity 2021.3.15






 エラー内容
Internal build system error. Backend exited with code 2.
tundra: error: Unexpected stdin
※一部省略しています

 先人調査
どうやらPython2がmacOSから削除されたことが原因のよう。
皆さん Firebase SDK のアップデートで対応されているみたいですが、今回問題となっているプロジ...]]></summary>
        <author>
            <name>harusaki-32</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-052｜A  Two Rectangles]]></title>
        <id>https://zenn.dev/hyperdb/articles/716d546e63da15</id>
        <link href="https://zenn.dev/hyperdb/articles/716d546e63da15"/>
        <updated>2022-12-21T05:45:03.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-052 A - Two Rectangles



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    a, b, c, d = getIntMap()

    print(a * b if a * b >= c * d else c * d)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-052｜B Increment Decrement]]></title>
        <id>https://zenn.dev/hyperdb/articles/6d08d3e6814f57</id>
        <link href="https://zenn.dev/hyperdb/articles/6d08d3e6814f57"/>
        <updated>2022-12-21T05:45:03.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-052 B - Increment Decrement



 提出結果
def getString():
    return input()


def getInt():
    return int(input())


def main():
    n = getInt()
    buf = list(getString())

    x = 0
    m = 0
    for s in buf:
        x = x + (1 if s == 'I' else - 1)
        m = x if x > m else ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[rustでデータ分析100本ノックをやってみたら、めっちゃ書きやすかった話【Polars】]]></title>
        <id>https://zenn.dev/hagakun_dev/articles/5d50adb928d902</id>
        <link href="https://zenn.dev/hagakun_dev/articles/5d50adb928d902"/>
        <updated>2022-12-20T22:03:00.000Z</updated>
        <summary type="html"><![CDATA[rustでデータ分析100本ノックをやってみたら、めっちゃ書きやすかった話【Polars】

 まとめ

rustのPolarsは、思ったよりもずっと直感的な書き味でイイ👍
pandasよりも早い（ブレイジングファスト！）のでイイ👍
ワケあってpython(pandas)が使えない環境でも使えてイイ👍


 対象読者

rust初心者～中級者
とりあえずrustでデータ分析をしてみたい方
python(pandas)を使わずにデータ分析をしてみたい方


 対象でない読者

rustに慣れていて、たくさんのexampleは必要ない方
パフォーマンスを最高にするために、Polarsを学...]]></summary>
        <author>
            <name>はがくん@薬剤師のなかではコード書くの好き</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[motoでATSエンドポイントへのアクセスをモックできるか？]]></title>
        <id>https://zenn.dev/nkty/articles/1c6a2b9a9cbcaf</id>
        <link href="https://zenn.dev/nkty/articles/1c6a2b9a9cbcaf"/>
        <updated>2022-12-20T14:33:43.000Z</updated>
        <summary type="html"><![CDATA[結論：たぶん無理だと思います。テストコードをうまく書くのが良さそうです。（もし何か手段があれば教えて下さい）
以下、やりたかったことと、その背景、妥協策を書きます。

 やりたかったこと
やりたかったことは、ATSエンドポイントでAWS IoTやShadowにアクセスするPythonアプリを、motoでテストしたい、ということです。

 背景

 certifiの更新をせざるを得なくなった
Pythonアプリなら大抵、boto3というモジュールを使うと思いますが、boto3をインストールすると、内部でcertifiというモジュールもインストールされます。certifiは、Mozillaが...]]></summary>
        <author>
            <name>nkty</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Selenium4に関する雑多なメモ]]></title>
        <id>https://zenn.dev/nmasato/articles/f54b172c1b6b07</id>
        <link href="https://zenn.dev/nmasato/articles/f54b172c1b6b07"/>
        <updated>2022-12-20T13:51:50.000Z</updated>
        <summary type="html"><![CDATA[参考リンク



内容
リンク




Seleniumブラウザー自動化プロジェクト
https://www.selenium.dev/ja/


Selenium with Python
https://selenium-python.readthedocs.io/


XPathの構文
https://learn.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/ms256471(v=vs.100)?redirectedfrom=MSDN




 ライブラリのインポート



項目
コマンド




we...]]></summary>
        <author>
            <name>nmasato</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[python の dict をソート]]></title>
        <id>https://zenn.dev/karamawanu/articles/cca5e8f0538e03</id>
        <link href="https://zenn.dev/karamawanu/articles/cca5e8f0538e03"/>
        <updated>2022-12-20T12:48:00.000Z</updated>
        <summary type="html"><![CDATA[python|3の dict のソートで次のようなコード片を紹介されてることが多いが、これは厳密には「辞書のソート」ではない。 という重箱記事である。
score_sorted = sorted(score.items(), key=lambda x:x[0])
詳細には次の通り。

dict を key/value の Iterable [ Tuple [ Any,Any ] ] で取り出し、
tupleの0番目、すなわちkeyでの比較を指定して ( key = callable )
sort する

つまり、処理は「辞書の「中身」をソート」である。
が、これには dict の仕様上の...]]></summary>
        <author>
            <name>karamawanu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[福島のへそってどこ？検証してみた]]></title>
        <id>https://zenn.dev/flying_hato_bus/articles/ef39682bd71688</id>
        <link href="https://zenn.dev/flying_hato_bus/articles/ef39682bd71688"/>
        <updated>2022-12-20T10:47:00.000Z</updated>
        <summary type="html"><![CDATA[Aizu Advent Calendar 2022
この投稿はAizu Advent Calendar 2022 16日目の記事です。
15日目は Yuoreiさんの Macのターミナルを改造してみた - yuorei’s blog
17日目は HAMADAさんの お風呂の水位センサーを作るために、ラズパイからLINEに通知できるようにしてみた話
です。(遅れてしまい申し訳ないです)

 はじめに
どうもこんにちは、今年は車1台,バイクが2台となぜかエンジン付きの乗り物を3台手に入れた飛ばすはとバスと申します。最近は、バイク乗りの世界大会に出るために道なき道をでっけーバイクで突き進ん...]]></summary>
        <author>
            <name>hatobus</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-049｜Ｂ たてなが]]></title>
        <id>https://zenn.dev/hyperdb/articles/ecb4dd50256a1f</id>
        <link href="https://zenn.dev/hyperdb/articles/ecb4dd50256a1f"/>
        <updated>2022-12-20T08:53:30.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-049 B - たてなが



 提出結果
def getIntMap():
    return map(int, input().split())


def getStringRow(N):
    return [input() for _ in range(N)]


def main():
    h, w = getIntMap()
    d = getStringRow(h)

    for r in d:
        print(r)
        print(r)


if __name__ == "__main__":
    ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-051｜B Sum of Three Integers]]></title>
        <id>https://zenn.dev/hyperdb/articles/d1e52a87b6559c</id>
        <link href="https://zenn.dev/hyperdb/articles/d1e52a87b6559c"/>
        <updated>2022-12-20T08:53:30.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-051 B - Sum of Three Integers



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    k, s = getIntMap()

    c = 0
    for x in range(k + 1):
        for y in range(k + 1):
            z = s - (x + y)
            if z >= 0 and z <= k:
                ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-045｜Ｂ 3人でカードゲームイージー]]></title>
        <id>https://zenn.dev/hyperdb/articles/bd8d2dbcd31fc7</id>
        <link href="https://zenn.dev/hyperdb/articles/bd8d2dbcd31fc7"/>
        <updated>2022-12-20T08:53:30.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-045 B - 3人でカードゲームイージー



 提出結果
def getString():
    return input()


player_name = ['A', 'B', 'C']


def play(p, d):
    if (len(d[p]) == 0):
        print(player_name[p])
        return (-1)
    else:
        v = d[p].pop(0)
        return 0 if v == 'a' else 1 if v == 'b' else 2


...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-044｜B 美しい文字列]]></title>
        <id>https://zenn.dev/hyperdb/articles/9a92d299261031</id>
        <link href="https://zenn.dev/hyperdb/articles/9a92d299261031"/>
        <updated>2022-12-20T08:53:29.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-044 B 美しい文字列



 提出結果
def getString():
    return input()


def main():
    data = getString()

    d = dict()
    f = True

    for c in list(data):
        if c in d:
            d[c] = d[c] + 1
        else:
            d[c] = 1

    for v in d.values():
        if v % 2 == 1:
  ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-048｜A AtCoder *** Contest]]></title>
        <id>https://zenn.dev/hyperdb/articles/74d9626fc673c4</id>
        <link href="https://zenn.dev/hyperdb/articles/74d9626fc673c4"/>
        <updated>2022-12-20T08:53:29.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-048 A - AtCoder *** Contest



 提出結果
def getStringList():
    return input().split()


def main():
    d = getStringList()

    v = ''
    for s in d:
        v += s[0]
    print(v)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-050｜A Addition and Subtraction Easy]]></title>
        <id>https://zenn.dev/hyperdb/articles/6515eaa8834a5b</id>
        <link href="https://zenn.dev/hyperdb/articles/6515eaa8834a5b"/>
        <updated>2022-12-20T08:53:28.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-050 A - Addition and Subtraction Easy



 提出結果
def getStringMap():
    return input().split()


def main():
    a, op, b = getStringMap()

    c = 1 if (op == '+') else -1

    print(int(a) + (c * int(b)))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-047｜Ｂ すぬけ君の塗り絵 2 イージー]]></title>
        <id>https://zenn.dev/hyperdb/articles/59d7ca2ade428e</id>
        <link href="https://zenn.dev/hyperdb/articles/59d7ca2ade428e"/>
        <updated>2022-12-20T08:53:28.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-047 B - すぬけ君の塗り絵 2 イージー



 提出結果
def getIntMap():
    return map(int, input().split())


def getIntListRow(N):
    return [list(map(int, input().split())) for _ in range(N)]


def main():
    w, h, n = getIntMap()
    l = getIntListRow(n)

    m = [[1 for _ in range(w)] for _ in ran...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-044｜A 高橋君とホテルイージー]]></title>
        <id>https://zenn.dev/hyperdb/articles/56e1a0499eb271</id>
        <link href="https://zenn.dev/hyperdb/articles/56e1a0499eb271"/>
        <updated>2022-12-20T08:53:28.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-044 A 高橋君とホテルイージー



 提出結果
def getInt():
    return int(input())


def main():
    N = getInt()
    K = getInt()
    X = getInt()
    Y = getInt()

    if (N < K):
        print(N * X)
    else:
        print(K * X + (N - K) * Y)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-046｜Ｂ AtCoDeerくんとボール色塗り]]></title>
        <id>https://zenn.dev/hyperdb/articles/4aa08f24188f3d</id>
        <link href="https://zenn.dev/hyperdb/articles/4aa08f24188f3d"/>
        <updated>2022-12-20T08:53:27.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-046 B - AtCoDeerくんとボール色塗り



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    n, k = getIntMap()

    if n == 1:
        print(k)
    else:
        v = k
        for i in range(n - 1):
            v = v * (k - 1)
        print(v)


if __name__ == "__main...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-050｜Ｂ Contest with Drinks Easy]]></title>
        <id>https://zenn.dev/hyperdb/articles/358cce19fe3d80</id>
        <link href="https://zenn.dev/hyperdb/articles/358cce19fe3d80"/>
        <updated>2022-12-20T08:53:27.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-050 B - Contest with Drinks Easy



 提出結果
def getInt():
    return int(input())


def getIntList():
    return list(map(int, input().split()))


def getIntListRow(N):
    return [list(map(int, input().split())) for _ in range(N)]


def adjust(t, d):
    c = d[0]
    return d[1] - t[...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-048｜Ｂ Between a and b ...]]></title>
        <id>https://zenn.dev/hyperdb/articles/354e52348760b2</id>
        <link href="https://zenn.dev/hyperdb/articles/354e52348760b2"/>
        <updated>2022-12-20T08:53:27.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-048 B - Between a and b ...



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    a, b, x = getIntMap()

    c = 0
    if a == 0:
        c = (b // x) + 1
    else:
        c = (b // x) - ((a - 1) // x)
    print(c)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-045｜A 台形]]></title>
        <id>https://zenn.dev/hyperdb/articles/32e251384d1b42</id>
        <link href="https://zenn.dev/hyperdb/articles/32e251384d1b42"/>
        <updated>2022-12-20T08:53:27.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-045 A - 台形



 提出結果
def getInt():
    return int(input())


def main():
    a = getInt()
    b = getInt()
    h = getInt()

    print(int((a + b) * h / 2))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-047｜A キャンディーと2人の子供]]></title>
        <id>https://zenn.dev/hyperdb/articles/21e05f7536f1e9</id>
        <link href="https://zenn.dev/hyperdb/articles/21e05f7536f1e9"/>
        <updated>2022-12-20T08:53:26.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-047 A - キャンディーと2人の子供



 提出結果
def getIntList():
    return list(map(int, input().split()))


def main():
    d = getIntList()
    d.sort()

    if d[2] == d[0] + d[1]:
        print('Yes')
    else:
        print('No')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-046｜A AtCoDeerくんとペンキ]]></title>
        <id>https://zenn.dev/hyperdb/articles/1dc6f93136d85f</id>
        <link href="https://zenn.dev/hyperdb/articles/1dc6f93136d85f"/>
        <updated>2022-12-20T08:53:26.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-046 A - AtCoDeerくんとペンキ



 提出結果
def getIntList():
    return list(map(int, input().split()))


def main():
    l = getIntList()
    print(len(list(set(l))))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-051｜A Haiku]]></title>
        <id>https://zenn.dev/hyperdb/articles/1b4e8be58a5924</id>
        <link href="https://zenn.dev/hyperdb/articles/1b4e8be58a5924"/>
        <updated>2022-12-20T08:53:25.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-051 A - Haiku



 提出結果
def getString():
    return input()


def main():
    s = getString()

    print(s.replace(',', ' '))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Feedback3コンペ振り返り】Winning Solution の良さげな手法を試してみた]]></title>
        <id>https://zenn.dev/aidemy/articles/73886662eda995</id>
        <link href="https://zenn.dev/aidemy/articles/73886662eda995"/>
        <updated>2022-12-19T22:42:37.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事は、 Aidemy Advent Calendar 2022 の19日目と、 Kaggle Advent Calendar 2022 の21日目にクロスエントリーさせていただいた投稿です。
（本当は別々の記事を書く予定でしたが、時間の都合上叶いませんでした...。反省。😢）
みなさま、いかがお過ごしでしょうか。 Kaggle Contributer のざっしーと申します。

先日11/29に閉幕したKaggleコンペティション Feedback Prize - English Language Learning （通称Feedback3）の Winning Solu...]]></summary>
        <author>
            <name>ざっしー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[『おっさん美少女を描いて！』を；実現したい！]]></title>
        <id>https://zenn.dev/ekusiadadus/articles/mother_fucker_40s</id>
        <link href="https://zenn.dev/ekusiadadus/articles/mother_fucker_40s"/>
        <updated>2022-12-19T20:40:12.000Z</updated>
        <summary type="html"><![CDATA[どうも、おっさんです。
うちの GitHub Copilot の口が悪すぎると話題に！


さて、今日は Whisper + Stable Diffusion で永遠の謎『おっさん美少女』を AI に描いて頂こうと思います。
髪の毛は永遠の 0 です。

 紆余曲折
IntelliJ の PyCharm の YouTube ライブで Jina Cloud が取り上げられていました。
『NewYork にいる Spiderman を描いて！』をしていました。
https://www.youtube.com/watch?v=duWUy5LOEwc
人権がないんです。
家の GPU。
1-2 ...]]></summary>
        <author>
            <name>ekusiadadus</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[M1macでpyaudioを動かしたい]]></title>
        <id>https://zenn.dev/ao_kun/articles/31c7e07db05503</id>
        <link href="https://zenn.dev/ao_kun/articles/31c7e07db05503"/>
        <updated>2022-12-19T18:22:07.000Z</updated>
        <summary type="html"><![CDATA[前書き
インターンの和田です。普段は大学で音声分析の研究をしている傍ら、Web開発に勤しんでいます。
今回の記事は、「pyaudioがm１で動かなくて...」と相談後輩に相談されたので確認してみたところ、どの記事も1年前のもので再現性が低かったので改めて2022年12月現在、動く手段を書き記しています。

 m1でpython使うならdocker使おうね
ローカルにpythonやら必要なパス通してやってやらゴニョゴニョして...と言う記事を多く見かけるんですが、ローカル汚れるし理解せずにそれやると沼るんで、docker使おうね！と言う記事です。

 早速ファイル

Dockerfil...]]></summary>
        <author>
            <name>Kenzo Wada</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[審査員の点数を見ながら、いろんなランキングの順位相関係数を計算してみよう]]></title>
        <id>https://zenn.dev/takilog/articles/2bcbd0c678ced9</id>
        <link href="https://zenn.dev/takilog/articles/2bcbd0c678ced9"/>
        <updated>2022-12-19T14:48:48.000Z</updated>
        <summary type="html"><![CDATA[採点競技で点数を付けたり、点数でランキングを作ったりして遊ぶことがあると思います。
例えば下の図はあるコンテストでの点数を表にしたものです（A〜Gが点数をつけた人、0〜9が点数を付けられた人です）。

こういう遊びをしていると

ある人の付けた点数のランキングって、どれぐらい結果に影響したの？
ある人を除いたランキングってどういう感じだったの？

みたいなことを思うことがあると思います。
そこでこちらの記事では「順位相関係数」という道具を使って、上のデータを例にデータを少しだけ見てみようと思います。ここで使う道具は「スピアマンの順位相関係数」と呼ばれるものですが、詳しく興味のある方は世の...]]></summary>
        <author>
            <name>たきろぐ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonのHTTPServer]]></title>
        <id>https://zenn.dev/timoneko/articles/1e99a14c5eb202</id>
        <link href="https://zenn.dev/timoneko/articles/1e99a14c5eb202"/>
        <updated>2022-12-19T14:43:12.000Z</updated>
        <summary type="html"><![CDATA[この記事はPhon 3.7の環境で実行しています。

 「HTTPServer」でHTTPサーバーをたてる(本番環境利用は非推奨)

import文
from http.server import HTTPServer



main.py
from http.server import HTTPServer
from http.server import BaseHTTPRequestHandler

server_address = ('localhost', 8080)
httpd = HTTPServer(server_address, BaseHTTPRequestHandle...]]></summary>
        <author>
            <name>timoneko</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonでclassを使う: 設計編(1) 関数とクラス]]></title>
        <id>https://zenn.dev/sergicalsix/articles/2c7832353b6afa</id>
        <link href="https://zenn.dev/sergicalsix/articles/2c7832353b6afa"/>
        <updated>2022-12-19T12:13:38.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事は、(主に研究等で)pythonのプログラムを書く時に、どのように設計すれば良いかについて論じながら、クラスを導入する時に生じるメリットについて述べていきます。

 内容

 単一の処理の記述
任意の処理Aの記述の際は、非常に簡単な処理を除けば、処理Aに対応する関数を記述すると良いです。
関数のメリットは以下が考えられます。

処理に関数名として処理に名前をつけられるため、可読性が高い
1により余計なコメントアウトを書く必要はない
汎用化させやすい(同じ処理を何度も書く必要がない)
docstringで記述した関数のコメントをコードで呼べる
処理の引数に型アシストを...]]></summary>
        <author>
            <name>sergicalsix</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jax/FlaxでKaggleをやってみよう！]]></title>
        <id>https://zenn.dev/inoichan/articles/3509d3f2e9211e</id>
        <link href="https://zenn.dev/inoichan/articles/3509d3f2e9211e"/>
        <updated>2022-12-19T11:24:00.000Z</updated>
        <summary type="html"><![CDATA[こんにちは。いのいちです。
この記事は(の18日目の記事ですこの記事はKaggle Advent Calendr 2022の18日目の記事です。
最近はスプラトゥーンにはまっていて毎日忙しくてあまりコンペに参加できてませんが、2023年はどんどんコンペに参加していきたいなと思っています。私はコンペに参加するときはいつも1つはこれまでやったことないことをやると決めています。そこで新しい挑戦としてJax/Flaxを使ってみようと思い至りました。私が普段参加するComputer Vison系のコンペでは主にPytorchが使用されており、TPUをぶん回すコンペでTensorflowが使われてい...]]></summary>
        <author>
            <name>いのいち</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[統計学] ベータ分布の期待値と分散]]></title>
        <id>https://zenn.dev/shundeveloper/articles/b5b4002bc09f3b</id>
        <link href="https://zenn.dev/shundeveloper/articles/b5b4002bc09f3b"/>
        <updated>2022-12-19T11:09:02.000Z</updated>
        <summary type="html"><![CDATA[ベルヌーイ分布や二項分布のベイズ推定の記事で, ベータ分布を扱ったので, ベータ分布についても記載します.

 確率密度分布

\begin{align*}
&f(x|a,b)
=
B(a,b)^{-1}x^{a-1}(1-x)^{b-1}\cdots(1)
\\
&\text{Where,} \; B(a,b) = \int_0^1 t^{a-1}(1-t)^{b-1}\;dt
\end{align*}


 期待値・分散

 ベータ関数の性質
期待値を求めるにはベータ分布の性質を使うと効率が良い. ベータ関数は以下の性質を持つ.

B(a+1,b)=\frac{a}{...]]></summary>
        <author>
            <name>ShunDev</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TodoistのAPIがv9になって困っている]]></title>
        <id>https://zenn.dev/bindeburg/articles/b516dd1ded02fb</id>
        <link href="https://zenn.dev/bindeburg/articles/b516dd1ded02fb"/>
        <updated>2022-12-19T10:36:29.000Z</updated>
        <summary type="html"><![CDATA[背景

TodoistのAPIがいつの間にかv9になっていた。

元々使っていたスクリプトが使えなくなった。
修正しなきゃ




 やりたいこと

図書館（仙台市図書館）のOPACからBeaoutifulSoupで貸出情報を取得

この部分は今回は省略


TodoistのAPIを使って、取得した書名と返却期限をTodoistに追加したい。

APIのバージョン更新で従来のものが使えなくなったので修正したい。




 やったこと

まずはpipインストール

pip install todoist-api-python

 コード

from todoist_api_python...]]></summary>
        <author>
            <name>Yuki Lynn</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】Pytorchの物体検出アルゴリズムFaster-RCNN を用いたゲーム画面からの人物検知とその応用]]></title>
        <id>https://zenn.dev/ganbarimasu/articles/227a8f29fff8bb</id>
        <link href="https://zenn.dev/ganbarimasu/articles/227a8f29fff8bb"/>
        <updated>2022-12-19T03:00:00.000Z</updated>
        <summary type="html"><![CDATA[この記事の続きになります！よかったらぜひ読んでみてください！
https://zenn.dev/ganbarimasu/articles/de6d046cd97572
本記事が対象とする人：

Pytorchで利用できる物体検出の学習済みモデルであるFaster-RCNN modelの使い方とその応用方法について興味のある方
他の人の個人開発を見るのが好きな方
前の記事の続きが気になる方

!
精度が高いモデルにはなっていないので、取り組み内容を楽しんでいただければ幸いです。
また、汎用性が高くなさそうなコードに関しては折りたたむようにしてあります。
出力結果などの記述で、かなりの文章量...]]></summary>
        <author>
            <name>yoroshiku</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AtCoder Beginner Contest 282レポート]]></title>
        <id>https://zenn.dev/hannah/articles/20221218_001</id>
        <link href="https://zenn.dev/hannah/articles/20221218_001"/>
        <updated>2022-12-19T02:25:56.000Z</updated>
        <summary type="html"><![CDATA[摘要
ABCDの4完でした．Dまでスムーズだったのでまずまずのパフォーマンスです．

 ABC282
https://atcoder.jp/contests/abc282

 コンテスト情報

コンテスト名: HHKBプログラミングコンテスト2022 Winter(AtCoder Beginner Contest 282)
順位: 1016th / 8407
パフォーマンス: 1441
レーティング: 1247 → 1268 (+21) Highest更新！
段級位: 4 級
コンテスト参加回数: 67


 A - Generalized ABC
問題 / 解説

 A - 問題
...]]></summary>
        <author>
            <name>はんな</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[超高速DataFrameライブラリー「Polars」について]]></title>
        <id>https://zenn.dev/hiro_torii/articles/06d7e845e146ee</id>
        <link href="https://zenn.dev/hiro_torii/articles/06d7e845e146ee"/>
        <updated>2022-12-19T01:49:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
ここ最近、Polarsについて調べる中で色々と面白そうだと思い現在勉強中です。今回の記事では勉強内容の整理も兼ねて、Polarsの特色を紹介できればと思っています。
!
まだまだ勉強中かつ、日夜ライブラリーが更新されているため記載した情報に乖離があった場合はご容赦ください。


 Polarsとは
https://www.pola.rs/
https://github.com/pola-rs/polars/
RustとPythonで使える[1]超高速("Blazingly fast")DataFrameライブラリー、つまりデータ解析に使えるライブラリーとなります。panda...]]></summary>
        <author>
            <name>hiro-torii</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[コード設計]条件分岐/早期Return・ストラテジパターン]]></title>
        <id>https://zenn.dev/ryutaro_h/articles/e02cecca6a82df</id>
        <link href="https://zenn.dev/ryutaro_h/articles/e02cecca6a82df"/>
        <updated>2022-12-19T00:27:32.000Z</updated>
        <summary type="html"><![CDATA[初めに
コード設計について「良いコード/悪いコードで学ぶ設計入門 ―保守しやすい 成長し続けるコードの書き方」を手に取り、学んでいます。本記事はこちらを参考に書いています。
今回は 「条件分岐」 について、アンチパターンとそれに対する対応を挙げていきます。


 本題

 if文のネスト・else句(アンチパターン)
if文のネストや、else句の活用は、コードの見通しが悪くなり、可読性低下に繋がります。数十行、数百行のコードが分岐ブロックの中に書かれていると、どこからどこまでがどの条件の時に実行されているのか、理解にとても時間がかかるようになります。

(イメージ:Python)
...]]></summary>
        <author>
            <name>Ryutaro</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sequentialモデルの次に進んだ人が陥るTensorFlowパターン7選]]></title>
        <id>https://zenn.dev/yuji207/articles/0361d3f1ea9bce</id>
        <link href="https://zenn.dev/yuji207/articles/0361d3f1ea9bce"/>
        <updated>2022-12-18T13:10:10.000Z</updated>
        <summary type="html"><![CDATA[この記事は「Python Advent Calendar 2022」の18日目の記事です！

 はじめに
専攻は生物学ですが、趣味（？）で地震学の研究室にも行ってる大学4年生です。
研究室では、ディープラーニングを活用して地震を検出しています。
ちなみに、地震学というよりディープラーニング興味があります。
運よく実験の結果が出たので学会に参加してきたのですが、直前まで上手くいかずに泣きながらコードを書いていたので、記念に自分がハマった7つのパターンを挙げてみます。

 Sequentialモデルの次に進んだ人が陥る7つのパターン

 パターン1：グラフとeager executionが分...]]></summary>
        <author>
            <name>Yuji</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TensorFlowのDataset.mapとDataset.shuffleでランダムな要素順を対応させる]]></title>
        <id>https://zenn.dev/yuji207/articles/a428d9ce84c116</id>
        <link href="https://zenn.dev/yuji207/articles/a428d9ce84c116"/>
        <updated>2022-12-18T13:05:03.000Z</updated>
        <summary type="html"><![CDATA[はじめに
以前にTensorFlowのData APIでデータを効率的に流し込めると知り、Datasetを使い始めました。
ところがDataset.mapでどハマりし、今回4ヶ月越しに原因解明できたので、記事を書くことにしました。
!
この記事には、一部スマートでない（対処療法的な）解決策があります。
良い解決策がある方は、ぜひコメントに残していただけると嬉しいです。


 問題のコード
モデルに入力するデータとラベルとして学習するための出力用データがタプルになったデータセットを作成します。入力と出力はそれぞれ足すと10になる整数です。
def func():
    """和が10...]]></summary>
        <author>
            <name>Yuji</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Whisper + T5 + ワードクラウドで，会議内容を一目瞭然に]]></title>
        <id>https://zenn.dev/kokist/articles/5f262090d5ef28</id>
        <link href="https://zenn.dev/kokist/articles/5f262090d5ef28"/>
        <updated>2022-12-18T11:59:39.000Z</updated>
        <summary type="html"><![CDATA[!
この記事は Qiita史上最多記録をつくろう！アウトプットはいいぞカレンダー Advent Calendar 2022 の18日目の記事です。


 はじめに
昨今の情勢でZoom会議などの遠隔会議が増え，会議の内容を容易に録画できるようになっています．しかし，録画したはいいものの，1時間以上の動画を後から見直すには負担が大きいです．
この負担を減らすため，録画からの議事録作成などが挙げられます．この調査をしてみると，音声認識のライブラリであるWhisperを利用して議事録作成に活かそうとする試みが多くみられました．
そこで，本記事では，Whisperによる文字起こしした文章を利用し...]]></summary>
        <author>
            <name>kokist</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【bs4】beautifulsoupでパースするとhtml属性の順番が変わるトラブル]]></title>
        <id>https://zenn.dev/zenncev549fhhx/articles/1e1c29927bd69b</id>
        <link href="https://zenn.dev/zenncev549fhhx/articles/1e1c29927bd69b"/>
        <updated>2022-12-18T11:20:04.000Z</updated>
        <summary type="html"><![CDATA[beautifulsoupはhtmlを解析するライブラリですが、このライブラリをつかっていると困ったことがおきました。
https://amzn.to/3PQspY5
https://amzn.to/3PygfCU
bs4でパースをするとhtmlの属性の順番が変わってしまうのです
たとえば以下のようなhtmlがあるとしましょう。
<a title="samaple" href="sample.com">
上記をbs4でパースすると
<a href="sample.com" title="samaple">
勝手に順番が変わってしまうのです。こちらはbeautifu...]]></summary>
        <author>
            <name>zenncev549fhhx</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PysimpleGUIでアクティブ化]]></title>
        <id>https://zenn.dev/asumalab/articles/8b22abefd2f239</id>
        <link href="https://zenn.dev/asumalab/articles/8b22abefd2f239"/>
        <updated>2022-12-18T07:29:36.000Z</updated>
        <summary type="html"><![CDATA[window.bring_to_front()でできた。（Windows10）
window = sg.Window('title',layout, .... ,finalize=True)
window.bring_to_front()
keep_on_top=Trueの紹介が多いけど、これだとずっとトップに居座り続けてコレジャナイ感。]]></summary>
        <author>
            <name>あすま自動化研究所</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[12/12~12/16でやった技術的なこと]]></title>
        <id>https://zenn.dev/zi_matsu/articles/e1b2d0bd95c477</id>
        <link href="https://zenn.dev/zi_matsu/articles/e1b2d0bd95c477"/>
        <updated>2022-12-18T06:37:34.000Z</updated>
        <summary type="html"><![CDATA[FastAPIのStreamingResponseやった
FastAPIの公式ドキュメント
fastapiではjson形式のレスポンスになっているが（デフォルト）ファイルオブジェクトの返却もできる。
その時はこんな感じで書く
!
yeild fromにしている理由はファイルオブジェクトを最後まで読めるようにしたから。単純なwith openだとレスポンスする時にファイルが開いたままでエラーになってしまった。

  def iterfile():
                with open(result.name, mode="rb") as f:
              ...]]></summary>
        <author>
            <name>Matsuzaki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[NeoVimとChatGPTを使ってコードを改良する]]></title>
        <id>https://zenn.dev/yutti/articles/d9a877823d3c7b</id>
        <link href="https://zenn.dev/yutti/articles/d9a877823d3c7b"/>
        <updated>2022-12-18T06:27:13.000Z</updated>
        <summary type="html"><![CDATA[この記事は筆者が以下で投稿したものの日本語版です。

https://dev.to/xxxuutaxxx/awesome-plugin-chatgpt-with-neovim-571d


 ChatGPT.nvimの登場
今、OpenAI GPT-3チャットボットが大きな可能性を秘めています。最近、新しいAIボットが登場しています。ChatGPTです。
https://chat.openai.com
ChatGPTがリリースされ、多くの野心的なソフトウェアエンジニアがSlackやLINE botなどを通じてそのAPIを発展させようとしているようです。そんな中、幸運にもOpenAIのGP...]]></summary>
        <author>
            <name>uuta</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Web] Streamlitの簡易的なテストを作成した話]]></title>
        <id>https://zenn.dev/shundeveloper/articles/330f469d123876</id>
        <link href="https://zenn.dev/shundeveloper/articles/330f469d123876"/>
        <updated>2022-12-18T06:15:10.000Z</updated>
        <summary type="html"><![CDATA[作成したサイト
レポジトリや作成した経緯は以下をご参照ください.
URL
Mahjong Util
Git Hub
https://github.com/ShunDeveloper/streamlit_app
作成した経緯
https://zenn.dev/shundeveloper/articles/f003e73658ce6f

 Streamlitとは
StreamlitというPythonフレームワークを御存じでしょうか? Streamlitを使うと美しい表やグラフを使ったアプリケーションを簡単に構築できます. 私自身もユーザーとして利用
させていただいています. 興味を持たれ...]]></summary>
        <author>
            <name>ShunDev</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ABC282 D - Make Bipartite 2 の解説の解説]]></title>
        <id>https://zenn.dev/chelo/articles/c4c303750c98e7</id>
        <link href="https://zenn.dev/chelo/articles/c4c303750c98e7"/>
        <updated>2022-12-18T02:07:01.000Z</updated>
        <summary type="html"><![CDATA[https://atcoder.jp/contests/abc282/tasks/abc282_d

 二部グラフ

 定義
頂点を二つの色で表し、同じ色同士を結ぶ辺が存在しないグラフ

 確認方法
https://algo-method.com/tasks/962/editorial
詳細はアルゴ式を見よう

ある頂点を0、接続している頂点を1、次に接続しているものを0…として頂点の色(数字)を決める
すべての辺が、頂点色0と1を結ぶ辺であることを確認する

全頂点にて上記の確認を行う
独立した頂点がある場合、評価できないので全部頂点確認する必要あり
今回の問題でも頂点0でのみ判定する...]]></summary>
        <author>
            <name>チェロ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[趣味開発の CLI アプリを clean architecture 風に作ってみた]]></title>
        <id>https://zenn.dev/yuchiki/articles/clean-architecture-app</id>
        <link href="https://zenn.dev/yuchiki/articles/clean-architecture-app"/>
        <updated>2022-12-17T21:32:38.000Z</updated>
        <summary type="html"><![CDATA[概要
趣味開発のアプリを、書籍Clean Architectureで紹介されているclean architectureという作法に従うように改修してみた。コードはこちら。 自分用に使うAtcoder出場支援CLIコマンドで、pythonで書かれている。

 Clean Architecture って？
Uncle Bob によって 2012 年に提唱された アーキテクチャ。以下の図が有名。

コンポーネント間をレイヤーに分けて、依存の方向性を制御することに肝があるっぽい。
元のブログに書いてあることは私の理解だと以下の通りだ。
「コンポーネントは以下のレイヤーに分けた方がいい。上に紹...]]></summary>
        <author>
            <name>ゆーちき</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ロータリーエンコーダーモジュール]]></title>
        <id>https://zenn.dev/yuta_enginner/articles/3f32a738a9e8d3</id>
        <link href="https://zenn.dev/yuta_enginner/articles/3f32a738a9e8d3"/>
        <updated>2022-12-17T20:18:52.000Z</updated>
        <summary type="html"><![CDATA[デバイス概要
右回転、左回転、クリックで、デジタル信号を発します



 使い方
プルアップを設定しておくと良いでしょう
s1_pin = Pin(17,Pin.IN,Pin.PULL_UP)
s2_pin = Pin(18,Pin.IN,Pin.PULL_UP)
key_pin = Pin(19,Pin.IN,Pin.PULL_UP)

volume = 0

def minus(p):
    global volume
    volume -= 1

def plus(p):
    global volume
    volume += 1

def setting(p):...]]></summary>
        <author>
            <name>Yuta</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【AIアダルトチェック】AWS Rekognitionでアダルト画像かどうかを自動判別して業務を効率化する方法]]></title>
        <id>https://zenn.dev/tk22/articles/8554485f475ac4</id>
        <link href="https://zenn.dev/tk22/articles/8554485f475ac4"/>
        <updated>2022-12-17T15:28:05.000Z</updated>
        <summary type="html"><![CDATA[【AIアダルトチェック】AWS Rekognitionでアダルト画像かどうかを自動判別して業務を効率化する方法
webとモバイルアプリ両方で漫画サービスを提供している会社でエンジニアとして働いて次のような課題がありました。
webでは配信できるアダルトコンテンツ（作品）がApp Storeのガイドラインに引っかかる関係でモバイルアプリでは配信出来ないためコンテンツそれぞれに対してアダルトかどうか判定してアダルト商品にはフラグを立てておく必要があります。（アダルトフラグの立っているものは配信しないロジック）
この前、某出版社から１万コンテンツの入稿があり、１万コンテンツをアダルトコンテ...]]></summary>
        <author>
            <name>TK2</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Lambda上に適当に置いてあったコードをちゃんと管理する（個人開発）]]></title>
        <id>https://zenn.dev/meihei/articles/53a6ce251820e4</id>
        <link href="https://zenn.dev/meihei/articles/53a6ce251820e4"/>
        <updated>2022-12-17T14:55:03.000Z</updated>
        <summary type="html"><![CDATA[この記事はPython Advent Calendar 2022の17日目の記事です。
2019年に Lambda へデプロイした Python コードが今日まで動いていますが、これが何も管理されていなかったので、そろそろ重い腰を上げてちゃんとやっていこうと思います。

 アプリケーションの説明
Twitterで自分の名前の後ろに、東京都の天気予報の結果を表示します。これは１時間毎に自動更新されます。
https://twitter.com/app1e_s

 やること

 1. コード管理
（なし） -> Git & GitHub
今動いているコードが何も管理されておらず...]]></summary>
        <author>
            <name>meihei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ボードゲームの最適解を探索してみる〈ナインタイルパニック〉]]></title>
        <id>https://zenn.dev/136/articles/ninetilespanic</id>
        <link href="https://zenn.dev/136/articles/ninetilespanic"/>
        <updated>2022-12-17T13:56:18.000Z</updated>
        <summary type="html"><![CDATA[!
※この記事はまだ執筆中です。

この記事は、Oink Games が販売する「ナインタイルパニック」というゲームの最適解を探すプログラムについての備忘録です。
このプログラムは、テクニカルな計算時間の短縮や並列計算を行わず、探索対象の性質を考慮して全探索の数を削減しています。
そのため、アルゴリズムの目新しさなどはありません。

 「いそげ、脳みそ。」
ナインタイルパニックの箱裏のキャッチコピーです。どんなゲームかを端的に表しています。
ルールの詳細は実際にゲームを買って遊ぶのが理解への近道ですが、購入するまでは公式サイトの説明を読んでみてください。
簡単に言うと、

プレイヤーが全...]]></summary>
        <author>
            <name>136</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[２ステップでVS Code上でDockerの分析環境を構築する]]></title>
        <id>https://zenn.dev/kohhee/articles/d7516e7957b99a</id>
        <link href="https://zenn.dev/kohhee/articles/d7516e7957b99a"/>
        <updated>2022-12-17T12:19:25.000Z</updated>
        <summary type="html"><![CDATA[Dockerで分析環境を構築する。
JupyterをVS code上で使用できるようにした。
2ステップで構築する。



Dockerfileを作成する




VS codeの設定ファイルを作成する



もともとDockerは苦手の意識があったが、「実践 Docker - ソフトウェアエンジニアの「Docker よくわからない」を終わりにする本」でかなり理解できた。最高にわかりやすかった。

 1. Dockerfileを作成する
Dockerfileは以下のようにPythonのImageを用いた。
FROM python:3.11.1-bullseye

COPY src/req...]]></summary>
        <author>
            <name>25</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【2022年版】エンジニアがよく閲覧する情報収集サイトとは？]]></title>
        <id>https://zenn.dev/hero_kakedashi/articles/40c171a64c9e5c</id>
        <link href="https://zenn.dev/hero_kakedashi/articles/40c171a64c9e5c"/>
        <updated>2022-12-17T08:23:32.000Z</updated>
        <summary type="html"><![CDATA[はじめに
本記事では、下記の悩みに答えます。

エンジニアとして、日々情報収集をしたいけど、どのサイトを確認するべきなのかな。
エンジニア関連の情報ってどこのサイトで得られるのかな。
エンジニアがよく閲覧している情報収集サイトを知りたい。


 本記事の対象者
ITエンジニア(特に情報収集が好きな人)

 分析方法
分析方法に関してですが、下図のように分析しました。

上記の分析方法の各流れに関して、以降で簡単に説明しますね。

 はてなブックマーク
分析する対象として、「はてなブックマーク」を選びました。
「はてなブックマーク」を分析対象として選んだ理由は、以下のためです。

「は...]]></summary>
        <author>
            <name>hero</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ネストした@dataclassの一部を任意のシリアライズ方式でJSONシリアライズする方法]]></title>
        <id>https://zenn.dev/tomlla/articles/542cc59cb0cc0b268ff9</id>
        <link href="https://zenn.dev/tomlla/articles/542cc59cb0cc0b268ff9"/>
        <updated>2022-12-17T04:53:02.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事は Xbit Advent Calendar 2022 の17日目の記事です。
株式会社クロスビットは らくしふ を中心に、Rustによる自動シフトスケジューリング機能など魅力的な開発を行っている会社です。
技術スタックとしては GCP, Rails, Typescript(Vue, Next.js), Python, Rust などを使っています。
以前、Pythonで少し変わったJSON出力を出してみたいシチュエーションがあり、その際取った方法を書いておこうと思います。

 対象環境
python3.9 で試しています。

 Case-1: 普通にasdict(...]]></summary>
        <author>
            <name>tomlla</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AI絵師に自分の似顔絵を描いてもらう]]></title>
        <id>https://zenn.dev/niisan/articles/ff4c0291a8780a</id>
        <link href="https://zenn.dev/niisan/articles/ff4c0291a8780a"/>
        <updated>2022-12-17T04:17:03.000Z</updated>
        <summary type="html"><![CDATA[こんにちはみなさん
ツイッターとかで自分の画像を貼るときに、大体の写真の移りが悪くて上げにくいなと思ったことがあるんじゃないかと、というか自分で思いました。
これが似顔絵とかだったらまだいいのですが、絵をかいてもらう人もいないし、自分の絵心のなさでは似顔絵がとんでもないことになってしまう可能性がありますというかなります。
しかし、以前に上げた記事においてローカルに降臨したAI絵師君は、画像から新しい画像を作るという技も持っているとのこと。
これなら、自分の写真からイイ感じに崩した似顔絵を作ってくれるんじゃないかなって思ったわけです。
まあ、やりやすい人とそうではない人もいそう。

 im...]]></summary>
        <author>
            <name>niisan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[YouTubeを利用してLINEの動画オウム返しBotを作る]]></title>
        <id>https://zenn.dev/maguro_alterna/articles/00083367dd0184</id>
        <link href="https://zenn.dev/maguro_alterna/articles/00083367dd0184"/>
        <updated>2022-12-17T03:44:52.000Z</updated>
        <summary type="html"><![CDATA[ご挨拶
本記事はQiitaに投稿したものと同様のものになります。
どうもこんにちは。STECH所属のマグロです。
STECHと愛知工業大学 システム工学研究会の共同アドベントカレンダーの記事となります。
今回はLINE APIを使用してYouTubeに動画をアップロードしてみます。

 作った経緯
以前記事にしたDiscordとLINEを連携させる際、画像、動画はhttpの形式で送信する必要がありました。
Discordはファイルの保存にCloudflareを採用しており、httpでファイルの参照が可能でした。
しかしLINE側はバイナリデータで保存され、加えて一定時間で削除されてし...]]></summary>
        <author>
            <name>マグロ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[鹿と列車の衝突を調べる]]></title>
        <id>https://zenn.dev/shimat/articles/6ea4cfe0f84a3f</id>
        <link href="https://zenn.dev/shimat/articles/6ea4cfe0f84a3f"/>
        <updated>2022-12-16T22:43:21.000Z</updated>
        <summary type="html"><![CDATA[「ゆるWeb勉強会@札幌 2022年アドベントカレンダー」の15日目の記事ということにしました。

 成果物 (Streamlit)
https://shimat-deer-appearance-main-r59r01.streamlit.app/

 イメージ


 実装
https://github.com/shimat/deer_appearance

 要素技術

Twitter API
鉄道駅の緯度経度情報
PyDeck


 背景

JR北海道では、鹿(エゾシカ)をはじめとする野生動物との接触事故が頻繁に起きています。 [1]

ところで私はリモートワークで、まだ今の上司と直...]]></summary>
        <author>
            <name>shimat</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitLabのself-manegedでディスク容量を圧迫する原因を解決する]]></title>
        <id>https://zenn.dev/fuyu/articles/d11374b97ae9de</id>
        <link href="https://zenn.dev/fuyu/articles/d11374b97ae9de"/>
        <updated>2022-12-16T22:12:38.000Z</updated>
        <summary type="html"><![CDATA[!
この記事は GitLab Advent Calendar 2022 の 17日目の記事です。


 はじめに
GitLabでGlaphQL対応していることがあまり記事がなく
Self-managedのGitLabのみ対応な機能となっていたので、残したいと思っていました。

 ディスク容量を圧迫する要素
リポジトリが肥大化し、逃がす場合はgitコマンドでの対応があります。
Issue本体についてはCSVでの出力があります。
やり取りが活発なGitLabプロジェクトでは、知らず知らず増えていくものがあります。

 Issuesにアップロードされたファイルの対応
画像に、PDF、パワーポイ...]]></summary>
        <author>
            <name>fuyu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Stable Diffusion】無料Colab環境とrandom promptで究極の一枚を生成したい]]></title>
        <id>https://zenn.dev/smorce/articles/7fdf2aa7aa0bef</id>
        <link href="https://zenn.dev/smorce/articles/7fdf2aa7aa0bef"/>
        <updated>2022-12-16T15:01:00.000Z</updated>
        <summary type="html"><![CDATA[この記事は創作+機械学習 Advent Calendar 2022の17日目の記事になります。
4日目のうすいさんの記事を拝見し触発されたため、急遽 筆を執ることにしました。
https://zenn.dev/usui/articles/aa6e2457cfd6e9
Stable Diffusionが公開されてから、日々多くの人達が潜在空間を探索しています。
高精度な画像を出力するにはプロンプトエンジニアリングと呼ばれる「Promptの調整」が必要ですが、それなりに手間がかかる作業です。
実際に画像生成をしてみて感じたことですが、プロンプトエンジニアリングの過程で、様々な単語を組み合わて...]]></summary>
        <author>
            <name>smorce</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Djangoの__init__.pyで、URL指定してもreturnが返ってこなかった話]]></title>
        <id>https://zenn.dev/oreilly_ota/articles/3b3075350a8074</id>
        <link href="https://zenn.dev/oreilly_ota/articles/3b3075350a8074"/>
        <updated>2022-12-16T01:31:47.000Z</updated>
        <summary type="html"><![CDATA[現象
Djangoでアプリ開発をしていアプリ開発をしており、下記のようにエンドポイントを指定しているにもかかわらず、curl http://127.0.0.1:5000/search で404が返された。
@app.route("/search", methods=['GET'])
def search_question():
    result = jsonify(
        {
            "search":"search"
        }
    )
    return result


 原因
下記のように、create_app関数内でエンドポイント...]]></summary>
        <author>
            <name>オライリーヨッシー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[教師なしクラスタリングのその先へ~次元削減と定量解析~]]></title>
        <id>https://zenn.dev/aidemy/articles/f1d3ba3c98b708</id>
        <link href="https://zenn.dev/aidemy/articles/f1d3ba3c98b708"/>
        <updated>2022-12-16T00:32:19.000Z</updated>
        <summary type="html"><![CDATA[これはAidemy Advent Calendar 2022 16日目の記事です。
また、本記事に掲載したコードをまとめたNotebookをGitHubにて公開しています。

 はじめに
こんにちは。株式会社アイデミーデータサイエンティストの中沢(@shnakazawa_ja)です。普段は社内のデータ基盤整備、クライアント様のデータ解析、R&Dといった業務に携わっています。
本稿ではPythonを用いたデータのクラスタリングとその先の解析について記載します。
クラスタリングは教師なし学習の代表例として挙げられることが多い一方、その結果の可視化や続く解析、解釈についての情報は少ない...]]></summary>
        <author>
            <name>Shingo Nakazawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonにおけるProtocol(ダックタイピング)とABC(抽象化)の違い]]></title>
        <id>https://zenn.dev/ibaraki/articles/bef0b43522475b</id>
        <link href="https://zenn.dev/ibaraki/articles/bef0b43522475b"/>
        <updated>2022-12-15T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[Qiita 「Python Advent Calendar 2022」 18日目の記事です。
https://qiita.com/advent-calendar/2022/python
Pythonにおけるポリモーフィズムの実装で、「ABC(Abstract Base Class/抽象基底クラス)とProtocol(プロトコルクラス)の違いってなんだ？」となったので、実際に試してみました。

 ABCとProtocolとは何か？

 Pythonの公式ドキュメント
https://docs.python.org/ja/3/library/typing.html

 つかいどころ
ものすご...]]></summary>
        <author>
            <name>いばらき</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[scikit-learnで5行でできる類似テキスト検索]]></title>
        <id>https://zenn.dev/colum2131/articles/e178e20be6171e</id>
        <link href="https://zenn.dev/colum2131/articles/e178e20be6171e"/>
        <updated>2022-12-15T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[この記事はKaggle Advent Calendar 2022の16日目の記事です。

 0.はじめに
KaggleではShopeeやH&Mコンペなどの(e-)commerceに関連した、類似商品検索やレコメンド系のコンペが度々開催されます。
これらのコンペには商品名や商品画像、ユーザーの購入履歴といったデータが含まれており、商品・ユーザーベースの特徴の抽出を行う必要があります。さらにその特徴を用いて候補となる商品を並び出して、機械学習を用いて最終的に出力する商品を予測します。
本記事では、このようなコンペの第一歩として、商品名などテキストに注目した特徴抽出をscikit-le...]]></summary>
        <author>
            <name>colum2131</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[M1 MacでLabelmeを使う]]></title>
        <id>https://zenn.dev/takiser/articles/2529f8b57cebca</id>
        <link href="https://zenn.dev/takiser/articles/2529f8b57cebca"/>
        <updated>2022-12-15T12:50:07.000Z</updated>
        <summary type="html"><![CDATA[PyQt5を使おうとするとエラーになる
調べたところGUI表示に使用するQtのバージョンの問題らしい
Collecting PyQt5
  Using cached PyQt5-5.15.7.tar.gz (3.2 MB)
  Installing build dependencies ... done
  Getting requirements to build wheel ... done
  Preparing metadata (pyproject.toml) ... error
  error: subprocess-exited-with-error
  
  × Pr...]]></summary>
        <author>
            <name>takiser</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】円の描画方法と図形を重ねて描画する方法について【備忘録】]]></title>
        <id>https://zenn.dev/siganai/articles/20221215_draw_circle</id>
        <link href="https://zenn.dev/siganai/articles/20221215_draw_circle"/>
        <updated>2022-12-15T12:40:14.000Z</updated>
        <summary type="html"><![CDATA[matplotlibによる円の描画方法と図形を重ねて描画する方法について備忘録としてまとめる．
使用言語はPython．
本記事中で例示するために使用したコードは，ここからダウンロード可能．

 方法
matplotlibのpatchesを使用して円を図形として描画することができる．
また，引数zorderに整数を渡すことで重ねて描画する際の奥行方向の順序を指定できる．
具体的には，zorderに渡す数字が大きい程，手前側に描画される．
実際のコードを以下に示す．

 インストール方法

terminal
pip install matplotlib


 実際の使用例
ここでは，2つの...]]></summary>
        <author>
            <name>SiganAI</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[モジュラリティ最大化の計算を例に定式化の違いを見る (数理最適化 Advent Calendar 2022)]]></title>
        <id>https://zenn.dev/takilog/articles/cb29dd5328f69d</id>
        <link href="https://zenn.dev/takilog/articles/cb29dd5328f69d"/>
        <updated>2022-12-15T09:24:03.000Z</updated>
        <summary type="html"><![CDATA[Twitter: @cocomoff / Zenn: @takilog です。本記事は 数理最適化 Advent Calendar 2022 の15日目の記事として書きました。今年、お仕事（研究）でいろんな最適化問題を見ていて、定式化のあーだこーだで悩むことが多かったので気分転換で書いている側面もあります。

 はじめに
普段、職場のメンバと論文などを紹介しあう会を不定期にやっています。ある回でこの2本の論文を紹介しました。中身はこの記事には関係ないので一言コメントだけ付けておきますね（興味のある人は論文も見てみてください）。

Gaurav Agarwal and David Kemp...]]></summary>
        <author>
            <name>たきろぐ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-043｜B バイナリハックイージー]]></title>
        <id>https://zenn.dev/hyperdb/articles/93285160ef86bb</id>
        <link href="https://zenn.dev/hyperdb/articles/93285160ef86bb"/>
        <updated>2022-12-15T08:55:08.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

ABC-043 B - バイナリハックイージー


 提出結果
def getString():
    return input()


def kb_proc(k, buf):
    if (k == 'B'):
        if (len(k) > 0):
            buf = buf[:-1]
    else:
        buf += k
    return buf


def main():
    d = getString()
    v = ''

    for c in list(d):
        v = k...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-043｜A キャンディーとN人の子供イージー]]></title>
        <id>https://zenn.dev/hyperdb/articles/2863ed139fa6f0</id>
        <link href="https://zenn.dev/hyperdb/articles/2863ed139fa6f0"/>
        <updated>2022-12-15T08:52:05.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

ABC043 A - キャンディーとN人の子供イージー


 提出結果
def getInt():
    return int(input())


def main():
    p = getInt()
    print(int(((p + 1) * p) / 2))


if __name__ == "__main__":
    main()

 ふりかえり
除算なので当然と言ってしまえばそれきりなのですが、ローカルで動作を確認したら小数の形で出力されたのでちょっと慌てました。]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[パラメタ数1.5Bのgpt2-XLを学習した話]]></title>
        <id>https://zenn.dev/schnell/articles/0eba71dc364b7f</id>
        <link href="https://zenn.dev/schnell/articles/0eba71dc364b7f"/>
        <updated>2022-12-15T06:20:02.000Z</updated>
        <summary type="html"><![CDATA[この度、gpt2論文を参考に最大サイズのgpt2の日本語版モデルを学習し公開いたしました。
https://huggingface.co/nlp-waseda/gpt2-xl-japanese
この記事では学習にあたり工夫した点や問題点等を書き連ねます。シングルノードですが比較的大きなモデルを学習しているので知見などを共有できればと思います。
現在公開されているdecoder系モデルのうち今回作成したモデルに近い規模のモデルは知る限り2つあり、こちらはgpt3論文を参考にパラメタ設定をしていると考えられ、今回作成したモデルとは層の深さと隠れ層の次元が異なります。

https://hug...]]></summary>
        <author>
            <name>schnell</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Slackからエクスポートしたjsonファイルを特定のユーザーだけフィルタしてCSVに変換した]]></title>
        <id>https://zenn.dev/jyosysmiler/articles/64b3f209ad87cb</id>
        <link href="https://zenn.dev/jyosysmiler/articles/64b3f209ad87cb"/>
        <updated>2022-12-15T05:35:16.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Slackにはデータエクスポート出来る機能があり、"もしもの時"はエクスポート機能に頼ることになると思います。
今回、弊社にも"もしもの時"が訪れたのでSlackのデータをエクスポートしましたが、全てjsonファイルで情シス以外のメンバーが閲覧するのは難しそうだったので、jsonから変換する方法を探っていました。

 注意点
Slakの全ての会話（DM、プライベートチャンネル含む）をエクスポートするには事前に承認が必要となります。
"もしもの時"が来た場合にはSlackへリクエストし、必要に応じて法律が許す範囲内で利用しましょう。
https://slack.com/int...]]></summary>
        <author>
            <name>まゆかず</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのウェブフレームワークで実行時間のプロファイリングを取得し可視化する]]></title>
        <id>https://zenn.dev/yag_ays/articles/e6ad395a5ae3a4</id>
        <link href="https://zenn.dev/yag_ays/articles/e6ad395a5ae3a4"/>
        <updated>2022-12-15T00:45:16.000Z</updated>
        <summary type="html"><![CDATA[概要
!
この記事はUbie Engineers & Designers Advent Calendar 2022 15日目の記事です。

こんにちは、UbieでMachine Learning　Engineerをしているyagです。最近では業務で機械学習に触れる機会が少なくなり、日々BigQueryやSQLと戯れております。
さて、昨日のUbie Advent CalendarにてUbieがGoとNode.jsの会社になるという記事が界隈で話題になりましたが、機械学習周りの実装は依然としてPython一択という状況で、例外として生き残りそうです。現在でもPythonで書かれ...]]></summary>
        <author>
            <name>yag_ays</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AI絵師をローカルにお手軽に降臨させる！: Windows 11 + Docker + VSC]]></title>
        <id>https://zenn.dev/niisan/articles/c9e7a2b684d1c5</id>
        <link href="https://zenn.dev/niisan/articles/c9e7a2b684d1c5"/>
        <updated>2022-12-15T00:21:55.000Z</updated>
        <summary type="html"><![CDATA[こんにちはみなさん。
かっこいい絵、可愛い絵、イカシタ絵を描きたい！でも、自分に絵心はない。。。
そんな人類の救世主がAIによる画像生成です。
まあ、一昔前も頑張ってAIで画像生成してたことはありますが、とても重かったり精度が悪かったりと、一般で使えるようなものではありませんでした。
しかし、ここ最近、stable-diffusion なるアルゴリズムが生まれ、AIによる画像生成がいよいよ本格的になってきました。
Google colabo で動くやつも用意されていて、随分と盛況になってきましたが、今回はこのAI絵師君をローカルに作ってしまおうっていう魂胆ですね。
いや、colaboでも...]]></summary>
        <author>
            <name>niisan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】Elasticsearch内に溜まった古いindexをまるっと削除するツールを作った]]></title>
        <id>https://zenn.dev/satto_sann/articles/563b4a1a19e219</id>
        <link href="https://zenn.dev/satto_sann/articles/563b4a1a19e219"/>
        <updated>2022-12-14T15:27:02.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事は　ZOZO #2 Advent Calendar 2022 15日目の記事になります。
Elasticsearch内に溜まった古いindexをまるっと削除するツールを作ったので紹介します。
https://github.com/sattosan/old_index_removal_tool

 やりたいこと
以下の観点でindexを削除するツールを作りました。

作成してから〇〇日以上経過したindexを削除したい

Aliasに紐づくindexは削除したくない
その他削除したくないindexを個別指定できる

例）「test_index」は削除したくない


ワ...]]></summary>
        <author>
            <name>さっと</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[正規線形モデルの仮説検定]]></title>
        <id>https://zenn.dev/thimblee/articles/st_normal-linear-regression</id>
        <link href="https://zenn.dev/thimblee/articles/st_normal-linear-regression"/>
        <updated>2022-12-14T15:10:49.000Z</updated>
        <summary type="html"><![CDATA[!
この記事は RICORA Advent Calendar 2022 15日目の記事になります


 はじめに
正規線形モデルの（パラメータの個数についての）モデル選択に関する仮説検定を考えます。仮説検定に使用する統計量は様々考えられますが、今回は逸脱度を用いて作成します。記事の前半では、仮説検定の方法を提示し統計量の標本分布を導出します。後半では、Pythonを用いて、人工的に作成したデータを使って検出力を計算します。

 表記や前提
データ数: N
目的変数: \mathbf{Y} = (Y_1, \ldots, Y_N)^T
計画行列: \mathbf{X} = (\mathbf...]]></summary>
        <author>
            <name>Thimblee</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[あなたの知らない UTF-8 の世界]]></title>
        <id>https://zenn.dev/jugesuke/articles/e3b92518e21698</id>
        <link href="https://zenn.dev/jugesuke/articles/e3b92518e21698"/>
        <updated>2022-12-14T13:45:57.000Z</updated>
        <summary type="html"><![CDATA[bo.py
if "ボボボーボ・ボーボボ" == "ボボボーボ・ボーボボ":
    print("same")
else:
    print("different")

これの実行結果はどうなるでしょう？

 はじめに
この記事は、公立はこだて未来大学 Advent Calendar 2022 part3 の14日目の記事です。
https://adventar.org/calendars/7655
近年のコンピュータは、Unicode を用いて多種多様な文字を表示することができます。この Unicode にはおもしろ機能などが様々あるので、ちょっと遊んでみようと思い...]]></summary>
        <author>
            <name>Jugesuke</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[クソアプリ Advent Calendar 2022 カレンダー2 15日目]]></title>
        <id>https://zenn.dev/megane_otoko/articles/089_bul_image_maker</id>
        <link href="https://zenn.dev/megane_otoko/articles/089_bul_image_maker"/>
        <updated>2022-12-14T11:30:57.000Z</updated>
        <summary type="html"><![CDATA[クソアプリ Advent Calendar 2022、カレンダー 2 の 15 日目の記事です。

 アプリ

こんな感じのぼかした感じの画像を作成できるアプリです。




アプリの URL はこちら、実装はこちら。


UI はこんな感じ。出力する画像ファイルのサイズはスライダーで調整可能。



UI 部分は streamlit で実装


進捗表示は streamlit のプレースホルダーを使用


スライダーで指定した試行回数の分だけ、ランダムで設定した範囲の累積和を計算した結果を画像(白黒)として処理する。


streamlit で表示する画像の値は 0.0 ~ 1.0 ...]]></summary>
        <author>
            <name>koji/メガネ男</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Text CAPTCHAを解決する方法]]></title>
        <id>https://zenn.dev/marketer/articles/1c221041cdbd5f</id>
        <link href="https://zenn.dev/marketer/articles/1c221041cdbd5f"/>
        <updated>2022-12-14T08:26:59.000Z</updated>
        <summary type="html"><![CDATA[Find captcha question.


APIに質問を送信してください。

 SDKを使用する場合 (推奨):



 PHP
    // https://github.com/2captchacom/2captcha-php

    require(__DIR__ . '/../src/autoloader.php');

    $solver = new \TwoCaptcha\TwoCaptcha('YOUR_API_KEY');

    try {
        $result = $solver->text([
            'text'...]]></summary>
        <author>
            <name>marketer</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SolveMediaの突破方法]]></title>
        <id>https://zenn.dev/marketer/articles/f53b3a42e163db</id>
        <link href="https://zenn.dev/marketer/articles/f53b3a42e163db"/>
        <updated>2022-12-14T08:16:57.000Z</updated>
        <summary type="html"><![CDATA[CAPTCHA画像をダウンロードします。


画像をAPIに送信します。



 SDKを使用する場合 (推奨):

 PHP
    // https://github.com/2captchacom/2captcha-php

    require(__DIR__ . '/../src/autoloader.php');

    $solver = new \TwoCaptcha\TwoCaptcha('YOUR_API_KEY');

    try {
        $result = $solver->normal('path/to/captcha.jpg');...]]></summary>
        <author>
            <name>marketer</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Rotate Captchaの突破方法]]></title>
        <id>https://zenn.dev/marketer/articles/b645ea1cf15537</id>
        <link href="https://zenn.dev/marketer/articles/b645ea1cf15537"/>
        <updated>2022-12-14T07:58:30.000Z</updated>
        <summary type="html"><![CDATA[CAPTCHA画像をダウンロードします。


画像をAPIに送信します。



 SDKを使用する場合 (推奨):

 PHP
    // https://github.com/2captchacom/2captcha-php

    require(__DIR__ . '/../src/autoloader.php');

    $solver = new \TwoCaptcha\TwoCaptcha('YOUR_API_KEY');

    try {
        $result = $solver->rotate([
            'file'  =...]]></summary>
        <author>
            <name>marketer</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[reCAPTCHA V3の突破方法]]></title>
        <id>https://zenn.dev/marketer/articles/399868c2dedd4a</id>
        <link href="https://zenn.dev/marketer/articles/399868c2dedd4a"/>
        <updated>2022-12-14T07:44:42.000Z</updated>
        <summary type="html"><![CDATA[ウェブサイトのソースコードを調べて、grecaptcha.executeコールを検索します。このコールは、ウェブサイトのコードのどこにでも、含まれているJavaScriptファイル内のページの <script> 要素内にあります。例えば、デモページのソースコードではこちらです。:
window.grecaptcha.ready(function() {
    grecaptcha.execute(
        '6LfB5_IbAAAAAMCtsjEHEHKqcB9iQocwwxTiihJu', 
        {action: 'demo_action'},
 ...]]></summary>
        <author>
            <name>marketer</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[reCAPTCHA V2 Invisibleの突破方法]]></title>
        <id>https://zenn.dev/marketer/articles/0416bfa49cbce5</id>
        <link href="https://zenn.dev/marketer/articles/0416bfa49cbce5"/>
        <updated>2022-12-14T07:26:46.000Z</updated>
        <summary type="html"><![CDATA[ブラウザでデベロッパーコンソールを開き、data-sitekey属性を持つ要素を見つけます。
<button class="g-recaptcha" data-sitekey="6LdO5_IbAAAAAAeVBL9TClS19NUTt5wswEb3Q7C5" data-callback="onSubmit" id="recaptcha">Check</button>



sitekeyとpageurlを APIに送信します。



 SDK を使用する場合 (推奨):

 PHP
    // https://github.com/2captchacom/...]]></summary>
        <author>
            <name>marketer</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】MoviePy × 文字認識(Tesseract OCR )を用いた Apex Legendsの動画解析]]></title>
        <id>https://zenn.dev/ganbarimasu/articles/de6d046cd97572</id>
        <link href="https://zenn.dev/ganbarimasu/articles/de6d046cd97572"/>
        <updated>2022-12-14T07:19:55.000Z</updated>
        <summary type="html"><![CDATA[本記事が対象とする人：

MoviePyとOpenCVを用いたpythonでの動画編集・解析がしてみたい方
画像中の文字を認識し、テキストとして読み取る技術（本記事ではTesseract OCRを使用）を
使ってみたい方
他の人の個人開発を見るのが好きな方

!
精度が高いモデルにはなっていないので、取り組み内容を楽しんでいただければ幸いです。
また、汎用性が高くなさそうなコードに関してはネストするようにしてあります。
気になる方は適宜、確認していただければと思います。

!
ゲーム動画を対象とした開発であり、チート行為を行うためのものではありません。


 はじめに

 背景
現在、e...]]></summary>
        <author>
            <name>yoroshiku</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[reCAPTCHA V2コールバックの突破方法]]></title>
        <id>https://zenn.dev/marketer/articles/0964175d310f88</id>
        <link href="https://zenn.dev/marketer/articles/0964175d310f88"/>
        <updated>2022-12-14T07:16:24.000Z</updated>
        <summary type="html"><![CDATA[ブラウザでデベロッパーコンソールを開き、data-sitekey属性を持つ要素を見つけます。

    <div class="g-recaptcha" data-sitekey="6LfD3PIbAAAAAJs_eEHvoOl75_83eXSqpPSRFJ_u" id="recaptcha"></div>


sitekeyとpageurl を APIに送信します。


 SDK を使用する場合 (推奨):

 PHP
    // https://github.com/2captchacom/2captcha-php

    require(__DIR__...]]></summary>
        <author>
            <name>marketer</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[通常のCAPTCHAを突破する方法]]></title>
        <id>https://zenn.dev/marketer/articles/1dfc7c3898966c</id>
        <link href="https://zenn.dev/marketer/articles/1dfc7c3898966c"/>
        <updated>2022-12-14T07:02:00.000Z</updated>
        <summary type="html"><![CDATA[CAPTCHA画像をダウンロードします。


画像を API に送信します。



 SDKを使用する場合 (推奨):

 PHP
    // https://github.com/2captchacom/2captcha-php

    require(__DIR__ . '/../src/autoloader.php');

    $solver = new \TwoCaptcha\TwoCaptcha('YOUR_API_KEY');

    try {
        $result = $solver->normal('path/to/captcha.jpg'...]]></summary>
        <author>
            <name>marketer</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-042｜B 和風いろはちゃんイージー]]></title>
        <id>https://zenn.dev/hyperdb/articles/13e6376de2f640</id>
        <link href="https://zenn.dev/hyperdb/articles/13e6376de2f640"/>
        <updated>2022-12-14T05:35:43.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

ABC042 B - 文字列大好きいろはちゃんイージー


 提出結果
def getIntList():
    return list(map(int, input().split()))


def getStringRow(N):
    return [input() for _ in range(N)]


def main():
    p = getIntList()
    d = getStringRow(p[0])
    d.sort()

    print("".join(d))


if __name__ == "__main__":
  ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCorder］ABC-042｜A 和風いろはちゃんイージー]]></title>
        <id>https://zenn.dev/hyperdb/articles/b462a2dbdc2d1c</id>
        <link href="https://zenn.dev/hyperdb/articles/b462a2dbdc2d1c"/>
        <updated>2022-12-14T05:33:46.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

ABC042 A - 和風いろはちゃんイージー


 提出結果
def getIntList():
    return list(map(int, input().split()))


def main():
    d = getIntList()
    d.sort()

    if d == [5, 5, 7]:
        print('YES')
    else:
        print('NO')


if __name__ == "__main__":
    main()

 ふりかえり
普段プログラムを書いている時は配列同志を比較する...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[# KeyCaptchaの突破方法]]></title>
        <id>https://zenn.dev/marketer/articles/2d01912355304d</id>
        <link href="https://zenn.dev/marketer/articles/2d01912355304d"/>
        <updated>2022-12-14T05:08:01.000Z</updated>
        <summary type="html"><![CDATA[ページのソースコードで次のKeyCaptchaパラメータを見つけます。
s_s_c_user_id
s_s_c_session_id
s_s_c_web_server_sign
s_s_c_web_server_sign2



これらのパラメータをAPIに送信します。



 SDKを使用する場合 (推奨):

 PHP
    // https://github.com/2captchacom/2captcha-php

    require(__DIR__ . '/../src/autoloader.php');

    $solver = new \TwoCaptcha\...]]></summary>
        <author>
            <name>marketer</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで辞書のリストの平均を取る]]></title>
        <id>https://zenn.dev/hpp/articles/d48964b84ca2cf</id>
        <link href="https://zenn.dev/hpp/articles/d48964b84ca2cf"/>
        <updated>2022-12-14T03:52:29.000Z</updated>
        <summary type="html"><![CDATA[辞書のリストの平均をキーごとに取得するのは結構めんどう、なので簡単に使える関数を書いてみた。
def dict_average(dicts: Iterable[Dict]) -> Dict:
    dicts: List[Dict] = list(dicts)
    averaged = {}

    for k, v in dicts[0].items():
        try:
            v = v.item()
        except:
            pass
        if type(v) in [int, float]:
  ...]]></summary>
        <author>
            <name>hpp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Snowflake の E2E ML を試してみる]]></title>
        <id>https://zenn.dev/tmasuo/articles/aa0634c14e6210</id>
        <link href="https://zenn.dev/tmasuo/articles/aa0634c14e6210"/>
        <updated>2022-12-14T01:15:37.000Z</updated>
        <summary type="html"><![CDATA[📜 この記事は
Snowflake Advent Calendar 2022 Calendar 2 Day 14 の記事になります。Snowflake で Sales Engineer をしております、@tmasuo がお届けします。
この記事で触れる Snowflake の各機能のリリース状態は 2022 年 12 月 1 日時点に基づきます。

 🐍 Snowpark for Python - GA
11 月に行われた Snowday 2022 にて Snowpark for Python の GA がついに発表されました🎉
昨年の 11 月に Private Preview、今...]]></summary>
        <author>
            <name>tmasuo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[指定した値のみが配列に入っていることを保証したいとき]]></title>
        <id>https://zenn.dev/ningen/articles/059bdc8d99d785</id>
        <link href="https://zenn.dev/ningen/articles/059bdc8d99d785"/>
        <updated>2022-12-13T16:21:09.000Z</updated>
        <summary type="html"><![CDATA[表題のようなことを実現したいときに最初に思いつくのは以下のようなプログラムではないでしょうか?
allowed_values = [1,2,3]

input_data = [1,2]
invalid_input_data = [1,2,4]

# 何も出力されない
for data in input_data:
  if data not in allowed_values:
    print('error. input_data')
    
# 「error. invalid_input_data」が表示される 
for data in invalid_input_data:
 ...]]></summary>
        <author>
            <name>ningen</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ビッグデータ処理技術に関わる基本の勉強結果を整理]]></title>
        <id>https://zenn.dev/aidemy/articles/9a53740a6ec575</id>
        <link href="https://zenn.dev/aidemy/articles/9a53740a6ec575"/>
        <updated>2022-12-13T14:50:47.000Z</updated>
        <summary type="html"><![CDATA[この記事は、 Aidemy Advent Calendar 2022 の12/13分の投稿です。

 本記事執筆の背景

時間軸上の経緯

筆者は株式会社アイデミーにて、機械学習モデル構築/データ処理基盤構築 等の実案件支援に関わるチームに最近異動(それまでは弊社SaaSプロダクトのカスタマーサクセス+弊社の各種サービスの営業を担う部署に所属)


現チームでの筆者の位置づけ上の経緯

異動先チームにはプロジェクトマネージャ(データ活用領域に強み)、データサイエンティスト、データエンジニアが多数所属し、筆者の関連リテラシー・スキルは現時点で大きくビハインド


上記を踏まえた本記事作成の...]]></summary>
        <author>
            <name>ErikaOta</name>
        </author>
    </entry>
</feed>