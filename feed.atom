<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://s-i27.github.io/Rssfeed/index.html</id>
    <title>osmos::feed</title>
    <updated>2023-03-26T01:39:42.998Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="https://s-i27.github.io/Rssfeed/index.html"/>
    <link rel="self" href="https://s-i27.github.io/Rssfeed/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[簡単にblenderのスクリプトをデバッグする]]></title>
        <id>https://zenn.dev/kazuma_soon/articles/bfd0c17444b804</id>
        <link href="https://zenn.dev/kazuma_soon/articles/bfd0c17444b804"/>
        <updated>2023-03-25T18:44:42.000Z</updated>
        <summary type="html"><![CDATA[背景
blenderのアドオンを開発していると、デバッグしたい時があります。
むしろそういう時しかないかもしれません。
しかしながら、環境構築がめちゃくちゃ大変そうで、「これは俺にはできない！」と思い、発見した方法です。

 結論
breakpoint() でデバッグする。

 具体的な方法

blenderをターミナルから立ち上げる。

# これでpythonの実行ログがターミナルにて見られるようになる
❯ /Applications/Blender.app/Contents/MacOS/Blender


blenderにてスクリプトを書く

デバッグしたいところに breakp...]]></summary>
        <author>
            <name>kazuma-soon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[プロパティ・ベースド・テスト(PBT)を入門せずに恩恵に預かろう]]></title>
        <id>https://zenn.dev/saygox/articles/06f4b290cf0ba2</id>
        <link href="https://zenn.dev/saygox/articles/06f4b290cf0ba2"/>
        <updated>2023-03-25T15:12:47.000Z</updated>
        <summary type="html"><![CDATA[ソフトウェア開発におけるテスト技術は急速に進化しています。中でも、プロパティ・ベースド・テスト（Property-Based Testing、略称PBT）が注目されていますが、まだ十分に普及していないと感じられます。
この記事では、プロパティ・ベースド・テストの基本概念や特徴については触れず、実践から入ります。簡単な使い方を学んで、プロパティ・ベースド・テストの効果を実感してみましょう。本格的な理解はその後でも問題ありません。
今回は、OpenAPIのインターフェースに従って自動的にテストを行うSchemathesisを使用します

 OpenAPIとSchemathesis
OpenA...]]></summary>
        <author>
            <name>saygox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TensorFlow の使い方練習２：Functional API]]></title>
        <id>https://zenn.dev/wsuzume/articles/cb1511666e2f99</id>
        <link href="https://zenn.dev/wsuzume/articles/cb1511666e2f99"/>
        <updated>2023-03-25T14:15:01.000Z</updated>
        <summary type="html"><![CDATA[はじめに
本記事は以下の記事の続きとなる。
https://zenn.dev/wsuzume/articles/6971d9449214ca
前回は Keras で Sequential モデルを使って単純なフィードフォワード NN を作るとこまでやったので、今度はもっと複雑なコネクションを持つ NN を構築する。
ネットワークが複雑になるとデータセットを用意するのも学習するのも面倒くさくなっていくのでどう記事にしたものか悩んだのだが、とりあえず出力の shape が期待したものになっていたり、shape だけ一致している擬似データに対して学習が実行できればネットワークは構築できたこ...]]></summary>
        <author>
            <name>Josh Nobus</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Seleniumのエラー、苦労話]]></title>
        <id>https://zenn.dev/nekodamistie/articles/69b715938690b8</id>
        <link href="https://zenn.dev/nekodamistie/articles/69b715938690b8"/>
        <updated>2023-03-25T13:32:18.000Z</updated>
        <summary type="html"><![CDATA[SeleniumもChromeDriverもインストールしたのに
まずはブラウザの立ち上げできるかなと思ったら、動かない。
矢鱈にインストールした初心者ぼくが悪い。
「pip install chromedriver-binary」だけすればOK！という情報に惑わされ、
以下のようなエラーが出た。
言われた通りバージョン指定しても同じエラー・・・

'chromedriver' executable needs to be in PATH. Please see https://chromedriver.chromium.org/home


 解決してくれた参考サイト
Chrome...]]></summary>
        <author>
            <name>sacat.neko</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python 正規表現で個人情報マスキング]]></title>
        <id>https://zenn.dev/nekodamistie/articles/bcb9f348b2db46</id>
        <link href="https://zenn.dev/nekodamistie/articles/bcb9f348b2db46"/>
        <updated>2023-03-25T12:38:42.000Z</updated>
        <summary type="html"><![CDATA[個人情報をマスキングする
ダッシュボードでデータを掲載したいものの、個人情報は情報セキュリティ的に載せられない。
CRM（顧客情報管理システム）などで手入力されるデータは表記が揺れるため、
SQLやPowerQueryには限界を感じ、自分の扱う個人情報で特に多い電話番号のマスキングに
正規表現を使用してみた。
SQLでもある程度できるが、使用しているDBで一般的なreplace関数の引数が使えず、
何度も電話番号が出現した場合は対応できないため、諦めた。

 テストデータを用意する
携帯電話と固定電話を含んだリストを作成する。
メモなどに入力され、電話番号以外にも情報があり、それは残...]]></summary>
        <author>
            <name>sacat.neko</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[昔作ったWebサービスをStreamlitで作り直した話]]></title>
        <id>https://zenn.dev/astrologian/articles/5769d81671d49e</id>
        <link href="https://zenn.dev/astrologian/articles/5769d81671d49e"/>
        <updated>2023-03-25T11:56:08.000Z</updated>
        <summary type="html"><![CDATA[こんにちは 👋
今回は昔作った「文字列ジェネレーター」という Web サービスを Streamlit で作り直してみた話をしたいと思います。

 新しく作ったもの
名前を「文字列ジェネレーター」から「Eastest」に変更しました。「easy」+「test」=「Eastest」という安直な名前です。
https://mog-mog.streamlit.app/

 昔作った Web サービスの概要
https://zenn.dev/astrologian/articles/9e09eaf519e720
昔作ったものについては上の記事に書いてあるのですが、簡単に説明すると

実務のテスト工...]]></summary>
        <author>
            <name>zoniha</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChatGPT-4とのペアプログラミング体験: PDF要約＆Q&Aサービス開発の所感]]></title>
        <id>https://zenn.dev/zerebom/articles/1ffd51da420c9e</id>
        <link href="https://zenn.dev/zerebom/articles/1ffd51da420c9e"/>
        <updated>2023-03-25T10:41:23.000Z</updated>
        <summary type="html"><![CDATA[こんにちは！本記事ではChatGPT4を使ってPDF文書を要約し、質問応答サービスを提供するWebアプリケーションを開発した記録を紹介します。このサービスは、論文を読む際に役立つサポートツールとして作成しました。
記事では、サービス開発においてChatGPT-4がどのように活用できるか、また、どのようにペアプロを行うと効果的かといった内容をシェアします。
この記事を通じて、AI技術とエンジニアがどのように協力し、新たな価値を生み出すことができそうか、という所感を伝えられたら嬉しいです。

 gpt-pdf-summarizerの概要
今回開発したgpt-pdf-summarizerは、P...]]></summary>
        <author>
            <name>zerebom</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[blenderのバックアップを自動整理するアドオン作りました！]]></title>
        <id>https://zenn.dev/kazuma_soon/articles/54fa7c065c88ac</id>
        <link href="https://zenn.dev/kazuma_soon/articles/54fa7c065c88ac"/>
        <updated>2023-03-25T10:33:57.000Z</updated>
        <summary type="html"><![CDATA[どんなアドオンか？
blenderをやっていると、.blend1, .blend2っていうような拡張子のバックアップファイルを作成してくれます。ありがたいのですが、作業ディレクトリにどんどん作られちゃうので、煩雑になっちゃうんですよね。。。
そこで、これらのバックアップファイルをサブディレクトリにまとめて放り込んでくれるアドオンを作成しました〜。
こちらを参考に作成しました。
こちらだと、macOSでは動かないのですよね（path表記が異なるため）。
※Windowsの方はこちらを参考にしてください。

 使用法
GitHubにまとめています。
他のblenderのアドオンと同じ方法...]]></summary>
        <author>
            <name>kazuma-soon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CloudFormationのスタックをS3があっても無理やり消すPythonスクリプト]]></title>
        <id>https://zenn.dev/shimo_s3/articles/28b2124b3adac5</id>
        <link href="https://zenn.dev/shimo_s3/articles/28b2124b3adac5"/>
        <updated>2023-03-25T08:58:06.000Z</updated>
        <summary type="html"><![CDATA[動機など

S3を使ったCodePipelineのテストをしていて、何度も作り直すときにバケットの中身を消すのが面倒だった
バージョニングがあっても消せます


 使い方
python /path/to/delete_cfn_stack_with_s3.py

 スクリプト

delete_cfn_stack_with_s3.py
import boto3

"""
This script is for deleting an AWS CloudFormation stack with S3 buckets.
Usage: python /full/path/to/script.py...]]></summary>
        <author>
            <name>shimo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SQLAlchemyの基本的な使い方について]]></title>
        <id>https://zenn.dev/ryoya0121/articles/8652fc85e4457a</id>
        <link href="https://zenn.dev/ryoya0121/articles/8652fc85e4457a"/>
        <updated>2023-03-25T03:46:09.000Z</updated>
        <summary type="html"><![CDATA[SQLAlchemyはPythonで使われるORM（Object Relational Mapper）であり、データベース操作をより簡単に行えるようにするライブラリ。

 SQLAlchemyのインストール
簡単なディレクトリを作成し、venv(仮想環境)を使用してSQLAlchemyをインストールしていく。
# 簡単なディレクトリを作成する
$ mkdir ~/sqlalchemy-test

# ディレクトリを移動する
$ cd ~/sqlachemy-test

# venvを作成する
$ python3 -m venv venv

# 仮想環境へ入る。仮想環境へ入れたら左側に(v...]]></summary>
        <author>
            <name>R</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonでマルコフチェーンを用い、天気の遷移確率を求めよう]]></title>
        <id>https://zenn.dev/tirimen/articles/0369b4d3cc5638</id>
        <link href="https://zenn.dev/tirimen/articles/0369b4d3cc5638"/>
        <updated>2023-03-25T03:35:00.000Z</updated>
        <summary type="html"><![CDATA[本記事の目的
ベイズ最適化記事のための前記事第二弾。前回はモンテカルロ法を用いて円周率を導出した。
https://zenn.dev/tirimen/articles/9c0416969d3a0b
このモンテカルロ法と本記事のマルコフチェーンを組み合わせた手法をMCMC法（マルコフ連鎖モンテカルロ法）といい、ベイズ最適化を行う際によく用いられている。なので、ベイズ最適化を学ぶ前にマルコフチェーンについても学ぶ必要があると思い、記事にまとめた。

 マルコフチェーンとは
いつも通り表面だけ説明していく。マルコフチェーンとは、事後データが前データの中でも直前のデータのみに依存するモデルを...]]></summary>
        <author>
            <name>tirimen</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DockerでPyramidアプリケーションを起動]]></title>
        <id>https://zenn.dev/ryoya0121/articles/0802cee3b855c0</id>
        <link href="https://zenn.dev/ryoya0121/articles/0802cee3b855c0"/>
        <updated>2023-03-25T03:34:25.000Z</updated>
        <summary type="html"><![CDATA[app.pyを以下のように作成する
from wsgiref.simple_server import make_server
from pyramid.config import Configurator
from pyramid.response import Response

def hello_world(request):
    print('Request inbound!')
    return Response('Hello World!')

if __name__ == '__main__':
    config = Configurator()
    co...]]></summary>
        <author>
            <name>R</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WSL2にpyenvを導入してPythonのバージョンを管理する]]></title>
        <id>https://zenn.dev/claustra01/articles/0d8efd08905526</id>
        <link href="https://zenn.dev/claustra01/articles/0d8efd08905526"/>
        <updated>2023-03-24T12:08:43.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事は、WindowsへWSL2(Ubuntu)とVSCodeをインストールし、pythonで開発ができるようになるまでの手順を個人的な備忘録としてまとめたものです。
WSLやUbuntu、VSCodeその他のアップデートおよび仕様変更によって将来的にこの手順が使用できなくなる可能性があります。(記.2023/3/24)

 Pyenvとは？
pyenvとは、pythonのバージョン管理ツールで、これを導入することによって「プロジェクトによってpythonのバージョンを切り替えたい……」というような時に、逐一pythonをアンインストールしたり環境変数を手動で書き換えた...]]></summary>
        <author>
            <name>claustra01</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonとAWSで並列処理最適化: パフォーマンス向上の鍵]]></title>
        <id>https://zenn.dev/kacky/articles/d15f120a3c2aba</id>
        <link href="https://zenn.dev/kacky/articles/d15f120a3c2aba"/>
        <updated>2023-03-24T10:13:14.000Z</updated>
        <summary type="html"><![CDATA[はじめに
本記事では、AWS と Python を用いたバックエンドエンジニアにとっての関心事である、並列処理の最適な設定を検証します。具体的には、Python での並列実行において最もネットワークパフォーマンスが高まる並列数を調査します。

 実験手法
AWS S3 バケット内の全ファイルを取得し、サイズを返すプログラムの実行時間を計測しました。実験環境は AWS Fargate を使用し、Thread と Process による並列処理を検証しました。詳細なプログラムは下記のコードを参照してください。
import base64
import csv
import hashlib...]]></summary>
        <author>
            <name>kacky</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Selenium4】Headlessにすると要素が見つからない]]></title>
        <id>https://zenn.dev/nek0n0mimi/articles/dfc53be51e7ba9</id>
        <link href="https://zenn.dev/nek0n0mimi/articles/dfc53be51e7ba9"/>
        <updated>2023-03-24T09:38:56.000Z</updated>
        <summary type="html"><![CDATA[実行環境

Python 3.9
Selenium 4
macOS


 問題
エラー文

selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element:

options.headless = Trueを追加すると、元々取得できていた要素が取得できなくなった。
様々な方法を試し解決した方法を紹介する。

 解決
オプションを以下のように記入する。
注意点として、options.add_argument('window-size=1400,60...]]></summary>
        <author>
            <name>calcifer</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-180｜A - box]]></title>
        <id>https://zenn.dev/hyperdb/articles/9458610b41ed6b</id>
        <link href="https://zenn.dev/hyperdb/articles/9458610b41ed6b"/>
        <updated>2023-03-24T05:02:35.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-180 A - box



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    n, a, b = getIntMap()

    print(n - a + b)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-180｜B - Various distances]]></title>
        <id>https://zenn.dev/hyperdb/articles/1af4230043a679</id>
        <link href="https://zenn.dev/hyperdb/articles/1af4230043a679"/>
        <updated>2023-03-24T05:02:34.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-180 B - Various distances



 提出結果
import math


def getInt():
    return int(input())


def getIntList():
    return list(map(int, input().split()))


def m(l):
    s = 0
    for i in l:
        s += abs(i)
    return s


def e(l):
    s = 0
    for i in l:
        s += abs(i) ** 2...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChatGPT APIとGradioでチャットボットを簡単作成しよう！]]></title>
        <id>https://zenn.dev/itasan2/articles/f2d2bd881425b8</id>
        <link href="https://zenn.dev/itasan2/articles/f2d2bd881425b8"/>
        <updated>2023-03-24T04:38:08.000Z</updated>
        <summary type="html"><![CDATA[はじめに
皆さん、こんにちは！
Zenn初めての投稿となる今回は、今最もホットな話題のChatGPTをテーマにしてみました。
似たようなチャットボットプログラムは既にいっぱいあると思いますが、ChatGPT APIとPythonライブラリーのGradioを使ってシンプルにチャットボットを作成してみたので、その情報を共有したいと思います。なお、完成イメージは下記スクリーンショットの通りとなります。


 準備
ChatGPT APIを使用するには下記が必要となります。

 ①OpenAIアカウント
OpenAIのサイトでアカウントを作成（無料）

 ②APIキー
OpenAIアカウント...]]></summary>
        <author>
            <name>itasan2</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】エラー：urllib.error.URLError/ SSL: CERTIFICATE_VERIFY_FAILED]]></title>
        <id>https://zenn.dev/oreilly_ota/articles/c092f1be13c79b</id>
        <link href="https://zenn.dev/oreilly_ota/articles/c092f1be13c79b"/>
        <updated>2023-03-24T00:55:53.000Z</updated>
        <summary type="html"><![CDATA[概要
Flaskでアプリケーションを構築していたところ、下記エラーに遭遇した。

どういったエラーか説明すると、/drinks-detailsというjwt認証を必要とするエンドポイントにリクエストを送ると、上記エラーが発生する。具体的なコードは下記の通り。
@app.route('/drinks-detail', methods=['GET'])
@requires_auth('get:drinks-detail')
def get_drinks_detail(jwt):
    try:
        drinksLongList = [drink.long() for drin...]]></summary>
        <author>
            <name>オライリーヨッシー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Python]Beautiful Soup 4であらゆるデータをスクレイピング]]></title>
        <id>https://zenn.dev/misakiishihara/articles/1704849eb643ad</id>
        <link href="https://zenn.dev/misakiishihara/articles/1704849eb643ad"/>
        <updated>2023-03-23T15:11:48.000Z</updated>
        <summary type="html"><![CDATA[あまりにも暇すぎて久しぶりに映画でも観るかと思い立ったのですが、大学生という４年間のモラトリアムに名作・傑作を全て見尽くしてしまった感があり、久しぶりにPythonを触りたくなったのでfilmarksから人気な映画に絞っていい映画に出会ってみようと思います。
https://beautiful-soup-4.readthedocs.io/en/latest/
執筆中・・・（途中)
一応流れ

 必要なライブラリのインストール
!pip install requests
!pip install beautifulsoup4
import sqlite3

 Filmarksのレビューペー...]]></summary>
        <author>
            <name>石原岬</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[勾配ブースティングを自分で実装してみる]]></title>
        <id>https://zenn.dev/skwbc/articles/implement_gradient_boosting</id>
        <link href="https://zenn.dev/skwbc/articles/implement_gradient_boosting"/>
        <updated>2023-03-23T09:20:54.000Z</updated>
        <summary type="html"><![CDATA[概要
勾配ブースティングは、2023年現在最も広く使われている機械学習アルゴリズムの一つです。[1]
勾配ブースティングを実装したライブラリとしてはXGBoostやLightGBMなどが有名で、これらを使うことで高速かつ高精度な機械学習モデルを簡単に構築することが出来ます。
実際に自分でもこれらのライブラリを日常的に使っているのですが、よく使うものなので自分でも実装してみることで良い学びが得られるような気がしています。
そこで、本記事では勾配ブースティングのアルゴリズムを自分で実装してみようと思います。
実装の方針は以下の通りです。

最もよく使われる弱学習器として決定木を使う手法[...]]></summary>
        <author>
            <name>skwbc</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【ELB】AWS Boto3 by Pythonで特定タグ未付与のリソース抽出]]></title>
        <id>https://zenn.dev/kangaezaru/articles/c58c40d9bb8012</id>
        <link href="https://zenn.dev/kangaezaru/articles/c58c40d9bb8012"/>
        <updated>2023-03-23T08:09:07.000Z</updated>
        <summary type="html"><![CDATA[1. 本稿の概要

 ◆ ゴール
以下のような機能を満たすPythonスクリプトを作成しました。
こちらはELBインスタンス向けです。

ELBで特定タグ(Owner)の付与状況をリスト化
ローカル環境でI/Oが自由なPythonスクリプトとして実行
その抽出結果はCSVカンマ区切り形式でローカルに出力


 ◆ 背景、前提、その他サービスまとめなど
全体論はこちら を参照
※単にタグを棚卸したり付与するだけならタグエディタで見るのが一番楽かとは思います。

 2. 開発

 ◆ 概説
E+BのOwnerタグが未付与のリソースの一覧を出力します。
とりあえず単体では東京リージョ...]]></summary>
        <author>
            <name>kangaezaru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【RDS編】AWS Boto3 by Pythonで特定タグ未付与のリソース抽出]]></title>
        <id>https://zenn.dev/kangaezaru/articles/f978d56e62beae</id>
        <link href="https://zenn.dev/kangaezaru/articles/f978d56e62beae"/>
        <updated>2023-03-23T08:05:00.000Z</updated>
        <summary type="html"><![CDATA[1. 本稿の概要

 ◆ ゴール
以下のような機能を満たすPythonスクリプトを作成しました。
こちらはRDSインスタンス向けです。

RDSインスタンスで特定タグ(Owner)の付与状況をリスト化
ローカル環境でI/Oが自由なPythonスクリプトとして実行
その抽出結果はCSVカンマ区切り形式でローカルに出力


 ◆ 背景、前提、その他サービスまとめなど
全体論はこちら を参照
※単にタグを棚卸したり付与するだけならタグエディタで見るのが一番楽かとは思います。

 2. 開発

 ◆ 概説
RDSのOwnerタグが未付与のリソースの一覧を出力します。
とりあえず単体では...]]></summary>
        <author>
            <name>kangaezaru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-179｜A - Plural Form]]></title>
        <id>https://zenn.dev/hyperdb/articles/c073aea370a601</id>
        <link href="https://zenn.dev/hyperdb/articles/c073aea370a601"/>
        <updated>2023-03-23T05:17:45.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-179 A - Plural Form



 提出結果
def getString():
    return input()


def main():
    s = getString()

    print(s + ('es' if s[-1] == 's' else 's'))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-179｜B - Go to Jail]]></title>
        <id>https://zenn.dev/hyperdb/articles/4617a7b2a92d79</id>
        <link href="https://zenn.dev/hyperdb/articles/4617a7b2a92d79"/>
        <updated>2023-03-23T05:17:44.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-179 B - Go to Jail



 提出結果
def getInt():
    return int(input())


def getIntListRow(N):
    return [list(map(int, input().split())) for _ in range(N)]


def main():
    n = getInt()
    d = getIntListRow(n)

    z = 0
    for a in d:
        if len(set(a)) == 1:
            z += 1...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChatGPTに指示せずゼロからプロダクト（のプロトタイプ）を実装してもらった: AIを用いた革新的なアプローチ]]></title>
        <id>https://zenn.dev/harukaeru/articles/c73cdcdd2cd7a8</id>
        <link href="https://zenn.dev/harukaeru/articles/c73cdcdd2cd7a8"/>
        <updated>2023-03-23T02:48:16.000Z</updated>
        <summary type="html"><![CDATA[■ 概要
※ この文章は人間の文章です。
よく「ChatGPTに何かを指示して実装してもらったり、支援してもらったりする」という内容のものを見かけます。
ただ、ぼくとしては「そこまでわかっているのなら、勝手にプロダクトを実装できるのではないか？」と考えて、ぼくからは何も具体的な指示はせずに、プロダクトをChatGPTさんに考えてもらってそれを実装してもらいました。
プロンプトの出発点は次の文言になります。

最終的な成果物は次のような、簡単な言語学習クイズのプロトタイプになります。


なぜ言語学習クイズかというと、ChatGPTさんから提案されたからです。ChatGPTさんは、AI...]]></summary>
        <author>
            <name>かえる</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Prometheus を Python, Go, Rust で始める]]></title>
        <id>https://zenn.dev/hkdord/articles/prometheus-python-go-rust</id>
        <link href="https://zenn.dev/hkdord/articles/prometheus-python-go-rust"/>
        <updated>2023-03-22T13:54:33.000Z</updated>
        <summary type="html"><![CDATA[はじめに
去年から Observability に興味がありいくつか記事を書いてきた(Go で書いたアプリから Jaeger や X-Ray にトレースを送る記事とかコンテナでデプロイした AWS Lambda から X-Ray に OpenTelemetry SDK でトレースを送る記事とか)のですが、今まではトレースのことばかりでメトリクスはノータッチでした。Observability 観点だとメトリクスも外せないと考えてメトリクスデビューすることにしました。今回は Prometheus を使ってみます。アプリケーションは Python(Flask), Go (Echo), Ru...]]></summary>
        <author>
            <name>Hidekazu Karino</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GPT を使って汎用 OCR を作った]]></title>
        <id>https://zenn.dev/anieca/articles/230b3451018620</id>
        <link href="https://zenn.dev/anieca/articles/230b3451018620"/>
        <updated>2023-03-22T10:41:30.000Z</updated>
        <summary type="html"><![CDATA[はじめに
GPT を使って画像・テキストから欲しい情報を抽出するライブラリを作りました。
https://github.com/Anieca/Xtracture
パッケージを公開済みなので以下のコマンドでインストールできます。
pip install -U xtracture

 使い方
下例のとおりです。
!
OpenAI の API キーが適切に設定されている必要があります。
また OCR に Google Cloud Vision API あるいは Tesseract を使う場合はこれらも適切に設定されている必要があります。

from pathlib import Path
...]]></summary>
        <author>
            <name>Anieca</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[新しいライブラリーを作った！]]></title>
        <id>https://zenn.dev/dms_sub/articles/6aedc87dc258e8</id>
        <link href="https://zenn.dev/dms_sub/articles/6aedc87dc258e8"/>
        <updated>2023-03-22T09:12:06.000Z</updated>
        <summary type="html"><![CDATA[なぜ作ったか
とある組織が開発しているbotでvoicevoxを使った読み上げを作っていたのですが、あまりにも作るのがめんどくさいので、たくさんの人と協力しながら作りたいと思って、voicevoxって名前でpypiにだしました。
ただし本家様に名前を変えるよう言われたためvoicevox-clientに名前を変えました。

 PyPIに上げる際のメタデータに使っているもの
twineとsetup.py、そしてpyproject.tomlを使っています。twineはライブラリーをアップロードするために使っています。

 使用しているクライアントライブラリー
httpx、なぜhttpxを...]]></summary>
        <author>
            <name>tuna2134</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[あなたのPythonを100倍高速にする技術 / Codon入門]]></title>
        <id>https://zenn.dev/turing_motors/articles/e23973714c3ecf</id>
        <link href="https://zenn.dev/turing_motors/articles/e23973714c3ecf"/>
        <updated>2023-03-22T09:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Pythonは世界的にも人気のあるプログラミング言語ですが、実行速度については課題があります。Pythonの実行速度を高速化したい、という要求は根強く、これまでにも様々なツールや処理系が開発されています。
この記事ではMITの研究者らが開発したPythonを高速化するツール「Codon」について紹介します。
この記事を3行でまとめると：

高性能で簡単に扱えるPythonコンパイラ「Codon」
Pythonとの互換性がありながら、CやC++に匹敵する高速化を実現
実際にPythonコードが100倍速くなることを検証


 Codonとは
Codonは高性能なPython...]]></summary>
        <author>
            <name>ymg_aq</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Blueprint機能を使ってChaliceのapp.pyを分割する]]></title>
        <id>https://zenn.dev/hirotech/articles/498fcdfdf73a33</id>
        <link href="https://zenn.dev/hirotech/articles/498fcdfdf73a33"/>
        <updated>2023-03-22T06:43:33.000Z</updated>
        <summary type="html"><![CDATA[はじめに
AWSでサーバレスのシステムを開発する場合、コンソールを使って一から手でポチポチするのもしんどいので専用のフレームワークを使うことが多いと思います。代表的なところでいくとSAM、Amplify、Serverless Framework、CDKなどなど。
この中でも圧倒的な生産性の高さから、私は特にChaliceを好んで使っています。Pythonを使ってサーバレスアプリを組むならChalice一択とさえ思っているのですが、今回はそのChaliceを使ったときに発生しがちな悩みどころの解消方法を書いておきたいと思います。
そもそもChaliceってなんやねん、という方は以下の記...]]></summary>
        <author>
            <name>hiro-tech</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-178｜A - Not]]></title>
        <id>https://zenn.dev/hyperdb/articles/f3b35bef069f18</id>
        <link href="https://zenn.dev/hyperdb/articles/f3b35bef069f18"/>
        <updated>2023-03-22T05:25:43.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-178 A - Not



 提出結果
def getInt():
    return int(input())


def main():
    x = getInt()

    print(0 if x == 1 else 1)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-178｜B - Product Max]]></title>
        <id>https://zenn.dev/hyperdb/articles/b402f2a3db21cd</id>
        <link href="https://zenn.dev/hyperdb/articles/b402f2a3db21cd"/>
        <updated>2023-03-22T05:25:42.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-178 B - Product Max



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    a, b, c, d = getIntMap()

    print(max(max(a * c, a * d), max(b * c, b * d)))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[『スッキリわかるPython入門』のレビュー]]></title>
        <id>https://zenn.dev/maco_macoo/articles/10536179963c95</id>
        <link href="https://zenn.dev/maco_macoo/articles/10536179963c95"/>
        <updated>2023-03-21T14:21:36.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Pythonの勉強を始めて５か月…
まだまだ技術的に身につけるべきことが多いです。
そんな私がPythonを始めて勉強するときに使った参考書『スッキリわかるPython入門』について、まとめてみました。
Pythonの勉強をこれから始めるぞ！っていう人に特に読んでほしいです。

 自分自身について
私は情報系学部に所属しています。
プログラミングの勉強を始めたのは大学生になってからです。
大学では主にC言語を使っており、Pythonには触れたこともありませんでした。
Pythonは知人から紹介でやってみようと思い、勉強を始めました。
まだ知識は浅いので、これからもっと勉強し...]]></summary>
        <author>
            <name>M.Sato</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[無料でFastAPIで作ったAPIをデプロイする]]></title>
        <id>https://zenn.dev/katsu996/articles/python-fastapi</id>
        <link href="https://zenn.dev/katsu996/articles/python-fastapi"/>
        <updated>2023-03-21T13:30:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回、はじめてZennで記事を書いてみることにしました。
記事を書くことに慣れていないため、おかしな点があるかもしれませんがご了承下さい。
初めての記事の題材に、FastAPIをDeta Spaceにデプロイするというテーマを選んだ理由は、実際に自分自身で使用していて、日本語の記事があまり見つからなかったためです。
少しでもFastAPIをデプロイしたいという方のお役に立てるよう、記事を書くことにしました。
実装やデプロイを完了した後に記事を執筆しているため、キャプチャがない部分や省略した箇所がありますが、ご了承ください。

 FastAPIとは
個人的に一言でまとめると簡...]]></summary>
        <author>
            <name>勝利 -Shori-</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[脆弱性診断入門（OWASP ZAP編）]]></title>
        <id>https://zenn.dev/hideoamezawa/books/study_owasp_zap</id>
        <link href="https://zenn.dev/hideoamezawa/books/study_owasp_zap"/>
        <updated>2023-03-21T11:55:52.000Z</updated>
        <summary type="html"><![CDATA[Djangoのサンプルサイトに脆弱性診断を実施してみましょう！]]></summary>
        <author>
            <name>hideame</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TensorFlow の使い方練習：自動微分と Sequential モデル]]></title>
        <id>https://zenn.dev/wsuzume/articles/6971d9449214ca</id>
        <link href="https://zenn.dev/wsuzume/articles/6971d9449214ca"/>
        <updated>2023-03-21T09:51:36.000Z</updated>
        <summary type="html"><![CDATA[はじめに
numpy だといろいろ機能が足りないことが増えてきてメインウェポンを tensorflow に移行したいので勉強したことまとめ。この記事は Sequential モデルを用いた単純なフィードフォワードニューラルネットの作成まで。
Google Colab のノートブックはこちら。
よい子のみなさんはこんな記事を読まずに公式のガイドやチュートリアルを読みましょう。
https://www.tensorflow.org/guide

 参考文献

『Guide | TensorFlow Core』
『Python: TensorFlow2 の自動微分を試してみる』
『お話：数...]]></summary>
        <author>
            <name>Josh Nobus</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで祝日を調べる方法]]></title>
        <id>https://zenn.dev/shiro_toy_box/articles/724a601b208398</id>
        <link href="https://zenn.dev/shiro_toy_box/articles/724a601b208398"/>
        <updated>2023-03-21T09:42:18.000Z</updated>
        <summary type="html"><![CDATA[jpholidayライブラリを使い祝日を調べる

jpholidayでできること

指定日の祝日名を取得
指定日が祝日か判定
指定月と年の祝日を取得
指定範囲の祝日を取得
独自の休日を追加、削除




 使い方
datetimeライブラリを使うのでインポートを忘れずに
pip install jpholiday

 指定日の祝日名を取得


is_holiday_nameメソッドを使います

datetime.datetimeを引数にしても同じようにできます

import jpholiday
import datetime

print(jpholiday.is_holiday_...]]></summary>
        <author>
            <name>しろ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[poetry でプロジェクト内にパッケージをインストールする]]></title>
        <id>https://zenn.dev/tamakiii/articles/poetry-local-installation</id>
        <link href="https://zenn.dev/tamakiii/articles/poetry-local-installation"/>
        <updated>2023-03-21T09:29:49.000Z</updated>
        <summary type="html"><![CDATA[TL;DR


poetry install のインストール先は {cache-dir}/virtualenvs/...

扱いにくいのでプロジェクト内に配置したい



poetry config --local virtualenvs.in-project true でプロジェクト内に作るようになる


poetry.toml が生成されて .venv にインストールされるようになる



virtualenv: error: argument --prompt: expected one argument で困ったら

see: https://gist.github.com/...]]></summary>
        <author>
            <name>Daichi Tamaki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[システムトレードを始めるための基本のスコア設計]]></title>
        <id>https://zenn.dev/gamella/articles/c3157a285a236d</id>
        <link href="https://zenn.dev/gamella/articles/c3157a285a236d"/>
        <updated>2023-03-21T06:35:53.000Z</updated>
        <summary type="html"><![CDATA[はじめに
マケデコという主に株式関連のマーケットAPIを活用し、分析や予測モデルを構築しているbotterのDiscordコミュニティをJPX総研様、AlpacaJapanの協賛で運営しています。
https://market-api.dev/
マケデコの中で、さまざまなイベントを企画する中で、前提知識として、機械学習モデルが生成するスコアについての知識があまり共有されていないと感じていて、この文章を書いた次第です。
過去に作成したものだと、JPX総研様と一緒に作成した株式分析チュートリアルなどはかなり網羅的にいろいろなトピックを扱っているのですが、こちらはSIGNATEで開催された...]]></summary>
        <author>
            <name>tomo@Alpaca</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-176｜A - Takoyaki]]></title>
        <id>https://zenn.dev/hyperdb/articles/da9b0c43dc404b</id>
        <link href="https://zenn.dev/hyperdb/articles/da9b0c43dc404b"/>
        <updated>2023-03-21T04:43:02.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-176 A - Takoyaki



 提出結果
import math


def getIntMap():
    return map(int, input().split())


def main():
    n, x, t = getIntMap()

    print(math.ceil(n / x) * t)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-177｜B - Substring]]></title>
        <id>https://zenn.dev/hyperdb/articles/9d1242746c7c66</id>
        <link href="https://zenn.dev/hyperdb/articles/9d1242746c7c66"/>
        <updated>2023-03-21T04:43:02.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-177 B - Substring



 提出結果
def getString():
    return input()


def cnt_diff(s, t):
    c = 0
    for i in range(len(s)):
        if s[i] != t[i]:
            c += 1
    return c


def main():
    s = getString()
    t = getString()

    a = len(s)
    b = len(t)
    c = b
    for ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-177｜A - Don't be late]]></title>
        <id>https://zenn.dev/hyperdb/articles/7d65fafcb01ca8</id>
        <link href="https://zenn.dev/hyperdb/articles/7d65fafcb01ca8"/>
        <updated>2023-03-21T04:43:01.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-177 A - Don't be late



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    d, t, s = getIntMap()

    print('Yes' if d / s <= t else 'No')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-176｜B - Multiple of 9]]></title>
        <id>https://zenn.dev/hyperdb/articles/4010f38975001b</id>
        <link href="https://zenn.dev/hyperdb/articles/4010f38975001b"/>
        <updated>2023-03-21T04:43:01.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-176 B - Multiple of 9



 提出結果
def getInt():
    return int(input())


def main():
    n = getInt()

    l = map(int, list(str(n)))

    print('Yes' if sum(l) % 9 == 0 else 'No')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SpotifyAPIで未知の曲を漁ってみた①]]></title>
        <id>https://zenn.dev/hikapoppin/articles/69be223c89fbd5</id>
        <link href="https://zenn.dev/hikapoppin/articles/69be223c89fbd5"/>
        <updated>2023-03-21T03:33:03.000Z</updated>
        <summary type="html"><![CDATA[概要
PythonでSpoyifyAPIを使って完全にランダムにランダムな曲をプレイリストに入れてみました。

 背景
普段皆さんは音楽の配信サービスは使用していますか？自分はSpotifyを使って、仕事中や移動中、ご飯食べてるときなどほぼ一日中音楽を聴いています。ただ、こういうサブスクのサービスって、どうしても試聴する音楽のジャンルが偏ったり、未知の音楽を発見しづらいという欠点があります。自分はJPOPからアフリカの民族音楽までなんでも聴くような人間なので、それでは困ります。特にDJみたいに、新しい音楽を発見するのが仕事といった人には不向きな機能なんじゃないんでしょうか。しかし、ま...]]></summary>
        <author>
            <name>hikaru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonでモンテカルロ法を用いてみよう]]></title>
        <id>https://zenn.dev/tirimen/articles/9c0416969d3a0b</id>
        <link href="https://zenn.dev/tirimen/articles/9c0416969d3a0b"/>
        <updated>2023-03-21T00:48:02.000Z</updated>
        <summary type="html"><![CDATA[本記事の目的
知識を深めるために行う。現在はベイズ最適化の記事を書きたいが、その準備記事としてモンテカルロ法の記事を書く。前回、Streamlitを用いて簡単なアプリ制作はできるようになったので、今回は円周率の導出アプリを雑に作っていく。

 モンテカルロ法とは
ざっくり言うと、「乱数を用いて、試行回数を多くし、問題を解く」手法。ベイズ最適化も確率で重みづけした乱数を用いて最適解を求めている。今回は確率で重みづけしていない乱数（一様乱数）で行うが、基本原理は同じだと思ってほしい。

 理論:円周率の導出
モンテカルロ法の説明には円周率の導出が頻繁に用いられている。その導出方法は次の通...]]></summary>
        <author>
            <name>tirimen</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChatGPTにCtrl+Fを覚えさせるアプローチについて]]></title>
        <id>https://zenn.dev/qwegat/articles/4fb99ad25f3f36</id>
        <link href="https://zenn.dev/qwegat/articles/4fb99ad25f3f36"/>
        <updated>2023-03-20T12:34:20.000Z</updated>
        <summary type="html"><![CDATA[この記事は何


Techカテゴリに含まれてこそいるものの、この記事はあくまで理論の側面でアプローチについて語るメモのようなものです。このアプローチに沿ったプロンプトやプログラムを書いてはいるものの、まだ期待通りの挙動をするとは言い難いです。
なぜ公開したかというと、自分より賢くて素早い誰かが理屈だけを見て代わりにやってくれたりしないか、という期待からです。
ChatGPT Plus(GPT-4 APIではない)とPythonを使います。


 今回作ったプロンプト
そういう前提を踏まえ、まだ完成していないプロンプトを掲載します。
プロンプト(コードブロック記法の関係で```が``に...]]></summary>
        <author>
            <name>qwegat</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FastAPI を Vercel にデプロイする]]></title>
        <id>https://zenn.dev/toppy/articles/04a55453706f9b</id>
        <link href="https://zenn.dev/toppy/articles/04a55453706f9b"/>
        <updated>2023-03-20T10:27:47.000Z</updated>
        <summary type="html"><![CDATA[事前準備

 FastAPI 周りのインストール
このリンク を参考に fastapi, uvicorn をインストールする

 Vercel のアカウントの作成
このリンクから から Vercel のアカウントを作成する

 フォルダの作成
フォルダ構成は以下の通り
<pre>
.
├── main.py
├── requirements.txt
└── vercel.json
</pre>

 main.py

main.py
from fastapi import FastAPI

app = FastAPI()

@app.get("/")
async...]]></summary>
        <author>
            <name>toppy</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonによる時系列クラスタリング(Euclid/DTW,k-shape,PCA/t-SNE)の実装と評価]]></title>
        <id>https://zenn.dev/shungo_a/articles/ffbdb3614867ca</id>
        <link href="https://zenn.dev/shungo_a/articles/ffbdb3614867ca"/>
        <updated>2023-03-20T10:26:42.000Z</updated>
        <summary type="html"><![CDATA[前回記事までのまとめ、および、本記事の目的
多品種少量生産下における需要予測手法の確立に向けて、前回記事までは、まず、SARIMA、LSTM、NeuralProphetの3つの時系列解析手法の実装の評価を実施し、Store Item Demand Forecasting Challengeのデータセットにおいて、product 1における2017年の需要予測を実施し、NeuralProphetが良いという結果を得ました。

　次に上記の結果を利用し、予測時間をかけず精度の良い予測をするための手法の考察をしました。その結果、変動要因に類似性がある場合、変動要因の除去を除いた定常性のある...]]></summary>
        <author>
            <name>S.A</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[データ構造：連結リストのクラスをPythonで実装してみた]]></title>
        <id>https://zenn.dev/yutabeee/articles/afa3ee18a858f9</id>
        <link href="https://zenn.dev/yutabeee/articles/afa3ee18a858f9"/>
        <updated>2023-03-20T06:39:20.000Z</updated>
        <summary type="html"><![CDATA[フローチャート


 UML
https://zenn.dev/yutabeee/articles/45b13c7ed9f714

 実装

LinkedList.py
class LinkedList:
    """データとポインタを含む線形リストのクラス"""

    def __init__(self, max_size=5):
        """初期化メソッド

        Args:
            max_size (int, optional): リストの最大サイズ. Defaults to 5.
        """
        self.m...]]></summary>
        <author>
            <name>yutabeeee</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[UMLにおけるアクセス修飾子の表現方法]]></title>
        <id>https://zenn.dev/yutabeee/articles/45b13c7ed9f714</id>
        <link href="https://zenn.dev/yutabeee/articles/45b13c7ed9f714"/>
        <updated>2023-03-20T06:27:33.000Z</updated>
        <summary type="html"><![CDATA[UML図とアクセス修飾子について
UML図は、ソフトウェアの設計や構造を視覚化するために使用される一般的な表記法です。クラス図はUMLの一部であり、クラス間の関係やクラス内の属性やメソッドを表現します。メソッドや属性の前にある記号（+、-、#、~）は、そのメソッドや属性の可視性（アクセス修飾子）を示しています。

 アクセス修飾子の種類


プラス記号（+）：この記号は、メソッドや属性がpublicであることを示します。つまり、そのメソッドや属性は、クラスの外部からアクセス可能です。


マイナス記号（-）：この記号は、メソッドや属性がprivateであることを示します。つまり、その...]]></summary>
        <author>
            <name>yutabeeee</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-175｜B - Making Triangle]]></title>
        <id>https://zenn.dev/hyperdb/articles/e5e0a27558b9db</id>
        <link href="https://zenn.dev/hyperdb/articles/e5e0a27558b9db"/>
        <updated>2023-03-20T04:41:41.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-175 B - Making Triangle



 提出結果
import itertools


def getInt():
    return int(input())


def getIntList():
    return list(map(int, input().split()))


def main():
    n = getInt()
    l = getIntList()

    c = 0
    a = list(itertools.combinations(l, 3))
    for t in a:
        ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-175｜A - Rainy Season]]></title>
        <id>https://zenn.dev/hyperdb/articles/1a96f8ec4a5f87</id>
        <link href="https://zenn.dev/hyperdb/articles/1a96f8ec4a5f87"/>
        <updated>2023-03-20T04:41:40.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-175 A - Rainy Season



 提出結果
def getString():
    return input()


def main():
    s = getString()

    c = 0
    for i in [3, 2, 1]:
        if 'R' * i in s:
            c = i
            break
    print(c)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[データ構造：リストをPythonで実装してみた]]></title>
        <id>https://zenn.dev/yutabeee/articles/2d140cbe57e848</id>
        <link href="https://zenn.dev/yutabeee/articles/2d140cbe57e848"/>
        <updated>2023-03-19T18:29:34.000Z</updated>
        <summary type="html"><![CDATA[リストの図解
以下は、線型リストを図解したものです。
+------+    +------+    +------+    +------+
| node |    | node |    | node |    | node |
+------+    +------+    +------+    +------+
| data |    | data |    | data |    | data |
+------+    +------+    +------+    +------+
| next |--> | next |--> | next |-->...]]></summary>
        <author>
            <name>yutabeeee</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[データ構造：キューをPythonで実装してみた]]></title>
        <id>https://zenn.dev/yutabeee/articles/1848cb6ebfbbc7</id>
        <link href="https://zenn.dev/yutabeee/articles/1848cb6ebfbbc7"/>
        <updated>2023-03-19T16:51:31.000Z</updated>
        <summary type="html"><![CDATA[キューとは
キューとは、データを一時的に格納するためのデータ構造の一つで、データをFIFO（First In, First Out）の順序で追加・取り出しを行います。つまり、先に追加されたデータが先に取り出されます。
キューは、プログラミングにおいて多くの場面で用いられます。例えば、データの処理が複数のスレッドで行われる場合や、データの送受信が頻繁に行われるネットワークプログラムにおいて、キューはよく使われます。

 バッファとリングバッファについて
バッファ（Buffer）とは、一時的にデータを蓄えるためのメモリ領域を指します。バッファは、入力や出力の速度の違いを調整するために使用...]]></summary>
        <author>
            <name>yutabeeee</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[データ構造：スタックをPythonで実装してみた]]></title>
        <id>https://zenn.dev/yutabeee/articles/876d0139173538</id>
        <link href="https://zenn.dev/yutabeee/articles/876d0139173538"/>
        <updated>2023-03-19T16:08:08.000Z</updated>
        <summary type="html"><![CDATA[スタックとは
スタックとは、データを一時的に保存するためのデータ構造で、最後に追加されたデータが最初に取り出される仕組みを持ちます。主にプログラミングやコンピュータの内部処理に使用され、基本的にはPush（追加）とPop（取り出し）の2つの操作のみが行われます。再帰呼び出しや式の評価など、多くの場面で利用され、正しく理解することでプログラミングの効率が向上します。

 実装

stack.py
class Stack:
    """
    スタックを実現するクラス。
    """

    def __init__(self, max_size: int):
        "...]]></summary>
        <author>
            <name>yutabeeee</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[エラトステネスの篩をPythonで実装してみた]]></title>
        <id>https://zenn.dev/yutabeee/articles/d10984a08da438</id>
        <link href="https://zenn.dev/yutabeee/articles/d10984a08da438"/>
        <updated>2023-03-19T15:03:32.000Z</updated>
        <summary type="html"><![CDATA[エラトステネスの篩とは
エラトステネスの篩は、素数を見つけるためのアルゴリズムの一つです。このアルゴリズムでは、まず探索する範囲内の数字をリストに並べ、最初に2を素数として選びます。次に2の倍数をリストから削除します。その後、リストの先頭の数字を次の素数として選び、その倍数を削除していきます。この処理を繰り返すことで、リストに残った数字が素数となります。
具体的には、以下のような手順で素数を見つけます。

探索する範囲内の数字をリストに並べる。
リストの先頭の数字を素数として選び、その倍数をリストから削除する。
リストの先頭の数字を次の素数として選び、その倍数をリストから削除する。
...]]></summary>
        <author>
            <name>yutabeeee</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenAI Python LibraryでChatGPTを使用するときも、timeoutを設定した方が良いという話]]></title>
        <id>https://zenn.dev/sion_pn/articles/5373a8db399cce</id>
        <link href="https://zenn.dev/sion_pn/articles/5373a8db399cce"/>
        <updated>2023-03-19T13:12:44.000Z</updated>
        <summary type="html"><![CDATA[OpenAI Python Libraryとは
https://github.com/openai/openai-python
PythonでOpenAI APIを叩くためのラッパーです。
pip install openai
でインストールできます。

main.py
import openai

openai.api_key = 'API_KEY'
try:
    completion = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"r...]]></summary>
        <author>
            <name>SiON</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub Actions上のPythonでexit(1)する時、printの標準出力は表示されない]]></title>
        <id>https://zenn.dev/meihei/articles/7c4ec330a8ab82</id>
        <link href="https://zenn.dev/meihei/articles/7c4ec330a8ab82"/>
        <updated>2023-03-19T11:57:28.000Z</updated>
        <summary type="html"><![CDATA[TL;DR
GitHub Actions 上で Python を実行して、入力値のバリデーションが引っかかった場合sys.exit(1)と、その理由を出力しようとした。
エラーが発生した場合は標準エラー出力に出力されるため、print関数にfile=sys.stderrを指定してあげる必要がある。
print(f'Error: {message}', file=sys.stderr)

 詳細
以下のようなPythonコードをGitHub Actions上で実行していた。このコードは、入力されたmakefileが存在しない場合、sys.exit(1)を呼び出してエラー終了するようにな...]]></summary>
        <author>
            <name>meihei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PostgreSQLとFastAPIとStreamlitを使ってTodoリストを作ろう（後編）]]></title>
        <id>https://zenn.dev/tirimen/articles/a5b196a9395925</id>
        <link href="https://zenn.dev/tirimen/articles/a5b196a9395925"/>
        <updated>2023-03-19T11:08:03.000Z</updated>
        <summary type="html"><![CDATA[本記事の目的
最近、Todoリストの作り方を学んだので、知識を深化させるために言語化する。プログラミング初心者の筆者でも作れたので、プログラミング初心者のモチベーションを上げるためにも、できるだけ分かりやすく書いていく。今回は後編のフロントエンド編。前編のバックエンドはコチラ。
https://zenn.dev/tirimen/articles/7b5861c40e8a77

 Streamlitとは
PythonでWebアプリケーションを作成するためのフレームワークの一つ。フロントエンドは正直デザイン性が大事なので、筆者は苦手な部類なのだが、Streamlitは短いプログラムでそれ...]]></summary>
        <author>
            <name>tirimen</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[n!を求めるアルゴリズムで再帰関数について考える]]></title>
        <id>https://zenn.dev/yutabeee/articles/5083365cb79659</id>
        <link href="https://zenn.dev/yutabeee/articles/5083365cb79659"/>
        <updated>2023-03-19T11:05:56.000Z</updated>
        <summary type="html"><![CDATA[階乗とは
階乗とは、ある自然数nについて、1からnまでの全ての自然数をかけ合わせた値のことを指します。nの階乗はn!と表記されます。
例えば、5の階乗は以下のように計算されます。
5! = 5 × 4 × 3 × 2 × 1 = 120

 再帰関数とは
再帰関数は、自分自身を呼び出す関数のことです。再帰関数を使用することで、複雑な問題を単純化することができます

 再帰関数なしの場合のn!を求める関数

factorial.py
def factorial(n):
    result = 1
    for i in range(n, 0, -1):
        result...]]></summary>
        <author>
            <name>yutabeeee</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[素数を求めるアルゴリズムをPythonで書いてみた]]></title>
        <id>https://zenn.dev/yutabeee/articles/e431729b8d69b4</id>
        <link href="https://zenn.dev/yutabeee/articles/e431729b8d69b4"/>
        <updated>2023-03-19T10:37:24.000Z</updated>
        <summary type="html"><![CDATA[この関数は、startとendの2つの引数を受け取り、startからendまでの素数を出力します。
startの引数は省略可能で、省略された場合は自動的に2が設定されます。
def print_primes(end, start=2):
    """
    startからendまでの素数を出力する関数。
    """
    # 素数を探す範囲を指定する
    for number in range(start, end + 1):
        # numberが素数であるかどうかを判定する
        is_prime = is_prime_number(number)...]]></summary>
        <author>
            <name>yutabeeee</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[標準入出力をパイプにリダイレクト (C++, C#, Python)]]></title>
        <id>https://zenn.dev/husty/articles/99fe7c252c8d5f</id>
        <link href="https://zenn.dev/husty/articles/99fe7c252c8d5f"/>
        <updated>2023-03-19T10:00:36.000Z</updated>
        <summary type="html"><![CDATA[共有メモリを使った高速な大規模データのプロセス間通信について「なんかシンプルな方法はないかなあ...」と考えているときに見つけたやり方です。
実装はこちら。
https://github.com/husty530/subprocess
基本的な考え方はパイプ通信です。これはマルチプロセスの実装で一般的に使われるものです。
プロセスは親子の関係が必要です。今回はC++/C#が親プロセスとなり，子プロセスのPythonを呼び出し通信します。
さらに，子プロセスの実装をシンプルにするため親プロセスでは子プロセスの起動時に，子プロセスの標準入出力を親のパイプに繋ぎかえます(リダイレクト)。
これ...]]></summary>
        <author>
            <name>Takumi Yamashita</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PostgreSQLとFastAPIとStreamlitを使ってTodoリストを作ろう（前編）]]></title>
        <id>https://zenn.dev/tirimen/articles/7b5861c40e8a77</id>
        <link href="https://zenn.dev/tirimen/articles/7b5861c40e8a77"/>
        <updated>2023-03-19T09:43:45.000Z</updated>
        <summary type="html"><![CDATA[本記事の目的
最近、Todoリストの作り方を学んだので、知識を深化させるために言語化する。プログラミング初心者の筆者でも作れたので、プログラミング初心者のモチベーションを上げるためにも、できるだけ分かりやすく書いていく。

 PostgreSQLとは
リレーショナルデータベース管理システムの一つ。正直、MySQLやOracle Databaseでも良いが、初心者の自分にとっては、PostgreSQL用のGUI管理ツールのpgAdmin4が使いやすいので、こちらを採用。インストール方法や操作方法については下記の記事を参考にしてほしい。
https://postgresweb.com/i...]]></summary>
        <author>
            <name>tirimen</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[iFacialMocap Puppeteerの通信がWindowsファイアウォールにブロックされる問題の解決方法]]></title>
        <id>https://zenn.dev/v22uta/articles/6860f779199aad</id>
        <link href="https://zenn.dev/v22uta/articles/6860f779199aad"/>
        <updated>2023-03-19T09:33:04.000Z</updated>
        <summary type="html"><![CDATA[iFacialMocap Puppeteerは、人物の動きをリアルタイムでキャプチャし、アバターに反映させることができるソフトウェアです。しかし、このソフトウェアを使用している際に、Windowsファイアウォールによって通信がブロックされてしまい、表情が動かずに固まってしまう問題が発生することがあります。
この問題を解決するためには、以下の手順を行います。

 手順

Windowsのスタートメニューを開き、検索欄に「Windows ファイアウォール」と入力します。
「Windows ファイアウォールによるアプリケーションの許可」を選択します。
「変更の設定」を選択します。この操作には管...]]></summary>
        <author>
            <name>ナツメグ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[1からnまで加算するアルゴリズムを用いて効率の良いプログラムについて考える]]></title>
        <id>https://zenn.dev/yutabeee/articles/3fa8bdedd07e57</id>
        <link href="https://zenn.dev/yutabeee/articles/3fa8bdedd07e57"/>
        <updated>2023-03-19T09:32:01.000Z</updated>
        <summary type="html"><![CDATA[Pythonにおいて、1からnまでの整数を足し合わせる関数を作成することができます。今回は、複数の方法を用いてこの問題を解いていきます。

 方法1：forループを用いた方法
最も基本的な方法として、forループを用いて1からnまでの整数を順に足し合わせていく方法があります。以下がそのコードです。

sum1.py
def sum1(n):
    result = 0
    for i in range(1, n+1):
        result += i
    return result

このコードでは、1からnまでの整数を順にresultに加算していくため、nに比例して処...]]></summary>
        <author>
            <name>yutabeeee</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【自分用】Pythonで画像のExifデータを削除する]]></title>
        <id>https://zenn.dev/reds/articles/2580aa9d2e33ae</id>
        <link href="https://zenn.dev/reds/articles/2580aa9d2e33ae"/>
        <updated>2023-03-19T08:08:00.000Z</updated>
        <summary type="html"><![CDATA[概要
PILを使って画像のExifデータを削除を実装をする時のためのメモ。（Pythonど素人）

 Exif情報が存在する可能性のあるmimeタイプ

image/jpeg
image/tiff
image/heif
image/heic
image/webp
などなど


 サンプルコード
# 画像のexif情報を削除する
from PIL import Image

def remove_exif_data(input_path, output_path):
    with Image.open(input_path) as image:
        if not ima...]]></summary>
        <author>
            <name>ゆーとおじさん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonの統合開発環境IDLEの利用方法]]></title>
        <id>https://zenn.dev/yutabeee/articles/b25f7a063ecd87</id>
        <link href="https://zenn.dev/yutabeee/articles/b25f7a063ecd87"/>
        <updated>2023-03-19T07:39:49.000Z</updated>
        <summary type="html"><![CDATA[Pythonの統合開発環境であるIDLEは、Python標準ライブラリに含まれており、Pythonの開発やデバッグに役立ちます。以下に、IDLEの基本的な使い方をまとめます。

 1. IDLEの起動
IDLEは、Pythonをインストールすると一緒にインストールされます。Mac OS Xであれば、アプリケーションフォルダ内にある「Python 3.x」フォルダを開き、「IDLE」をクリックして起動します。ターミナルからは、idle3と入力すれば起動できます。

 2. エディタの起動
IDLEには、Pythonスクリプトを編集するためのエディタが用意されています。エディタを起動するには...]]></summary>
        <author>
            <name>yutabeeee</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-174｜A - Air Conditioner]]></title>
        <id>https://zenn.dev/hyperdb/articles/e3776a0af11078</id>
        <link href="https://zenn.dev/hyperdb/articles/e3776a0af11078"/>
        <updated>2023-03-19T06:35:23.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-174 A - Air Conditioner



 提出結果
def getInt():
    return int(input())


def main():
    x = getInt()

    print('Yes' if x >= 30 else 'No')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-173｜B - Judge Status Summary]]></title>
        <id>https://zenn.dev/hyperdb/articles/62d06ceeb45e25</id>
        <link href="https://zenn.dev/hyperdb/articles/62d06ceeb45e25"/>
        <updated>2023-03-19T06:35:22.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-173 B - Judge Status Summary



 提出結果
def getInt():
    return int(input())


def getStringRow(N):
    return [input() for _ in range(N)]


def main():
    n = getInt()
    s = getStringRow(n)

    a = {'AC': 0, 'WA': 0, 'TLE': 0, 'RE': 0}

    for r in s:
        a[r] += 1

    for...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-173｜A - Payment]]></title>
        <id>https://zenn.dev/hyperdb/articles/5cc84727ea7319</id>
        <link href="https://zenn.dev/hyperdb/articles/5cc84727ea7319"/>
        <updated>2023-03-19T06:35:22.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-173 A - Payment



 提出結果
def getInt():
    return int(input())


def main():
    n = getInt()

    m = n % 1000

    print(0 if m == 0 else 1000 - m)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-174｜B - Distance]]></title>
        <id>https://zenn.dev/hyperdb/articles/487d0d5b6c476c</id>
        <link href="https://zenn.dev/hyperdb/articles/487d0d5b6c476c"/>
        <updated>2023-03-19T06:35:21.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-174 B - Distance



 提出結果
def getIntMap():
    return map(int, input().split())


def getIntListRow(N):
    return [list(map(int, input().split())) for _ in range(N)]


def main():
    n, d = getIntMap()
    l = getIntListRow(n)

    d = d ** 2

    c = 0
    for x, y in l:
        ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonでAnkiの拡張機能を作ろう！]]></title>
        <id>https://zenn.dev/tinyowl/articles/941abcf2e04262</id>
        <link href="https://zenn.dev/tinyowl/articles/941abcf2e04262"/>
        <updated>2023-03-19T06:03:53.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Ankiという暗記帳アプリをご存知でしょうか。
Ankiを一言で表すと、「多機能で自由にカスタマイズ可能な暗記帳アプリ」です。
僕はこのアプリで英単語などを学習しているのですが、英単語ノートをデッキに追加する作業が面倒で、どうにか楽できないかと悩んでいました。
そこでPythonを使って簡単に英単語ノートを追加できる拡張機能を作ろうと思い、本記事を作成しました。

 参考にしたサイト

Anki公式ドキュメント(日本語版)
Ankiのソースコード(Github)


 環境

MacOS
Python 3.9
Anki 2.1.60


 拡張機能の基本
開発する際の型サポ...]]></summary>
        <author>
            <name>Tiny Owl</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【ChatGPT+Python】GPT-4 API を爆速レビュー]]></title>
        <id>https://zenn.dev/ekusiadadus/articles/youtube_chatgpt_4_api</id>
        <link href="https://zenn.dev/ekusiadadus/articles/youtube_chatgpt_4_api"/>
        <updated>2023-03-18T20:25:43.000Z</updated>
        <summary type="html"><![CDATA[【ChatGPT+Python】GPT-4 API を爆速レビュー
https://www.youtube.com/watch?v=MZAiNbJxatM
API 部分
https://github.com/ekusiadadus/youtube-gpt-4-api
GPT-4 に作ってもらった Discord BOT
https://github.com/ekusiadadus/youtube-discord-gpt-4-bot

 GPT-4 API が解放された！

2023/03/18 2:29 に OpenAI からメールが来ていて、GPT-4 API が解放されました！
...]]></summary>
        <author>
            <name>ekusiadadus</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[python-twitter-v2を使用するときは、timeoutを設定した方が良いという話]]></title>
        <id>https://zenn.dev/sion_pn/articles/07c12d1ef2fa7f</id>
        <link href="https://zenn.dev/sion_pn/articles/07c12d1ef2fa7f"/>
        <updated>2023-03-18T15:02:30.000Z</updated>
        <summary type="html"><![CDATA[python-twitter-v2とは
https://github.com/sns-sdks/python-twitter
pythonでTwitter API V2を叩くためのラッパーです。

zsh
pip install python-twitter-v2

でインストールできます。

main.py
from pytwitter import Api
api = Api(
    consumer_key = 'consumer_key',
    consumer_secret = 'consumer_secret',
    access_token = 'access...]]></summary>
        <author>
            <name>SiON</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PaSoRIとFlaskを使ってICカードで部活の入退室管理をする]]></title>
        <id>https://zenn.dev/takapc/articles/d69a9bd7a19bb1</id>
        <link href="https://zenn.dev/takapc/articles/d69a9bd7a19bb1"/>
        <updated>2023-03-18T14:43:00.000Z</updated>
        <summary type="html"><![CDATA[こんにちは。Takaと申します。普段は大阪の自称進学校でプログラミングを学んでいます。
昔、似たようなシステムを作ったのですが利便性が無さすぎて採用されなかったのでリベンジです。
Pythonを使って本格的にプロジェクトをするのは初めてなので大目に見てください。

 PaSoRiって何やねん
PaSoRiとはソニー株式会社が提供する非接触ICカードリーダーです。FeliCa規格のカードなら何でも読み込めます。僕が700クレジットを溶かしたAimeのカードももちろん読み込めます。ちなみに日本橋で300円で売ってたそうです。動いたからヨシ！

 環境

Python 3.10.8
Flask...]]></summary>
        <author>
            <name>takapc</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-172｜B - Minor Change]]></title>
        <id>https://zenn.dev/hyperdb/articles/ca941b64e0f231</id>
        <link href="https://zenn.dev/hyperdb/articles/ca941b64e0f231"/>
        <updated>2023-03-18T06:21:57.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-172 B - Minor Change



 提出結果
def getString():
    return input()


def main():
    s = list(getString())
    t = list(getString())

    c = 0
    for i in range(len(s)):
        if s[i] != t[i]:
            c += 1
    print(c)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-172｜A - Calc]]></title>
        <id>https://zenn.dev/hyperdb/articles/a309b8050ccd11</id>
        <link href="https://zenn.dev/hyperdb/articles/a309b8050ccd11"/>
        <updated>2023-03-18T06:21:57.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-172 A - Calc



 提出結果
def getInt():
    return int(input())


def main():
    a = getInt()

    print(a + a ** 2 + a ** 3)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-171｜A - αlphabet]]></title>
        <id>https://zenn.dev/hyperdb/articles/605116edbb6374</id>
        <link href="https://zenn.dev/hyperdb/articles/605116edbb6374"/>
        <updated>2023-03-18T06:21:56.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-171 A - αlphabet



 提出結果
def getString():
    return input()


def main():
    s = getString()

    print('a' if ord(s) >= ord('a') else 'A')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-171｜B - Mix Juice]]></title>
        <id>https://zenn.dev/hyperdb/articles/56887623ee0823</id>
        <link href="https://zenn.dev/hyperdb/articles/56887623ee0823"/>
        <updated>2023-03-18T06:21:56.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-171 B - Mix Juice



 提出結果
def getIntMap():
    return map(int, input().split())


def getIntList():
    return list(map(int, input().split()))


def main():
    n, m = getIntMap()
    p = getIntList()

    p.sort()

    s = 0
    for i in range(m):
        s += p[i]
    print(s)


...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker + Flask 環境構築]]></title>
        <id>https://zenn.dev/tatausuru/articles/35e123034b98ba</id>
        <link href="https://zenn.dev/tatausuru/articles/35e123034b98ba"/>
        <updated>2023-03-18T05:20:24.000Z</updated>
        <summary type="html"><![CDATA[大前提
Docker desktopがinstallされていること！！
そして起動してあること！
versionを最新に！！(この記事は2023/3/18現在)

 ①ファイル/フォルダの作成
・docker-compose.yml
・Dockerfile
・ /app/app.py
・ /app/requirements.txt
この4つのファイル/フォルダを作成します。

 ②Dockerfile
Dockerfileに下記コードを記載します。
# pythonのバージョンは任意
FROM python:3.8

WORKDIR /usr/src/app
ENV FLASK_AP...]]></summary>
        <author>
            <name>tatatsuru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TEI/XMLファイルからrespStmtのnameの値を抽出する方法（GPT-4による解説）]]></title>
        <id>https://zenn.dev/nakamura196/articles/11daec98dadd54</id>
        <link href="https://zenn.dev/nakamura196/articles/11daec98dadd54"/>
        <updated>2023-03-17T13:09:55.000Z</updated>
        <summary type="html"><![CDATA[TEI/XMLファイルからrespStmtのnameの値を抽出する方法: PythonでBeautifulSoupとElementTreeを使ったアプローチ
この記事では、PythonのBeautifulSoupとElementTreeを使って、TEI/XMLファイルからrespStmtのnameの値を抽出する方法を紹介します。

 方法1: ElementTreeを使う
まず、Pythonの標準ライブラリであるxml.etree.ElementTreeを使って、respStmtのnameの値を抽出します。
import xml.etree.ElementTree as ET

# ...]]></summary>
        <author>
            <name>nakamura196</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-170｜A - Five Variables]]></title>
        <id>https://zenn.dev/hyperdb/articles/62d6fa54badf5a</id>
        <link href="https://zenn.dev/hyperdb/articles/62d6fa54badf5a"/>
        <updated>2023-03-17T06:59:14.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-170 A - Five Variables



 提出結果
def getIntList():
    return list(map(int, input().split()))


def main():
    x = getIntList()

    print(x.index(0) + 1)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-170｜B - Crane and Turtle]]></title>
        <id>https://zenn.dev/hyperdb/articles/241ca99de4372b</id>
        <link href="https://zenn.dev/hyperdb/articles/241ca99de4372b"/>
        <updated>2023-03-17T06:59:14.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-170 B - Crane and Turtle



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    x, y = getIntMap()

    # x = a + b
    # y = 2a + 4b
    a = (4 * x - y) // 2
    b = x - a

    if y % 2 == 1:
        print('No')
    elif a >= 0 and b >= 0:
        pr...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Amplifyで作成したLambda(Python)で発生するinvalid command 'egg_info'エラー解決法]]></title>
        <id>https://zenn.dev/zuma_lab/articles/troubleshooting-pipenv-install-envalid-egg_info</id>
        <link href="https://zenn.dev/zuma_lab/articles/troubleshooting-pipenv-install-envalid-egg_info"/>
        <updated>2023-03-17T03:30:56.000Z</updated>
        <summary type="html"><![CDATA[amplify add function コマンドで作成した Lambda (Python) で amplify push コマンド実行時 invalid command 'egg_info' エラーが発生したので、そのトラブルシューティングです。
Python 初心者な為、2 時間以上試行錯誤したので覚書として残しておきます。

 環境

macOS Ventura 13.1（22C65）
Amplify 10.8.1
pipenv version 2022.12.19
virtualenv 20.17.1


 再現方法

pipenv で asyncio インストール
amplif...]]></summary>
        <author>
            <name>ZUMA</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Amplifyで作成したLambda(Python)でasyncioインストール後に発生するUserCodeSyntaxError解決法]]></title>
        <id>https://zenn.dev/zuma_lab/articles/troubleshooting-pipenv-install-asyncio-error</id>
        <link href="https://zenn.dev/zuma_lab/articles/troubleshooting-pipenv-install-asyncio-error"/>
        <updated>2023-03-17T03:30:56.000Z</updated>
        <summary type="html"><![CDATA[amplify add function コマンドで作成した Lambda (Python) で amplify push コマンド実行時 UserCodeSyntaxError が発生したので、そのトラブルシューティングです。

 環境

macOS Ventura 13.1（22C65）
Amplify 10.8.1
pipenv version 2022.12.19
virtualenv 20.17.1


 再現方法

pipenv で asyncio インストール
amplify push コマンド実行
内部的に pipenv install 実行
pipenv install...]]></summary>
        <author>
            <name>ZUMA</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SingularityでPyenv&Poetry環境構築]]></title>
        <id>https://zenn.dev/msn/articles/1992216802cec5</id>
        <link href="https://zenn.dev/msn/articles/1992216802cec5"/>
        <updated>2023-03-17T02:40:28.000Z</updated>
        <summary type="html"><![CDATA[SingularityでPoetryが使いたい
これまでSingualrity上のPythonパッケージ管理はpipで行っていました．
最近，以下の記事をきっかけにPoetryの存在を知り，調べていくうちに虜になりました．
Python環境構築[Pyenv+Poetry]｜研究のためのPython開発環境
今後，開発したプログラムの公開も見据え，環境の再現性を担保するためにもPoetryを導入したいと思います．
また副次的な産物として，Singularityでpipを使う場合，新しいパッケージの追加はdefファイルを再記述してbuildし直す必要がありましたが，Poetryではイメー...]]></summary>
        <author>
            <name>msn</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WSL2 で Python の出力が何も出てこない]]></title>
        <id>https://zenn.dev/kazuemon/articles/7dd7c0e5078b25</id>
        <link href="https://zenn.dev/kazuemon/articles/7dd7c0e5078b25"/>
        <updated>2023-03-16T14:04:45.000Z</updated>
        <summary type="html"><![CDATA[困りごと
WSL2 上で python3 とか pip とかを打っても何も出てこない...

 対処法
unset DISPLAY を実行する
https://stackoverflow.com/questions/69795744/pip3-list-not-showing-any-output-on-terminal-when-using-wsl]]></summary>
        <author>
            <name>かずえもん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Coverage.py】Pythonでカバレッジを取得する]]></title>
        <id>https://zenn.dev/msh0x01/articles/0bb52d73f2f089</id>
        <link href="https://zenn.dev/msh0x01/articles/0bb52d73f2f089"/>
        <updated>2023-03-16T13:33:19.000Z</updated>
        <summary type="html"><![CDATA[訳ありで手動でカバレッジをとりたい人向けです。

 Coverage.pyのインストール
Pythonでカバレッジを取得するなら、Coverage.pyを使いましょう。pip install coverageでインストールすると使えるようになります。
>pip install coverage

 テストするプログラム
テストするプログラムにtest.pyという、以下のPythonファイルがあるとします。
import sys
 
if len(sys.argv) > 1 and sys.argv[1] == "1":
    print("a")
else:
    pri...]]></summary>
        <author>
            <name>m(s)h</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【開発報告】就活生、転職活動中の方をご支援する企業検索アプリを作成しました！]]></title>
        <id>https://zenn.dev/joanofarc/articles/serendipity-development-report</id>
        <link href="https://zenn.dev/joanofarc/articles/serendipity-development-report"/>
        <updated>2023-03-16T09:33:23.000Z</updated>
        <summary type="html"><![CDATA[本記事について
この度、就活生、転職活動中の方に利用して頂くことを目的とした企業検索Webアプリケーションである Serendipity をリリース致しました。URLはこちらになります。

私は本格的な Web アプリケーション開発は初めて取り組んだため、色々と至らないところがたくさんあるかと思いますが、「データから価値を生み出したい」という一心で作りました。もしご関心があれば、この記事を読んでいただいたり、アプリケーションを実際に使っていただけたりするととても嬉しいです。
本記事では、素人ながらに構築したアプリケーションについて概要をご報告させていただければと思います。どうぞよろし...]]></summary>
        <author>
            <name>JoanOfArc</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[地理情報をPythonで扱う]]></title>
        <id>https://zenn.dev/sre_holdings/articles/4ff923a73e7e5a</id>
        <link href="https://zenn.dev/sre_holdings/articles/4ff923a73e7e5a"/>
        <updated>2023-03-16T05:39:48.000Z</updated>
        <summary type="html"><![CDATA[SREホールディングス株式会社でデータサイエンティストをしている岡林です。
当社ではAI査定をはじめとする不動産系のプロダクト、AIの開発を行っています。
不動産情報を扱うにあたって、切っても切り離せないのがGIS（地理情報システム）です。
今回は国土交通省の国土数値情報で公開されているデータを使用して、PythonでGISを扱う手順についてご紹介します。

 前提

使用するライブラリとバージョン

Python 3.11.0
geopandas 0.12.2
fiona 1.8.22
shapely 2.0.1
folium 0.14.0
numpy 1.24.2



※fiona...]]></summary>
        <author>
            <name>okaken</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-169｜A - Multiplication 1]]></title>
        <id>https://zenn.dev/hyperdb/articles/b24948580797b5</id>
        <link href="https://zenn.dev/hyperdb/articles/b24948580797b5"/>
        <updated>2023-03-16T05:18:18.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-169 A - Multiplication 1



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    a, b = getIntMap()

    print(a * b)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-169｜B - Multiplication 2]]></title>
        <id>https://zenn.dev/hyperdb/articles/10273a004a8937</id>
        <link href="https://zenn.dev/hyperdb/articles/10273a004a8937"/>
        <updated>2023-03-16T05:18:17.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-169 B - Multiplication 2



 提出結果
def getInt():
    return int(input())


def getIntList():
    return list(map(int, input().split()))


def main():
    n = getInt()
    a = getIntList()

    if 0 in a:
        print(0)
    else:
        m = 10**18
        c = a[0]
        for i in ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[M1でgrpcioがインストールできない]]></title>
        <id>https://zenn.dev/banbiossa/articles/24b4ded68c4ea4</id>
        <link href="https://zenn.dev/banbiossa/articles/24b4ded68c4ea4"/>
        <updated>2023-03-16T03:36:32.000Z</updated>
        <summary type="html"><![CDATA[google系のSDKを使うときにgrpcioが入ってくるが、buildずみのwhlはM1だと正常に動かない。（googleがM1用のwhlを作ってくれないのが原因だとどこかで見た）
いろんな人がいろんなエラーで苦しんでいるのが見える（https://github.com/grpc/grpc/issues/31737）
大体poetryで管理しているのでいい感じのoverrideが今の所なく、poetry install の後に次をやっている。
export VER="1.51.3"
pip3 install --no-cache-dir  --force-reinstall -Iv "...]]></summary>
        <author>
            <name>banbiossa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PyTorchとU-Netで作る領域分割モデル]]></title>
        <id>https://zenn.dev/aidemy/articles/a43ebe82dfbb8b</id>
        <link href="https://zenn.dev/aidemy/articles/a43ebe82dfbb8b"/>
        <updated>2023-03-16T02:40:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは。機械学習を完全に理解した中沢(@shnakazawa_ja)です[1][2]。
世の中にはテーブルデータを対象とした機械学習モデルのチュートリアルは多くありますが、画像に対するものは少なく、コードまで提供されているものは更に少なくなります。そこで、本シリーズでは基本的なコンピュータビジョンモデリングの手法をPythonで実装していきます。


前々回：PyTorchとEfficientNetV2で作る画像分類モデル

前回：PyTorchとDetection Transformer (DETR)で作る物体認識モデル



今回はSemantic segmenta...]]></summary>
        <author>
            <name>Shingo Nakazawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[システムのPythonと共存させる形でのconda(Mambaforge)の導入方法]]></title>
        <id>https://zenn.dev/junkor/articles/eb42a0aeb231e3</id>
        <link href="https://zenn.dev/junkor/articles/eb42a0aeb231e3"/>
        <updated>2023-03-15T16:48:32.000Z</updated>
        <summary type="html"><![CDATA[個人的な備忘録。
Pythonの環境構築方法は無限(?)にあるので、あくまでもいちサンプルとして。
あと前提としてLinux上での環境構築を想定しています。

 動機・目的
condaは何だかんだいって便利である。
パッケージマネージャーとしてpip並みに貧弱で微妙ではあるが、
ほぼほぼ任意のバージョンのPythonをインストール出来るし、
pipではインストール出来ない依存ライブラリ（なんならJavaやnodejsなどまで）も一緒にインストール出来るので、（ディスク容量の消費と引き換えに）どの環境でもちゃんと動作してくれる移植性・再現性の高い環境構築が可能である。
ライブラリによっては...]]></summary>
        <author>
            <name>7e+8</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tableauで計算フィールドの複数ポップアップを実現する]]></title>
        <id>https://zenn.dev/t_katsumoto/articles/2407ae38fa01cb</id>
        <link href="https://zenn.dev/t_katsumoto/articles/2407ae38fa01cb"/>
        <updated>2023-03-15T16:45:19.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Tableauでは計算フィールドを一度に一つしか表示できない。

Tableau経験者ほどその仕様に慣れ過ぎて、特に違和感を感じない方も多いかもしれない。
だが、恐らく誰もが最低一度は（人によっては数えきれない程！）
「なんで一つしか表示できないんだ！並べて見たいのに！」
と思った事があると思う。
実際周りの人にも聞いてみたが、やはりみんな同じ感情を抱いているようだった。
次はコミュニティの ideas を見てみる。
・・・複数ウィンドウを実現してほしいという趣旨の要望で溢れかえっているではないか！
私がざっと検索した限りではこれだけある。
Multiple Windows...]]></summary>
        <author>
            <name>Katsumoto Takashi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[nbdevを使用する際の備忘録]]></title>
        <id>https://zenn.dev/nakamura196/articles/e208637977e963</id>
        <link href="https://zenn.dev/nakamura196/articles/e208637977e963"/>
        <updated>2023-03-15T12:34:58.000Z</updated>
        <summary type="html"><![CDATA[概要
Pythonでパッケージを作成する際、nbdevを使用しています。
https://nbdev.fast.ai/
nbdevは以下のように説明されています。

Write, test, document, and distribute software packages and technical articles — all in one place, your notebook.

（機械翻訳） ソフトウェア パッケージや技術記事の作成、テスト、文書化、配布をすべて 1 か所のノートブックで行います。
本記事では、nbdevを使用する際の備忘録です。

 インストール
以下...]]></summary>
        <author>
            <name>nakamura196</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【図解】統計学の3つの代表値（平均値/中央値/最頻値）]]></title>
        <id>https://zenn.dev/nekoallergy/articles/stat-basic-central-tendency</id>
        <link href="https://zenn.dev/nekoallergy/articles/stat-basic-central-tendency"/>
        <updated>2023-03-15T10:04:22.000Z</updated>
        <summary type="html"><![CDATA[はじめに

代表値って？
近年、AI技術の発展に伴って、統計学の重要性が再注目されています。
今回は、統計学の基本である「代表値（だいひょうち）」について紹介します。代表値は、統計学ではとても重要で基本的な考え方です。
データを端的に表すための代表値について、基本を押さえましょう。

DeepLearning の基礎を本にまとめています。手に取って頂けるととても喜びます ↓
https://zenn.dev/nekoallergy/books/904df952389317

皆さんの理解が一歩でも進むと嬉しいです。


Created by NekoAllergy

 代表値って？
...]]></summary>
        <author>
            <name>NekoAllergy</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【検証不十分】【lambda編】AWS Boto3 by Pythonで特定タグ未付与のリソース抽出]]></title>
        <id>https://zenn.dev/kangaezaru/articles/caafc545dce041</id>
        <link href="https://zenn.dev/kangaezaru/articles/caafc545dce041"/>
        <updated>2023-03-15T07:54:53.000Z</updated>
        <summary type="html"><![CDATA[1. 本稿の概要

 ◆ ゴール
以下のような機能を満たすPythonスクリプトを作成しました。
こちらはlambda向けです。

LambdaFunctionsで特定タグ(Owner)の付与状況をリスト化
ローカル環境でI/Oが自由なPythonスクリプトとして実行
その抽出結果はCSVカンマ区切り形式でローカルに出力


 ◆ 背景、前提、その他サービスまとめなど
全体論はこちら を参照
※単に見たり付与するだけならタグエディタで見るのが一番楽かとは思います。

 2. 開発

 ◆ 概説
lambdaのID、Ownerタグの一覧を出力します。
とりあえず単体では東京リージ...]]></summary>
        <author>
            <name>kangaezaru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【cloudfront編】AWS Boto3 by Pythonで特定タグ付与状況のリスト抽出]]></title>
        <id>https://zenn.dev/kangaezaru/articles/864f286ac6a386</id>
        <link href="https://zenn.dev/kangaezaru/articles/864f286ac6a386"/>
        <updated>2023-03-15T06:04:14.000Z</updated>
        <summary type="html"><![CDATA[1. 本稿の概要

 ◆ ゴール
以下のような機能を満たすPythonスクリプトを作成しました。
こちらはcloudfront向けです。

CloudFront Distributionsで特定タグ(Owner)の付与状況をリスト化
ローカル環境でI/Oが自由なPythonスクリプトとして実行
その抽出結果はCSVカンマ区切り形式でローカルに出力


 ◆ 背景、前提、その他サービスまとめなど
全体論はこちら を参照
CloudfrontのBotoというかAPIは少々勝手が違うんですかね・・・もっと簡単にできる方法あれば教えてください
※単にタグを棚卸したり付与するだけならタグ...]]></summary>
        <author>
            <name>kangaezaru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-168｜B - ... (Triple Dots)]]></title>
        <id>https://zenn.dev/hyperdb/articles/8e9a950b9c027b</id>
        <link href="https://zenn.dev/hyperdb/articles/8e9a950b9c027b"/>
        <updated>2023-03-15T05:24:28.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-168 B - ... (Triple Dots)



 提出結果
def getInt():
    return int(input())


def getString():
    return input()


def main():
    k = getInt()
    s = getString()

    print(s[:k] + ('...' if len(s) > k else ''))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-168｜A - ∴ (Therefore)]]></title>
        <id>https://zenn.dev/hyperdb/articles/1ef55012bdb667</id>
        <link href="https://zenn.dev/hyperdb/articles/1ef55012bdb667"/>
        <updated>2023-03-15T05:24:27.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-168 A - ∴ (Therefore)



 提出結果
def getInt():
    return int(input())


def main():
    n = getInt()

    n %= 10

    print('bon' if n == 3 else 'pon' if n in [0, 1, 6, 8] else 'hon')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Open3Dで背景色を変える]]></title>
        <id>https://zenn.dev/fastriver/articles/open3d-change-background</id>
        <link href="https://zenn.dev/fastriver/articles/open3d-change-background"/>
        <updated>2023-03-15T02:20:30.000Z</updated>
        <summary type="html"><![CDATA[Open3DのVisualizer、便利なんですが背景が白いので目に刺さりがち...。背景色を変更して目を保護したいと思います。

 通常
import open3d as o3d

bunny = o3d.data.BunnyMesh()
mesh = o3d.io.read_triangle_mesh(bunny.path)
mesh.compute_vertex_normals()

o3d.visualization.draw_geometries([mesh])
open3d.visualization.draw_geometries()でオブジェクトを表示するのは上記のような...]]></summary>
        <author>
            <name>fastriver</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【まとめ編】AWS Boto3 by Pythonで特定タグ未付与のリソース抽出]]></title>
        <id>https://zenn.dev/kangaezaru/articles/d75970018b8fa8</id>
        <link href="https://zenn.dev/kangaezaru/articles/d75970018b8fa8"/>
        <updated>2023-03-15T01:10:37.000Z</updated>
        <summary type="html"><![CDATA[1. 本稿の概要

 ◆ ゴール
以下のような機能を満たすPythonスクリプトを作成しました。

EC2インスタンスで特定タグが付いていないリソースをフィルタリング
ローカル環境でI/Oが自由なPythonスクリプトとして実行
その抽出結果はCSVカンマ区切り形式でローカルに出力

それを(弊社の中の)各主要サービスにおいて作成し、連結・自動化して一括自動出力まで目指す

 ◆ 背景
百人規模のグループのAWSで不特定多数のユーザによりリソースが作られ、ガバナンスも効いていない世界に迷い込んだ。用途不明のサーバが跋扈しコストと責任の追跡ができていない世紀末である。とりあえずA...]]></summary>
        <author>
            <name>kangaezaru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【EC2編】AWS Boto3 by Pythonで特定タグ未付与のリソース抽出]]></title>
        <id>https://zenn.dev/kangaezaru/articles/aba89a266df2f4</id>
        <link href="https://zenn.dev/kangaezaru/articles/aba89a266df2f4"/>
        <updated>2023-03-15T01:01:33.000Z</updated>
        <summary type="html"><![CDATA[1. 本稿の概要

 ◆ ゴール
以下のような機能を満たすPythonスクリプトを作成しました。
こちらはEC2インスタンス向けです。

EC2インスタンスで特定タグが付いていないリソースをフィルタリング
ローカル環境でI/Oが自由なPythonスクリプトとして実行
その抽出結果はCSVカンマ区切り形式でローカルに出力


 ◆ 背景、前提、その他サービスまとめなど
こちら を参照

 2. 開発

 ◆ 概説
今回はEC2のNameタグ、Ownerタグが未付与のリソースの一覧を出力します。
とりあえず単体では東京リージョンのみを対象としています。

 ◆ コード

check...]]></summary>
        <author>
            <name>kangaezaru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Open3Dでグリッドを表示する(LineSet)]]></title>
        <id>https://zenn.dev/fastriver/articles/open3d-display-grid</id>
        <link href="https://zenn.dev/fastriver/articles/open3d-display-grid"/>
        <updated>2023-03-14T15:07:11.000Z</updated>
        <summary type="html"><![CDATA[Open3DのVisualizerでは標準にグリッドを表示する機能がありません。しかしセンサ出力点群などの場合はグリッドを表示できたほうが点群の位置などがわかりやすくなると思うので、自分でグリッドを作ってみます。


例えばVeloViewでは上のようにXY平面上のグリッドが表示される


 Open3Dで線を引く
Open3DのVisualizer上に線を引くのにはgeometry.LineSetを用います。
http://www.open3d.org/docs/release/python_api/open3d.geometry.LineSet.html
import open3d ...]]></summary>
        <author>
            <name>fastriver</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonのSeleniumでInstagramの投稿画像をスクレイピングした]]></title>
        <id>https://zenn.dev/te19oishi/articles/62ddcaadca0849</id>
        <link href="https://zenn.dev/te19oishi/articles/62ddcaadca0849"/>
        <updated>2023-03-14T14:21:35.000Z</updated>
        <summary type="html"><![CDATA[1. 概要
先日地元で行われたハッカソンでインスタグラムの画像をスクレイピングしてURLのリストとして出力したのでメモとして残しておきます。

 2. 環境

MacBook Air(M1)
macOS Ventura version13.1


 3. 結論

 3.1. コード
取得したい画像の枚数が2枚以下ならクリックする必要がないのでより早く短いコードになります。

scraping.py

from time import sleep
from selenium import webdriver
# seleniumが最新版なら必要
#from selenium.webdr...]]></summary>
        <author>
            <name>Oishi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenAI APIを使用したアプリを構築してみた]]></title>
        <id>https://zenn.dev/atsushiambo/articles/0563e7fe72afd3</id>
        <link href="https://zenn.dev/atsushiambo/articles/0563e7fe72afd3"/>
        <updated>2023-03-14T14:16:33.000Z</updated>
        <summary type="html"><![CDATA[OpenAIの公式ホームページにAPIの使用方法が書かれていたので、サンプルアプリと共に構築してみました。

 前提条件

Pythonがインストール済み。インストールしていない人はこちらから。



 アプリのコードを用意する
下記のリポジトリをクローンしてアプリファイルをインストールします。または、公式サイトからzipファイルをダウンロードします。
git clone https://github.com/openai/openai-quickstart-python.git

 APIキーを追加する
クローンしたリポジトリに移動して、新規の.envファイルを作成します。
% cd ...]]></summary>
        <author>
            <name>安保 睦</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[MacでPython3の開発環境を構築する（Command Line Tools for Xcodeによるインストール）]]></title>
        <id>https://zenn.dev/sexy_fujii/articles/f6ffa615d0e018</id>
        <link href="https://zenn.dev/sexy_fujii/articles/f6ffa615d0e018"/>
        <updated>2023-03-14T12:33:27.000Z</updated>
        <summary type="html"><![CDATA[概要
Macで Python3 の開発環境を構築する方法を紹介します。
今回はAppleが提供する Command Line Tools for Xcode をインストールすることで、同梱されているPython3を利用できるようにする方法の紹介です。
簡単かつ短時間で準備を済ませPython3を体験してみたいという方向けの手順です。本格的に開発したいという方にはお勧めしません。

 環境
以下の環境で手順を検証しました。



項目名
内容




機器
MacBook Air (M1, 2020)


OS
macOS Ventura 13.2.1


メモリ
16GB


ストレ...]]></summary>
        <author>
            <name>セクシー藤井</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-167｜B - Easy Linear Programming]]></title>
        <id>https://zenn.dev/hyperdb/articles/68ffd8416d9b78</id>
        <link href="https://zenn.dev/hyperdb/articles/68ffd8416d9b78"/>
        <updated>2023-03-14T05:04:22.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-167 B - Easy Linear Programming



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    a, b, c, k = getIntMap()

    s = 0
    if a >= k or a + b >= k:
        s = a if a <= k else k
    else:
        k -= (a + b)
        s = a - (c if c < k els...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-167｜A - Registration]]></title>
        <id>https://zenn.dev/hyperdb/articles/5c310c5f593eea</id>
        <link href="https://zenn.dev/hyperdb/articles/5c310c5f593eea"/>
        <updated>2023-03-14T05:04:22.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-167 A - Registration



 提出結果
def getString():
    return input()


def main():
    s = getString()
    t = getString()

    print('Yes' if s == t[:-1] else 'No')


if __name__ == "__main__":
    main()
    ```]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PlaylistGPT: ChatGPTにSpotifyの曲でプレイリストを作らせる]]></title>
        <id>https://zenn.dev/qwegat/articles/dced9d104ea0ec</id>
        <link href="https://zenn.dev/qwegat/articles/dced9d104ea0ec"/>
        <updated>2023-03-13T14:38:53.000Z</updated>
        <summary type="html"><![CDATA[初手宣伝
https://qwegat-chatgptplaylist-main-gyigsk.streamlit.app/
ここで試せます。
今回、いろいろなサービス（StreamLit、Spotify API、OpenAI API）を縦断してシステムを構築したのですが、そのすべてに1ドルも払っていないので、おそらく試せるのは数日以内でしょう。裏返せば、試すなら今しかないということです。
さあ。
https://qwegat-chatgptplaylist-main-gyigsk.streamlit.app/

 基本的な理屈
もう寝たいので、いつもの記事のように丁寧な構成はしませ...]]></summary>
        <author>
            <name>qwegat</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Anaconda】conda createでCondaSSLErrorが発生した際の解決策]]></title>
        <id>https://zenn.dev/yuk6ra/articles/9c24eb70211c2a</id>
        <link href="https://zenn.dev/yuk6ra/articles/9c24eb70211c2a"/>
        <updated>2023-03-13T11:43:51.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Anacondaを弄っていたら、condaで仮想環境を構築できなくなってしまいました。CondaSSLErrorというエラーが発生したようで、OpenSSLを導入することで解決しました。

 前提知識

Wndows 10 Home
Powershell
Anaconda
conda 22.9.0


terminal
PS C:\Users\username> conda -V
conda 22.9.0


 エラー: CondaSSLError

terminal
PS C:\Users\username> conda create -n test pyth...]]></summary>
        <author>
            <name>yuk6ra</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ARC.158 by Iyaa]]></title>
        <id>https://zenn.dev/iyamada/articles/8e00792314d74b</id>
        <link href="https://zenn.dev/iyamada/articles/8e00792314d74b"/>
        <updated>2023-03-13T10:14:23.000Z</updated>
        <summary type="html"><![CDATA[概要

 コンテスト
AtCoder Regular Contest 158

 結果
Iyamada
1613 位
300 点 (1)
110 分 28 秒
A問題
300点(1)
105分28秒
B問題
0点(1)
ー
C問題以降提出なし


 本題

 感想

　今回のARCはかなり苦戦した。
A問題に時間のほぼすべてを使い、B問題はヤケクソ全探査を提出したのみであった。
　今回のARCはリアル世界の問題の最適解を求めるものではなく、卓上の数字のみの計算という問題を集めたようなものであった。


 A問題 +3 +5 +7



問題
整数 x_1 , x_2 , x_3が与え...]]></summary>
        <author>
            <name>いやぁ...</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[俺のChatGPTがこんなに賢いわけがない。ベクトル検索エンジン]]></title>
        <id>https://zenn.dev/tfutada/articles/a90e2c83b50356</id>
        <link href="https://zenn.dev/tfutada/articles/a90e2c83b50356"/>
        <updated>2023-03-13T07:23:46.000Z</updated>
        <summary type="html"><![CDATA[はじめに
ChatGPTの問題に、2021年までのデータでしか学習しておらず、最新の情報に答えることができないことがあります。例えば昨日の東京の天気を教えてと、小学生でも分かる質問にすら答えることができません。また、インターネットに公開していない情報、例えば企業の内部情報や個人のプライベートな情報にも無力です。人間もそうですが、人工知能と言えど知らないことは知らないのです。
その問題の解決策の一つにファインチューンがあります。自社データを持ち込み学習モデルの微調整を行う方法です。つい先日、Azure版のgpt-3.5 turboのファインチューンがサポートされました。ただこの方法はお...]]></summary>
        <author>
            <name>TF</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【超簡単手順】低スペックローカルPCで大規模言語モデル「LLaMA」を動かす！]]></title>
        <id>https://zenn.dev/ozushi/articles/a9ee4ac9c574ab</id>
        <link href="https://zenn.dev/ozushi/articles/a9ee4ac9c574ab"/>
        <updated>2023-03-13T06:19:13.000Z</updated>
        <summary type="html"><![CDATA[ある日、Twitterを巡回していると

え...マジで？となりました。自分の専属AIを作りたい！と思い立ち、実際に動かしてみました。

 目標
このようにローカルPC上でLLaMAとチャットできるようになります。

ただ、自分が使ったモデルは7Bモデルと言って、パラメータがあまり大きくない＝あまり賢くないモデルだったので出力は変な感じになっています笑
(明らかにネットの会話を推論に引っ張ってきてますね...)
なので、今回はとりあえず動かしてみたい人向けです！精度などは気にせずお試しください。
ちなみに、自分はM1 MacBookAir(8Gメモリ)で動きました！信じられないぐらい遅い...]]></summary>
        <author>
            <name>ズシ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-166｜B - Trick or Treat]]></title>
        <id>https://zenn.dev/hyperdb/articles/b63605b6e0744c</id>
        <link href="https://zenn.dev/hyperdb/articles/b63605b6e0744c"/>
        <updated>2023-03-13T04:40:00.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-166 B - Trick or Treat



 提出結果
def getIntMap():
    return map(int, input().split())


def getInt():
    return int(input())


def getIntList():
    return list(map(int, input().split()))


def main():
    n, k = getIntMap()

    s = [i + 1 for i in range(n)]

    for i in range(k)...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-166｜A - A?C]]></title>
        <id>https://zenn.dev/hyperdb/articles/165724e35805a5</id>
        <link href="https://zenn.dev/hyperdb/articles/165724e35805a5"/>
        <updated>2023-03-13T04:39:59.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-166 A - A?C



 提出結果
def getString():
    return input()


def main():
    s = getString()

    print('ABC' if s == 'ARC' else 'ARC')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PDM + GitHub Actions でテストとパッケージングを自動化する]]></title>
        <id>https://zenn.dev/hamakou108/articles/255d7ea55ccd69</id>
        <link href="https://zenn.dev/hamakou108/articles/255d7ea55ccd69"/>
        <updated>2023-03-13T00:19:53.000Z</updated>
        <summary type="html"><![CDATA[PDMを使ってパッケージ管理している Python プロジェクトで GitHub Actions を使ってテストや静的解析、パッケージングを自動化する方法について記述する。
なお、 PDM のインストールや初期設定については過去に書いた記事があるのでこちらを参照。

 環境

macOS: Ventura 13.0.1
Python: 3.11.2
PDM: 2.4.5


 PDM の GitHub Action
PDM から提供されている GitHub Action を使用する。
https://github.com/marketplace/actions/setup-pdm
以降で...]]></summary>
        <author>
            <name>hamakou108</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChatGPT-APIの出力をプログラムに落としこむ（Text-Embeddings）]]></title>
        <id>https://zenn.dev/shimokenpi/articles/0831bbf64028ba</id>
        <link href="https://zenn.dev/shimokenpi/articles/0831bbf64028ba"/>
        <updated>2023-03-12T17:42:27.000Z</updated>
        <summary type="html"><![CDATA[目的
例えばChatGPTに人間同士の議論の審判をさせるというケースを考えます。
ネット上のバイアスやそもそも意味を理解できているのかという問題がありますが、AIに議論の判定（もしくは進行）をさせるというのは中立性の面からも将来主流になるのではと思います。
ではChatGPTにAとBの議論の勝敗判定をさせたとして、その出力は当然文章になるわけですが、プログラムで扱うにはAIから得られた文章を

A勝ち
B勝ち
引き分け

に分類する必要があります。
ChatGPTに出力の形式を指定するという方法もあるのですが、安定性に難あり、トークンを余計に使う、などの問題があります。
そこでOpe...]]></summary>
        <author>
            <name>六兵衛</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[motoでdynamoのモックを作成する]]></title>
        <id>https://zenn.dev/nkty/articles/7266e4666f3908</id>
        <link href="https://zenn.dev/nkty/articles/7266e4666f3908"/>
        <updated>2023-03-12T10:25:22.000Z</updated>
        <summary type="html"><![CDATA[結論から。自分はこのように書いています。
from moto import mock_dynamodb
import pytest
import boto3
import logging


class TestHoge:

    @pytest.fixture(autouse=True)
    def dynamo_setup(self):
        with mock_dynamodb():
            # テーブル作成
            dynamodb = boto3.resource("dynamodb", region_name="ap-north...]]></summary>
        <author>
            <name>nkty</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonでcsvを読み込む]]></title>
        <id>https://zenn.dev/isogaba/articles/5170bdac8dbc09</id>
        <link href="https://zenn.dev/isogaba/articles/5170bdac8dbc09"/>
        <updated>2023-03-12T10:25:12.000Z</updated>
        <summary type="html"><![CDATA[最近Pythonでcsvを読み込み、データを操作することが多くなりました。
そのため、これを機にPythonでcsvを操作できるライブラリはどのようなものがあるか調べることにしました。
本記事ではcsv読み込みに絞って比較したいと思います。
なお、csvデータは気象庁が公開している過去の気象データを使用させて頂いております。
気象庁ホームページ

 csvデータを操作するライブラリ
pythonでcsvを操作できる以下のライブラリについて比較します。

標準機能・標準ライブラリ(csvモジュール)
NumPy
pandas
Polars


 標準機能・標準ライブラリでcsvを読み込む
...]]></summary>
        <author>
            <name>急がば回れ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのコードをformatterのblackで整える]]></title>
        <id>https://zenn.dev/yumemi_inc/articles/2f9334de7fd165</id>
        <link href="https://zenn.dev/yumemi_inc/articles/2f9334de7fd165"/>
        <updated>2023-03-12T08:34:29.000Z</updated>
        <summary type="html"><![CDATA[背景
Puthonのコードをキレイに整形してくれるblackを使ってコードを整えてみました。
https://github.com/psf/black
下記の記事にあるように、black以外にも使えそうなものはありますが、blackが結構メインで使っているところが多くなってきていそうな雰囲気があります。ただし、名前が黒と同じなのでややこしい。
https://zenn.dev/naiq112/articles/df1b32fc08d383

 環境
機種 : MacBook Pro 2021(M1 Max)
python version : 3.9.16
pip version : ...]]></summary>
        <author>
            <name>lightkun</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-165｜B - 1%]]></title>
        <id>https://zenn.dev/hyperdb/articles/6d7925cee4e867</id>
        <link href="https://zenn.dev/hyperdb/articles/6d7925cee4e867"/>
        <updated>2023-03-12T05:53:57.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-165 B - 1%



 提出結果
def getInt():
    return int(input())


def main():
    x = getInt()

    a = 100
    c = 0
    while a < x:
        a += a // 100
        c += 1
    print(c)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-165｜A - We Love Golf]]></title>
        <id>https://zenn.dev/hyperdb/articles/1cae336ff060cf</id>
        <link href="https://zenn.dev/hyperdb/articles/1cae336ff060cf"/>
        <updated>2023-03-12T05:53:56.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-165 A - We Love Golf



 提出結果
def getInt():
    return int(input())


def getIntMap():
    return map(int, input().split())


def main():
    k = getInt()
    a, b = getIntMap()

    f = False
    for i in range(a, b + 1):
        if i % k == 0:
            f = True
            brea...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[3/6~3/10で技術的にやったこと]]></title>
        <id>https://zenn.dev/zi_matsu/articles/4030be7360134b</id>
        <link href="https://zenn.dev/zi_matsu/articles/4030be7360134b"/>
        <updated>2023-03-12T05:07:57.000Z</updated>
        <summary type="html"><![CDATA[aiohttpとasyncioを使用したPythonの非同期HTTPリクエストについて
非同期コードは結果を待つ間に一度処理を中断しその間に他のコードを実行できるコード。
他のコードの実行をブロックしないのでノンブロッキングコードとも言われる
asyncioライブラリは非同期処理を行うツールがある
aiohttpライブラリにはHTTPリクエストの機能がある。
これらを組み合わせることによって非同期の中でも並行してhttpのリクエストを行うことができる
イメージは同時に複数のapiをコールできる感じ
実装としては以下のようなイメージ(結構簡略化して書いてあります）
async def ...]]></summary>
        <author>
            <name>Matsuzaki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのお試し用]]></title>
        <id>https://zenn.dev/haimaru/articles/6cba8dc0edf56d</id>
        <link href="https://zenn.dev/haimaru/articles/6cba8dc0edf56d"/>
        <updated>2023-03-12T04:48:56.000Z</updated>
        <summary type="html"><![CDATA[Python is 何？
print("Hello World")]]></summary>
        <author>
            <name>haimarusan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Githubのプロフィールを動的に変化させるカスタマイズを作ってみた]]></title>
        <id>https://zenn.dev/rie_amasato/articles/a9e600c0e105db</id>
        <link href="https://zenn.dev/rie_amasato/articles/a9e600c0e105db"/>
        <updated>2023-03-12T01:09:01.000Z</updated>
        <summary type="html"><![CDATA[Githubのプロフィール、いろんなトロフィーとかSNSとか入れている方いるじゃないですか。たのしそう！
で、私も真似したいのだけど、Githubの活動は大してしてないし、極度のSNS疲れでTwitterアカウント消滅させたばっかだしで、外部に出すようなものがないわけです。かなしい
外部に出すと言うか、ちょっとしたポートフォリオ？的にこんなことできますの意を込めて、動的に変化させるという点をチャレンジしてみることにした

 実際の動作
Readmeのカスタムって中身なにやっているの？って調べたところ、実装方法として

動的に動かせるサーバーを立ててしまう
Github Actionを使っ...]]></summary>
        <author>
            <name>Amasato Rie(遍怜 悧叡)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[正規表現の基礎まとめ]]></title>
        <id>https://zenn.dev/ryome/articles/9a28660d27363b</id>
        <link href="https://zenn.dev/ryome/articles/9a28660d27363b"/>
        <updated>2023-03-11T22:00:00.000Z</updated>
        <summary type="html"><![CDATA[正規表現の基礎をまとめた備忘録

 正規表現とは
正規表現（Regular Expression）は、文字列のパターンマッチングに使われる表現方法の一つです。
文字列に含まれる文字や文字列のパターンを指定して、一致する文字列を検索したり、置換したりすることができます。

 正規表現習得のロードマップ

正規表現の基本的な概念や表現方法の習得
正規表現を使用したプログラムコードのパターンマッチング、データの抽出、ログの解析の習得
正規表現の後方参照、肯定先読み、否定後読みの習得


 1. 正規表現の基本的な概念や表現方法の習得
メタ文字
正規表現において、メタ文字（特殊文字）は、パタ...]]></summary>
        <author>
            <name>ryome</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[discord.pyとextensionでスラッシュコマンドを実装する]]></title>
        <id>https://zenn.dev/quojama/articles/63fdc637a3020b</id>
        <link href="https://zenn.dev/quojama/articles/63fdc637a3020b"/>
        <updated>2023-03-11T18:57:13.000Z</updated>
        <summary type="html"><![CDATA[方法は複数あると思いますので方法の一つです。
ファイル構成
.
├── cogs/
│   ├── ping.py
│   ├── sample1.py
│   └── sample2.py
└── main.py

 本体 (main.py)
自分のサーバーで使うような小規模のBotを想定しています。
ギルドコマンドとグローバルコマンドというのがありますが、
グローバルコマンドはBotを立ち上げてからスラッシュコマンドが反映されるまでに時間がかかったり、同期しすぎると怒られたり(？) するようです。
今回はGuild IDを指定してそのギルドだけで使えるギルドコマンドです。
ギルドコマ...]]></summary>
        <author>
            <name>こやま</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[NotionAPIとGithubActionsで自動アーカイブ？機能を作ってみた]]></title>
        <id>https://zenn.dev/midra_lab/articles/e7d71e0980fcd8</id>
        <link href="https://zenn.dev/midra_lab/articles/e7d71e0980fcd8"/>
        <updated>2023-03-11T17:22:10.000Z</updated>
        <summary type="html"><![CDATA[はじめに
筆者は完全初心者のPythonの学習者です。普段はC#を使って開発をしています。
情報学に関して深い知見を持っているわけでゃないので、間違っているところがあればご指摘いただけると幸いです。
今回はmain.pyにべた書きしているので見苦しいかもしれませんがご了承くださいませ。
筆者は個人的なTodoをNotionで管理していてより自分好みに自動化できればより効率の良いタスク管理ができるのではないかと考えてこのプロジェクトを作成しました。

 今回作成したもの
タイトル詐欺にはなってしまいますが実際にはアーカイブして完全に記事を削除というわけではありません。
今回はページの持...]]></summary>
        <author>
            <name>eisuke</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChatGPTで全文生成したPythonの本 ver0.2]]></title>
        <id>https://zenn.dev/tokoi/books/by_gpt35t_python_v0_2</id>
        <link href="https://zenn.dev/tokoi/books/by_gpt35t_python_v0_2"/>
        <updated>2023-03-11T16:14:07.000Z</updated>
        <summary type="html"><![CDATA[ChatGPT(open-aiのgpt-3.5-turbo)で、全文を生成しました。章立てのみ人間が書いており、あとはすべて自動生成した文章です。内容の正確性については未確認です。LLMでどんなものが書けるのか興味ある人はどうぞご覧下さい。]]></summary>
        <author>
            <name>tokoi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonでSeparateなTiffを作る]]></title>
        <id>https://zenn.dev/yonda/articles/26205e5d325ff2</id>
        <link href="https://zenn.dev/yonda/articles/26205e5d325ff2"/>
        <updated>2023-03-11T14:01:26.000Z</updated>
        <summary type="html"><![CDATA[Tiffは言わずとしたら画像ファイルのフォーマットですが、そのピクセルの値はChunkyに保持されます。
RGBAな画像でChunkyだとこんなの感じな配列になる。
1ピクセル目のR, 1ピクセル目のG, 1ピクセル目のB, 1ピクセル目のA,
2ピクセル目のR, 2ピクセル目のG, 2ピクセル目のB, 2ピクセル目のA,
3ピクセル目のR, 3ピクセル目のG, 3ピクセル目のB, 3ピクセル目のA,
4ピクセル目のR, 4ピクセル目のG, 4ピクセル目のB, 4ピクセル目のA,
...
現在出回っているTiffのほとんどはこの方式ですが、実はChunky以外にもSeparateという方...]]></summary>
        <author>
            <name>yonda</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[献血記録の可視化]]></title>
        <id>https://zenn.dev/mashi_z/articles/blood-data-visualizattion</id>
        <link href="https://zenn.dev/mashi_z/articles/blood-data-visualizattion"/>
        <updated>2023-03-11T07:45:15.000Z</updated>
        <summary type="html"><![CDATA[これは何？
ラブラッドのサイトから閲覧できるデータのうち、2009.3.15以降の献血データを取得するプログラムです。
ずいぶん前からですが、献血結果を 献血Web会員サービスのラブラッドのサイトにて確認できるようになりました。
かなり前からのデータも確認できるのですが、一度に閲覧できるデータ数は３回分でして、もう少し長い期間の傾向を見たいなと思い、スクレイピングの練習も兼ねて献血結果の取得と可視化を行いました。
スクレイピングは、Seleniumで行っております。Selenium IDEは、なかなか便利です。
私の血液の検査結果をさらすのもあれなので、元データに乱数をかけて数字を加...]]></summary>
        <author>
            <name>mashi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[筋トレで理解するPython基本の「き」]]></title>
        <id>https://zenn.dev/laplace_daemon/books/0441b7af996665</id>
        <link href="https://zenn.dev/laplace_daemon/books/0441b7af996665"/>
        <updated>2023-03-11T07:27:01.000Z</updated>
        <summary type="html"><![CDATA[会社の新人のために作成したPython3の基本文法について教える際に作成した教材です。
別媒体で公開したところ多数の高評価をいただき13000回以上見ていただけていたので、改めて図や説明文をブラッシュアップしたものを公開します。

この教材のうりは筋トレを題材にした、理解度チェックテストです。
処理の流れを追うことが出来たらもうpythonの基本は大丈夫！というコードを作りました。
また理解度チェックテストをクリアするために必要な構文等をコード例付きで解説をしており、解説の中にはより効率よくコーディングを行うための情報を散りばめています。

この教材は読者のpython習熟度合いによっておすすめの進め方が変わります。

あまりpythonの文法に詳しくない方には以下の流れで進めることをお勧めします。
1. 理解度確認用のコード（以後、理解度チェックコード）の下にある解説を最初に一通り確認
2. 理解度チェックコードを読み進める
3. 分からない箇所があったら解説に飛ぶ
4. 2~3の繰り返し
5. 解説を見ないでも理解度チェックコードの処理内容が分かる

pythonの文法に詳しい方は上の手順の内1は飛ばして問題ありません。]]></summary>
        <author>
            <name>Laplace</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-164｜A - Sheep and Wolves]]></title>
        <id>https://zenn.dev/hyperdb/articles/f7f2105f1cf351</id>
        <link href="https://zenn.dev/hyperdb/articles/f7f2105f1cf351"/>
        <updated>2023-03-11T06:52:55.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-164 A - Sheep and Wolves



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    s, w = getIntMap()

    print('unsafe' if s <= w else 'safe')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-163｜A - Circle Pond]]></title>
        <id>https://zenn.dev/hyperdb/articles/a5679d1eec5f84</id>
        <link href="https://zenn.dev/hyperdb/articles/a5679d1eec5f84"/>
        <updated>2023-03-11T06:52:55.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-163 A - Circle Pond



 提出結果
import math


def getInt():
    return int(input())


def main():
    r = getInt()

    print(2 * math.pi * r)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-163｜B - Homework]]></title>
        <id>https://zenn.dev/hyperdb/articles/9559c6ab8a9161</id>
        <link href="https://zenn.dev/hyperdb/articles/9559c6ab8a9161"/>
        <updated>2023-03-11T06:52:55.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-163 B - Homework



 提出結果
def getIntMap():
    return map(int, input().split())


def getIntList():
    return list(map(int, input().split()))


def main():
    n, m = getIntMap()
    a = getIntList()

    b = n - sum(a)

    print(b if b >= 0 else -1)


if __name__ == "__main__"...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-164｜B - Battle]]></title>
        <id>https://zenn.dev/hyperdb/articles/82ef443a6e532d</id>
        <link href="https://zenn.dev/hyperdb/articles/82ef443a6e532d"/>
        <updated>2023-03-11T06:52:54.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-164 B - Battle



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    a, b, c, d = getIntMap()

    while a > 0 and c > 0:
        c -= b
        if c <= 0:
            print('Yes')
            break
        a -= d
        if a <= 0:
           ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sagemaker EndpointとWhisperで文字起こし]]></title>
        <id>https://zenn.dev/na7na/articles/18fee2843844cb</id>
        <link href="https://zenn.dev/na7na/articles/18fee2843844cb"/>
        <updated>2023-03-11T06:33:49.000Z</updated>
        <summary type="html"><![CDATA[要約
ServerlessInference(サーバレスエンドポイント)、AsyncInference(非同期エンドポイント)を用いて従量課金(利用時のみ課金)な機械学習endpoint設計を実現。
OpenAIのWhisperを動かした。
比較的新しいサーバレス推論だが、
23年3月時点だと下記点がデメリットに該当するので、今後に期待。

GPUが使えない
推論タイムアウトが60秒
コールドスタート


 読者対象

AWS SageMakerを使った/使いたい人
機械学習モデルのデプロイ設計に悩んでいる人
文字起こしAIのWhisperを使ったことがある/使う予定がある人


 ...]]></summary>
        <author>
            <name>NA7NA</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google Earth EngineとPythonで始める衛星データ利用入門]]></title>
        <id>https://zenn.dev/sindicum/books/how-to-use-gee</id>
        <link href="https://zenn.dev/sindicum/books/how-to-use-gee"/>
        <updated>2023-03-11T01:53:14.000Z</updated>
        <summary type="html"><![CDATA[衛星画像利用の初心者向けに、Google Earth Engineのアカウント登録からデータ取得、そしてPythonライブラリを用いた解析方法を簡潔にご紹介します。]]></summary>
        <author>
            <name>sindicum</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python初心者が】ChatGPT APIとLINEを繋げてみるし、文脈も把握させてみるし、ChatGPTの説明も簡単にしてみる]]></title>
        <id>https://zenn.dev/killit/articles/ebe85f18a1e0cb</id>
        <link href="https://zenn.dev/killit/articles/ebe85f18a1e0cb"/>
        <updated>2023-03-10T16:32:06.000Z</updated>
        <summary type="html"><![CDATA[プロロロロローグ
!
なんでもAIちゃんを作った時に調べた情報をまとめた記事です

LINE Add Friend
無料なんで興味本位で追加をお願いします！
追加してくれると、自分の請求額は増えますが
なんでもAIちゃんが喜びます☺️


 そもそも

 ChatGPTとは
OpenAI社が開発したチャットボット

 ChatGPT APIとは
ChatGPTで用いているモデルと同じ「gpt-3.5-turbo」を利用しているAPI
料金は1000トークンあたり0.002ドル
日本語の場合は1文字が1トークン以上とカウントされ、ひらがなは1トークン、漢字は2,3トークンにカウントさ...]]></summary>
        <author>
            <name>killit</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonでサイズの大きなCSV処理時に発生する「_csv.Error: field larger than field limit」対策]]></title>
        <id>https://zenn.dev/nosukey/articles/python_use_field_size_limit</id>
        <link href="https://zenn.dev/nosukey/articles/python_use_field_size_limit"/>
        <updated>2023-03-10T14:51:15.000Z</updated>
        <summary type="html"><![CDATA[書くこと


_csv.Error: field larger than field limit (131072)対策


 想定

pythonの標準ライブラリを利用
サイズの大きなCSVファイルを処理したい


 方法論

field_size_limitの変更

import csv
OVER_SIZE_LIMIT = 200_000_000

csv.field_size_limit(OVER_SIZE_LIMIT)

# 以下、書きたい処理]]></summary>
        <author>
            <name>Nosukey</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[日経クロストレンドのRSSフィードを自分用に生成してみた]]></title>
        <id>https://zenn.dev/masadream/articles/c53372c796c2e6</id>
        <link href="https://zenn.dev/masadream/articles/c53372c796c2e6"/>
        <updated>2023-03-10T09:39:24.000Z</updated>
        <summary type="html"><![CDATA[きっかけ
仕事の都合があり、日経クロストレンドで情報収集をすることにしました。
https://xtrend.nikkei.com/
WEBサイトの記事はFeedlyにRSSフィードを登録してまとめて読むようにしているので、これもまとめちゃお～と思ったのですが、なんと日経クロストレンドは新着記事のRSSフィードを吐いていないようです[1]。
ないなら作ればいいんじゃない？ということで、PythonもAWSも初心者の筆者がやってみたら意外とさくっとできたので、自分の整理も兼ねて記事にしようと思った次第です。

 作りたいことの要件

新着記事一覧のRSSファイルを生成する
生成したRS...]]></summary>
        <author>
            <name>masadream</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【ABC291】AtCoder Beginner Contest 291 A-D 振り返り【Python】【C++】]]></title>
        <id>https://zenn.dev/tmori/articles/7fae797fa494a3</id>
        <link href="https://zenn.dev/tmori/articles/7fae797fa494a3"/>
        <updated>2023-03-10T09:18:32.000Z</updated>
        <summary type="html"><![CDATA[https://atcoder.jp/contests/abc291

 A - camel Case
Pythonの場合、str型のメソッドのstr.isupper()で大文字の判定をする。C++の場合。isupper(s)で大文字の判定をする。
Pythons = list(input())
 
for i, s_i in enumerate(s):
    if s_i.isupper():
        print(i + 1)
        break

C++#include<bits/stdc++.h>
using namespace std;
int ma...]]></summary>
        <author>
            <name>tmori</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PyTorchとDetection Transformer (DETR)で作る物体認識モデル]]></title>
        <id>https://zenn.dev/aidemy/articles/30f10cf2c48e6a</id>
        <link href="https://zenn.dev/aidemy/articles/30f10cf2c48e6a"/>
        <updated>2023-03-10T08:02:19.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは。機械学習ビギナーの中沢(@shnakazawa_ja)です[1]。
世の中にはテーブルデータを対象とした機械学習モデルのチュートリアルは多くありますが、画像に対するものは少なく、コードまで提供されているものは更に少なくなります。そこで、本シリーズでは基本的なコンピュータビジョンモデリングの手法をPythonで実装していきます。
今回はObject detection （物体認識） を扱います。本稿ではモデルをtorch.hub.load()を用いて取得します[2]。


前回: PyTorchとEfficientNetV2で作る画像分類モデル



実装はKag...]]></summary>
        <author>
            <name>Shingo Nakazawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【2023年最新版 Python】DjangoでWebアプリケーションを開発するための基礎知識]]></title>
        <id>https://zenn.dev/coderisu/articles/7a830251b19171</id>
        <link href="https://zenn.dev/coderisu/articles/7a830251b19171"/>
        <updated>2023-03-10T07:00:58.000Z</updated>
        <summary type="html"><![CDATA[Django(ジャンゴ)とは？
Djangoは、Pythonプログラミング言語で書かれたオープンソースのWebアプリケーションフレームワークです。Djangoは、高速なWebアプリケーションの開発を容易にするために設計されており、さまざまな機能を提供しています。
以下に、Djangoフレームワークについての詳細な情報を提供します。

 1. Djangoの特徴
ドメイン固有言語(Domain-Specific Language, DSL)を使用して、高度なWebアプリケーションの開発を容易にする。
プロジェクトテンプレートを提供し、Webアプリケーションの構造を自動的に生成する。
...]]></summary>
        <author>
            <name>コードリス</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-162｜B - FizzBuzz Sum]]></title>
        <id>https://zenn.dev/hyperdb/articles/df4be7a3a4aa4f</id>
        <link href="https://zenn.dev/hyperdb/articles/df4be7a3a4aa4f"/>
        <updated>2023-03-10T03:56:47.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-162 B - FizzBuzz Sum



 提出結果
def getInt():
    return int(input())


def main():
    n = getInt()

    c = 0
    for i in range(1, n + 1):
        if i % 3 == 0 or i % 5 == 0:
            continue
        c += i
    print(c)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-162｜A - Lucky 7]]></title>
        <id>https://zenn.dev/hyperdb/articles/8ef88984625ca6</id>
        <link href="https://zenn.dev/hyperdb/articles/8ef88984625ca6"/>
        <updated>2023-03-10T03:56:46.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-162 A - Lucky 7



 提出結果
def getInt():
    return int(input())


def main():
    n = getInt()

    print('Yes' if '7' in list(str(n)) else 'No')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django4でmigrationをやり直したい時の手順]]></title>
        <id>https://zenn.dev/kokopi/articles/c9dc32849f9263</id>
        <link href="https://zenn.dev/kokopi/articles/c9dc32849f9263"/>
        <updated>2023-03-10T02:58:57.000Z</updated>
        <summary type="html"><![CDATA[マイグレーションのおさらいとユースケース
migrate実行の流れとしては下記の２つの手順を踏みます。

 マイグレーションファイルを生成
python manage.py makemigrate

 マイグレーションの実行
python manage.py migrate
たったこれだけで、DBをCREATEしてくれて非常に助かるのですが、
ここで、「あっ、項目（カラム）が1つ足りなかった。。。追加しよう。」ということありますよね？
models.pyファイルに追記して再度migrateでは下記のようにエラーになってしまいます。
  Your models in app(s): '...]]></summary>
        <author>
            <name>ここぴのパパ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenAI 言語モデルごとのエンコーディング一覧]]></title>
        <id>https://zenn.dev/microsoft/articles/3438cf410cc0b5</id>
        <link href="https://zenn.dev/microsoft/articles/3438cf410cc0b5"/>
        <updated>2023-03-09T12:18:46.000Z</updated>
        <summary type="html"><![CDATA[はじめに
タイトルのとおり情報をまとめました。

 エンコーディングについて
OpenAI 言語モデルにおけるエンコーディングとは、テキストがトークンに変換される際の (トークナイズされる際の) ルールのようなものです。モデルによって使用するエンコーディングは異なります。

 確認方法
各モデルが使うエンコーディングは Python パッケージの tiktoken で確認することができます。
下記の例では ChatGPT API のモデルのひとつである gpt-3.5-turbo のエンコーディングを確認しています。
>>> import tiktoken
>...]]></summary>
        <author>
            <name>ryohtaka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Airflowでサマータイムを考慮した話]]></title>
        <id>https://zenn.dev/hashiba/articles/summertime-in-airflow</id>
        <link href="https://zenn.dev/hashiba/articles/summertime-in-airflow"/>
        <updated>2023-03-09T11:01:07.000Z</updated>
        <summary type="html"><![CDATA[概要
Airflowでサマータイムを考慮する必要があり、Airflowのタイムゾーンの取り扱いについての調査を実施。調査結果は、以下の通り。
個別のDAGでサマータイムを意識する場合は、Time zone aware DAGsを使い、タイムゾーンの設定にTZ database name（例えばEurope/London、 America/New_York）を指定する。（標準時（例えばGMT、EST）ではだめ）

 調査

 方向性
Airflowすでにタイムゾーンが考慮されており、2つの方法で対応が可能。
https://airflow.apache.org/docs/apache-...]]></summary>
        <author>
            <name>Shinichi Hashiba</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitHub ActionsでPython3.10を使うと3.1になっちゃう、、、]]></title>
        <id>https://zenn.dev/osawa_koki/articles/171898325c4a9c</id>
        <link href="https://zenn.dev/osawa_koki/articles/171898325c4a9c"/>
        <updated>2023-03-09T10:02:05.000Z</updated>
        <summary type="html"><![CDATA[解決策
'3.10' とシングルクォーテーションで囲むと解決しました。
ダブルクォーテーションでもOKです。

 原因
3.10だと数字として認識され、3.1になってしまうようです。
'3.10'とシングルクォーテーションで囲むと文字列として認識され、3.10になります。]]></summary>
        <author>
            <name>osawa-koki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python 3.7+ で typed dynamic property みたいなことしたいメモ]]></title>
        <id>https://zenn.dev/syoyo/articles/b37df06229c123</id>
        <link href="https://zenn.dev/syoyo/articles/b37df06229c123"/>
        <updated>2023-03-09T08:35:23.000Z</updated>
        <summary type="html"><![CDATA[背景
class のインスタンス作ったときには property は作らない.
ユーザーが dynamic に(実行時に)つくったときに実行時型チェックしたい.
c = MyClass()
print(c.name) # NG. name はまだ存在しない
c.name = "" # str. OK
c.name = 3 # Error!

型付き property がほしい(property の名前と型は事前にわかっているようなのがある)
None 状態はつくらず, property が無い状態を作りたい

型アノテーションで Union[str, None] とかめんどい.
また...]]></summary>
        <author>
            <name>syoyo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PyTorchとEfficientNetV2で作る画像分類モデル]]></title>
        <id>https://zenn.dev/aidemy/articles/f851fb091dbb23</id>
        <link href="https://zenn.dev/aidemy/articles/f851fb091dbb23"/>
        <updated>2023-03-09T08:14:16.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは。機械学習初心者の中沢(@shnakazawa_ja)です[1]。
世の中にはテーブルデータを対象とした機械学習モデルのチュートリアルは多くありますが、画像に対するものは少なく、コードまで提供されているものは更に少なくなります。そこで、今回から数記事に分けて基本的なコンピュータビジョンモデリングの手法をPythonで実装していきたいと思います。
本稿では Classification (画像分類) を扱います。また、本稿ではモデルをパッケージから取得します。

実装はKaggle Notebook上で行うことで誰もが再現できるコードを目指します。主な読者として

...]]></summary>
        <author>
            <name>Shingo Nakazawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pipのeditableモードでインストールしたパッケージをアンインストールする方法 ~ChatGPTに聞く~]]></title>
        <id>https://zenn.dev/roistaff/articles/348a56000ff5e7</id>
        <link href="https://zenn.dev/roistaff/articles/348a56000ff5e7"/>
        <updated>2023-03-09T05:16:46.000Z</updated>
        <summary type="html"><![CDATA[はじめに
皆さんは、Pythonで自作のパッケージをローカルにインストールして試す時に、editableモードを使いませんか。変更した内容が即座に更新されるeditableモードは、自作のパッケージ開発には欠かせないインストールモードなのですが、editableモードでインストールしたパッケージをアンインストールしたかった時、pip uninstall package_name ではうまくいきませんでした。
　調べてみると、editableモードでインストールしたパッケージをアンインストールできないという事例が他にもあったので、解決策を調べてみました。

 問題
このように
sudo...]]></summary>
        <author>
            <name>Staff Roi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-161｜A - ABC Swap]]></title>
        <id>https://zenn.dev/hyperdb/articles/c93327dc1bc7cf</id>
        <link href="https://zenn.dev/hyperdb/articles/c93327dc1bc7cf"/>
        <updated>2023-03-09T04:35:15.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-161 A - ABC Swap



 提出結果
def getIntMap():
    return map(int, input().split())


def swap(a, b):
    return b, a


def main():
    x, y, z = getIntMap()

    x, y = swap(x, y)
    x, z = swap(x, z)

    print('%d %d %d' % (x, y, z))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-161｜B - Popular Vote]]></title>
        <id>https://zenn.dev/hyperdb/articles/91e1f7794979a9</id>
        <link href="https://zenn.dev/hyperdb/articles/91e1f7794979a9"/>
        <updated>2023-03-09T04:35:15.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-161 B - Popular Vote



 提出結果
def getIntMap():
    return map(int, input().split())


def getIntList():
    return list(map(int, input().split()))


def main():
    n, m = getIntMap()
    a = getIntList()

    c = 0
    l = sum(a) / (4 * m)

    for x in a:
        if x >= l:
   ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Pre-PEP] Inline Syntax for TypedDict]]></title>
        <id>https://zenn.dev/frodo/articles/72714e2a2f8d4d</id>
        <link href="https://zenn.dev/frodo/articles/72714e2a2f8d4d"/>
        <updated>2023-03-09T03:30:54.000Z</updated>
        <summary type="html"><![CDATA[昨日(2023年3月8日)、Pyright v1.1.297にInline Syntax for TypedDictの実験的サポートが実装されました。Inline Syntax for TypedDictとはどのような機能なのか、何が嬉しいのかを説明しようと思います。

 Motivation
従来より、Pythonの辞書型は、typing.TypedDict を利用して型付けを行うことができます。
from typing import TypedDict

class Vector(TypedDict):
  x: float
  y: float
  z: float

vec: V...]]></summary>
        <author>
            <name>Frodo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Work Toolsを作った話]]></title>
        <id>https://zenn.dev/yakumo/articles/4c7ad15dc36eaf</id>
        <link href="https://zenn.dev/yakumo/articles/4c7ad15dc36eaf"/>
        <updated>2023-03-08T18:01:41.000Z</updated>
        <summary type="html"><![CDATA[TL;DR;

https://github.com/yakumo-saki/worktools/


 何ができるの

ポモドーロタイマー
Philips Hueと連動して色を変える


 どう使ってほしいか

そのまま使えるならそれはそれでいいけど、多分そんなわけはないので必要なところだけソースをコピペして再構成して使ってほしい


 裏側

Python3
rumps
py2app


 動機

本当は、TickTickのアプリのポモドーロタイマーをそのまま使いたかった。それ使えば自動的にログが記録されるし、時間も記録されるし良いこと尽くめ。
だけれども、なんとなくPhilip...]]></summary>
        <author>
            <name>Yakumo Saki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dockerを活用してKafkaクラスターを構築し, 各種UIツールを試す]]></title>
        <id>https://zenn.dev/kappa1779/articles/4cc8303fa68b3c</id>
        <link href="https://zenn.dev/kappa1779/articles/4cc8303fa68b3c"/>
        <updated>2023-03-08T15:20:52.000Z</updated>
        <summary type="html"><![CDATA[はじめに
マイクロサービスの勉強中に, Apache Kafkaという技術が存在することを知りました.
Kafka の勉強がてら Docker を活用して構築する手順をまとめたので記事にまとめます.

 🖨 この記事で取り扱うこと
Kafka の基本的な概念や用語については説明しません. あくまで手を動かしながら

Docker を活用してローカル環境に Kafka クラスターを構築する
Kafka の状態を監視/操作する UI ツールを試す
クライアントアプリケーション(Python)を動作させる

ことに焦点を当てます.
なお, Kafka クラスターは複数マシン(それぞれが別 ...]]></summary>
        <author>
            <name>Atsuya Ide</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python で学ぶハッシュ探索法 - チェーン法とオープンアドレス法 -]]></title>
        <id>https://zenn.dev/fikastudio/articles/efcfe246642553</id>
        <link href="https://zenn.dev/fikastudio/articles/efcfe246642553"/>
        <updated>2023-03-08T13:51:22.000Z</updated>
        <summary type="html"><![CDATA[ハッシュ法は、ソート済みリストからの探索だけでなく、データの追加や削除も効率よく行う手法です。

ソート済みリスト（List A）に新たにデータ（12）を追加する場面を考えます。この時の操作は以下のようになります。

データを挿入すべき位置を特定する
挿入位置よりも後ろにあるデータを全て1つずつ後方にずらす
データを挿入する

単に新規にデータを追加するコストは決して小さくありません。データ削除も同様です。


 ハッシュ法
ハッシュ法は、データ追加や削除を効率よく行う手法になります。具体的には、データの剰余（ハッシュ値と呼ぶ）を元にリストを作成・管理する方法です。

リストに入ってい...]]></summary>
        <author>
            <name>情報工学入門チャンネル</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS CDKで毎日の料金をSlackに通知する機能を実装してみた]]></title>
        <id>https://zenn.dev/nnydtmg/articles/aws-cost-daily-mention-cdk</id>
        <link href="https://zenn.dev/nnydtmg/articles/aws-cost-daily-mention-cdk"/>
        <updated>2023-03-08T13:23:43.000Z</updated>
        <summary type="html"><![CDATA[やりたいこと
AWSの利用料は予算管理をしていても、予算の指定したパーセンテージに達するか、請求が確定するまでデフォルトでは通知ができません。
消し忘れのリソースについては1日でも早く気が付きたいです。
そのためには毎日コスト状況を確認する事が大事です。
ということで、毎日Slackに利用料を通知する仕組みを作ってみようと思います。
この手の話は沢山の方が記事にされているので、そこまで新規性はないですが、やったことメモ的な感じで残しておきます。
また、せっかくなのでCDKを使ってLambdaまで構築してみようと思います。
CDKはTypescript、Lambdaはpythonで作成...]]></summary>
        <author>
            <name>nnydtmg</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[「計算量（オーダー？）」って何？]]></title>
        <id>https://zenn.dev/fikastudio/articles/83838a9b93f8c5</id>
        <link href="https://zenn.dev/fikastudio/articles/83838a9b93f8c5"/>
        <updated>2023-03-08T08:48:25.000Z</updated>
        <summary type="html"><![CDATA[計算量（Complexity） とは、アルゴリズムの性能を客観的に評価するための尺度です。計算量は、時間計算量（Time Complexity：実行に要する時間を評価）と領域計算量（Space Complexity：実行に要する記憶域やファイル域を評価）の２つに大別することができます。
ここでは、線形探索と２分探索の時間計算量について考えてみます。

 線形探索
線形探索は、リストの先頭から順番に探索対象を探していくメソッドになります。Python で記述した線形探索の例を以下に示します。
L = [1, 9, 2, 5, 4, 7]
def linear_search(search_o...]]></summary>
        <author>
            <name>情報工学入門チャンネル</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PySide6(Qt for Python) のGUIアプリで、scheduleモジュールで定期実行。(QThread,QTimer)]]></title>
        <id>https://zenn.dev/okome_oisi/articles/23598e48252b45</id>
        <link href="https://zenn.dev/okome_oisi/articles/23598e48252b45"/>
        <updated>2023-03-08T05:14:42.000Z</updated>
        <summary type="html"><![CDATA[注意したこと

scheduleは別スレッドで動かす。そうしないとscheduleが、gui要素関連の処理を呼び出す時、schedule.run_pending()のループが止まってしまう。
通常は、schedule.run_pending()をwhile文で無限ループするが、そうすると、プログラムを終了する時、Scheduler_Threadが終了できない。
そのためにwhile文ではなくQTimerで、1秒ごとにschedule.run_pending()を呼び出す。
しかし、別スレッドでQTimerは利用できない。↓


You must start and stop the ...]]></summary>
        <author>
            <name>okometabetai</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-160｜B - Golden Coins]]></title>
        <id>https://zenn.dev/hyperdb/articles/4b4788224fa5d7</id>
        <link href="https://zenn.dev/hyperdb/articles/4b4788224fa5d7"/>
        <updated>2023-03-08T05:10:43.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-160 B - Golden Coins



 提出結果
def getInt():
    return int(input())


def main():
    x = getInt()

    v = x // 500 * 1000

    x %= 500

    v += x // 5 * 5

    print(v)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-160｜A - Coffee]]></title>
        <id>https://zenn.dev/hyperdb/articles/45a76d57c6a237</id>
        <link href="https://zenn.dev/hyperdb/articles/45a76d57c6a237"/>
        <updated>2023-03-08T05:10:43.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-160 A - Coffee



 提出結果
def getString():
    return input()


def main():
    s = list(getString())

    print('Yes' if s[2] == s[3] and s[4] == s[5] else 'No')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChatGPT API にコードを書かせて eval する際のエラーハンドリング・プラクティス]]></title>
        <id>https://zenn.dev/ryo_kawamata/articles/b39ba0452fec81</id>
        <link href="https://zenn.dev/ryo_kawamata/articles/b39ba0452fec81"/>
        <updated>2023-03-08T03:40:19.000Z</updated>
        <summary type="html"><![CDATA[最近 ChatGPT API にコードを書かせてそれを eval するという仕組みを作りました。
その際に考えたエラーハンドリングのプラクティスが、ChatGPT API ならではで個人的に面白かったので記事に残しておきます。
!
前提として、ChatGPT のコードをそのまま eval するのは危険なので、使用する際は注意してください。


 📝 tl;dr

ChatGPT はコードを書くことを拒否する場合がある。考慮したリトライの仕組みを作る
ChatGPT の書いたコードで発生したエラーは ChatGPT に解決してもらう


 💬 何をやろうとした？
以前の記事にて Minec...]]></summary>
        <author>
            <name>ryo_kawamata</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Cannot find reference 'url' in '__init__.py'の解決策]]></title>
        <id>https://zenn.dev/kokopi/articles/a35d53b6ebae1d</id>
        <link href="https://zenn.dev/kokopi/articles/a35d53b6ebae1d"/>
        <updated>2023-03-07T16:06:28.000Z</updated>
        <summary type="html"><![CDATA[djangoでこんなエラーに遭遇
Cannot find reference 'url' in 'init.py'


 原因
Django4からurl関数が廃止されてしまったためです。
Django3までの場合はなんの問題もなく使えていたものです。

 解決策
下記のようにfromの部分を書き換えてください。
from修正前
from django.conf.urls import url
from修正後
from django.urls import path
当然ですが、関数を呼び出す部分も修正してあげる必要があります。
例）
関数呼び出し修正前
urlpatterns = [...]]></summary>
        <author>
            <name>ここぴのパパ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[番兵法を用いた線形探索]]></title>
        <id>https://zenn.dev/fikastudio/articles/2f6c27a12d10e7</id>
        <link href="https://zenn.dev/fikastudio/articles/2f6c27a12d10e7"/>
        <updated>2023-03-07T15:21:24.000Z</updated>
        <summary type="html"><![CDATA[要素が直線上に並んだリスト（配列）からの探索は、リストの先頭から順番に走査して探索対象と同じかどうかを確認することで実現できます。これを線形探索、もしくは逐次探索と言います。
Python での実装例を以下に示しています。
L = [1, 9, 2, 5, 4, 7]
def linear_search(search_obj):
    index = 0
    while True:
        if index == len(L): # $1
	    # 探索失敗
        if L[index] == search_obj: # $2
	    # 探索成功
	in...]]></summary>
        <author>
            <name>情報工学入門チャンネル</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[INABAの表情筋を鍛えるためのPythonスクリプト]]></title>
        <id>https://zenn.dev/tukiakaritabane/articles/python-mmd-shape-keys</id>
        <link href="https://zenn.dev/tukiakaritabane/articles/python-mmd-shape-keys"/>
        <updated>2023-03-07T13:21:49.000Z</updated>
        <summary type="html"><![CDATA[表情シェイプキーのコピー作業を自動化できないか調べたところ、
PythonでBlenderをマクロ操作できることが分かったので、書いてみました。
注意点と使用方法は以下の通りです。

 注意点
以下の表情シェイプキーは、表情の内容が変更されます。



シェイプキー
変更後の表情




にやり
口角上げ


上
デフォルト表情(Basis)


下
デフォルト表情(Basis)



対応する表情がないシェイプキーについては、デフォルト表情(Basis)のシェイプキーをコピーしています。



シェイプキー




光下


口角広げ


上


下




 使用方法
FBXをインポ...]]></summary>
        <author>
            <name>月明たばね</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-159｜A - The Number of Even Pairs]]></title>
        <id>https://zenn.dev/hyperdb/articles/ca02667d6797be</id>
        <link href="https://zenn.dev/hyperdb/articles/ca02667d6797be"/>
        <updated>2023-03-07T09:24:31.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-159 A - The Number of Even Pairs



 提出結果
import math


def getIntMap():
    return map(int, input().split())


def main():
    n, m = getIntMap()

    print(math.comb(n, 2) + math.comb(m, 2))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-159｜B - String Palindrome]]></title>
        <id>https://zenn.dev/hyperdb/articles/ac85b4a2b9b340</id>
        <link href="https://zenn.dev/hyperdb/articles/ac85b4a2b9b340"/>
        <updated>2023-03-07T09:24:31.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-159 B - String Palindrome



 提出結果
def getString():
    return input()


def palindrome(s):
    r = s[::-1]

    return True if s == r else False


def main():
    s = getString()

    l = len(s)
    t = s[:(l - 1) // 2]
    u = s[(l + 3) // 2 - 1:]

    print('Yes' if palindrome(s)...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[venvでtkinterを使おうとして詰まった話]]></title>
        <id>https://zenn.dev/k41531/articles/6133b1b045d1aa</id>
        <link href="https://zenn.dev/k41531/articles/6133b1b045d1aa"/>
        <updated>2023-03-07T07:12:35.000Z</updated>
        <summary type="html"><![CDATA[環境

Mac mini(M1)

Venture 13.1


Python

ホスト：3.11.2
venv：3.10.10




 解決策
バージョンに合ったpython-tkを入れる。
brew install python-tk@3.10

 問題
ホストとバージョンの違うPythonをvenvで動かしている際。tkinterが次のエラーを出して困っていた。
Traceback (most recent call last):
  File "/opt/homebrew/Cellar/python@3.10/3.10.10_1/Frameworks/Python.fram...]]></summary>
        <author>
            <name>kaisei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TradingViewのアラート通知をAWS（lambda）を使ってLINEへ通知する]]></title>
        <id>https://zenn.dev/motokoike/articles/1569e91413aba3</id>
        <link href="https://zenn.dev/motokoike/articles/1569e91413aba3"/>
        <updated>2023-03-06T13:16:39.000Z</updated>
        <summary type="html"><![CDATA[はじめに
TradingViewのアラート通知は、「Webhook URL」を指定できるので、AWS（lambda）を利用してPOSTリクエストを受信し、LINEへ通知するbotを作成してみました。


 構成イメージ


 前提条件

TradingViewの有料アカウント（Pro以上）を取得済みであること。
AWSのアカウントを取得済みであること。
LINEのアカウントを取得済みであること。

TradingViewのアカウントを未作成の場合は、こちらからご登録下さい。

 LINE Notifyへログイン
こちらのリンクからLINE Notifyのぺージに遷移し、「ログイン」ボ...]]></summary>
        <author>
            <name>元小池</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[お手軽ソケット通信 (C++, C#, Python)]]></title>
        <id>https://zenn.dev/husty/articles/a0cf8cd55346f5</id>
        <link href="https://zenn.dev/husty/articles/a0cf8cd55346f5"/>
        <updated>2023-03-06T12:24:40.000Z</updated>
        <summary type="html"><![CDATA[どどーん
https://github.com/husty530/socket-template
内容物はTCP/UDP Server/Client です。

 解説
「お手軽」の定義は次の3つです。

外部ライブラリに依存しない。
プラットフォームに依存しない。
1ファイルで完結。

使い方はサンプルコードに目を通していただければわかるかと思いますが，何も書かないのもアレなので，ざっくりとだけプレビューを示します。
TCPのPython -> C++, C#のつもりで書いています。マネっこでServer/Clientを逆にしたりエコーにしたり，UDPにしたりするのは簡単です。...]]></summary>
        <author>
            <name>Takumi Yamashita</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ERNIE-LayoutのREADME]]></title>
        <id>https://zenn.dev/piment/articles/2a42d863da82a2</id>
        <link href="https://zenn.dev/piment/articles/2a42d863da82a2"/>
        <updated>2023-03-06T09:36:51.000Z</updated>
        <summary type="html"><![CDATA[ERNIE-LayoutのREADMEを読んで試してみます。


 README


モデル説明
事前学習により、視覚な文章を理解できるようになってきている。
しかし、既存の手法の多くは、レイアウトを意識した理解が最適とは言えない。
本論文では、ワークフローを通してレイアウトを学習し、テキスト、レイアウト、画像の特徴を組み合わせたより良い表現を学習する、新しい文書学習ソリューションERNIE-Layoutを提案します。
具体的には、まず直列化段階で入力シーケンスの並び替えを行い、次に相関的な事前学習タスクである読み順予測を提示し、文書の適切な読み順を学習する。
また、モデルのレイアウト認...]]></summary>
        <author>
            <name>ぴーまん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Whisper API, ChatGPT API, VOICEVOXを使ってAIと会話する]]></title>
        <id>https://zenn.dev/umyomyomyon/articles/5f07abe67a289b</id>
        <link href="https://zenn.dev/umyomyomyon/articles/5f07abe67a289b"/>
        <updated>2023-03-06T09:21:06.000Z</updated>
        <summary type="html"><![CDATA[概要
マイク入力をWhisper APIで文字起こしし、音声から起こした文字をChatGPT APIに投げて返答をVOICEVOXに渡すことによってChatGPTとの会話を行います。

 概要図

リポジトリはこちらです
https://github.com/umyomyomyon/whisper-chatgpt-voicevox

 Whisper APIを使用してマイク入力をテキストに
マイクからの入力をWhisperで文字起こしをするコードはこちらの記事を参考にさせていただきました。
https://nikkie-ftnext.hatenablog.com/entry/my-f...]]></summary>
        <author>
            <name>umyomyomyon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google Cloud Text-to-Speechは変な文字の並びになるとたまにバグる]]></title>
        <id>https://zenn.dev/murakoshi/articles/89462440e35073</id>
        <link href="https://zenn.dev/murakoshi/articles/89462440e35073"/>
        <updated>2023-03-06T06:41:05.000Z</updated>
        <summary type="html"><![CDATA[OCRで画像を文字認識してGoogle Cloud Text-to-Speechにかませて音声データを生成すると、
文字数制限とかには引っかかってないのに定期的にエラーレスポンスが返ってきてた。
{
  "error": {
    "code": 400,
    "message": "Request contains an invalid argument.",
    "status": "INVALID_ARGUMENT"
  }
}
どうやらたまたまOCRの精度が悪くて記号多めで読み上げが辛そうなテキストになると
たまにRequest contains an invalid ...]]></summary>
        <author>
            <name>murakoshi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-158｜B - Count Balls]]></title>
        <id>https://zenn.dev/hyperdb/articles/d1b2104e629a60</id>
        <link href="https://zenn.dev/hyperdb/articles/d1b2104e629a60"/>
        <updated>2023-03-06T05:02:09.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-158 B - Count Balls



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    n, a, b = getIntMap()

    c = n // (a + b) * a

    m = n % (a + b)
    c += m if m <= a else a

    print(c)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-158｜A - Station and Bus]]></title>
        <id>https://zenn.dev/hyperdb/articles/bcdb04f34c0977</id>
        <link href="https://zenn.dev/hyperdb/articles/bcdb04f34c0977"/>
        <updated>2023-03-06T05:02:08.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-158 A - Station and Bus



 提出結果
def getString():
    return input()


def main():
    l = list(getString())

    print('No' if len(set(l)) == 1 else 'Yes')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Minecraft × ChatGPT] マイクラで作りたいものを伝えると魔法みたいに実現してくれるコマンドを作る]]></title>
        <id>https://zenn.dev/ryo_kawamata/articles/5980d30972ff29</id>
        <link href="https://zenn.dev/ryo_kawamata/articles/5980d30972ff29"/>
        <updated>2023-03-06T03:44:16.000Z</updated>
        <summary type="html"><![CDATA[息子と一緒に遊びたいなと、Minecraft と ChatGPT を繋げて、やりたいことを日本語で伝えるといい感じに実現してくれるコマンドを作りました

 🪄 作ったもの
/py magic に続けてやりたいことを伝えると、いい感じに実現してくれます。
家をつくる例
/py magic 10マス先に豪華な家を作って。窓は広めで。

水流エレベーターをつくる例
/py magic 水流エレベーターを作って。周りは石ブロックで。


 🛠️ 実装
事前に Minecraft で Python を実行できる環境を整えます。
https://files.minecraftforge.net/ne...]]></summary>
        <author>
            <name>ryo_kawamata</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AtCoderの提出コードをGitHubにアップするツールを作りました]]></title>
        <id>https://zenn.dev/kult/articles/344c3af062f593</id>
        <link href="https://zenn.dev/kult/articles/344c3af062f593"/>
        <updated>2023-03-05T09:35:41.000Z</updated>
        <summary type="html"><![CDATA[AtCoderに提出したコードはAtCoderサイト内でいつでも確認可能なのですが、自分の全提出をまとめて見るといった場合には少し不便です。そこでAtCoderに提出しているコードを自分のGitHubのレポジトリに自動でアップロードするツールを作成してみました。
GitHubにアップすることで、GitHubのコントリビューションに草を生やすことができるのでモチベーションの維持にも繋がると思っています！
使い方はREADMEを参照してください。すべてPython3で実装されているのでPython3が動く環境さえあれば、簡単に実行できます。
https://github.com/kult09...]]></summary>
        <author>
            <name>kult</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-157｜B - Bingo]]></title>
        <id>https://zenn.dev/hyperdb/articles/d2a561979f1f42</id>
        <link href="https://zenn.dev/hyperdb/articles/d2a561979f1f42"/>
        <updated>2023-03-05T06:58:10.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-157 B - Bingo



 提出結果
def getIntListRow(N):
    return [list(map(int, input().split())) for _ in range(N)]


def getInt():
    return int(input())


def getIntRow(N):
    return [int(input()) for _ in range(N)]


def check(a):
    for i in range(3):
        if sum(a[i]) == 0:
     ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-157｜A - Duplex Printing]]></title>
        <id>https://zenn.dev/hyperdb/articles/1d83f12f3560a5</id>
        <link href="https://zenn.dev/hyperdb/articles/1d83f12f3560a5"/>
        <updated>2023-03-05T06:58:10.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-157 A - Duplex Printing



 提出結果
import math


def getInt():
    return int(input())


def main():
    n = getInt()

    print(math.ceil(n / 2))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Duplication-divergence ModelをPythonで実装してみました]]></title>
        <id>https://zenn.dev/takuowake/articles/103d22a5058470</id>
        <link href="https://zenn.dev/takuowake/articles/103d22a5058470"/>
        <updated>2023-03-05T05:54:07.000Z</updated>
        <summary type="html"><![CDATA[Duplication-Divegence Modelとは
遺伝子やタンパク質の重複（Duplication）とそれに続く異変（Divergence）が進化の基本的なメカニズムの1つであることを示すモデルです。
このモデルでは、ネットワーク内のノードの複製によって、最初は元のノードと同じである新しいノードが作られると仮定している。その後、新しいノードがランダムな突然変異を起こし、その特性や他のノードとの相互作用が変化するダイバージェンスプロセスを導入したモデルです。

 "Duplication-divergence model of protein interaction netw...]]></summary>
        <author>
            <name>taku</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ターミナルで実行できるコマンドをPythonで作る]]></title>
        <id>https://zenn.dev/roistaff/articles/f47ad273cb8b30</id>
        <link href="https://zenn.dev/roistaff/articles/f47ad273cb8b30"/>
        <updated>2023-03-05T02:14:35.000Z</updated>
        <summary type="html"><![CDATA[はじめに
ターミナルアプリを作るのに一番欠かせないのが、コマンドです。
自分で作ったアプリをコマンドでささっと起動できたらかっこいいですよね。
今回はPythonのパッケージ化に欠かせないsetup.pyを利用してコマンドを作っていきます。

 ディレクトリ構成
hello-app
├── setup.py　←コマンドなどの設定
├── hello_app
│   ├── __init__.py　←インポート用の設定
│   └── hello_app.py ←メインとなるもの
├── README.md　←そのパッケージの説明など
├── LICENSE ←ライセンス（MITが一番...]]></summary>
        <author>
            <name>Staff Roi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DRF-ImageFieldパフォーマンス悪い時]]></title>
        <id>https://zenn.dev/yuya_morimoto/articles/45f12d104c2587</id>
        <link href="https://zenn.dev/yuya_morimoto/articles/45f12d104c2587"/>
        <updated>2023-03-04T14:37:02.000Z</updated>
        <summary type="html"><![CDATA[内容
DRFのSerializerのImageFieldで定義して画像ファイルへのURLをレスポンスするときになんかパフォーマンス悪いかたのため。
僕自身同じ問題で2回ほど悩んだので備忘のために記事化
もしかしたらライブラリのせいかもしれないので言及やめてください。
使用ライブラリはこちら。2,3年前実装なのでもう古いのかもな。
https://github.com/matthewwithanm/django-imagekit

 実装
!
ModelSerializerではなくSerializer Classを使用しております。


models.py
class Demo(mod...]]></summary>
        <author>
            <name>yuya_morimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【ChatGPT API】RSSフィードのページ内容を要約するPythonアプリを作る]]></title>
        <id>https://zenn.dev/tanny/articles/03780cdf744c84</id>
        <link href="https://zenn.dev/tanny/articles/03780cdf744c84"/>
        <updated>2023-03-04T10:56:50.000Z</updated>
        <summary type="html"><![CDATA[この記事では、ChatGPT APIの活用事例を紹介します。RSSフィードの各ページの内容をChatGPT APIで要約し、その内容をまとめて出力するPythonアプリを実装しました。

アプリの出力イメージ
!
このブログ記事もNotion AIを活用して執筆しています。内容が誤っていない限り、やや硬い文章もそのまま採用しています。ご了承ください。


 概要
ChatGPTのAPIが公開されたことで、ChatGPTを活用したアプリがどんどん登場していますね。
ブラウザ版のChatGPTと比べて、自作システムの出力をAIに連携したり、AIへの問い合わせを繰り返し実行したり、といった機能...]]></summary>
        <author>
            <name>Tanny</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Security Hub の Finding を取得]]></title>
        <id>https://zenn.dev/ano/articles/6eee3a34ecec33</id>
        <link href="https://zenn.dev/ano/articles/6eee3a34ecec33"/>
        <updated>2023-03-04T09:19:16.000Z</updated>
        <summary type="html"><![CDATA[これは何
Security Hub で特定 Severity 以上の Finding を取得する

 コード
import boto3
securityhub = boto3.client('securityhub')

def get_findings():
    findings = []
    token = None

    while True:
        options = {
            'Filters': {
                'ComplianceStatus': [
                    {'Value':...]]></summary>
        <author>
            <name>Ano</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[特定日数すぎたリソースの削除 + おまけ]]></title>
        <id>https://zenn.dev/ano/articles/7b4a6a7962cbcc</id>
        <link href="https://zenn.dev/ano/articles/7b4a6a7962cbcc"/>
        <updated>2023-03-04T09:12:48.000Z</updated>
        <summary type="html"><![CDATA[これは何
停止状態になってから特定日数すぎた EC2 を一括削除するスクリプト

 対応している Security Hub のルール

 Stopped EC2 instances should be removed after a specified time period
[EC2.4] This control checks whether any EC2 instances have been stopped for more than the allowed number of days. An EC2 instance fails this check if it is ...]]></summary>
        <author>
            <name>Ano</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[特定ランタイムを使用した Lambda バージョンの一括削除]]></title>
        <id>https://zenn.dev/ano/articles/bcdc5de4e58971</id>
        <link href="https://zenn.dev/ano/articles/bcdc5de4e58971"/>
        <updated>2023-03-04T08:38:45.000Z</updated>
        <summary type="html"><![CDATA[これは何
サポート終了したランタイムを使用している Lambda バージョンがあったのでそれを一括削除するスクリプト

 対応している Security Hub のルール

 Lambda functions should use supported runtimes
[Lambda.2] This AWS control checks that the lambda function settings for runtimes, match the expected values set for the supported runtimes for each language. T...]]></summary>
        <author>
            <name>Ano</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-155｜B - Papers, Please]]></title>
        <id>https://zenn.dev/hyperdb/articles/ff69a58ef197a9</id>
        <link href="https://zenn.dev/hyperdb/articles/ff69a58ef197a9"/>
        <updated>2023-03-04T04:51:23.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-155 B - Papers, Please



 提出結果
def getInt():
    return int(input())


def getIntList():
    return list(map(int, input().split()))


def chk(n):
    if n % 2 != 0:
        return True
    if n % 3 == 0 or n % 5 == 0:
        return True
    return False


def main():
    n = getIn...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-155｜A - Poor]]></title>
        <id>https://zenn.dev/hyperdb/articles/e4c07d4caf6c84</id>
        <link href="https://zenn.dev/hyperdb/articles/e4c07d4caf6c84"/>
        <updated>2023-03-04T04:51:23.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-155 A - Poor



 提出結果
def getIntList():
    return list(map(int, input().split()))


def main():
    l = getIntList()

    print('Yes' if len(set(l)) == 2 else 'No')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-156｜A - Beginner]]></title>
        <id>https://zenn.dev/hyperdb/articles/6cd575f602a43e</id>
        <link href="https://zenn.dev/hyperdb/articles/6cd575f602a43e"/>
        <updated>2023-03-04T04:51:22.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-156 A - Beginner



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    n, r = getIntMap()

    print(r + (0 if n >= 10 else 100 * (10 - n)))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-156｜B - Digits]]></title>
        <id>https://zenn.dev/hyperdb/articles/336c96e3b172f7</id>
        <link href="https://zenn.dev/hyperdb/articles/336c96e3b172f7"/>
        <updated>2023-03-04T04:51:22.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-156 B - Digits



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    n, k = getIntMap()

    c = 0
    while True:
        m = n % k
        c += 1

        n = n // k
        if n == 0:
            break

    print(c)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【opencv&python】低コストで口を検出]]></title>
        <id>https://zenn.dev/sergicalsix/articles/f82eb4a5fcfc66</id>
        <link href="https://zenn.dev/sergicalsix/articles/f82eb4a5fcfc66"/>
        <updated>2023-03-04T01:53:00.000Z</updated>
        <summary type="html"><![CDATA[opencvによる口の検出
opencvによる口の検出は以下の流れで行う。(ソースコードは末尾)
1.画像内の顔の検出
2.顔内の口の検出
ここでopencvによる口の検出は以下のように偽陽性(過剰な検出)が多い。

またopencvによる検出では画像の上から順に領域が検出されるといったルールは確認できない。(https://github.com/sergicalsix/Detection/tree/master/test_mouth_rule)
!
これは筆者が複数の画像でテストはしたものであり、ソースコードを読んでいるわけではない

ここで検出された口候補の領域の内、一番下の領域...]]></summary>
        <author>
            <name>sergicalsix</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[eカート モーター制御について]]></title>
        <id>https://zenn.dev/singularity/articles/8cc14fb2894cd0</id>
        <link href="https://zenn.dev/singularity/articles/8cc14fb2894cd0"/>
        <updated>2023-03-03T18:17:55.000Z</updated>
        <summary type="html"><![CDATA[Maker Fair Kyotoに出展が決まりました。

 eカートのモーター制御について
eカートの最も重要なパーツであり、心臓部であるモーターコントローラーについて解説する。

eカートのモーターを制御しているモーターコントローラーはAmazonhttps://amzn.asia/d/2spl9cvで手に入る中国製の製品で、似たようなコントローラーは数多くある。この製品はLCD付きで２4V/36Vに対応する350wのタイプである。左右のモーター用に２つのコントローラーを購入した。LCDは１つあればよいが、配線が同じものであることと、予備である(実はLCDを１つ短絡して壊してしまっ...]]></summary>
        <author>
            <name>ss_shiraki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[test]]></title>
        <id>https://zenn.dev/taichi_yoshida/articles/10668492d8995e</id>
        <link href="https://zenn.dev/taichi_yoshida/articles/10668492d8995e"/>
        <updated>2023-03-03T15:51:01.000Z</updated>
        <summary type="html"><![CDATA[test]]></summary>
        <author>
            <name>taichi_yoshida_</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[tool.poetry.sourceを使わずにPyTorchを高速にpoetry管理下におく]]></title>
        <id>https://zenn.dev/nakakiiro/articles/3cc5f4080a7a09</id>
        <link href="https://zenn.dev/nakakiiro/articles/3cc5f4080a7a09"/>
        <updated>2023-03-03T10:11:35.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Pythonのパッケージ管理にPoetryを使用している場合、PytorchのリポジトリURLを直接していしたり、別途pipでインストールするなど裏技的に入れる方法はありましたが、1.2のリリースによって公式にサポートされました。
PyTorchを利用するデータ分析界隈では盛り上がり、その影響でPoetryの利用者も増えたのかなと思います。

インストール自体はできるようになったのですが、この方法では速度面で問題がありました。
その回避に成功したようなので備忘録として残しておきます。

 実験環境

OS

Windows 10 Pro 19045.2604
macOS S...]]></summary>
        <author>
            <name>nakakiiro</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[共有メモリによるプロセス間通信(C++, C#, Python)]]></title>
        <id>https://zenn.dev/husty/articles/82f46d01101d83</id>
        <link href="https://zenn.dev/husty/articles/82f46d01101d83"/>
        <updated>2023-03-03T08:33:17.000Z</updated>
        <summary type="html"><![CDATA[こんな人へ

プロセス間，異言語でもリアルタイムなデータ連携したい。
ソケットやパイプの速度では不満。
Pythonを深層学習専用のサービスにして，それ以外はC++やC#で捌きたい。
ROSのPub/Subで画像や点群が重たいと感じる。


 どうぞ
https://github.com/husty530/mmap-template


 解説
だいたいREADMEに書いてますが，補足です。

通信したい2つのプロセスで，同じファイルパスとプールサイズ，1データの最大バイト数を指定してやると動きます。ファイルは無ければ新規作成，すでにあればデータサイズのみ再確保する形で初期化されます...]]></summary>
        <author>
            <name>Takumi Yamashita</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-154｜A - Remaining Balls]]></title>
        <id>https://zenn.dev/hyperdb/articles/678a55eb60e1db</id>
        <link href="https://zenn.dev/hyperdb/articles/678a55eb60e1db"/>
        <updated>2023-03-03T04:48:22.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-154 A - Remaining Balls



 提出結果
def getStringMap():
    return input().split()


def getIntMap():
    return map(int, input().split())


def getString():
    return input()


def main():
    s, t = getStringMap()
    a, b = getIntMap()
    u = getString()

    a, b = [a, b - 1] if ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-154｜B - I miss you...]]></title>
        <id>https://zenn.dev/hyperdb/articles/545dac4cded5fa</id>
        <link href="https://zenn.dev/hyperdb/articles/545dac4cded5fa"/>
        <updated>2023-03-03T04:48:21.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-154 B - I miss you...



 提出結果
def getString():
    return input()


def main():
    s = getString()

    print('x' * len(s))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[discordbotにgpt-3.5-turboを組み込んだ]]></title>
        <id>https://zenn.dev/satory074/articles/satory074_2023030201</id>
        <link href="https://zenn.dev/satory074/articles/satory074_2023030201"/>
        <updated>2023-03-02T15:13:13.000Z</updated>
        <summary type="html"><![CDATA[目的

gpt-3.5-turbo で会話の流れを考慮した対話ができるようになったっぽいので、discordbot に組み込む方法を考えた


 想定

動作する discord.py の bot がある


 つくったもの
https://twitter.com/satory074/status/1631300256099909634

 ソースコード
https://github.com/satory074/discordbot_chatgpt_sample


 簡易解説

 discord.py による bot 作成
discord.py による bot の作成方法は以下が参...]]></summary>
        <author>
            <name>satory074</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【ROS2/Python】PythonでのROS2ノードの作り方(備忘録)]]></title>
        <id>https://zenn.dev/mol0921/articles/f8b789d90abb35</id>
        <link href="https://zenn.dev/mol0921/articles/f8b789d90abb35"/>
        <updated>2023-03-02T13:41:03.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは。初めて記事を書きます。
ここでは、ロボットの開発プラットフォームであるRobot Operating System2(ROS2)でPythonノードを作る方法について書いていきます。
よくある公式チュートリアルではなく、実際に私の研究や開発で学んだことなどを備忘録的な感じで描いていきます。
C++ではノードを作ったことがないので、C++については他の方のサイトを参考にしてください。
あと、githubなどでサンプルコードを公開したかったのですが、開発環境を用意できなかったので、ハンズオンだと思って手を動かしながら読んでいただけると幸いです。

 ROS/ROS2...]]></summary>
        <author>
            <name>mol</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChatGPTで機密情報を扱うための方法【Webサービスを開発した話】]]></title>
        <id>https://zenn.dev/umi_mori/articles/chatgpt-with-confidential-data</id>
        <link href="https://zenn.dev/umi_mori/articles/chatgpt-with-confidential-data"/>
        <updated>2023-03-02T11:08:07.000Z</updated>
        <summary type="html"><![CDATA[はじめまして、フリーランスのますみです！
『一人一人が自立・共存・革新している「クリエイターエコノミー」を創る。』というビジョンに向けて活動しています。


 機密情報の取り扱いについて
2023年3月1日にAPIを用いたデータの取り扱いが「オプトアウト形式からオプトイン形式に変更された」ようです。
https://zenn.dev/umi_mori/articles/chatgpt-api-python
そのため、これまで存在していた「機密情報を送ると学習データに使われてしまう」という問題に対して、APIを使うことで一定のリスクを回避できることになりました。
一方で、OpenAIの人に...]]></summary>
        <author>
            <name>ますみ@フリーランスエンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Bluetoothシャッターでモールス符号を打つ]]></title>
        <id>https://zenn.dev/roistaff/articles/bcea1ddb42aabb</id>
        <link href="https://zenn.dev/roistaff/articles/bcea1ddb42aabb"/>
        <updated>2023-03-02T08:39:55.000Z</updated>
        <summary type="html"><![CDATA[はじめに
はじめまして、Staff Roiです。今回は100均で売っているBluetoothシャッターの入力をPythonで受け取り、モールス符号に変換するプログラムを作っていきます。このプログラムを使えば、遠隔でシャッターを打つだけで文字入力ができるようになります。

 用意
順番に見ていきましょう。

 環境
・ラズベリーパイ3B （linux）
基本的にPython3がインストールされていればどの環境でも大丈夫なはずです。

 Bluetoothシャッター
ダイソーで売っていたものを使います。

二つ種類があるそうですが、今回は上の写真のものを使います。

 必要なパッケージ
...]]></summary>
        <author>
            <name>Staff Roi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python仮想環境のbest practiceの模索]]></title>
        <id>https://zenn.dev/mount_tyo/articles/4eddfb9ae97d14</id>
        <link href="https://zenn.dev/mount_tyo/articles/4eddfb9ae97d14"/>
        <updated>2023-03-02T05:39:00.000Z</updated>
        <summary type="html"><![CDATA[概要

Pythonによるコーディングに必要なものは以下

Pythonのバージョン管理
パッケージ管理


いくつかの仮想環境の構築方法を試した

pyenv + venv
poetry
anaconda


今後も更新予定


 なぜ仮想環境が必要か？
Pythonを用いたコーディングについて、必要なものは以下の通り。

Pythonのバージョン管理

3.7.6などの特定のバージョンを使いたい


パッケージ管理

numpy, pandasなどのプロジェクトに必要なパッケージを管理したい
パッケージのバージョンや依存関係も管理したい



Pythonのバージョンと使用するパ...]]></summary>
        <author>
            <name>mountyo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-153｜A - Serval vs Monster]]></title>
        <id>https://zenn.dev/hyperdb/articles/f193dbb7cd9305</id>
        <link href="https://zenn.dev/hyperdb/articles/f193dbb7cd9305"/>
        <updated>2023-03-02T03:24:40.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-153 A - Serval vs Monster



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    h, a = getIntMap()

    c = 0
    while h > 0:
        h -= a
        c += 1
    print(c)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-153｜B - Common Raccoon vs Monster]]></title>
        <id>https://zenn.dev/hyperdb/articles/084b2ebddf4bb4</id>
        <link href="https://zenn.dev/hyperdb/articles/084b2ebddf4bb4"/>
        <updated>2023-03-02T03:24:39.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-153 B - Common Raccoon vs Monster



 提出結果
def getIntMap():
    return map(int, input().split())


def getIntList():
    return list(map(int, input().split()))


def main():
    h, n = getIntMap()
    a = getIntList()

    print('Yes' if h <= sum(a) else 'No')


if __name__ == "_...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【最新速報】ChatGPT APIの「概要と使い方」（Pythonコード付き）]]></title>
        <id>https://zenn.dev/umi_mori/articles/chatgpt-api-python</id>
        <link href="https://zenn.dev/umi_mori/articles/chatgpt-api-python"/>
        <updated>2023-03-02T01:25:09.000Z</updated>
        <summary type="html"><![CDATA[はじめまして、フリーランスのますみです！
『一人一人が自立・共存・革新している「クリエイターエコノミー」を創る。』というビジョンに向けて活動しています。

本日（アメリカ：2023年3月1日、日本：2023年3月2日）に公開された「ChatGPT APIの概要と使い方」を解説します！
この記事を通して、「ChatGPTのAPIをシステムに組み込みたい」という方の役に立てますと幸いです！
また、ChatGPTやAPIについてまだ詳しくない方は、こちらを先にご覧ください◎
https://zenn.dev/umi_mori/books/chatbot-chatgpt
!
文字よりも「動画の方...]]></summary>
        <author>
            <name>ますみ@フリーランスエンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTTPリクエストの送り方１（curl・form送信・python）]]></title>
        <id>https://zenn.dev/n_nishino/articles/d21a61df114fdd</id>
        <link href="https://zenn.dev/n_nishino/articles/d21a61df114fdd"/>
        <updated>2023-03-01T13:55:49.000Z</updated>
        <summary type="html"><![CDATA[概要
HTTPリクエスト送る方法のメモ。
JavaScriptによる送り方（Ajaxリクエスト）は以下の記事に書いた。
https://zenn.dev/n_nishino/articles/7c5b56cb7315e3
記載した方法一覧

curlコマンド利用
HTML（formタグ）利用
Python（requestsライブラリ）利用
Python（requestsライブラリ）利用　【セッション管理したいver】


 1.curlコマンドによるHTTPリクエスト
基本はcurl <リクエスト先URL>

メソッドを指定したい場合は-Xオプションを用いる。
ヘッダー付...]]></summary>
        <author>
            <name>n-nishino</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hubspot のカスタムコードを使って「営業日」の計算をする]]></title>
        <id>https://zenn.dev/readyfor_blog/articles/a5d2c5a7f6ef34</id>
        <link href="https://zenn.dev/readyfor_blog/articles/a5d2c5a7f6ef34"/>
        <updated>2023-03-01T07:25:46.000Z</updated>
        <summary type="html"><![CDATA[この記事を読んで分かること
Hubspot のプロパティを元にN営業日後（前）を計算する方法がわかる。Hubspot のカスタムコードからはライブラリを使うことができないため、営業日を自分で計算する必要がある。計算にはこの3つのプロパティを使う

基準日
N営業日
基準日 + N営業日を計算した結果を入れるプロパティ


 前準備

 APIキーを取得する

設定 > 連携 > 非公開アプリ のページから「非公開アプリを作成」する
スコープを指定して権限を付与し、「アプリを作成」する
トークンをコピーする





 プロパティを作る
今回は仮の名前で、3つのプロパティを...]]></summary>
        <author>
            <name>Shohei Urano</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS SDK for Pandas(AWS Data Wrangler)でAthenaにクエリを投げる]]></title>
        <id>https://zenn.dev/eviry/articles/8b38777d35650a</id>
        <link href="https://zenn.dev/eviry/articles/8b38777d35650a"/>
        <updated>2023-03-01T07:16:22.000Z</updated>
        <summary type="html"><![CDATA[はじめに
動画配信サービスmillvi (ミルビィ)で主にバックエンドエンジニアとして業務をしている片山です。
前回私が投稿した記事【Pyathena + SQLAlchemy】PythonでAmazon Athenaをオブジェクト指向的に扱いたいでは、SQLAlchemyでAmazon Athenaにクエリを発行する方法を説明しました。
今回の記事では別のパッケージであるAWS SDK for Pandas(AWS Data Wrangler)を使い、クエリを発行する方法を説明しつつ、管理が楽になる設定についても説明します。

 AWS SDK for pandasとは
読んで字の...]]></summary>
        <author>
            <name>Eviry Tech Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[有限体の実装3（Montgomery乗算の紹介）]]></title>
        <id>https://zenn.dev/herumi/articles/finite-field-03-mul</id>
        <link href="https://zenn.dev/herumi/articles/finite-field-03-mul"/>
        <updated>2023-03-01T06:02:18.000Z</updated>
        <summary type="html"><![CDATA[初めに
今回は有限体の山場、Montgomery乗算を紹介します。
Montgomery乗算は普通の乗算の代わりとなる重要な演算です。最初にMontgomery乗算のPythonコードを紹介し、それが持つ数学的な性質を考察します。
記事全体の一覧は有限体の実装一覧参照。

 Montgomery乗算
素数 p の有限体の元 x, y において乗算は xy \bmod{p} です（ p で割った余り）。
しかし p で割る処理は重たいので、それを避ける方法の一つがMontgomery乗算です。
しばらく数学的な話が続きます。まずいくつか記号の準備をします。
L をCPUのレジスタサイズ...]]></summary>
        <author>
            <name>herumi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-152｜B - Comparing Strings]]></title>
        <id>https://zenn.dev/hyperdb/articles/14ccc78686409b</id>
        <link href="https://zenn.dev/hyperdb/articles/14ccc78686409b"/>
        <updated>2023-03-01T03:20:03.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-152 B - Comparing Strings



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    a, b = getIntMap()

    s = ["".join([str(a) for _ in range(b)]),
         "".join([str(b) for _ in range(a)])]
    s.sort()

    print(s[0])


if __name__ == "__main__":
    m...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-152｜A - AC or WA]]></title>
        <id>https://zenn.dev/hyperdb/articles/0b421359c59776</id>
        <link href="https://zenn.dev/hyperdb/articles/0b421359c59776"/>
        <updated>2023-03-01T03:20:02.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-152 A - AC or WA



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    n, m = getIntMap()

    print('Yes' if n == m else 'No')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[『Python』EDINET上の財務情報を取得・アプリで可視化③]]></title>
        <id>https://zenn.dev/kz2021/articles/f9a5f84497d7fb</id>
        <link href="https://zenn.dev/kz2021/articles/f9a5f84497d7fb"/>
        <updated>2023-02-28T23:30:21.000Z</updated>
        <summary type="html"><![CDATA[はじめに
大まかな流れは下の図の通りです。

ここでは、➁で保存したCSVを使用してアプリを作成・可視化するまでの工程を取り扱います。
アプリ作成のライブラリにPythonのStreamlit、可視化のライブラリにPlotlyを使います。
また、Streamlitのマルチページという機能を使って作成しています。
マルチページの説明は以下のサイトが分かりやすいのでそちらを載せておきます。
https://qiita.com/nockn/items/f40a80cc79fcb358083c
https://kajiblo.com/streamlit-maltipage/

ファイル構成
...]]></summary>
        <author>
            <name>kz2021</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[『Python』EDINET上の財務情報を取得・アプリで可視化➁]]></title>
        <id>https://zenn.dev/kz2021/articles/3522b74240a010</id>
        <link href="https://zenn.dev/kz2021/articles/3522b74240a010"/>
        <updated>2023-02-28T23:29:45.000Z</updated>
        <summary type="html"><![CDATA[はじめに
大まかな流れは下の図の通りです。

ここでは➀で取得した書類から実際に財務諸表の数値を取り出しデータフレームとしてcsvに保存するまでの工程を取り扱います。
➀ではXBRLとPDFの形式でそれぞれ書類を取得しましたが、ここではその中のXBRL形式で取得した有価証券報告書を使用します。
ちなみに、XBRL形式では以下のように表されています。

今回マーカーで引いた部分を使用することで数値を取り出すことが出来ます。

 実行したコード

ライブラリのインポート
!pip install edinet_xbrl

from google.colab import drive
dr...]]></summary>
        <author>
            <name>kz2021</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[『Python』EDINET上の財務情報を取得・アプリで可視化➀]]></title>
        <id>https://zenn.dev/kz2021/articles/0261e039a41866</id>
        <link href="https://zenn.dev/kz2021/articles/0261e039a41866"/>
        <updated>2023-02-28T23:28:29.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回は、EDINETというサイトから上場企業の有価証券報告書を取得し、その情報をローカル環境のアプリで可視化する作業について記載していこうと思います。（➀から➂に分けて記載します。）
大まかな流れは下の図の通りです。

この記事では、EDINET APIで書類を取得し保存する工程をGoogle Colabで実行した時のコードを記載したいと思います。

 EDINETについて
https://www.fsa.go.jp/search/20130917.html
EDINETは、ざっくり言えば様々な企業の決算情報を纏めた書類を縦覧できるサイトです。
それぞれの書類をPDFやXB...]]></summary>
        <author>
            <name>kz2021</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ローカルのDocker環境でInstructPix2Pixを動かしてみた]]></title>
        <id>https://zenn.dev/kleamp1e/articles/202302-instruct-pix2pix</id>
        <link href="https://zenn.dev/kleamp1e/articles/202302-instruct-pix2pix"/>
        <updated>2023-02-28T14:57:19.000Z</updated>
        <summary type="html"><![CDATA[はじめに
InstructPix2PixをローカルのDocker環境で動かしてみた際のメモです。
予めDocker、NVIDIAドライバ、NVIDIA Container Runtimeのセットアップが必要です。

 環境
試した環境は以下の通りです。
$ grep PRETTY_NAME /etc/os-release
PRETTY_NAME="Ubuntu 20.04.5 LTS"

$ uname -a
Linux gpu 5.4.0-139-generic #156-Ubuntu SMP Fri Jan 20 17:27:18 UTC 2023 x86_64 x86_64 x...]]></summary>
        <author>
            <name>kleamp1e</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Playwrightで会話風画像を生成してブログに埋め込む]]></title>
        <id>https://zenn.dev/nkentar/articles/article_20230228</id>
        <link href="https://zenn.dev/nkentar/articles/article_20230228"/>
        <updated>2023-02-28T14:56:15.000Z</updated>
        <summary type="html"><![CDATA[この記事について
Zennブログ用のmarkdownに、以下の記述をすることで…
![会話内容を…](/images/article_20230228-1.png) <!-- {: .l-fuki .ria} -->
![こんな感じで…](/images/article_20230228-2.png) <!-- {: .r-fuki .ria_sad} -->
![画像表示するようにしてみたよ！](/images/article_20230228-3.png) <!-- {: .l-fuki .ria_gld} -->


 

 モチベーション
...]]></summary>
        <author>
            <name>N-ken</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonで「ドドスコスコスコ」を文字数を減らして書きたい]]></title>
        <id>https://zenn.dev/iyamada/articles/5f76cb1217e53a</id>
        <link href="https://zenn.dev/iyamada/articles/5f76cb1217e53a"/>
        <updated>2023-02-28T13:52:25.000Z</updated>
        <summary type="html"><![CDATA[概要
結論のコード
import random as r;c=15
while c%4096^1911:c=c*2+r.randrange(2);print(["ドド","スコ"][c%2])
print("ラブ注入♡")
今回扱ったコードをGitHubで見る↗︎

次の記事 : 未執筆

 本題
かなり前に目にした、下の問題



 twitterより
@sheeeeepla さんのツイート
【問題】配列{"ドド","スコ"}からランダムに要素を標準出力し続け、『その並びが「ドドスコスコスコ」を3回繰り返したもの』に一致したときに「ラブ注入♡」と標準出力して終了するプログラムを作成...]]></summary>
        <author>
            <name>いやぁ...</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[BenzaitenAdlibのざっくり解説]]></title>
        <id>https://zenn.dev/log5/articles/brief-spec-of-benzaiten-adlib</id>
        <link href="https://zenn.dev/log5/articles/brief-spec-of-benzaiten-adlib"/>
        <updated>2023-02-28T13:45:51.000Z</updated>
        <summary type="html"><![CDATA[これは何?
先日開催された「AIミュージックバトル!弁財天」にて使用したプログラム BenzaitenAdlib の後処理について説明する記事です。
当日の解法共有LTでもお話しましたが、このプログラムは学習フェーズが公式サンプルのものと同じであるため、この記事では後処理についてのみ説明します。
!
なお、この記事で説明するのは、第1回弁財天の試合で使用したバージョンのプログラム に関するものです。これ以降にアップデートが入り、説明と異なる仕様になっている可能性があります。


 用語


ノート とは、音符のことです。

ノート番号 とは、ノートの音の高さのことで、雑に言うと鍵盤で...]]></summary>
        <author>
            <name>log5</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChatGPTを用いたDiscordBot作成]]></title>
        <id>https://zenn.dev/fumi_sagawa/articles/0232e3441a9b87</id>
        <link href="https://zenn.dev/fumi_sagawa/articles/0232e3441a9b87"/>
        <updated>2023-02-28T12:06:20.000Z</updated>
        <summary type="html"><![CDATA[先日立ち上げたDiscord Serverを便利にしたいと思い、「特定のスタンプを押したらあるチャンネルでシェアするBot」を作りました。
ChatGPTの使い方と合わせて共有です。

プロンプト
プロンプトの改良
リファクタリング
デプロイ
振り返り


 プロンプト
初期プロンプトは以下です。
あなたはプロのエンジニアです。

以下の要件のコードを作成してください。
- Discordのbot
- 投稿に絵文字がついた際に発火
- その投稿のURLをあるチャンネルに投稿する
- 絵文字は特定のカスタム絵文字である
また、コードは以下のサンプルから書き始めてください。

ステップバイス...]]></summary>
        <author>
            <name>サガワフミヤ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google Colab + MMDetectionで楽してObject Detection - 4. データセットでモデルを学習 -]]></title>
        <id>https://zenn.dev/jizai_labo/articles/230221_mmdet_train_model</id>
        <link href="https://zenn.dev/jizai_labo/articles/230221_mmdet_train_model"/>
        <updated>2023-02-28T11:47:03.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは！すだです！
このシリーズ記事では、MMDetection で行えるいろんな便利な機能を紹介していきます。
今回は、前回の「3. データセットでモデルを評価」の続きで、メジャーな公開データセットを使って Object Detection モデルを学習をしてみたい思います！
過去の記事をまだ読んでいない方は、先にお読みください！
https://zenn.dev/jizai_labo/articles/mmdet_outline
今回作成した Colab Notebook はこちらです。
https://colab.research.google.com/drive...]]></summary>
        <author>
            <name>すだ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[授業で地域の特徴を付与した対話システムのチーム開発を行った話]]></title>
        <id>https://zenn.dev/mya3gou/articles/zenn-dialoguesystem</id>
        <link href="https://zenn.dev/mya3gou/articles/zenn-dialoguesystem"/>
        <updated>2023-02-28T11:08:39.000Z</updated>
        <summary type="html"><![CDATA[2023/02/28

 はじめに
大学3回生後期にチーム開発を行う授業があったのでその話をしようと思います．来年のB3とか対話システム作る人の役に立てば良いかなと思っています．

 テーマ決め
テーマは大まかに分けて画像認識，センシング，自然言語処理の3テーマがあったのですが，自分は自然言語処理をやっている人工知能研究室に所属しているので，取り敢えず自然言語処理のテーマを選びました．
その中でさらに機械翻訳と対話システムという2種類のテーマがあったのですが，機械とおしゃべりできたらめっちゃ面白そうじゃんというモチベで対話システムを選びました．結果地獄みたいな作業量でしたが，最後はそこそ...]]></summary>
        <author>
            <name>みゃー3号</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[個人的venv入門]]></title>
        <id>https://zenn.dev/straydog/articles/908d516f7e2d4c</id>
        <link href="https://zenn.dev/straydog/articles/908d516f7e2d4c"/>
        <updated>2023-02-28T06:16:45.000Z</updated>
        <summary type="html"><![CDATA[はじめに
去年まではとにかく生産することに重きを置いていたのですが、最近は余裕があるので、本来最初からやっておかなければならなかったことに入門します。
仮想環境まわりは記事がごちゃってるイメージが強かったので、個人的な備忘録として記述します。OSは「Windows 10 pro」です。

 仮想環境構築
コマンドは以下の通り。
python -m venv .venv
上記がスタンダードぽいです。基本的には、同じソースコードで複数の環境を試すからという理由でしょうか。

 アクティベートとディアクティベート
アクティベートは以下の通り。これにより仮想環境に入ります。
.\.venv\...]]></summary>
        <author>
            <name>stray dog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-151｜A - Next Alphabet]]></title>
        <id>https://zenn.dev/hyperdb/articles/df387cdc1b86d8</id>
        <link href="https://zenn.dev/hyperdb/articles/df387cdc1b86d8"/>
        <updated>2023-02-28T03:49:49.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-151 A - Next Alphabet



 提出結果
def getString():
    return input()


def main():
    s = getString()

    print(chr(ord(s) + 1))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-151｜B - Achieve the Goal]]></title>
        <id>https://zenn.dev/hyperdb/articles/dde59fbd047e57</id>
        <link href="https://zenn.dev/hyperdb/articles/dde59fbd047e57"/>
        <updated>2023-02-28T03:49:48.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-151 B - Achieve the Goal



 提出結果
def getIntMap():
    return map(int, input().split())


def getIntList():
    return list(map(int, input().split()))


def main():
    n, k, m = getIntMap()
    a = getIntList()

    b = max(0, n * m - sum(a))

    print(b if b <= k else -1)


if...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[置換がめんどくさい（pythonで一定期間ごとに日付を変えて置換して新しくファイルを作成する（作業記録ファイル作成））]]></title>
        <id>https://zenn.dev/activecore/articles/0d410261a4ce9e</id>
        <link href="https://zenn.dev/activecore/articles/0d410261a4ce9e"/>
        <updated>2023-02-28T03:38:59.000Z</updated>
        <summary type="html"><![CDATA[概要
pythonを用いて一定期間ごとに日付を変更した置換ファイルを大量に作成する方法、コード
背景
業務にて、8日ごとに期間は変えなければならないが似たようなtxtファイルを3,4ヶ月間分作成しなければならず、フォーマットをダウンロードして、置換する作業を何回もするのは無駄だと感じたので。
方法
pythonのコードで
・会話形式で開始日と終了日をstartday, enddayと定義
・ファイルの中のyyyymmddを作成日に、yyyy-mm-ddとxxxx-mm-ddを開始日から8日ごとで区切った区間での開始日と終了日に置換したファイルを作成
以上のようなコードのようになる。
ポイ...]]></summary>
        <author>
            <name>John</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】FlaskサーバでJWT認証を実装する]]></title>
        <id>https://zenn.dev/oreilly_ota/articles/1e1cad2451391d</id>
        <link href="https://zenn.dev/oreilly_ota/articles/1e1cad2451391d"/>
        <updated>2023-02-27T23:55:23.000Z</updated>
        <summary type="html"><![CDATA[概要
本記事では、JWT（JSON Web Token）を使用した認証を、flaskで実装する方法を紹介する。本記事のゴールとしては、localhostで立ち上げたflaskアプリケーション （http://127.0.0.1:5000/headers） に対して、Bearer Tokenを使用しGETを行う。そうすると、flaskアプリケーションでBearer Tokenが認証されて、200のステータスコードで "Access Granted" と出力される。


 要件仕様
上記アプリケーションを実装する上で、三つの機能が求められる。

get_token_auth_header...]]></summary>
        <author>
            <name>オライリーヨッシー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonでNoneの時、Default Valueを取得する]]></title>
        <id>https://zenn.dev/nosukey/articles/python_get_default_value</id>
        <link href="https://zenn.dev/nosukey/articles/python_get_default_value"/>
        <updated>2023-02-27T14:57:12.000Z</updated>
        <summary type="html"><![CDATA[書くこと
以下のようなコードを短く書く方法
# getValue(): string value or None
value = getValue()

if value is None:
    value = "DefaultValue"

 方法論
orを利用する
value = getValue() or 'DefaultValue'

 付録: dict型の値取得と組み合わせる
dict = {'key': 'value', 'none_key': None}

dict.get('no_key', 'NoKeyDefaultValue')
# => 'NoKeyDe...]]></summary>
        <author>
            <name>Nosukey</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[firestoreのpython orm、fireoで簡単にfirestoreを使う ②モデルとデータの保存]]></title>
        <id>https://zenn.dev/yoheikusano/articles/1b8444217f64a7</id>
        <link href="https://zenn.dev/yoheikusano/articles/1b8444217f64a7"/>
        <updated>2023-02-27T14:57:02.000Z</updated>
        <summary type="html"><![CDATA[結構なボリュームになりそうなので分けて書いていきます。
①はじめに　簡単な使い方　
②モデルの定義方法と保存方法　（こちらの記事となります。）

こちらの記事はドキュメントより必要な点を抜粋しています。

 モデルについて
FireOは最初にモデル（データのひな型）を作ります。
基本はfrom fireo.model import Modelを行い、Modelを継承して作成していきます。
以下のようにしてモデルを定義します。
class MyModel(Model):
    uid = IDField()
    user_name = TextField(required=True)...]]></summary>
        <author>
            <name>草野洋平</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DjangoのORMで子テーブルのカラムを使ってfilterする]]></title>
        <id>https://zenn.dev/nosukey/articles/django_filter_child_columns</id>
        <link href="https://zenn.dev/nosukey/articles/django_filter_child_columns"/>
        <updated>2023-02-27T14:20:47.000Z</updated>
        <summary type="html"><![CDATA[書くこと

distinctを使ってフィルターする方法
annotateを使ってフィルターする方法


 利用技術

Django


 想定

 モデル
以下のArticleとCommentモデルがあるとする。
class Article(models.Model):
    title = models.CharField(max_length=100)
    # (省略)


class Comment(models.Model):
    text = models.CharField(max_length=100)
    active = models.BooleanF...]]></summary>
        <author>
            <name>Nosukey</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonでlocalStack(Docker)のS3オブジェクトを取得する]]></title>
        <id>https://zenn.dev/yumemi_inc/articles/cefe0006068553</id>
        <link href="https://zenn.dev/yumemi_inc/articles/cefe0006068553"/>
        <updated>2023-02-27T09:45:00.000Z</updated>
        <summary type="html"><![CDATA[AWSリソースをローカル環境で使うことができるlocalStackを試しに使ってみました。
https://localstack.cloud/

 環境
機種 : MacBook Pro 2021(M1 Max)
OS : Monterey(12.2.1)
Python version(Docker): 3.11.2
pip version(Docker): 22.3.1
awscli-local version: 0.20

 各種インストール

 localStackのインストール
localStackを記載ある方法通りインストールします。が、Dockerコンテナを立てるので、なくて...]]></summary>
        <author>
            <name>lightkun</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[firestoreのpython orm、fireoで簡単にfirestoreを使う ①使い方]]></title>
        <id>https://zenn.dev/yoheikusano/articles/9a16def37d341b</id>
        <link href="https://zenn.dev/yoheikusano/articles/9a16def37d341b"/>
        <updated>2023-02-27T06:38:31.000Z</updated>
        <summary type="html"><![CDATA[結構なボリュームになりそうなので分けて書いていきます。
①はじめに　簡単な使い方　（こちらの記事となります。）
②モデルの定義方法と保存方法

たとえばこんなクラスがあったとします。こちらをそのままFirestoreに保存し、それをそのままFirestoreから取り出すようなライブラリーです。
@dataclass
class Conversation():
    uid:str
    startAt:datetime.datetime
    endAt:datetime.datetime
    outgoing:str
    incoming:str
    talk:str...]]></summary>
        <author>
            <name>草野洋平</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-150｜A - 500 Yen Coins]]></title>
        <id>https://zenn.dev/hyperdb/articles/d194cb7a348c9e</id>
        <link href="https://zenn.dev/hyperdb/articles/d194cb7a348c9e"/>
        <updated>2023-02-27T04:11:03.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-150 A - 500 Yen Coins



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    k, x = getIntMap()

    print('Yes' if x / k <= 500.0 else 'No')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-150｜B - Count ABC]]></title>
        <id>https://zenn.dev/hyperdb/articles/1981400dfc854d</id>
        <link href="https://zenn.dev/hyperdb/articles/1981400dfc854d"/>
        <updated>2023-02-27T04:11:03.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-150 B - Count ABC



 提出結果
def getInt():
    return int(input())


def getString():
    return input()


def main():
    n = getInt()
    s = getString()

    c = 0
    for i in range(n - 2):
        if s[i:i+3] == 'ABC':
            c += 1
    print(c)


if __name__ == "__main__":
...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Cosmos DBで確認：ラズパイに繋いだセンサーで温度を取得してみた]]></title>
        <id>https://zenn.dev/kdl_iotblog/articles/970a3c947773dd</id>
        <link href="https://zenn.dev/kdl_iotblog/articles/970a3c947773dd"/>
        <updated>2023-02-27T01:16:41.000Z</updated>
        <summary type="html"><![CDATA[はじめに
前回のブログにてLINEから温度が確認できたので、今回は温度センサーの値をMicrosoft Azure（以下 Azure）のCosmos DBに格納していきたいと思います。

 システム構成
以下のようなシステム構成で構築を進めていきます。


 Azureリソースの作成

 IoT Hubの作成
まずはAzure IoT Hub（以下 IoT Hub）の作成から進めていきます。以下のように選択し、作成ボタンを押下します。

リソースの作成：IoT Hubを選択




次画面では以下のように入力し、確認および作成ボタンを押下します。

リソースグループ：作成したリソース...]]></summary>
        <author>
            <name>kdl-iotblog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[特定 CloudTrail イベント発生時 Lambda を実行]]></title>
        <id>https://zenn.dev/ano/articles/9e1da4ed3776b8</id>
        <link href="https://zenn.dev/ano/articles/9e1da4ed3776b8"/>
        <updated>2023-02-27T00:09:27.000Z</updated>
        <summary type="html"><![CDATA[ゴール / やりたいこと
CloudTrail で 特定イベントがあった場合に Lambda を実行する
※今回は作成/更新されたポリシー内でリソース * に対してアクションが Allow とされているかのチェック

 アーキテクチャ図


 詳細
監視している CloudTrail で CloudWatch Logs へのログ保存を有効にする

CloudWatch Logs で Lambda をターゲットとしたサブスクリプションフィルターを作成する

ターゲットにする Lambda を指定して Filter 設定をする
※Log format は CloudTrail にして F...]]></summary>
        <author>
            <name>Ano</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Matplotlib で複数の図に一つの凡例を描画する]]></title>
        <id>https://zenn.dev/__leopardus__/articles/454a65ccd2ca91</id>
        <link href="https://zenn.dev/__leopardus__/articles/454a65ccd2ca91"/>
        <updated>2023-02-26T15:34:17.000Z</updated>
        <summary type="html"><![CDATA[matplotlib の figure.add_subplot を使って複数の図を描く，という状況を考えます．
こういう状況は，例えば手法 A と手法 B を複数のデータ上で比較するといった場合に起こります．
ここでは，簡単のために次のような例を考えます．

import matplotlib.pyplot as plt
import numpy as np

N_ROW, N_COL = 1, 2

x = np.linspace(0, 10, 100)


# 幅6，高さ4の図2つ分の描画領域を描く
fig = plt.figure(figsize=(12, 4))

# 1つ目のグ...]]></summary>
        <author>
            <name>R</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2ちゃんねらーAI :  大規模言語モデルのファインチューニングの実験]]></title>
        <id>https://zenn.dev/vel/articles/573d6b952c319d</id>
        <link href="https://zenn.dev/vel/articles/573d6b952c319d"/>
        <updated>2023-02-26T12:09:50.000Z</updated>
        <summary type="html"><![CDATA[概要
大規模言語モデルのチャットサービスを仕事に使いたくても, 非公開情報について話すのはアウト. 業務内容に詳しいAIとチャットしてみたいのに... 実現するためには, 事前学習済みAIを取得し, (非公開で) データを追加学習させてカスタムする方法を知っておく必要がある. その実験として, 「GPT-2」を「おーぷん2ちゃんねる対話コーパス」でファインチューニング. 2ちゃんねらーの知識を持ってる風のAIを作ってみた. 同じ方法で非公開データの知識を持ってる風のAIを作れるかもしれない.

 1. 背景
大規模言語モデルの発展が目覚ましい. 中でも

ChatGPT[1]

Bi...]]></summary>
        <author>
            <name>OvO</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【DevOps】Heroku / GitHub Actionsを連携して、CI / CDパイプラインを構築する]]></title>
        <id>https://zenn.dev/oreilly_ota/articles/7d0e9fbd57aaed</id>
        <link href="https://zenn.dev/oreilly_ota/articles/7d0e9fbd57aaed"/>
        <updated>2023-02-26T08:13:37.000Z</updated>
        <summary type="html"><![CDATA[概要
今回は「GitHub Actionsを用いた、HerokuへのCI/CDパイプライン」を構築した。まずは、詳細に作業内容を説明して、その後ハンズオンを行い、理解を深める。

 作業内容

 全体の流れ
今回は、CI/CDパイプラインを活用することで、新しいバージョンのソフトウェアを実行するためのステップを構築した。開発エンジニアは、GitHubレポジトリに対して、新しいコードをpushしマージする。一度新しいコードがGitHubレポジトリにマージされると、GitHub ActionsによるCI/CDパイプラインが起動して、新しいコードはHerokuサーバにデプロイされる。
具体...]]></summary>
        <author>
            <name>オライリーヨッシー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ControlNetで文字画像を生成する【雑コード付き】]]></title>
        <id>https://zenn.dev/watanko/articles/db479c7705977d</id>
        <link href="https://zenn.dev/watanko/articles/db479c7705977d"/>
        <updated>2023-02-26T07:22:41.000Z</updated>
        <summary type="html"><![CDATA[最近ControlNetで遊ぶのにハマっているwatankoです。
https://twitter.com/yamkaz/status/1628891312299839489?s=61&t=a2y7iu1YzOVPOzsx2-caHw
先日このようなツイートを見かけ、面白そうなので試してみることにしました。

 生成結果





 やっていること
以下のような白黒の文字画像を、"直接"depthモデルに突っ込むだけです。(解説:例えばdepthの場合ControlNetは第一段階として入力画像から深度画像を推定したのち、第二段階で推定した深度画像を入力として画像を生成します。第...]]></summary>
        <author>
            <name>watanko</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-149｜B - Greedy Takahashi]]></title>
        <id>https://zenn.dev/hyperdb/articles/918650dd2179a1</id>
        <link href="https://zenn.dev/hyperdb/articles/918650dd2179a1"/>
        <updated>2023-02-26T04:22:48.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-149 B - Greedy Takahashi



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    a, b, k = getIntMap()

    ax = max(0, a - k)
    bx = max(0, b - max(0, k - a))

    print('%d %d' % (ax, bx))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-148｜B - Strings with the Same Length]]></title>
        <id>https://zenn.dev/hyperdb/articles/81e0e04d1d468d</id>
        <link href="https://zenn.dev/hyperdb/articles/81e0e04d1d468d"/>
        <updated>2023-02-26T04:22:47.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-148 B - Strings with the Same Length



 提出結果
def getInt():
    return int(input())


def getStringMap():
    return input().split()


def main():
    n = getInt()
    s, t = getStringMap()

    a = ''
    for i in range(n):
        a += (s[i] + t[i])
    print(a)


if __name__ == "...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-149｜A - Strings]]></title>
        <id>https://zenn.dev/hyperdb/articles/12b4ab4e3933ca</id>
        <link href="https://zenn.dev/hyperdb/articles/12b4ab4e3933ca"/>
        <updated>2023-02-26T04:22:47.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-149 A - Strings



 提出結果
def getStringMap():
    return input().split()


def main():
    s, t = getStringMap()

    print(t + s)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-148｜A - Round One]]></title>
        <id>https://zenn.dev/hyperdb/articles/10e6ca48b9b397</id>
        <link href="https://zenn.dev/hyperdb/articles/10e6ca48b9b397"/>
        <updated>2023-02-26T04:22:46.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-148 A - Round One



 提出結果
def getIntRow(N):
    return [int(input()) for _ in range(N)]


def main():
    n = getIntRow(2)
    m = [i for i in [1, 2, 3] if i not in n]

    print(sum(m))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[変動要因に類似点がある時系列データの需要予測に対する考察]]></title>
        <id>https://zenn.dev/shungo_a/articles/a5887fada61694</id>
        <link href="https://zenn.dev/shungo_a/articles/a5887fada61694"/>
        <updated>2023-02-26T01:43:49.000Z</updated>
        <summary type="html"><![CDATA[前記事のまとめ、および、本記事の目的
前記事(前記事url)では、以下ののデータセットと環境での構築を行いました。

データセット : Store Item Demand Forecasting Challenge

実装環境 : google colaboratory
　このデータセットを2013年～2017年までの各顧客の50品種の需要と読み替え、顧客No 1のうち需要予測を実施しました。まず、各品番の需要の推移をみると、数量の違いはあるものの、トレンドや周期が似ていることが分かりました。

そこで、product 1に対し2016年までのデータを訓練データとし、2017年の予測...]]></summary>
        <author>
            <name>S.A</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FlexGenをGeForce RTX 3070(8GB)で動かす]]></title>
        <id>https://zenn.dev/windvoice/articles/6952bf27863893</id>
        <link href="https://zenn.dev/windvoice/articles/6952bf27863893"/>
        <updated>2023-02-26T01:01:38.000Z</updated>
        <summary type="html"><![CDATA[はじめに
いま、私のTwitterのTLはFlexGenの話題でもちきりです。ChatGPTも流行していますが、みなさんつよつよPCを持っている様子なので、動くと分かれば試してみたくなるのだと思います。ええ、わたしもそうです。手持ちのハードウェア（ゲーミングPC程度）で動くことが確認できたので、記事にしておきます。

 スペック

Core i7 12700K
DDR4 64GB Memory
GeForce RTX 3070 (8GB)
Windows 11(latest)
CUDA 11.7
cuDNN 11.x
Python 3.10.10
pytorch 1.13.1*cu1...]]></summary>
        <author>
            <name>WindVoice</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[第63回シェル芸勉強会の問題をPythonワンライナーで解く]]></title>
        <id>https://zenn.dev/yusukekato/articles/dc44dd84538e1a</id>
        <link href="https://zenn.dev/yusukekato/articles/dc44dd84538e1a"/>
        <updated>2023-02-25T23:39:38.000Z</updated>
        <summary type="html"><![CDATA[はじめに
2023年2月25日に開催された第63回シェル芸勉強会にオンラインで参加させていただきました。基本的にはシェルのワンライナーで問題を解いていたのですが、Pythonのワンライナーでも挑戦してみたので、いくつか紹介しようと思います。邪道です。すみません。よろしくお願いいたします。

 注意
シェル芸勉強会の問題は、基本的にはシェルのワンライナーで解くことが推奨されていると思いますので、お気をつけくださいませ。

 YouTube配信
https://youtu.be/n9C6ZoLkfEo

 Q1 : 九九の合計

 問題文
1x1〜9x9の九九の答えをすべて足し合わせてく...]]></summary>
        <author>
            <name>Yusuke Kato</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PyTorch の zero_grad() は何をしているか]]></title>
        <id>https://zenn.dev/kutabarenn/articles/b18b60178c1f15</id>
        <link href="https://zenn.dev/kutabarenn/articles/b18b60178c1f15"/>
        <updated>2023-02-25T16:10:58.000Z</updated>
        <summary type="html"><![CDATA[最近研究で機械学習を使い始めたので、 PyTorch に入門してコードを書いているのですが、モデルの学習時における torch.optim.Optimizer.zero_grad() では何をしているのか理解できなかったので調べてみることにしました。

 公式ドキュメントによると
https://pytorch.org/docs/stable/generated/torch.optim.Optimizer.zero_grad.html
まずは、PyTorch の公式ドキュメントを見てみましょう。

TORCH.OPTIM.OPTIMIZER.ZERO_GRAD
-- Sets the g...]]></summary>
        <author>
            <name>くたばれない</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[MiPAというMisskeyのBotフレームワークを作った話]]></title>
        <id>https://zenn.dev/yupix/articles/52b23a0a5e7b5d</id>
        <link href="https://zenn.dev/yupix/articles/52b23a0a5e7b5d"/>
        <updated>2023-02-25T16:04:37.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事では私が作成しているBotフレームワークであるMiPAとそれのコアに当たるMiPACを紹介します。
!
MiPAC及びMiPAはまだ開発段階です。破壊的変更などがある可能性がある事をあらかじめご了承ください。


 MiPAという名前について
この名前になる前に実は Mi.py という名前で開発していました。discord.pyのようにmisskey.pyとしたかったという気持ちは無くもないのですが、既に使用されていたため、Mi.pyにし、コードに大幅な書き換えが必要になり、2つのライブラリに分けることになったため、MisskeyPythonAPIとMisskeyP...]]></summary>
        <author>
            <name>ゆぴ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Cythonを使ってPythonのコードを秘匿化する]]></title>
        <id>https://zenn.dev/lucidfrontier45/articles/1599d4c0c1a6be</id>
        <link href="https://zenn.dev/lucidfrontier45/articles/1599d4c0c1a6be"/>
        <updated>2023-02-25T15:15:02.000Z</updated>
        <summary type="html"><![CDATA[やりたいこと
Pythonはスクリプト言語でソースコードを読み込みながら実行します。したがってPythonで作ったプログラムを直接顧客に渡すとソースコードも一緒に渡さないといけません。PyArmorというツールを使うとPythonのソースコードを難読化することができますが、Python 3.11に未対応だったり、商用利用では有償です。そこで代替案としてCythonを使って自分が書いた部分全体を共有ライブラリ化して渡すという方法を試してみます。

 環境

OS: Ubuntu 22.04, Debian 11などのLinux
Python: 3.11
Cython: 3.0.0a11...]]></summary>
        <author>
            <name>lucidfrontier45</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vulkpy: Vulkan でGPGPUするPythonライブラリを作り始めた]]></title>
        <id>https://zenn.dev/ymd_h/articles/4e76439d86b6ec</id>
        <link href="https://zenn.dev/ymd_h/articles/4e76439d86b6ec"/>
        <updated>2023-02-25T12:55:21.000Z</updated>
        <summary type="html"><![CDATA[0. はじめに
スクラップで情報収集しながら開発してたライブラリが、やっと形になってきたので記事にまとめます。
https://zenn.dev/ymd_h/scraps/c66ad3ebf38f2f
https://github.com/ymd-h/vulkpy

 1. 開発内容と動機

 1.1 vulkpy
今回開発を始めた vulkpy は、ベンダー・ニュートラルなGPU APIであるVulkanを利用して数値計算をするライブラリです。

足し算の例
import vulkpy as vk

gpu = vk.GPU()

a = vk.Array(gpu, data=[1...]]></summary>
        <author>
            <name>山田(ymd)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Polarsで「pandasライブラリ活用入門」を書いてみました]]></title>
        <id>https://zenn.dev/tremendous1192/articles/bd1454621d624a</id>
        <link href="https://zenn.dev/tremendous1192/articles/bd1454621d624a"/>
        <updated>2023-02-25T11:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
最近、pandasに代わる高速データ分析ライブラリとしてpolarsが注目されているとのことです。
私もpolarsの勉強の一環として、Pythonデータ分析/機械学習のための基本コーディング！ Pandasライブラリ活用入門 - インプレスブックスのプログラムをpolarsで書いてみました。
この記事では、原著のGitHubのプログラムに沿って、polarsとpandasのコードを比較しています。
記事の構成は、逆引きとして使用するために以下の構成とします。

章 プログラム

節 行いたいこと

句 polarsコード
句 pandas





!
importの確認...]]></summary>
        <author>
            <name>Tremendous1192</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-146｜A - Can't Wait for Holiday]]></title>
        <id>https://zenn.dev/hyperdb/articles/d6d4833e8d9a01</id>
        <link href="https://zenn.dev/hyperdb/articles/d6d4833e8d9a01"/>
        <updated>2023-02-25T03:30:44.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-146 A - Can't Wait for Holiday



 提出結果
def getString():
    return input()


def main():
    s = getString()

    p = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'].index(s)

    print(7 - p)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-146｜B - ROT N]]></title>
        <id>https://zenn.dev/hyperdb/articles/b7f7e8f69b04f0</id>
        <link href="https://zenn.dev/hyperdb/articles/b7f7e8f69b04f0"/>
        <updated>2023-02-25T03:30:43.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-146 B - ROT N



 提出結果
def getInt():
    return int(input())


def getString():
    return input()


def conv(c, n):
    x = ord(c) + n
    return chr(x if x <= ord('Z') else x - 26)


def main():
    n = getInt()
    s = list(getString())

    print("".join([conv(c, n) for c in ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-147｜A - Blackjack]]></title>
        <id>https://zenn.dev/hyperdb/articles/1841349a353c6b</id>
        <link href="https://zenn.dev/hyperdb/articles/1841349a353c6b"/>
        <updated>2023-02-25T03:30:43.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-147 A - Blackjack



 提出結果
def getIntList():
    return list(map(int, input().split()))


def main():
    n = getIntList()

    print('win' if sum(n) <= 21 else 'bust')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-147｜B - Palindrome-philia]]></title>
        <id>https://zenn.dev/hyperdb/articles/15c64de0eeed0b</id>
        <link href="https://zenn.dev/hyperdb/articles/15c64de0eeed0b"/>
        <updated>2023-02-25T03:30:43.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-147 B - Palindrome-philia



 提出結果
def getString():
    return input()


def main():
    s = getString()

    l = len(s) // 2
    a = list(s[0:l])
    b = list(s[-1 * l:])
    b.reverse()

    c = 0
    for i in range(l):
        if a[i] != b[i]:
            c += 1
    print(c)


if...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[計算量でわかる他の人が書いたコードを読む技術]]></title>
        <id>https://zenn.dev/yuya_sato/articles/68323372a6f8ee</id>
        <link href="https://zenn.dev/yuya_sato/articles/68323372a6f8ee"/>
        <updated>2023-02-25T00:10:06.000Z</updated>
        <summary type="html"><![CDATA[はじめに
私はレコメンドを中心とする機械学習が専門でやっているのですが、最近 ruby のバックエンドも仕事で任されるようになりました。そこで身につけた私なりの速いコードの読み方を、計算量の観点から考えてみます。

 ふつうのコードの読み方
まず、ふつうのコードの読み方を考えてみます。コードを読めと言われたら、いろいろファイルを見ていって、前にこんなクラスあったなと言って関連づけられるようになってきてコードが読めるようになってくるという感じかと思います。私は以前この読み方をしていました。
計算量で考えてみると、ループを１回回してまず読んで、２回目を回して使われているクラスがあるファイ...]]></summary>
        <author>
            <name>Yuya Sato / 佐藤優矢</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[1つのGPUでも大規模言語モデルを動かせる！FlexGenの革新的な技術とは？]]></title>
        <id>https://zenn.dev/yutohub/articles/dc9941928a4c40</id>
        <link href="https://zenn.dev/yutohub/articles/dc9941928a4c40"/>
        <updated>2023-02-24T15:56:47.000Z</updated>
        <summary type="html"><![CDATA[FlexGenとは？
FlexGenは、限られたGPUメモリで大規模な言語モデルを実行するための技術です。従来、大規模言語モデルの推論には高性能なGPU複数使用する必要がありましたが、FlexGenを使用することで1つのGPUでも推論することができます。 FlexGenは、GPU、CPU、SSDを上手く使うことで、限られたVRAMでも大規模な言語モデルを実行することができます。
公式のハードウェア環境は、NVIDIA T4 (16 GB), RAM (208 GB),SSD (1.5 TB) となっていました。
GitHub: https://github.com/FMInferen...]]></summary>
        <author>
            <name>yutohub</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django2.0移行のトランザクション分離レベル]]></title>
        <id>https://zenn.dev/nosukey/articles/django_transaction_isolation</id>
        <link href="https://zenn.dev/nosukey/articles/django_transaction_isolation"/>
        <updated>2023-02-24T14:43:06.000Z</updated>
        <summary type="html"><![CDATA[書くこと

Djangoのトランザクション分離レベル
Djangoのトランザクション分離性


 利用バージョン
Django2.0移行

 本題

 簡潔に

別TransactionのCommit前の値は参照しない
別TransactionのCommitタイミング次第で値/レコードが変化する


 Djangoのトランザクション分離レベル



分離レベル
ダーティリード
ファジーリード
ファントムリード




READ COMMITTED
FALSE
TRUE
TRUE




 Djangoのトランザクション分離性



分離性
説明




ダーティリード
別トランザクシ...]]></summary>
        <author>
            <name>Nosukey</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[DRF]RetrieveAPIViewがgetリクエストされて、オブジェクトを一意に特定するまでの流れ]]></title>
        <id>https://zenn.dev/nosukey/articles/drf_read_retrieve_api_view</id>
        <link href="https://zenn.dev/nosukey/articles/drf_read_retrieve_api_view"/>
        <updated>2023-02-24T14:09:53.000Z</updated>
        <summary type="html"><![CDATA[書くこと

RetrieveAPIViewがgetリクエストされて、オブジェクトを一意に特定するまでの流れ
queryset, get_queryset, get_objectsの内部挙動


 利用する技術

Django REST Framework
rest_framework.generics


 想定シチュエーション
以下のようなRetrieveAPIViewがあるとする。
class ArticleView(RetrieveAPIView):
    """Articleの参照APIクラス"""
    queryset = Article.objects.all()
...]]></summary>
        <author>
            <name>Nosukey</name>
        </author>
    </entry>
</feed>