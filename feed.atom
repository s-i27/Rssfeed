<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://s-i27.github.io/Rssfeed/index.html</id>
    <title>osmos::feed</title>
    <updated>2024-03-19T01:13:32.932Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="https://s-i27.github.io/Rssfeed/index.html"/>
    <link rel="self" href="https://s-i27.github.io/Rssfeed/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[ホームズと学ぶクラス]]></title>
        <id>https://zenn.dev/lytton/articles/988571d647414c</id>
        <link href="https://zenn.dev/lytton/articles/988571d647414c"/>
        <updated>2024-03-18T16:10:38.000Z</updated>
        <summary type="html"><![CDATA[序章
ある雨の日、ホームズとワトソンは221Bベーカー街の部屋でくつろいでいた。ワトソンはプログラミングの勉強を続けており、クラスについて質問があった。
「ホームズ、クラスというものがよくわからないのだが、教えてくれないか？」とワトソンが尋ねた。
ホームズは煙草をくゆらせながら答えた。「ああ、クラスか。それは面白いテーマだね。じゃあ、順を追って説明しよう。」

 クラスと関数の違い
ホームズは壁に掛けられた図を指さした。
「ご覧の通り、関数とクラスの大きな違いは、値の保持ができるかどうかだ。」
「関数では、引数として値を入力しても、処理後にはその値は消えてしまう。一方、クラスではデー...]]></summary>
        <author>
            <name>リットン</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[機械学習モデル作成シリーズ  総まとめ]]></title>
        <id>https://zenn.dev/yuto_mo/articles/1676630b516ba5</id>
        <link href="https://zenn.dev/yuto_mo/articles/1676630b516ba5"/>
        <updated>2024-03-18T14:02:30.000Z</updated>
        <summary type="html"><![CDATA[これまでの機械学習モデル作成シリーズをまとめています。
目次
Step1: データの種類
Step2: データのロード
Step3: 配列データ
Step4: データ確認
Step5: データの前処理
Step6: データの前処理(実践)
Step7: データローダー
Step8: モデル構築と学習
Step9: test用データへのモデル適用と提出用ファイルの作成
このシリーズでは、機械学習モデルを作成するまでの流れをstepに分けて解説していきます。
それでは始めましょう！

 1 データの種類
最初のステップは、モデルの学習に使用するデータの理解です。データの質は、機械学習モデルの...]]></summary>
        <author>
            <name>yuu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[LTE-M Button で自宅の回転灯を制御し「これから帰る」を知らせる]]></title>
        <id>https://zenn.dev/banauo/articles/1d0b43b33222fe</id>
        <link href="https://zenn.dev/banauo/articles/1d0b43b33222fe"/>
        <updated>2024-03-18T13:55:48.000Z</updated>
        <summary type="html"><![CDATA[要約

LTE-M Button を押したら
家のパトライトを回して「これから帰ること」を家族にお知らせしつつ
Discord に位置情報を投稿する


 問題
会社を出るときにDiscordで連絡するのが我が家のルール。
「家事の都合があるので知らせてくれたらHAPPY」ということでそうしてるんだけど、以下の問題があって頭を悩ませておりました。

メッセージを打つのが 手間

自転車通勤であり、乗る前には色々やることがあるのでスマホ出すのも手間
夏は、蚊を避けながらやるのが手間
冬は、手袋を外すのが手間
Discordのメンションは操作が手間


そもそも、Discord への投稿...]]></summary>
        <author>
            <name>CHIYA yuji</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Your notebook tried to allocate more memory than is available.0 の解決法]]></title>
        <id>https://zenn.dev/yuto_mo/articles/d83c9dc5bd5129</id>
        <link href="https://zenn.dev/yuto_mo/articles/d83c9dc5bd5129"/>
        <updated>2024-03-18T12:46:11.000Z</updated>
        <summary type="html"><![CDATA[原因
kaggleのnotebookで、使用中のGPUを別のことに割り当てようとするとこのエラーが発生します。
エラー: Your notebook tried to allocate more memory than is available.0

 解決法
GPUを解放してデバイスをリセット
・PyTorch
import torch

# GPUキャッシュをクリア
torch.cuda.empty_cache() 

# CUDAデバイスをリセット（必要な場合）
torch.cuda.reset_peak_memory_stats()
・Tensorflow
import te...]]></summary>
        <author>
            <name>yuu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[実況パズルプログラミング連載開始]]></title>
        <id>https://zenn.dev/ogwk/articles/ppb240309blog</id>
        <link href="https://zenn.dev/ogwk/articles/ppb240309blog"/>
        <updated>2024-03-18T07:23:41.000Z</updated>
        <summary type="html"><![CDATA[パズルアプリケーションを作成します。 作成過程で思ったこと、考えたこと、検討したことなどをブログ風に書いていく予定です。「30日でできる！OS自作入門」という本がありましたが、そんな感じを目指しています。 本当は「30日でできる！CADアプリケーション作成」にしたかったのですが、それではあまり興味を持ってもらえないと思いパズルアプリケーションにしました。
この記事の第一の目的はプログラム作成の過程を公開することです。 私は一応フリーランスのプログラマーですがエキスパートではありません。 だいたい独学でひとりよがりのプログラムを書いています。 コードレビューしてくれる人もいません。 コード...]]></summary>
        <author>
            <name>OGAWA</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PyInstallerでModuleNotFoundErrorが出たのを解決した問題]]></title>
        <id>https://zenn.dev/shin1007/articles/68f03c3921603c</id>
        <link href="https://zenn.dev/shin1007/articles/68f03c3921603c"/>
        <updated>2024-03-18T05:48:38.000Z</updated>
        <summary type="html"><![CDATA[問題
同じフォルダにある別ファイルをインポートしようとするところでModuleNotFoundError。

 解決方法
インポートしようとしているファイル自体に問題があったので解決した。
文字列の書き方で
# NG
print(f"{datetime.datetime.now().strftime("%Y/%m/%d %H:%M:%S.%f")}")

# OK
print(f"{datetime.datetime.now().strftime('%Y/%m/%d %H:%M:%S.%f')}")]]></summary>
        <author>
            <name>shin1007</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで継承を禁止したクラスを作る]]></title>
        <id>https://zenn.dev/nakurei/articles/create-class-in-python-that-prohibits-inheritance</id>
        <link href="https://zenn.dev/nakurei/articles/create-class-in-python-that-prohibits-inheritance"/>
        <updated>2024-03-17T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[これはなに
Pythonで具象クラスを継承禁止にする方法ないかな～と思って調べたときのメモ。意外とない。

 結論

Python3.6以降のバージョン : 方法2か方法3がシンプルで良さそう
Python3.8以降のバージョン : 方法2か方法3に加えて、方法5を併用したい
Python3.6以前のバージョン : 方法4が使える


 前提
下記のように、抽象クラスとしてShapeクラスを実装し、Shapeクラスを継承したRectangleクラスを実装する。
import abc


class Shape(abc.ABC):
    @abc.abstractmethod
   ...]]></summary>
        <author>
            <name>NakuRei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenAIのRateLimitErrorに向き合う]]></title>
        <id>https://zenn.dev/yosemat/articles/6f83b3a258f710</id>
        <link href="https://zenn.dev/yosemat/articles/6f83b3a258f710"/>
        <updated>2024-03-17T09:56:11.000Z</updated>
        <summary type="html"><![CDATA[結論：RateLimit終了まで待機するコンテクストマネージャーを作った

 使い方
async with ratelimiter:
    response = await self.client.chat.completions.create(
        messages=msgs,
        model="gpt4-vision-preview",
    )
return response

 内部実装
class RateLimiter:
    """period_seconds秒あたりfrequency回のリクエストまで投げられる非同期リクエストコンテクスト...]]></summary>
        <author>
            <name>Yosemat</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ポアロと学ぶ関数]]></title>
        <id>https://zenn.dev/lytton/articles/ce9d75877a3c12</id>
        <link href="https://zenn.dev/lytton/articles/ce9d75877a3c12"/>
        <updated>2024-03-17T08:36:21.000Z</updated>
        <summary type="html"><![CDATA[関数の不思議
ある朝、ポアロが食堂に入ると、ヘイスティングスが難しい顔をしていた。
「おはよう、ポアロ。実は昨晩から関数について考えているんだが、なかなか腑に落ちないんだ」
ポアロは友人の隣に座ると、コーヒーを一口すすった。
「ふむ、関数とは不思議なものだからね。私に説明させてくれ」

 関数の役割
ポアロはナプキンで口元を拭うと、話し始めた。
「そもそも関数というのは、特定の処理をまとめたプログラムのことだ。Google検索を思い浮かべてごらん」
def google_search(keyword):
    # 検索処理
    return search_result
「キーワ...]]></summary>
        <author>
            <name>リットン</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[動画のキーワードがある画面の、スクリーンショットを撮るためのプログラム作ってみた]]></title>
        <id>https://zenn.dev/yuu7751/articles/44898ab2b9ea72</id>
        <link href="https://zenn.dev/yuu7751/articles/44898ab2b9ea72"/>
        <updated>2024-03-17T06:37:03.000Z</updated>
        <summary type="html"><![CDATA[背景
知り合いから飛ばせない動画で、一定時間だけ表れるキーワードを抽出したいという要望があって
最近動画コンテンツが優秀になってきて色々利用しています。
ただ、おそらく動画内にある特定の情報を欲しいがために回すことがそこそこあったので、せっかくなら自動で取れないかな〜と思って作りました。
利用方法はまた別途記事にしたいと思います。
仕事柄APIを前提としたrequestとかは馴染みがあったので、そうではない画面から何か情報を得るという手法は、勉強になりました。
せっかくなので、gitにリポジトリ上げて、記事にしてみようと思った次第です。

 注意点
めっちゃスクリーンショット撮るので...]]></summary>
        <author>
            <name>yu-min</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[3/10~3/16で技術的にやったこと]]></title>
        <id>https://zenn.dev/zi_matsu/articles/fb5a33df8d03c0</id>
        <link href="https://zenn.dev/zi_matsu/articles/fb5a33df8d03c0"/>
        <updated>2024-03-17T03:41:44.000Z</updated>
        <summary type="html"><![CDATA[履歴(ログ)を出力するための仕組みとして以下の方法があるらしい
!
ログを取得予約してバッチなどバックグラウンドでファイルを生成し、ダウンロード可能になったら通知してダウンロードしてもらうっていうやり方

やっぱり一回の処理でまとめてダウンロードしようとするとどうしてもログ系の処理だと重たくなりがち。
だから、肝心な処理はバッチにやらせておいて、作成できたらダウンロードできますよーって通知してあげるやり方ね。
バッチは非同期でやらせておけばいいからasyncioでとかでやってそれをthreadsでloopさせてあげれば、いいかなって思う。キューで開始を知らせて、そしたら処理を開始する...]]></summary>
        <author>
            <name>Matsuzaki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[機械学習モデル作成シリーズ  Step9  提出用ファイル作成]]></title>
        <id>https://zenn.dev/yuto_mo/articles/46b9a35e9ccceb</id>
        <link href="https://zenn.dev/yuto_mo/articles/46b9a35e9ccceb"/>
        <updated>2024-03-17T02:54:06.000Z</updated>
        <summary type="html"><![CDATA[機械学習モデル作成のStep9です。今回が最終回になります。
前回は機械学習モデルの構築を扱いました。
今回はtest用データへのモデル適用と、提出用ファイルの作成について解説します。

 test用データへのモデル適用と提出用ファイル作成
kaggle HMSコンペの脳波データを使用して、test用データへのモデル適用と、提出用ファイルの作成について解説します。

testデータ取得
eegからスペクトログラム生成
testデータに対して予測
提出用ファイルの作成

の流れで説明しています。
コンペ開催中、外部のみで知見の共有を行うことは禁止されているため、解説はkaggleのNote...]]></summary>
        <author>
            <name>yuu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[モジュール、パッケージ、ライブラリ。python3の場合]]></title>
        <id>https://zenn.dev/karamawanu/articles/e756923e82541c</id>
        <link href="https://zenn.dev/karamawanu/articles/e756923e82541c"/>
        <updated>2024-03-17T02:15:35.000Z</updated>
        <summary type="html"><![CDATA[python3では、モジュール、パッケージ、ライブラリがそれぞれ用語として登場する。

 モジュール
用語集には次のように書いてある。
https://docs.python.org/ja/3/glossary.html#term-module

Python コードの組織単位としてはたらくオブジェクトです。モジュールは任意の Python オブジェクトを含む名前空間を持ちます。モジュールは importing の処理によって Python に読み込まれます。

一般的には、import で読み込めるファイル群 と言うべきか。＜それって小生の感想ですよ＞
例えば単に
import hog...]]></summary>
        <author>
            <name>karamawanu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PanderaでPolarsのデータバリデーションを試す]]></title>
        <id>https://zenn.dev/chimuichimu/articles/a5c5f8c2febace</id>
        <link href="https://zenn.dev/chimuichimu/articles/a5c5f8c2febace"/>
        <updated>2024-03-17T01:56:38.000Z</updated>
        <summary type="html"><![CDATA[この記事は何？
データバリデーションライブラリのPanderaがPolarsのサポートを開始したので、早速それを試してみるもの。基本的なバリデーションのやり方を確認した上で、実行速度への影響を簡単な実験で確認した。
なお2024/3/16現時点では本機能はベータ版という状態であるため、今後なんらかの大きな変更が発生する可能性がある。最新の情報を得たい場合は、公式のリリースやドキュメントを参照してほしい。

Beta release 0.19.0b0: Polars integration
Data Validation with Polars


 前提

 Panderaとは？
P...]]></summary>
        <author>
            <name>chimuichimu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Low Performance PDF Parserのことはじめ。LLMとUnstructuredでPDFをパースする。]]></title>
        <id>https://zenn.dev/yamada_quantum/articles/17aff55dedbaf1</id>
        <link href="https://zenn.dev/yamada_quantum/articles/17aff55dedbaf1"/>
        <updated>2024-03-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[TL;DR

本文抽出は、PDFパーサーでパースしたやつをLLMにさらに綺麗にしてもらう。
画像とテーブルは、Unstructuredを使って、OCRベースでを抜き出す
PDFをRAGが使いやすいようにできるけど遅い！だから使い所は予めドキュメントを準備するケース
GPT3.5だと本文抽出微妙な部分もあるので、Haikuの方がいいかも(GUIからは圧倒的にHaikuでの抽出はうまくできてた)


 はじめに
PDFをRAGで利用する際、単にPDFパーサーにかけてパースするだけでは、本文以外のフッターやヘッダー、図のキャプションなどさまざまなものが混入してしまうことがあります。これによ...]]></summary>
        <author>
            <name>やまぐち</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonで仮想環境を構築し、Stable Diffusionを利用する（pythonが複数verある場合のSDインストール方法）]]></title>
        <id>https://zenn.dev/takahashi_s/articles/e2b7945aba1077</id>
        <link href="https://zenn.dev/takahashi_s/articles/e2b7945aba1077"/>
        <updated>2024-03-16T16:48:30.000Z</updated>
        <summary type="html"><![CDATA[概要
stable diffusionをローカル環境で使用する場合、pythonのバージョン3.10.6をインストールする必要があります。
この際、既に最新版のpython(3.12.)をインストールしている方に対して「ver3.10.6を再インストールしてください」と紹介しているサイトがありますが、バージョンを指定して仮想環境を作れば既存のpythonを削除する必要はないので、その方法を紹介します。

 Stable Diffusionインストール方法
stable diffusionのインストールが終わっている方は飛ばしてください。

 1.Gitのインストール
https://...]]></summary>
        <author>
            <name>takahashi s</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[機械学習モデル作成] Step8 モデル構築と学習]]></title>
        <id>https://zenn.dev/yuto_mo/articles/68f662f8cc0bb0</id>
        <link href="https://zenn.dev/yuto_mo/articles/68f662f8cc0bb0"/>
        <updated>2024-03-16T11:03:06.000Z</updated>
        <summary type="html"><![CDATA[機械学習モデル作成のStep8です。前回はデータローダーを扱いました。
今回は機械学習モデルの構築を解説します。

 モデル構築と学習
kaggle HMSコンペの脳波データを使用した機械学習モデルの構築について解説します。

学習率設定
モデル構築
モデル学習
モデル評価

の流れで説明しています。
コンペ開催中、外部のみで知見の共有を行うことは禁止されているため、解説はkaggleのNotebookに上げています。
https://www.kaggle.com/code/moyuto/chris-s-preprocessing-explanation-for-myself
※前回のN...]]></summary>
        <author>
            <name>yuu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PyAirbyteで始める簡単Data Injest Pipeline]]></title>
        <id>https://zenn.dev/kashira/articles/1770daabc39de2</id>
        <link href="https://zenn.dev/kashira/articles/1770daabc39de2"/>
        <updated>2024-03-16T04:43:22.000Z</updated>
        <summary type="html"><![CDATA[はじめに
PyAirbyteがリリースされました。(2024/03/16時点ではBeta版なのでご注意を)
https://airbyte.com/blog/announcing-pyairbyte
PyAirbyteはExtractのコネクタ部分をPythonのライブラリとして提供してPandasに格納するという機能を提供しているらしい。
つまり、BigQueryのクライアントと合わせればExtractとLoadの部分を過疎結合にしつつ、スケジューラーでPythonを呼び出すだけのシンプルなData Injest Pipelineを作ることが可能なのでは！？ということで検証します。...]]></summary>
        <author>
            <name>kashira</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[機械学習モデル作成] Step7 データローダー]]></title>
        <id>https://zenn.dev/yuto_mo/articles/bdae4f2c3fd977</id>
        <link href="https://zenn.dev/yuto_mo/articles/bdae4f2c3fd977"/>
        <updated>2024-03-15T15:37:54.000Z</updated>
        <summary type="html"><![CDATA[機械学習モデル作成のStep7です。前回はデータの前処理を扱いました。
今回は機械学習ライブラリのデータローダーを解説します。

 データローダー
kaggle HMSコンペの脳波データを使用して、データローダーについて解説します。
コンペ開催中、外部のみで知見の共有を行うことは禁止されているため、解説はkaggleのNotebookに上げています。
https://www.kaggle.com/code/moyuto/chris-s-preprocessing-explanation-for-myself
※前回のNotebookに追記しています。

 まとめ
今回はデータローダーを解...]]></summary>
        <author>
            <name>yuu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[S3バケットのCSVファイルをUTF-8に変換しS3バケットに格納するLambda関数]]></title>
        <id>https://zenn.dev/zgw426/articles/beef6f540f079e</id>
        <link href="https://zenn.dev/zgw426/articles/beef6f540f079e"/>
        <updated>2024-03-15T14:08:54.000Z</updated>
        <summary type="html"><![CDATA[書いていること
S3バケットに格納した文字コードがShift_JISのCSVファイルを読み込み、文字コードをUTF-8に変換しS3バケットにファイル出力するLambda関数(Python3.11)のサンプルスクリプトです。

 構成図

01-input-sjis/フォルダ配下のCSVファイルの文字コードはShift_JISです。
02-haracter-encoding/フォルダ配下のCSVファイルの文字コードはUTF-8です。

 スクリプト
Lambda関数のスクリプトです。
import boto3
import json

def lambda_handler(event,...]]></summary>
        <author>
            <name>suo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで最寄りの二郎を教えてくれるライブラリを作ってみた]]></title>
        <id>https://zenn.dev/shuei/articles/a33e6598aac96e</id>
        <link href="https://zenn.dev/shuei/articles/a33e6598aac96e"/>
        <updated>2024-03-15T12:40:03.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは！！
好きな食べ物は二郎です。
そんな僕が、Pythonの環境さえあれば、どこにいても最寄りの二郎を探せるライブラリを作ってみました。
この記事では、二郎を探すライブラリの紹介をしつつ、Pythonで自作のライブラリを作る方法を紹介していこうと思います。

 作ったもの
https://github.com/s1f10210273/pyjirou
>>> import pyjirou
>>> pyjirou.jiro(139.7078392, 35.6977579)
shop_name             ラーメン二郎 新宿...]]></summary>
        <author>
            <name>葵</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PDFデータを画像データへ変換するAzure Function（Python）を用いたアーキテクチャを構築する（サンプルコードあり）]]></title>
        <id>https://zenn.dev/r_knm/articles/8e0be517b7887c</id>
        <link href="https://zenn.dev/r_knm/articles/8e0be517b7887c"/>
        <updated>2024-03-15T12:20:38.000Z</updated>
        <summary type="html"><![CDATA[はじめに
PDFデータを画像データへ変換するAzure Functionsを実装したのでこの記事でまとめたいと思います。
PDFデータの画像データへの変換は処理に時間がかかるケースも懸念されるため、FaaS系のサービスサービスを使用したアーキテクチャを採用するのは実装観点・運用観点ともにメリットが多いです。
今回は、AzureのFaaSサービスであるAzure Functionsを使用してアーキテクチャを構築し、実装まで実施したのでサンプルコード含めて紹介したいと思います。

 Azure Functionsとは
公式：Azure Functionsの概要

Azure Functi...]]></summary>
        <author>
            <name>Ryo Kainuma(log build)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonFiddle： 完全に非公開なクライアント側でのサンプルコードの実行と共有]]></title>
        <id>https://zenn.dev/leaning_tech_jp/articles/323d3aa3a3c62f</id>
        <link href="https://zenn.dev/leaning_tech_jp/articles/323d3aa3a3c62f"/>
        <updated>2024-03-15T12:02:14.000Z</updated>
        <summary type="html"><![CDATA[プログラミングを実践している人なら誰でも、アイデアを素早くテストしたり、フィードバックを求めたりするために、小さなコードの断片を実行したり（そして共有したり）する必要があるかと思います。この種のウェブ・アプリケーションは一般に「Fiddle（フィドル）」と呼ばれ、世の中にたくさんありますが、Fiddleの一般的なユースケースは教育現場だが、完全なネイティブ実行環境をセットアップする手間を省くために、誰でもFiddleを使う必要が出てきます。
この種のFiddleのほとんどは、クラウド上で動作する仮想マシンにユーザーコードを送信することで動作します。その後、プログラムがリモートで実行され...]]></summary>
        <author>
            <name>Leaning Technologies Japan (リーニングテクノロジー)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python と iOS でパスキー認証の実装をする]]></title>
        <id>https://zenn.dev/nnsnodnb/articles/161a59d477b2fb</id>
        <link href="https://zenn.dev/nnsnodnb/articles/161a59d477b2fb"/>
        <updated>2024-03-15T07:56:09.000Z</updated>
        <summary type="html"><![CDATA[!
この記事はこちらの記事を移植したものです


 はじめに
パスキー (Passkeys) の実装をサーバサイドは Python (Django) でクライアントは iOS で実装してみたので備忘録がてらの紹介です。
パスキー自体の説明は省略します。
Apple のサイトでもそれっぽいことが書かれていたのでリンクだけ
https://developer.apple.com/jp/passkeys/

 挙動デモ
https://www.youtube.com/watch?v=_HsThRCrnEY

 実装サンプル
https://github.com/nnsnodnb/passkey...]]></summary>
        <author>
            <name>Yuya Oka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-339｜A - TLD]]></title>
        <id>https://zenn.dev/hyperdb/articles/b1ededfc9e10dd</id>
        <link href="https://zenn.dev/hyperdb/articles/b1ededfc9e10dd"/>
        <updated>2024-03-15T05:58:53.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-339 A - TLD



 提出結果
def getString():
    return input()


def main():
    s = getString()

    print(s.split('.')[-1])


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-339｜B - Langton's Takahashi]]></title>
        <id>https://zenn.dev/hyperdb/articles/04d30088e72165</id>
        <link href="https://zenn.dev/hyperdb/articles/04d30088e72165"/>
        <updated>2024-03-15T05:58:53.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-339 B - Langton's Takahashi



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    h, w, n = getIntMap()
    d = 0  # 0 1 2 3
    x, y = (0, 0)

    map = [['.' for _ in range(w)] for _ in range(h)]

    for i in range(n):
        c = map[y][x]

        if ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【AWS】Pythonで書いたWebアプリをApp Runnerで動かす【Flet, Flutter】]]></title>
        <id>https://zenn.dev/ncdc/articles/3e83248643806e</id>
        <link href="https://zenn.dev/ncdc/articles/3e83248643806e"/>
        <updated>2024-03-15T03:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
AIを中心としたアプリ開発をする時はPythonが主流かと思います。一方でWebのフロントエンド開発は通常TypeScriptやJavaScriptで書く必要があります。ある程度規模の大きいアプリであれば、フロントエンドとバックエンドは分離するべきなので言語が分かれていても大きな問題はないかと思います。
しかし、PoCなどの簡易的にアプリを作りたい場合にはコスト増や人的リソースの問題が出てきます。Streamlit等のモダンなPythonのWebフレームワークを使えばPythonのみでWebアプリを作ることが出来ます。しかし、これらのフレームワークはWebSocketに依存...]]></summary>
        <author>
            <name>いばらき</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[モダンなタスク管理を可能にするSnowflake Python API]]></title>
        <id>https://zenn.dev/dataheroes/articles/4d35c4e85a2cfb</id>
        <link href="https://zenn.dev/dataheroes/articles/4d35c4e85a2cfb"/>
        <updated>2024-03-15T00:24:34.000Z</updated>
        <summary type="html"><![CDATA[結論
Taskを管理するならSnowflake Python APIを使おう

 Snowflake Python APIとは
Snowflake公式のPythonのオブジェクト管理ライブラリ「snowflake.core」のことです(Public Beta)。Snowflake Python Connectorとは全く別物です。
https://docs.snowflake.com/en/developer-guide/snowflake-python-api/snowflake-python-managing-tasks
Snowflake Python APIを使用すると、Py...]]></summary>
        <author>
            <name>Kentaro Maeda</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ネットワーク図をコード化する(Diagrams)]]></title>
        <id>https://zenn.dev/tsaeki/articles/c274aef1227dfb</id>
        <link href="https://zenn.dev/tsaeki/articles/c274aef1227dfb"/>
        <updated>2024-03-15T00:23:09.000Z</updated>
        <summary type="html"><![CDATA[https://diagrams.mingrammer.com/ というツールがあるのを見かけたので試してみます。

 Diagramsとは
これです！

About Diagrams
Diagrams lets you draw the cloud system architecture in Python code.


 環境

unbuntu on WSL2


 準備
https://diagrams.mingrammer.com/docs/getting-started/installation
Diagramsをインストールします。
python -m venv sampl...]]></summary>
        <author>
            <name>tsaeki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Paperspace で Swallow MS 7B の QLoRAファインチューニングを試す]]></title>
        <id>https://zenn.dev/toki_mwc/articles/6d406de91a65c5</id>
        <link href="https://zenn.dev/toki_mwc/articles/6d406de91a65c5"/>
        <updated>2024-03-14T23:22:52.000Z</updated>
        <summary type="html"><![CDATA[Paperspaceを使用して、Swallow MS 7Bの推論とQLoRAによるファインチューニングの方法をまとめました。
GPU：A100(80GB)
Python 3.10.10
※PaperspaceのデフォルトはPython 3.9なので、プロジェクト作成時のContainerの部分に「cyberes/gradient-base-py3.10:latest」を入力すると3.10に設定されるよ。

 Swallow MS 7Bとは
Swallow MS 7Bは、日本語に特化した大規模言語モデル（LLM）です。まるで日本語の達人のように、様々な文章を理解し、生成することができます。...]]></summary>
        <author>
            <name>toki_mwc</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-338｜B - Frequency]]></title>
        <id>https://zenn.dev/hyperdb/articles/b75c8539451eec</id>
        <link href="https://zenn.dev/hyperdb/articles/b75c8539451eec"/>
        <updated>2024-03-14T09:57:00.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-338 B - Frequency



 提出結果
def getString():
    return input()


def main():
    s = getString()
    d = {}
    max_v = 0
    for c in s:
        d.setdefault(c, 0)
        d[c] += 1
        max_v = max(max_v, d[c])

    filter_d = dict(filter(lambda item: item[1] == max_v, d.items(...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-338｜A - Capitalized?]]></title>
        <id>https://zenn.dev/hyperdb/articles/231f47c328cb57</id>
        <link href="https://zenn.dev/hyperdb/articles/231f47c328cb57"/>
        <updated>2024-03-14T09:56:59.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-338 A - Capitalized?



 提出結果
def getString():
    return input()


def main():
    s = getString()
    t = s.capitalize()

    print('Yes' if s == t else 'No')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windowsマシン に llama-cpp-python を入れても BLAS not found でGPUが使ってもらえない]]></title>
        <id>https://zenn.dev/hellohazime/articles/ccd01c2df0b5c3</id>
        <link href="https://zenn.dev/hellohazime/articles/ccd01c2df0b5c3"/>
        <updated>2024-03-14T09:30:00.000Z</updated>
        <summary type="html"><![CDATA[!pip install llama-cpp-python  --force-reinstall --upgrade --no-cache-dir -vv -C cmake.args="-DLLAMA_BLAS=ON;-DLLAMA_BLAS_VENDOR=OpenBLAS"

＜中略＞

  -- Could NOT find BLAS (missing: BLAS_LIBRARIES)
  CMake Warning at vendor/llama.cpp/CMakeLists.txt:339 (message):
    BLAS not found, please refer t...]]></summary>
        <author>
            <name>hellohazime</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Stable Diffusionのデスクトップアプリを作る]]></title>
        <id>https://zenn.dev/singularity/articles/stable-diffusion-mac-app</id>
        <link href="https://zenn.dev/singularity/articles/stable-diffusion-mac-app"/>
        <updated>2024-03-13T20:54:50.000Z</updated>
        <summary type="html"><![CDATA[シンギュラリティ・ソサエティのAI Innovators Hubに参加しています。

 はじめに
PythonでAIツールを作り他の人に使ってもらおうとすると、Webサービス化する、もしくはPythonのソースを共有しパソコンやGoogle colabで動かしてもらう必要があります。
Webサービス化するのは、AI系の処理は時間がかかる事とサーバのコスト問題で、現状ではあまり良い方法ではありません。Pythonのコードを使う場合は、使う側にある程度の知識が要求されます。
そこで、Pythonで書いたツールをアプリ化し、インストールするだけで使えるようにしたいと思います。
アプリ化には

...]]></summary>
        <author>
            <name>Isamu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pytest-splitによるテスト分割実行]]></title>
        <id>https://zenn.dev/naofumimurata/articles/pytest-split</id>
        <link href="https://zenn.dev/naofumimurata/articles/pytest-split"/>
        <updated>2024-03-13T16:05:02.000Z</updated>
        <summary type="html"><![CDATA[Pythonのテストフレームワークとして pytest が使いやすく機能も豊富で気に入っています。
テストが増えるに従って、全てのテストを実行するのにかかる時間は長くなっていきます。
コードの変更に対してCIでテストの通過を頻繁にチェックするような状況においては、テスト実行時間の増加によって開発速度の低下につながります。
テストがある程度の規模になると、この問題に対してテストを分割してそれぞれ並列に実行するという方法を取ることがあるかと思いますが、今回はそういった分割実行を行うための pytest-split という pytestプラグインが便利だったので簡単に使い方を紹介したいと思いま...]]></summary>
        <author>
            <name>Naofumi Murata</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[共通テスト「情報I」のための プログラミング入門]]></title>
        <id>https://zenn.dev/sane21/books/071260cdb5fcf5</id>
        <link href="https://zenn.dev/sane21/books/071260cdb5fcf5"/>
        <updated>2024-03-13T15:35:25.000Z</updated>
        <summary type="html"><![CDATA[大学入学共通テストで令和7年度より実施される「情報」の大問3、プログラミングに関する問題中で使用される擬似言語「共通テスト用プログラム表記」をGoogle Colaboratory上で実行することができるライブラリ`meizen`を開発しました。

共通テスト「情報」を見据えて、プログラミング初学者のための「プログラミングのいろは」を共通テストと同じ言語を使って学んでいきます。

「情報I」を学ぶ高校生、共通テストで高得点を狙う受験生、それらを指導する学校教員の方へ向けた資料です。

学校教育での使用をされたい場合は、授業への導入などを想定した資料を用意しておりますので、別途ご連絡いただけると対応いたします。

※本書中では「共通テスト用プログラム表記」を便宜上「DNCL2」として扱っています。]]></summary>
        <author>
            <name>Sane21</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[機械学習モデル作成] Step6 データの前処理(実践)]]></title>
        <id>https://zenn.dev/yuto_mo/articles/2d4eb91a5048b1</id>
        <link href="https://zenn.dev/yuto_mo/articles/2d4eb91a5048b1"/>
        <updated>2024-03-13T14:26:17.000Z</updated>
        <summary type="html"><![CDATA[Step5で学んだ前処理について、実際の実装を交えて解説していきます。
Step5をまだ見ていない方はこちらからご覧下さい。
※データはkaggle HMSコンペの脳波データを使用します

 6.0 データのロード
このコンペの目標はデータ波形がどの症状か判別することです。
csvデータをDataFrameとしてロードします。
# ロード
df = pd.read_csv('/kaggle/input/hms-harmful-brain-activity-classification/train.csv')

 6.1 データの確認
ロードしたデータを確認します。
print(df.sh...]]></summary>
        <author>
            <name>yuu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-337｜A - Scoreboard]]></title>
        <id>https://zenn.dev/hyperdb/articles/b3a2d4427ee5cc</id>
        <link href="https://zenn.dev/hyperdb/articles/b3a2d4427ee5cc"/>
        <updated>2024-03-13T09:42:14.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-337 A - Scoreboard



 提出結果
def getInt():
    return int(input())


def getIntListRow(N):
    return [list(map(int, input().split())) for _ in range(N)]


def main():
    n = getInt()
    xy = getIntListRow(n)

    z = 0
    for x, y in xy:
        z += (x - y)

    print('Draw' if ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-337｜B - Extended ABC]]></title>
        <id>https://zenn.dev/hyperdb/articles/87245cf070413d</id>
        <link href="https://zenn.dev/hyperdb/articles/87245cf070413d"/>
        <updated>2024-03-13T09:42:13.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-337 B - Extended ABC



 提出結果
def getString():
    return input()


def main():
    s = getString()

    old_c = 'A'
    r = True
    for c in s:
        if c >= old_c:
            old_c = c
        else:
            r = False
            break

    print('Yes' if r else 'No')


...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[BeautifulSoup4でざっくりHTML解析してみる]]></title>
        <id>https://zenn.dev/shin039/articles/a1751d0db03d4b</id>
        <link href="https://zenn.dev/shin039/articles/a1751d0db03d4b"/>
        <updated>2024-03-13T09:00:42.000Z</updated>
        <summary type="html"><![CDATA[BeautifulSoupは、PythonでHTMLやXMLファイルからデータを抽出するためのライブラリです。
ライブラリの基本的な使い方をざっくりまとめてみました。
ドキュメント：BeautifulSoup Documentation

 📌 事前準備

 ⌨️  検証した環境について


python_version >= 3.8


requirements.txt


beautifulsoup4==4.12.3
certifi==2024.2.2
charset-normalizer==3.3.2
idna==3.6
requests==2.31.0
soupsieve...]]></summary>
        <author>
            <name>shin039</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pickleファイルの秘匿化方法を考えてみた]]></title>
        <id>https://zenn.dev/relims7165/articles/8dc19358459456</id>
        <link href="https://zenn.dev/relims7165/articles/8dc19358459456"/>
        <updated>2024-03-12T23:45:18.000Z</updated>
        <summary type="html"><![CDATA[はじめに
個人で作った機械学習モデルを誰かに渡す際、作った資産を流用されない様にするために、どの様な方法で防止することができそうか考えてみた。
思いの他、やりたい事を実現するのに時間がかかってしまったが、一応は最低限のガードはできたので、そのサンプルコードとハマった点をメモとして残しておく。

 実行環境
【PC環境】
　　Windows 10 Pro　
【仮想環境のpython.Ver　および主要パッケージ情報】
　　Python 3.9.13
　　xgboost            2.0.3
　　scikit-learn       1.4.1.post1
　　cryptog...]]></summary>
        <author>
            <name>relims</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ベクトル検索の苦手を克服。ナレッジグラフでRAGを作る]]></title>
        <id>https://zenn.dev/yamada_quantum/articles/1a61c618a1c37f</id>
        <link href="https://zenn.dev/yamada_quantum/articles/1a61c618a1c37f"/>
        <updated>2024-03-12T23:45:00.000Z</updated>
        <summary type="html"><![CDATA[TL;DR

ベクトル検索だと、複数のステップを踏まないと答えられない質問の検索がむずい

「TomにEmil Eifrém（Neo4jのCEO）を紹介してくれる人は？」とかを検索むずい


ナレッジグラフは構造化データと非構造化データをうまく扱えてベクトル検索の苦手を補える
課題はあるけどナレッジグラフは、Neo４jとLangchainで構築できるよ。


 はじめに
今回はベクトル検索の苦手分野をどうしても補ってあげたいとおもっている筆者やまぐちが、ベクトル検索の苦手を補ってあげられるナレッジグラフに関してまとめていこうと思います。
少々長い記事ですが、ベクトル検索を労ってあげた...]]></summary>
        <author>
            <name>やまぐち</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】Windows11でPythonを動かす]]></title>
        <id>https://zenn.dev/qico/articles/ab279cf935f411</id>
        <link href="https://zenn.dev/qico/articles/ab279cf935f411"/>
        <updated>2024-03-12T17:04:23.000Z</updated>
        <summary type="html"><![CDATA[はじめに
自分の好きなキャラでAIを作りたい！
でもなにからすればいいか分からない…
そんな悩みがありまして、まずはAI開発でよく使われている気がするPythonを動かしてみます。
!
本記事はプログラマ初心者🐣が書いております。
情報が間違っている可能性があるためご注意ください！
実行やダウンロード等は自己責任でお願いします😞


 Pythonのインストール
以下サイトからWindows版のPythonをダウンロードします。
https://www.python.org/downloads/
バージョンについてはよく分かりませんので、とりあえず最新バージョンをDLしましょう。

...]]></summary>
        <author>
            <name>Qico</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pandas.groupbyを分かりやすく解説]]></title>
        <id>https://zenn.dev/yuto_mo/articles/fb1d010b30afff</id>
        <link href="https://zenn.dev/yuto_mo/articles/fb1d010b30afff"/>
        <updated>2024-03-12T14:33:02.000Z</updated>
        <summary type="html"><![CDATA[今回はPandasのgroupbyについて解説します。

 groupbyとは
groupbyは、データをグループ化し、それらのデータに集計や統計の操作を行うpandasの関数です。

 0. データフレームについて
groupbyで扱うDataFrameデータは、二次元配列の形状を持ちます。
また列と行それぞれにインデックスを持ち、df.columsとdf.indexで確認できます。
・データ
data = {'Category': ['A', 'B', 'A', 'B', 'C', 'A', 'B', 'C'],
        'Values': [10, 20, 15, 25, ...]]></summary>
        <author>
            <name>yuu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-336｜B - CTZ]]></title>
        <id>https://zenn.dev/hyperdb/articles/e617802d7b2a43</id>
        <link href="https://zenn.dev/hyperdb/articles/e617802d7b2a43"/>
        <updated>2024-03-12T09:18:58.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-336 B - CTZ



 提出結果
def getInt():
    return int(input())


def ctz(i):
    b = bin(i)[::-1]

    return b.find('1') if i > 0 else 1


def main():
    n = getInt()

    print(ctz(n))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-336｜A - Long Loong]]></title>
        <id>https://zenn.dev/hyperdb/articles/cc4b10197ad6b7</id>
        <link href="https://zenn.dev/hyperdb/articles/cc4b10197ad6b7"/>
        <updated>2024-03-12T09:18:57.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-336 A - Long Loong



 提出結果
def getInt():
    return int(input())


def main():
    n = getInt()

    print("L%sng" % ('o' * n))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[なぜ私が Jupyter notebook の外の世界において pandas や polars, dict を消したがるのか]]></title>
        <id>https://zenn.dev/haito_linux/articles/daf3b29d27b5d4</id>
        <link href="https://zenn.dev/haito_linux/articles/daf3b29d27b5d4"/>
        <updated>2024-03-12T07:31:57.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この文章は社内の新人 Data Scientist (≒ Machine Learning Researcher/Developer) 向けに書いた文章をもう少し清書し、また社内向けの内容を削ったものです。
また、 私がはてなBlogに投稿した
Better python code, better naming, better programming, better productivity 記事の中にある同セクション「なぜ私が Jupyter notebook の外の世界において pandas や polars, dict を消したがるのか」の内容です。記事においては「別...]]></summary>
        <author>
            <name>HaiTo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[機械学習モデル作成] Step5 データの前処理]]></title>
        <id>https://zenn.dev/yuto_mo/articles/7172e31f820efd</id>
        <link href="https://zenn.dev/yuto_mo/articles/7172e31f820efd"/>
        <updated>2024-03-11T14:50:49.000Z</updated>
        <summary type="html"><![CDATA[機械学習モデル作成のStep5です。前回はロードしたデータを確認する方法について扱いました。
続いて今回はデータの前処理を解説します。

 5 データの前処理
ロードしたデータを学習に使用する前に、前処理を行う必要があります。前処理とは、データをモデルが学習しやすいように加工することです。
欠損値処理や正規化、データ拡張など多岐に渡ります。
今回はこれら前処理について、一般的に処理を行う順番に沿って解説しています。

 5.0 データのロード
学習に使用するデータをロードします。

 5.1 欠損値処理
欠損値の置換、削除、または回帰補完、多重補完などを行います。
ここでは簡単な置換と削...]]></summary>
        <author>
            <name>yuu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Semaphoreを使ってPythonの非同期処理の平行処理数をコントロールする]]></title>
        <id>https://zenn.dev/yosemat/articles/39c36d0ed88a7c</id>
        <link href="https://zenn.dev/yosemat/articles/39c36d0ed88a7c"/>
        <updated>2024-03-11T12:17:04.000Z</updated>
        <summary type="html"><![CDATA[先に結論
import asyncio

class AsyncResource:
    def __init__(self, concurrency: int = 10):
        self.semaphore = asyncio.Semaphore(concurrency)

    async def task(self):
        async with self.semaphore:  # 11個目以降のタスクはここでブロックされる
            print("Hello")
            await self.call_api()
  ...]]></summary>
        <author>
            <name>Yosemat</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Notion × Streamlitで読書リストを視覚化するアプリ]]></title>
        <id>https://zenn.dev/satsuk/articles/785f07616aeb38</id>
        <link href="https://zenn.dev/satsuk/articles/785f07616aeb38"/>
        <updated>2024-03-11T10:38:24.000Z</updated>
        <summary type="html"><![CDATA[はじめに
最近はインターネット上で情報収集するのが簡単になっています。しかし読んだ記事をどう整理するかは案外難しいものです。そこで今回は、Notionで管理している読書リストを、PythonのStreamlitとNotion APIを使って視覚化する方法をご紹介します。これを使えば、読んだ記事を一目で振り返ることができ、さらにどんなジャンルに偏っているかなど、自分の読書傾向も分析できるようになります。


 必要なもの

Streamlit: Webアプリをサクッと作れるPythonのライブラリです。
Pandas
WordCloud, Matplotlib, Plotly: データ...]]></summary>
        <author>
            <name>Mats</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[米国特許商標庁PatentsViewを用いた特許データのpythonによる取得,分析]]></title>
        <id>https://zenn.dev/satsuk/articles/44ab5481c7c03c</id>
        <link href="https://zenn.dev/satsuk/articles/44ab5481c7c03c"/>
        <updated>2024-03-11T10:36:17.000Z</updated>
        <summary type="html"><![CDATA[はじめに
特許データは、技術進歩のバロメーターとして、また競合調査や市場分析の貴重な情報源として利用されます。本記事では、米国特許商標庁（USPTO）の公開データをPythonを使ってダウンロードし、特許のトレンドを分析する方法をご紹介します。

 データの取得
以下のページから特許に関わるデータをダウンロードします。今回はg_patent(特許データ)を使います。
https://patentsview.org/download/data-download-tables

 データの前処理
先ほどダウンロードしたg_patent.tsv.zipを任意のディレクトリに移動して以下のコ...]]></summary>
        <author>
            <name>Mats</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenAI api× Notion api × Streamlitを使った要件定義アプリ]]></title>
        <id>https://zenn.dev/satsuk/articles/e19c5f56b2f783</id>
        <link href="https://zenn.dev/satsuk/articles/e19c5f56b2f783"/>
        <updated>2024-03-11T10:32:34.000Z</updated>
        <summary type="html"><![CDATA[はじめに
プロジェクト初期の要件定義や提案書の作成は、時には面倒に感じるものですよね。でも、StreamlitとNotion API、そしてOpenAIのapiを使えば、このプロセスをずっとスムーズに、そして楽しくできるかもしれません。今日はそんなツールを使って、「AI要件ガイド🤖」を作ってみます。

 まずはツール紹介から

Streamlit: ブラウザ上で動くアプリケーションを、Pythonのスクリプトだけでサクッと作れます。
Notion API: Notionとのやりとりをプログラムからでもできるようになります。
OpenAI: AIを使って、テキスト生成などができるように...]]></summary>
        <author>
            <name>Mats</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React × Django × OpenAI apiを活用したチャットアプリケーション開発]]></title>
        <id>https://zenn.dev/satsuk/articles/6207bd26142c24</id>
        <link href="https://zenn.dev/satsuk/articles/6207bd26142c24"/>
        <updated>2024-03-11T10:29:32.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回は、ReactとDjangoを組み合わせて、リアルタイムチャット機能を持つWebアプリケーションの開発過程を共有します! このアプリはプロダクトの資料に合わせてAIがチャット形式で自動でインタビューをしてくれるものとなっています。手軽に生活者の意見を聞きたい時に活用したいと思い開発しました。この記事では機能の概要のみを説明するため、詳細なコードにご興味のある方はコメントいただければ幸いです！


 プロジェクトの概要
このチャットアプリケーションは、ユーザーがリアルタイムでメッセージを交換できる機能を提供します。Reactを使用してインタラクティブなユーザーインターフェ...]]></summary>
        <author>
            <name>Mats</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React × Django × OpenAI api × Zoom SDKを使ったオンラインインタビューアプリ]]></title>
        <id>https://zenn.dev/satsuk/articles/377ff5e25b2c4e</id>
        <link href="https://zenn.dev/satsuk/articles/377ff5e25b2c4e"/>
        <updated>2024-03-11T10:28:06.000Z</updated>
        <summary type="html"><![CDATA[はじめに
インタビューは、プロダクト開発や市場調査において重要な役割を果たしますが、その準備と分析には時間がかかります。そこで、AIを活用して、このプロセスを簡単で効率的なものに変えるアプリケーションを開発しました。このアプリケーションでは、ユーザーの要件に基づいたインタビューフローを自動生成し、実際のインタビュー中はAIが対話を導き、リアルタイムで重要なデータを収集。そして、インタビューが終わると、直感的に理解できるダッシュボードで結果を分析し、深い洞察を得ることができます。フロントエンドはReact,バックエンドはDjango(一部Node.js),Zoom SDKでオンラインビ...]]></summary>
        <author>
            <name>Mats</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】LangChainのAgentで複数の関数を使う]]></title>
        <id>https://zenn.dev/nari007/articles/eafa1e26b74522</id>
        <link href="https://zenn.dev/nari007/articles/eafa1e26b74522"/>
        <updated>2024-03-11T10:24:47.000Z</updated>
        <summary type="html"><![CDATA[はじめに
ユーザーの入力に対して関数を使用する回数と順序をモデル自体に決定させて実行させる場合には、Agentが便利です。下記のサンプルコードを使い、LangSmithでトレースした結果も確認してみます。
https://python.langchain.com/docs/use_cases/tool_use/quickstart#agents
LangSmithの使い方はこの記事を参照してください。
https://zenn.dev/nari007/articles/e1531d3b9370cb

 サンプルコード
※ envファイルにOPENAI_API_KEYの値を設定していま...]]></summary>
        <author>
            <name>Nari</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Crunchbaseデータを用いたスタートアップと投資家のネットワーク可視化]]></title>
        <id>https://zenn.dev/satsuk/articles/38011cb7fd3c9c</id>
        <link href="https://zenn.dev/satsuk/articles/38011cb7fd3c9c"/>
        <updated>2024-03-11T10:23:35.000Z</updated>
        <summary type="html"><![CDATA[はじめに
スタートアップエコシステムは複雑で、多くのプレイヤーが絡み合っています。スタートアップにとっての資金調達は、その成長の鍵を握る一大イベントですが、どの投資家がどの企業に関わっているかを把握することは一筋縄ではいきません。そこで、この記事では、Pythonを活用して、Crunchbaseデータを基にスタートアップと投資家の関係を視覚化する方法をご紹介します。

 データセットの準備(Crunchbase Proプランが必要です)
まず、Crunchbaseから取得したデータセットを用意します。このデータには、スタートアップの名前とトップ5の投資家がリスト化されています。以下の...]]></summary>
        <author>
            <name>Mats</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GNN（Graph Neural Network）のガイダンス]]></title>
        <id>https://zenn.dev/merosu_radio/articles/192fa106a324f6</id>
        <link href="https://zenn.dev/merosu_radio/articles/192fa106a324f6"/>
        <updated>2024-03-11T05:10:26.000Z</updated>
        <summary type="html"><![CDATA[この記事について
GNN（Graph Neural Network）の概要について調査を行い、サンプルコードを作成しました。
まずはGNNの概要を説明し、その後GNNの学習イメージやサンプルコードを紹介します。
より詳細なGNNに関する情報は↓レビューが参考になります。
https://arxiv.org/ftp/arxiv/papers/1812/1812.08434.pdf

 GNNとは？
GNNはデータがグラフ形式で表現される場合に適用することができる深層学習のフレームワークです。グラフGはノード（点）Vとエッジ（線）Eで構成され、数式的にはG = (V, E)で表されます。...]]></summary>
        <author>
            <name>merosu_radio</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Swallow-MS: Mistral日本語継続事前学習モデル]]></title>
        <id>https://zenn.dev/tokyotech_lm/articles/3f71df3cd2e589</id>
        <link href="https://zenn.dev/tokyotech_lm/articles/3f71df3cd2e589"/>
        <updated>2024-03-11T02:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
東京工業大学 横田研究室の藤井です。
本日(2024/03/11)Mistral-7B-v0.1から約 100B Token継続事前学習を行ったSwallow-MSをリリースさせて頂きました。
本モデルの開発は、産総研、東京工業大学 岡崎研究室、横田研究室の合同プロジェクトにて行われました。公式プロジェクトページはこちらです。
https://tokyotech-llm.github.io/swallow-mistral
Swallow-MS は高い日本語能力を示すSwallow-7Bを上回り、7Bモデルでありながら、Swallow-13Bに迫る日本語性能を示しました。
リ...]]></summary>
        <author>
            <name>Kazuki Fujii</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Swallow-MX: Mixtral日本語継続事前学習MoEモデル]]></title>
        <id>https://zenn.dev/tokyotech_lm/articles/5f4211b9ed3197</id>
        <link href="https://zenn.dev/tokyotech_lm/articles/5f4211b9ed3197"/>
        <updated>2024-03-11T02:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
東京工業大学 横田研究室の藤井です。
本日(2024/03/11)Mixtral-8x7B-Instruct-v0.1から日本語継続事前学習を行ったSwallow-MX-8x7b-NVE-v0.1をリリースさせて頂きました。
本モデルの開発は、産総研、東京工業大学 岡崎研究室、横田研究室の合同プロジェクトにて行われました。公式プロジェクトページはこちらです。
https://tokyotech-llm.github.io/swallow-mistral
Swallow-MX はMoE(Mixture of Expert)モデルの継続事前学習モデルであり、Denseモデルにお...]]></summary>
        <author>
            <name>Kazuki Fujii</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのお手軽CLI化ツールjsonargparseの紹介]]></title>
        <id>https://zenn.dev/kurusugawa/articles/introduce_jsonargparse</id>
        <link href="https://zenn.dev/kurusugawa/articles/introduce_jsonargparse"/>
        <updated>2024-03-10T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
本記事では、Python スクリプトに CLI を追加するツール jsonargparse を紹介します。
jsonargparse は関数やクラスの型ヒントや docstring などを利用して CLI を構築するツールで、同種のツールと比べて、デコレータなどの「CLI のためのコード」をほとんど必要としないという特長があります。これにより、Python の基礎さえ分かっていればスムーズに扱える、学習コストが極めて低いツールとなっています。
このタイプのツールの草分け的存在に Python Fire がありますが、jsonargparse もそれに インスパイアされた ツ...]]></summary>
        <author>
            <name>Kenji Hata</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【初心者でも安心】Locustで始める負荷テスト]]></title>
        <id>https://zenn.dev/secondselection/articles/locust_sample</id>
        <link href="https://zenn.dev/secondselection/articles/locust_sample"/>
        <updated>2024-03-10T21:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回は以前プロジェクトで活用した負荷テストツールである「Locust」を備忘録として記事にしてみました。
プロジェクトでは、非機能要件として以下を満たしていることを確認するために利用しました。

xxxx(PV数/日)のリクエストに耐えられること
yy秒以内に処理が完了すること
同時アクセス数がzzまで耐えられること

今回、Locustを選んだのは最近よく使っているPythonでシナリオが記載できるからです。
Locustはdocker-composeを使うことでワーカーを増やし分散負荷を生成できる点も選定理由の1つです。
ただ、負荷テストツールにはJMeterやk6など...]]></summary>
        <author>
            <name>u_hijiri</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[npx amplify sandboxのノリで作るpinecone sandbox]]></title>
        <id>https://zenn.dev/timimamushi/articles/cf52995e69216d</id>
        <link href="https://zenn.dev/timimamushi/articles/cf52995e69216d"/>
        <updated>2024-03-10T15:31:50.000Z</updated>
        <summary type="html"><![CDATA[RAG基盤でよく使われるベクトル検索データベースの一つである、PineConeというサービスがあります。
https://www.pinecone.io/
私は、amplify gen2に対してcontributeに励んでるわけでございますが、
amplify gen2の中には、npx amplify sandboxとすると、開発者個人の開発環境をばっと作ってくれる機能が存在します。
https://zenn.dev/purpom/articles/12538dec010be8
開発を始める時に、npx amplify sandboxとしてawsリソースを一時的に立ち上げて、開発が終了し...]]></summary>
        <author>
            <name>timimamushi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pyproject.toml入門 〜 Cython を添えて 〜]]></title>
        <id>https://zenn.dev/arkbig/articles/newbie-pyproject_8ba6d14d1b7855c703aa3022c60c8c329</id>
        <link href="https://zenn.dev/arkbig/articles/newbie-pyproject_8ba6d14d1b7855c703aa3022c60c8c329"/>
        <updated>2024-03-10T14:45:28.000Z</updated>
        <summary type="html"><![CDATA[Pythonを本格的に使ってみようと思い立った初心者が、最初のプロジェクト構成でつまずいた記録です。最近ナウいといわれているpyproject.tomlを使ってみます。

 プロジェクト概要
C++のコードとそれをサポートするためのPythonのコードを書くプロジェクトです。C++のコードはCythonでラップしてPythonから呼び出すことにします。
C++のコードはCMakeでビルドして、Pythonの環境はvenvで構築します。
参考サイト:
https://packaging.python.org/ja/latest/guides/writing-pyproject-toml/
...]]></summary>
        <author>
            <name>ArkBig</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[GraphQL][Github] createdAtとpublishedAtの違いを検証してみた]]></title>
        <id>https://zenn.dev/makikubo/articles/9d78c2176849b3</id>
        <link href="https://zenn.dev/makikubo/articles/9d78c2176849b3"/>
        <updated>2024-03-10T13:53:47.000Z</updated>
        <summary type="html"><![CDATA[この記事で言いたいこと
この検証の限りは違いなし。
createdAtとpublishedAtは同じ日時を示していた。

 はじめに
開発チームの生産性測定の一貫として、GithubのPR作成日時とcloseした時間の差分の平均を測定しようと思い立った。
そこでGithubのGraphQL APIを使って、実際に上記を試そうと思ったが、API DocumentのObjects - pullRequestの項目を読むとそれらしき日時がたくさんあった。
https://docs.github.com/en/graphql/reference/objects#pullrequest

me...]]></summary>
        <author>
            <name>Masaki Kubota</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[新しくなったKindle for Macの蔵書一覧取得方法]]></title>
        <id>https://zenn.dev/yamazaking/articles/kindle-manage</id>
        <link href="https://zenn.dev/yamazaking/articles/kindle-manage"/>
        <updated>2024-03-10T13:13:00.000Z</updated>
        <summary type="html"><![CDATA[とあることからKindleの蔵書一覧を取得したいなと思いたち、簡単にできるかと思ったら、ほとんどの記事が以前のKindleアプリでの取得方法でした。
2023年9月にKindle for Macアプリは刷新されたようで、これまでのKindleアプリは廃止されたようです。それに伴いこれまでは自動生成されたxmlファイルをパースすることで、本の情報が取得できていたのですが、それができなくなりました。
この記事では、新しいKindle for Mac版での蔵書一覧取得方法を紹介していきます。
こちらの記事を参考にしつつ、Google Colaboratoryを用いてやっていきます。

 前準備...]]></summary>
        <author>
            <name>yamazaking</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Wordpressの記事投稿・更新時にVectorStoreも自動的に更新する]]></title>
        <id>https://zenn.dev/khisa/articles/940fa0345de0b2</id>
        <link href="https://zenn.dev/khisa/articles/940fa0345de0b2"/>
        <updated>2024-03-10T09:17:32.000Z</updated>
        <summary type="html"><![CDATA[Wordpressのブログの記事をベースにRAGを構築し、そのRAGを活用したアプリケーションとしてブログ上にQAボットを構築しました。次の課題は、新規記事の投稿時や既存記事の更新時に、どのようにVectorStoreを更新するかということになります。Wordpressには、記事投稿・更新時にフックできるPHP関数が用意されているので、それを用いて自動的にVectorStoreを更新するシステムを構築してみました。

 Wordpressの記事更新時にVectorStoreも自動的に更新するシステム
ブログに限らず、Webサイトというのは、常にコンテンツの追加や更新が発生します。RAGを...]]></summary>
        <author>
            <name>ひさ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Grove人感センサの値をUSB経由で取得]]></title>
        <id>https://zenn.dev/nondescript/articles/4f38b8aa3089c5</id>
        <link href="https://zenn.dev/nondescript/articles/4f38b8aa3089c5"/>
        <updated>2024-03-10T07:20:35.000Z</updated>
        <summary type="html"><![CDATA[TL;DR

Grove対応USBアダプタを用いる
PythonライブラリPyMCP2221Aを用いる


 背景

SBC等を使わずにPCで人感センサの値を取得したい
GPIO、I2C周りは詳しくない


 内容

 使用デバイス
Grove - PIR Motion Sensor - Seeed Studio

GroveをUSB経由で制御するアダプタ (みんなのラボ)

アダプタのGroveコネクタと人感センサをケーブルで接続する。
USBを任意のPCに接続する。(Windows10, Ubuntu22.04で動作確認)
電圧は手元の環境ではどちらでも動くことを確認。

 取得...]]></summary>
        <author>
            <name>素人の戯言</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[エンコーディング手法の総まとめ]]></title>
        <id>https://zenn.dev/yuto_mo/articles/131c49be5aee53</id>
        <link href="https://zenn.dev/yuto_mo/articles/131c49be5aee53"/>
        <updated>2024-03-10T06:55:29.000Z</updated>
        <summary type="html"><![CDATA[機械学習におけるエンコーディングとは、カテゴリデータを数値データに変更する操作を表します。
今回はエンコーディングの手法をまとめます。

 エンコーディング手法
一般的な利用頻度順に並べています
1. ワンホットエンコーディング (One-Hot Encoding)
各カテゴリに対して配列を作成し、該当するカテゴリには1、それ以外には0を割り当てます。
例えばA=[1,0,0],B=[0,1,0],C=[0,0,1]などです。
2. ラベルエンコーディング (Label Encoding)
各カテゴリにユニークな整数を割り当てます。
例えばA=0,B=1,C=2などです。
3. ダミーエ...]]></summary>
        <author>
            <name>yuu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[cpython source code reading (3.10.13), 1/n]]></title>
        <id>https://zenn.dev/zinziroge/articles/c25c138a25cbc7</id>
        <link href="https://zenn.dev/zinziroge/articles/c25c138a25cbc7"/>
        <updated>2024-03-10T02:08:00.000Z</updated>
        <summary type="html"><![CDATA[(この記事は書きかけです。)

 概要
何回かに分けて下記を理解していく予定です。

.pyが解釈されて実行されるまで実行されるまで
list型の詳細
dict型の詳細

対象のソースコードはこれです。Linuxのコードを読んでいきます。
Python-3.10.13.tgz
まず、
"* .pyが解釈されて実行されるまで実行されるまで"
について、正常系の処理の流れを追っていきます。

 main()
main()を検索するところから始めます。

Programs/python.c
/* Minimal main program -- everything is loaded from...]]></summary>
        <author>
            <name>zinziroge</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[特定の層のみファインチューニングする方法]]></title>
        <id>https://zenn.dev/sergicalsix/articles/faea1db36a8b68</id>
        <link href="https://zenn.dev/sergicalsix/articles/faea1db36a8b68"/>
        <updated>2024-03-09T14:20:31.000Z</updated>
        <summary type="html"><![CDATA[はじめに
LLM等のニューラルネットワークモデルのファインチューニングでは、通常は全ての層のパラメーターが更新されます。しかし、場合によっては特定の層のみをファインチューニングし、他の層のパラメーターは固定したままにしたい場合があります。
本記事では特定の層のみファインチューニングする方法について、プログラム例を紹介します。

 内容
特定の層のみファインチューニングには、その層の重みのrequires_gradをTrueとし、それ以外の重みのrequires_gradをFalseとする必要があります。
本記事では以下5つのプログラム例を記載します。

特定の種類の層の重みの更新設定...]]></summary>
        <author>
            <name>sergicalsix</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[機械学習モデル作成] Step4 Pandasによるデータ確認]]></title>
        <id>https://zenn.dev/yuto_mo/articles/4f3a529aec848a</id>
        <link href="https://zenn.dev/yuto_mo/articles/4f3a529aec848a"/>
        <updated>2024-03-09T11:42:01.000Z</updated>
        <summary type="html"><![CDATA[機械学習モデル作成のStep4です。前回はロードしたデータを取り扱うデータ形式について扱いました。
今回はデータの確認を解説します。

 4 Pandasによるデータ確認
通常、データをロードした後はデータを確認し、平均値や中央値などの統計情報から異常値の存在を確認します。目的はデータ概要の理解、異常値の除去や誤ったデータエントリの修正です。
データ例にはkaggle HSMコンペの脳波データを使用します。
データには有害な脳症状が発生した時の脳波についての情報が含まれており、id(識別子)やexpert_consensus(専門家の判断)、vote(その症状であると判断した専門家の数)...]]></summary>
        <author>
            <name>yuu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonでの型指定一覧表。]]></title>
        <id>https://zenn.dev/kap210/articles/bc42f2d0602273</id>
        <link href="https://zenn.dev/kap210/articles/bc42f2d0602273"/>
        <updated>2024-03-09T07:48:24.000Z</updated>
        <summary type="html"><![CDATA[Pythonに型指定が無いと思ってる人が多いらしい。
確かに必要な場面は少ないだろうが、ここで紹介するよ！！
ちなみにpythonは動的型付け言語だけど型ヒントっていう機能を使って、変数や関数の引数、戻り値の型を明示的に指定することができるよ。

 1. 基本型


str: 文字列

int: 整数

float: 浮動小数点数

bool: 真偽値

None: None値

これが基本的な型指定
# 変数
name: str = "Zenn"
age: int = 2024
height: float = 3.15
is_alive: bool = True
data: None ...]]></summary>
        <author>
            <name>とっきーなますて</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【python】LINE Notify を利用したメッセージ送信]]></title>
        <id>https://zenn.dev/flin/articles/14751a3c41bf59</id>
        <link href="https://zenn.dev/flin/articles/14751a3c41bf59"/>
        <updated>2024-03-09T06:44:00.000Z</updated>
        <summary type="html"><![CDATA[1.LINE 連携の下準備
以下の URL から LINE 連携に必要なトークンを発行します。
・LINE Notify
https://notify-bot.line.me/ja/
アクセス後、右上のアカウント名のプルダウンから「マイページ」をクリックします。
その後、画面下部の「トークンを発行する」をクリックし、トークン名と通知するトークン名を登録すると、トークンが発行されます。
※発行したトークンは二度と表示されないので注意
　メモしておくとよい。
2.記載のコード
すごく丁寧な記載で初心者にもわかりやすかったのでご紹介させていただきます。
以下の方のブログを参照しました。
・Py...]]></summary>
        <author>
            <name>lssen</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django Restframework でのメール認証機能追加]]></title>
        <id>https://zenn.dev/kaito_73519/articles/a05be287b3476a</id>
        <link href="https://zenn.dev/kaito_73519/articles/a05be287b3476a"/>
        <updated>2024-03-09T05:55:02.000Z</updated>
        <summary type="html"><![CDATA[概要
フロント側を Vue.js で実装し, バックエンド側を Django REST Framework で実装している.
メールでの通知機能をつけるためアカウント作成時にメールアドレスを登録必要があったけど, 自分が使用していないメールアドレスでも登録可能だったので認証できるようにしたかった.
バックエンド側を中心に書いていく.

 作ったもの
ログイン画面. メールアドレスとユーザー名, パスワードを入力

サインアップボタンを押すとアカウントを作成するバックエンド側のAPIにリクエストを送る.
このあと, 入力したメールアドレスに対して以下のようなメールが送信される.
このメ...]]></summary>
        <author>
            <name>kaito</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python 3.12 利用時、google-cloud-sdk がエラーを出したので最新バージョンにアップデートした]]></title>
        <id>https://zenn.dev/naan4810/articles/bcd16b0fff165c</id>
        <link href="https://zenn.dev/naan4810/articles/bcd16b0fff165c"/>
        <updated>2024-03-09T05:09:47.000Z</updated>
        <summary type="html"><![CDATA[エラーについて
ターミナルでコマンドを実行していたとき、google-cloud-sdkが以下のようなエラーを出すようになりました。
Traceback (most recent call last):
  File "/Users/tomo/google-cloud-sdk/lib/gcloud.py", line 132, in <module>
    main()
  File "/Users/tomo/google-cloud-sdk/lib/gcloud.py", line 90, in main
    from googlecloudsdk.core.ut...]]></summary>
        <author>
            <name>naan4810</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[さくらのクラウドのVMをAPIで操作する]]></title>
        <id>https://zenn.dev/kentymyty/articles/705d589dc902cc</id>
        <link href="https://zenn.dev/kentymyty/articles/705d589dc902cc"/>
        <updated>2024-03-08T23:34:00.000Z</updated>
        <summary type="html"><![CDATA[目的

AWS、GCP、Azureなどでは実行できないジョブをさくらのクラウドで作成したVMで実行する
土日でしか動かさない
サーバー実行時間を節約するため、ジョブ実行時のみVMを起動する

起動は他Paasのサーバレスサービスなどを利用など




 Pythonの実装例

 事前準備
さくらのクラウドのコンソールから必要な情報を取得して環境変数にセット

export SERVER_ID=${サーバーID}
export SAKURA_CLOUD_USERNAME=${APIトークン}
export SAKURA_CLOUD_PASSWORD=${APIシークレット}


 re...]]></summary>
        <author>
            <name>kenty</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[機械学習モデル作成 Step3 データ形式]]></title>
        <id>https://zenn.dev/yuto_mo/articles/a1acc5c225c93a</id>
        <link href="https://zenn.dev/yuto_mo/articles/a1acc5c225c93a"/>
        <updated>2024-03-08T15:07:01.000Z</updated>
        <summary type="html"><![CDATA[3. データ形式
データをロードすることで、プログラム上で扱えるようになります。プログラム上で複数のデータ形式を活用することで、それぞれ適した操作を行うことができます。
機械学習ではN次元配列データがよく利用され、numpy.ndarray, pandas.dataframe, polars.dataframe, tensorflow.Tensor, torch.tensorのようなクラスでデータを扱うことがよくあります。
今回はこれらの配列データについて紹介します。

 3.1 numpy.ndarray
NumPyライブラリの基本的なデータ構造であり、多次元配列を提供します。列名...]]></summary>
        <author>
            <name>yuu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python+Gemini APIを使って簡単なBlueskyのbotのようなものを作ってみた]]></title>
        <id>https://zenn.dev/trpd/articles/51ed6cc43de425</id>
        <link href="https://zenn.dev/trpd/articles/51ed6cc43de425"/>
        <updated>2024-03-08T15:00:45.000Z</updated>
        <summary type="html"><![CDATA[はじめに
PythonとGoogleのGeminiのAPIを使ってチョー簡単なbotのようなものを作ってみたという話です
プログラミング初心者がプログラミング初心者に向けて記事を書いてみたという感じなので、そこはご了承いただければ
また、GeminiのAPIが無料で使えるのは2024年初頭までという記事を見ました。今現在は使えますが、おそらく夏までには有料になるのではないかと思います
その時はClaude3を使ってみようかな…

 概要
今回作ったプログラムではGemini API（GCP的にはGenerative Language API？？）を使ってGeminiに返信内容を考えて...]]></summary>
        <author>
            <name>TP</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-335｜A - 202<s>3</s>]]></title>
        <id>https://zenn.dev/hyperdb/articles/800e68ed04b2b4</id>
        <link href="https://zenn.dev/hyperdb/articles/800e68ed04b2b4"/>
        <updated>2024-03-08T07:14:58.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-335 A - 202<s>3</s>



 提出結果
def getString():
    return input()


def main():
    s = getString()

    print(s[0:len(s)-1] + '4')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-335｜B - Tetrahedral Number]]></title>
        <id>https://zenn.dev/hyperdb/articles/7098cbcd3d6c9e</id>
        <link href="https://zenn.dev/hyperdb/articles/7098cbcd3d6c9e"/>
        <updated>2024-03-08T07:14:57.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-335 B - Tetrahedral Number



 提出結果
def getInt():
    return int(input())


def main():
    n = getInt()

    for x in range(n + 1):
        for y in range(n + 1 - x):
            for z in range(n + 1 - x - y):
                print(x, y, z)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[何も知らない大学生のAIエンジニアになるための勉強(part0)]]></title>
        <id>https://zenn.dev/takumi0616/articles/8ac449bc64f832</id>
        <link href="https://zenn.dev/takumi0616/articles/8ac449bc64f832"/>
        <updated>2024-03-08T07:10:55.000Z</updated>
        <summary type="html"><![CDATA[自己紹介
情報系の学部の大学3年生のtakumi0616と申します！
フロントエンド、機械学習、生成AIに興味があり、大学で絶賛勉強中です！
ポートフォリオ↓
https://takumi-portfolio.vercel.app/

 はじめに
私は現在、長岡技術科学大学の「機械学習理論研究室」に所属しています。まだ入ったばかりで、わからないことだらけ（pythonを少し触った程度）ですが、今後難しい内容を取り扱うことが予想されます。また、将来はAIや機械学習に関わる仕事（まだあんまり理解してない）に就きたいと考えています。そのための勉強を、本記事のシリーズで公開しながら勉強すると...]]></summary>
        <author>
            <name>takumi0616</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【最新】YOLOv9の使い方解説＋リアルタイムの物体検出を利用した簡単なアプリを実装する【Python】]]></title>
        <id>https://zenn.dev/tomlab/books/4df1bf32bacb67</id>
        <link href="https://zenn.dev/tomlab/books/4df1bf32bacb67"/>
        <updated>2024-03-08T06:40:57.000Z</updated>
        <summary type="html"><![CDATA[この本では、YOLOv9 の基本的な使用方法を学び、YOLOv9 によりリアルタイムに検出した結果を利用した簡単な Python アプリケーションを実装します。]]></summary>
        <author>
            <name>joe</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Python]実行時間を計測]]></title>
        <id>https://zenn.dev/purratto/articles/4ff3812c5200d2</id>
        <link href="https://zenn.dev/purratto/articles/4ff3812c5200d2"/>
        <updated>2024-03-08T04:13:39.000Z</updated>
        <summary type="html"><![CDATA[import time

start_time = time.time()
# 処理
end_time = time.time()

print("Execution time: {end_time - start_time} seconds")
https://docs.python.org/ja/3/library/time.html#module-time]]></summary>
        <author>
            <name>purratto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonでログをファイルに出力する]]></title>
        <id>https://zenn.dev/purratto/articles/924d172162701a</id>
        <link href="https://zenn.dev/purratto/articles/924d172162701a"/>
        <updated>2024-03-08T03:49:01.000Z</updated>
        <summary type="html"><![CDATA[import logging

logging.basicConfig(level=logging.INFO, filename="/var/log/app.log")

logging.info("var/log/app.logにInfoのログを出力")
https://docs.python.org/ja/3/howto/logging.html]]></summary>
        <author>
            <name>purratto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonの制御構文]]></title>
        <id>https://zenn.dev/crudfifth/articles/b1cc334ddfd329</id>
        <link href="https://zenn.dev/crudfifth/articles/b1cc334ddfd329"/>
        <updated>2024-03-07T20:01:10.000Z</updated>
        <summary type="html"><![CDATA[no contents.]]></summary>
        <author>
            <name>CRUD5th-高橋綱弥-</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Moviepyを使って6トラックのループ動画を生成するツールを作ってみた]]></title>
        <id>https://zenn.dev/clevercure/articles/6a6d8a167ca2b4</id>
        <link href="https://zenn.dev/clevercure/articles/6a6d8a167ca2b4"/>
        <updated>2024-03-07T18:05:09.000Z</updated>
        <summary type="html"><![CDATA[6TracksLoopVideoGenerater
https://github.com/CleverCure/6TracksLoopVideoGenerater
Flaskとsqliteを使用しています。
PythonのライブラリMoviepyを使用し動画を6トラックのループに分割し、一つのループ動画を生成するツール。
単純に映像と音のループを楽しめる短い動画を生成するツールです。
細かいことは割愛させていただくので、質問などがあればリポジトリのREADMEに記載されているメールアドレスに連絡をお願いします。
処理が重くなるためスペックが低いサーバーだと動画が生成されるまで時間がか...]]></summary>
        <author>
            <name>Clever Cure</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Django]ModelFormを動的に生成しdictの内容をバリデートして保存する]]></title>
        <id>https://zenn.dev/nyo3q1/articles/django-model-form-dynamic-create</id>
        <link href="https://zenn.dev/nyo3q1/articles/django-model-form-dynamic-create"/>
        <updated>2024-03-07T14:33:19.000Z</updated>
        <summary type="html"><![CDATA[BlogというModelがあるとして、こんな感じに書くと任意のフィールドを更新できる👊
from django.forms.models import modelform_factory


def update(instance: Blog, data: dict) -> None:
    # fields=list(data.keys()) で検証したいフィールドを指定
    BlogForm = modelform_factory(Blog, fields=list(data.keys()))
    blog_form = BlogForm(data=data, ins...]]></summary>
        <author>
            <name>nyo3q1</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[機械学習モデル作成  step2  データのロード]]></title>
        <id>https://zenn.dev/yuto_mo/articles/bc5793e91f1292</id>
        <link href="https://zenn.dev/yuto_mo/articles/bc5793e91f1292"/>
        <updated>2024-03-07T14:24:33.000Z</updated>
        <summary type="html"><![CDATA[2. データのロード
各種形式で保存されたデータは、プログラム上にロードしてから処理されます。
データのロードはpythonの組み込み関数や、さまざまなライブラリでサポートされています。
以下に、それぞれのファイル形式に対応するロード方法を紹介します。

 2.1 テキスト(.txt)
pythonの組み込み関数'open()'で読み込むことができます。
with open('file.txt', 'r') as file:
    content = file.read()

 2.2 CSV(.csv)
pandasライブラリの'read_csv()'を利用して読み込むことができ...]]></summary>
        <author>
            <name>yuu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Django]FKのModelChoiceFieldの選択肢がObjectになる]]></title>
        <id>https://zenn.dev/ronna/articles/7d13a89fd0838c</id>
        <link href="https://zenn.dev/ronna/articles/7d13a89fd0838c"/>
        <updated>2024-03-07T11:37:04.000Z</updated>
        <summary type="html"><![CDATA[概要
ChoiceFieldの項目をDBから取得する場合にテンプレート側で選択肢がオブジェクトになる件の対応方法を紹介。

 環境
Python 3.12.2
Django 5.0.2

 現象
テンプレート(html)を表示すると、選択肢がオブジェクトになる。
例：MyRelatedClass Object(1)

 対応方法
ModelChoiceFieldをオーバーライドして、label_form_instanceでobjectではなくobject.nameをreturnするよう変更
# forms.py
class CustomModelChoiceField(forms.M...]]></summary>
        <author>
            <name>ronna</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-334｜A - Christmas Present]]></title>
        <id>https://zenn.dev/hyperdb/articles/c256d51f792d9b</id>
        <link href="https://zenn.dev/hyperdb/articles/c256d51f792d9b"/>
        <updated>2024-03-07T10:28:57.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-334 A - Christmas Present



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    b, g = getIntMap()

    print('Bat' if b > g else 'Glove')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-334｜B - Christmas Trees]]></title>
        <id>https://zenn.dev/hyperdb/articles/48696a29e9087f</id>
        <link href="https://zenn.dev/hyperdb/articles/48696a29e9087f"/>
        <updated>2024-03-07T10:28:57.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-334 B - Christmas Trees



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    a, m, l, r = getIntMap()

    al = abs(l - a) // m
    ar = abs(r - a) // m

    ml = abs(l - a) % m
    mr = abs(r - a) % m

    if l <= a <= r:
        print(ar + al + 1)...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Slack の CLI と無料サンドボックス環境でサクサク快適開発]]></title>
        <id>https://zenn.dev/seratch/articles/2871491988a4bc</id>
        <link href="https://zenn.dev/seratch/articles/2871491988a4bc"/>
        <updated>2024-03-07T08:46:27.000Z</updated>
        <summary type="html"><![CDATA[こんにちは、Slack の公式 SDK 開発と日本の Developer Relations を担当している瀬良 (@seratch) と申します 👋

 サンドボックス環境が使えるようになりました
米国時間 3/6 にサンフランシスコで開催された TrailblazerDX にて、Slack の新しい開発者向けサポート機能が発表されました。
https://slack.com/intl/ja-jp/blog/developers/developer-program-launch-jp
Bolt for Python / JavaScript でのカスタムファンクションなどのトピックもあ...]]></summary>
        <author>
            <name>Kazuhiro Sera</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[小学校区と中学校区のGMLデータを市区町村別のKMLファイルに変換]]></title>
        <id>https://zenn.dev/kaorumori/articles/42afe83d7632d5</id>
        <link href="https://zenn.dev/kaorumori/articles/42afe83d7632d5"/>
        <updated>2024-03-07T08:22:55.000Z</updated>
        <summary type="html"><![CDATA[このプログラムは国土数値情報ダウンロードサイトで公開されている小学校区と中学校区のGMLデータを市区町村別のKMLファイルに変換します。2010年度は小学校区のみ、2013年度は中学校区のみ、2016年度は小学校区と中学校区のデータがあります。

 2010年

 小学校区
import os
import json
import xml.etree.ElementTree as ET
import numpy as np

prefectures = json.load(open('prefectures.json', 'r'))

if not os.path.exists('out...]]></summary>
        <author>
            <name>kaorumori</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Django]FKのModelChoiceFieldでのValidationエラーの回避法]]></title>
        <id>https://zenn.dev/ronna/articles/1e0837a578e514</id>
        <link href="https://zenn.dev/ronna/articles/1e0837a578e514"/>
        <updated>2024-03-06T23:37:01.000Z</updated>
        <summary type="html"><![CDATA[概要
DjangoのModelにてForeignKeyを設定している項目のデータベース登録において発生するバリデーションエラーの対応方法を紹介。

 環境
Python 3.12.2
Django 5.0.2

 エラーメッセージ
Select a valid choice. That choice is not one of the available choices.

 原因
Forms.pyの下記コードにて、Objects.none()としているため、バリデーションにて選択肢の候補が取得できず、画面上でどの選択肢を選んでも有効でない判定となっていた。
# Forms.py
M...]]></summary>
        <author>
            <name>ronna</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[#2 学び【今年中にKaggleでメダルを取る男】]]></title>
        <id>https://zenn.dev/louloutech/articles/40d0672e49cb4c</id>
        <link href="https://zenn.dev/louloutech/articles/40d0672e49cb4c"/>
        <updated>2024-03-06T14:45:55.000Z</updated>
        <summary type="html"><![CDATA[「PythonではじめるKaggleスタートブック」で出てきたコードでわからなかったところを思考整理がてらここに記述していきます。

 concat
以下のconcatがよくわからない。
data = pd.concat([train, test], sort=False)
→trainとtestのdfを連結する
こちらの記事が参考になりそうです：https://qiita.com/greenteabiscuit/items/1c950d94d8f9156ace10

 fillna
以下のコードのinplace=TrueがFalseになっているとどうなるのか、気になったので調べてみまし...]]></summary>
        <author>
            <name>louloutech</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[機械学習モデル作成  Step1  データの種類]]></title>
        <id>https://zenn.dev/yuto_mo/articles/9ad1f71db062ec</id>
        <link href="https://zenn.dev/yuto_mo/articles/9ad1f71db062ec"/>
        <updated>2024-03-06T14:13:47.000Z</updated>
        <summary type="html"><![CDATA[このシリーズでは、機械学習モデルを作成するまでの流れを解説していきます。
それでは始めましょう！

 Step1 データの種類
最初のステップは、モデルの学習に使用するデータの理解です。データの質は、機械学習モデルの精度に最も影響を及ぼす要素の一つです。
初めに一般的に利用されるデータの保存形式について考えましょう。

 1.1 テキストデータ

テキスト(.txt)
一般的なテキストデータです。自然言語処理のタスクでよく利用されます。# .txt
こんにちは。私はジョンです


CSV(.csv)
カンマで区切られたテキストデータです。一番上の行が列名の表となります。人間にも読みやすい...]]></summary>
        <author>
            <name>yuu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[行列積状態について考える (11) — NumPy を使わずに 50 量子ビットのもつれ状態を計算]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-matrix-product11</id>
        <link href="https://zenn.dev/derwind/articles/dwd-matrix-product11"/>
        <updated>2024-03-06T13:06:13.000Z</updated>
        <summary type="html"><![CDATA[目的
行列積状態について考える (9) — 100 量子ビットのもつれ状態 で大量の量子ビットの行列積状態 (MPS) のもつれ状態を見た。このような量子ビット数の MPS シミュレーションにおいて、NumPy もどきを作る (1) で作った自作品で NumPy を置き換えたらどれくらいパフォーマンスに影響が出るのであろう？という、どうでも良いことの検証をしてみる。
とは言え、今回は非常につまらない実装の詳細によって 50 量子ビットで確認する。縮約計算用のインデックスを 50 個までしか使えないという実装上の制限を作ってしまったためで、拡張してもどうせ滅多に使わないからとりあえずは...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[NumPy もどきを作る (1)]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-mynumpy-01</id>
        <link href="https://zenn.dev/derwind/articles/dwd-mynumpy-01"/>
        <updated>2024-03-06T12:35:40.000Z</updated>
        <summary type="html"><![CDATA[目的
去年作っていた NumPy もどきがある程度動くようになったので備忘録を残しておく。

何となく NumPy っぽく使えること
縮約計算 (einsum) が使えること
データ構造の中心は多次元リスト (int, float, complex)

程度が目的で、NumPy を触りながら動きの雰囲気を合わせていった。細かいインターフェイスを知りたい場合は NumPy reference なども参考にした。
リポジトリ: https://github.com/derwind/mynumpy

 実装内容
実装は 2 段階のゴールからなる。

縮約計算 (einsum) が使える
基...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[FastAPI][SQLAlchemy] BackgroundTasks を使う際は Depends せず新規コネクションにしときなさい]]></title>
        <id>https://zenn.dev/killinsun/articles/5b70111c926140</id>
        <link href="https://zenn.dev/killinsun/articles/5b70111c926140"/>
        <updated>2024-03-06T10:11:16.000Z</updated>
        <summary type="html"><![CDATA[結論
タイトル通りですが、FastAPI の BackgroundTasks を使っている場合は、ContextManager などを活用して、以下のように新規コネクションを確保しましょう
url = f"mysql+pymysql://{config.mysql_user}:{config.mysql_password}@{config.mysql_host}:{config.mysql_port}/{config.mysql_db}?charset=utf8mb4"


engine = create_engine(url, pool_recycle=40, pool_size=...]]></summary>
        <author>
            <name>首無しキリン</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-333｜B - Pentagon]]></title>
        <id>https://zenn.dev/hyperdb/articles/9af6f240dae2f7</id>
        <link href="https://zenn.dev/hyperdb/articles/9af6f240dae2f7"/>
        <updated>2024-03-06T08:53:32.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-333 B - Pentagon



 提出結果
def getString():
    return input()


def distance(p1, p2):
    v1 = ord(p1)
    v2 = ord(p2)

    v = v1 - v2 if v1 >= v2 else v2 - v1

    return min(v, 5 - v)


def main():
    s1, s2 = list(getString())
    t1, t2 = list(getString())

    print('Yes'...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-333｜A - Three Threes]]></title>
        <id>https://zenn.dev/hyperdb/articles/22ce9960b5e20b</id>
        <link href="https://zenn.dev/hyperdb/articles/22ce9960b5e20b"/>
        <updated>2024-03-06T08:53:32.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-333 A - Three Threes



 提出結果
def getInt():
    return int(input())


def main():
    n = getInt()

    print(('%d' % n) * n)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Microsoft PurviewをPythonから操作する]]></title>
        <id>https://zenn.dev/yyteam/articles/purview_sdk_entity</id>
        <link href="https://zenn.dev/yyteam/articles/purview_sdk_entity"/>
        <updated>2024-03-06T03:01:08.000Z</updated>
        <summary type="html"><![CDATA[Microsoft Purviewとは?

Purviewはいわゆるデータガバナンスを行うためのソリューションで、データの民主化を実現します。
Purviewを使用すれば、企業内のどこにどのようなデータがあるかがわかります。

Purviewの主な機能は以下になります。


データ資産全体の管理：オンプレミス、マルチクラウド、サービスとしてのソフトウェア (SaaS) のデータ管理とガバナンスに役立つ統合データガバナンスソリューションです。

自動化されたデータの検出：データ環境全体の最新のマップを作成するための自動化されたデータの検出機能があります。

エンドツーエンドのデータ系列...]]></summary>
        <author>
            <name>yyteam</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[local.settings.jsonをAzureFunctionsやWebAppsの構成設定Jsonに変換したい！]]></title>
        <id>https://zenn.dev/nomhiro/articles/convert_from_localsettings_to_functionsettings</id>
        <link href="https://zenn.dev/nomhiro/articles/convert_from_localsettings_to_functionsettings"/>
        <updated>2024-03-05T12:35:35.000Z</updated>
        <summary type="html"><![CDATA[何をしたいか
AzureFunctionで動作するPythonプロジェクトをローカル開発する場合に用いるlocal.settings.jsonを、AzureFunctionsやWebAppsのアプリケーション設定のJsonに変換します。

 なぜしたいか
AzureFunctionで動作するPythonプロジェクトをローカル開発する場合、local.settings.jsonに環境変数を記述します。
以下は、アプリケーションが利用する独自の環境変数「ENVIRONMENT_SETTING_1」と「ENVIRONMENT_SETTING_2」をlocal.settings.jsonに記...]]></summary>
        <author>
            <name>しろくま</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GPT-4Vで「いらすとや」をいい感じにレイアウトする「れいあうとや」を作ってみた]]></title>
        <id>https://zenn.dev/firstautomation/articles/3cd9e6b693c2f2</id>
        <link href="https://zenn.dev/firstautomation/articles/3cd9e6b693c2f2"/>
        <updated>2024-03-05T11:58:57.000Z</updated>
        <summary type="html"><![CDATA[作ったもの
株式会社ファースト・オートメーションCTOの田中(しろくま)です！
ChatGPTを使って、「いらすとや」の画像をいい感じにレイアウトする「れいあうとや」を作ってみました。
これまで、「いらすとや」っぽい画像生成AIはあったと思うのですが、 既存の「いらすとや」の画像をいい感じにレイアウトして新たな画像を生成するAI は無いかも、、と思い作ってみました。
(最近LayerDiffusionなるものが出てきて、画像とレイアウトも一気に生成できるようになったみたいですが、、)
pythonでStreamlitを使っており、Gitでコードを取ってきて、ローカルで試すことができま...]]></summary>
        <author>
            <name>しろくま</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[「vscode python 色つかない」～pylanceのクラッシュ対策]]></title>
        <id>https://zenn.dev/capriblue/articles/d9f09f8e2c554a</id>
        <link href="https://zenn.dev/capriblue/articles/d9f09f8e2c554a"/>
        <updated>2024-03-05T09:50:39.000Z</updated>
        <summary type="html"><![CDATA[問題
vscodeやpylanceが自動アップデートされると、

The Python Tools server crashed 5 times in the last 3 minutes. The server will not be restarted.

と出力に表示されて、pythonに関する補完が全く効かなくなり、関数名などに色がつかなくなる現象がときどきおきます。

 解決策
pylanceのversionを下げましょう。
1．拡張機能のpylanceページを検索します：



pylanceのページのuninstallの横にある「▼」のボタンをクリックします



「i...]]></summary>
        <author>
            <name>capriblue</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pyenvを使ってpythonをインストールするときに出たエラー達]]></title>
        <id>https://zenn.dev/ziaensochan/articles/967361906abb77</id>
        <link href="https://zenn.dev/ziaensochan/articles/967361906abb77"/>
        <updated>2024-03-05T06:02:39.000Z</updated>
        <summary type="html"><![CDATA[pyenv
UbuntuへのPythonのインストールはちと面倒なので、pyenvを使うのが楽だと思う。
導入などは次の記事を参考にしていただきたい。
https://zenn.dev/hr0t15/articles/8ae3564bde2cce

 エラー

 Cコンパイラないぜ!!

エラーログ
$ pyenv install 3.10.6
Downloading Python-3.10.6.tar.xz...
-> https://www.python.org/ftp/python/3.10.6/Python-3.10.6.tar.xz
Installing Python...]]></summary>
        <author>
            <name>ziaenso_</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Switch Bot Color Bulbをテンキーで操作するよ]]></title>
        <id>https://zenn.dev/gaimo_ch/articles/45ea37e1b281d3</id>
        <link href="https://zenn.dev/gaimo_ch/articles/45ea37e1b281d3"/>
        <updated>2024-03-04T15:13:26.000Z</updated>
        <summary type="html"><![CDATA[💭 テンキーで部屋の明かりを操作したい
SwitchBotのスマート電球はSiriなどで操作できますが、急いでいるときは言うまでもなく非常に不便です。
純正のリモートボタンも別売りであるのですが、2パターンしか操作することができません。
テンキーで操作できたらいいなと思い作りました。

 構成


スイッチとなるモノ

ミニキー
BUFFALO BSTK100WH



サーバ

Proxmoxにて作成したVM (Debian GNU/Linux 12)



API

SwitchBot API v1.1



動かすモノ

SwitchBot LED電球 スマートライト




...]]></summary>
        <author>
            <name>がいも</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SwitchBot Hub 2 のステータス取得]]></title>
        <id>https://zenn.dev/false/articles/0011-9f0e8a9dc136e5</id>
        <link href="https://zenn.dev/false/articles/0011-9f0e8a9dc136e5"/>
        <updated>2024-03-04T11:48:54.000Z</updated>
        <summary type="html"><![CDATA[SwitchBot ハブ2を買ったので、温度や湿度を取得してzabbixに送ってみました。
参考にしたのは、以下とか。

SwitchBot API v1.0を使用して温湿度計とハブ２のステータスを取得する方法  |  まっさの電子ぶろっぐ
【SwitchBot】温湿度計のデータをPython × InfluxDB × Grafanaでダッシュボード化する

いやもう参考サイトでやりたいことはできてしまっているのですが、うちの計測系は独自のPostgreSQLデータベースかzabbixを使っているので、InfluxDBじゃなくて自分でやっておこうと思ったわけです。
参考サイトのうち前者は...]]></summary>
        <author>
            <name>false</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[tmuxでpythonお手軽バックグラウンド実行]]></title>
        <id>https://zenn.dev/shu421/articles/b3f960809c188e</id>
        <link href="https://zenn.dev/shu421/articles/b3f960809c188e"/>
        <updated>2024-03-04T10:44:38.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Pythonスクリプトをコマンドラインで実行したりJupyter Notebookを使用している際に、パソコンがスリープしたりSSH接続が途切れてもプロセスをバックグラウンドで動かし続けたい場面がよくありますよね。Pythonでバックグラウンド実行を行う際、nohupや&などが使えますがtmuxを利用すると簡単に実行することができます。

 tmuxとは
tmuxは、端末を分割して複数のウィンドウを開くことができるソフトウェアです。tmuxを使うことで、複数のウィンドウを開いて作業することができます。また、バックグラウンドでの実行や、SSH接続が切れても作業を継続す...]]></summary>
        <author>
            <name>shu421</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[競プロ python] ふんわりと理解！SortedListの仕組み]]></title>
        <id>https://zenn.dev/pokeshun/articles/f5362825e512cf</id>
        <link href="https://zenn.dev/pokeshun/articles/f5362825e512cf"/>
        <updated>2024-03-04T08:39:41.000Z</updated>
        <summary type="html"><![CDATA[対象者

SortedListを使いたい人
厳密な理解よりも、イメージで動作を知りたい人

ソースコードを見たい人はこちら(https://github.com/grantjenks/python-sortedcontainers/tree/master/src/sortedcontainers)

 SortedListとは

Sorted Containersというライブラリにある、ソート状態で要素の追加・削除が可能なリスト



 利点は？

ソート状態を保ったまま、要素の追加、削除、検索が O(logN) で可能


 実現する仕組み - _lists, _maxes, _i...]]></summary>
        <author>
            <name>shunpig</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【活性化関数】01 活性化関数って？]]></title>
        <id>https://zenn.dev/nekoallergy/articles/ml-basic-act-01</id>
        <link href="https://zenn.dev/nekoallergy/articles/ml-basic-act-01"/>
        <updated>2024-03-04T08:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回は、ニューラルネットワークの 1 つの要素である、 活性化関数について解説します。
人工知能や機械学習、ディープラーニングの記事を見ていると、活性化関数という用語はよく目にすると思います。活性化関数は、ニューラルネットワークにとって、なくてはならない存在です。
しかし、「調べてみたけど、いまいちよくわからない」という方が多いでしょう。今回は、そんな初心者に向けて、活性化関数を分かり易く丁寧に解説します。

今回の内容

ニューラルネットワークの流れをおさらいします。
活性化関数の役割と、そのイメージを紹介します。

是非最後までご覧ください。
↓ 動画でも視聴できます...]]></summary>
        <author>
            <name>NekoAllergy</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【活性化関数】02 活性化関数の種類5つ]]></title>
        <id>https://zenn.dev/nekoallergy/articles/ml-basic-act-02</id>
        <link href="https://zenn.dev/nekoallergy/articles/ml-basic-act-02"/>
        <updated>2024-03-04T08:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
前回は、活性化関数の概要について紹介しました。
↓　Past...　↓
https://zenn.dev/nekoallergy/articles/ml-basic-act-01
今回から、より具体的な内容に入っていきましょう。
さて、活性化関数にはいくつか種類があります。使用する活性化関数を変えることで、変換の方法が変わるため、最終的な結果も変わってきます。それぞれの活性化関数には役割が決まっていて、「こんな時にはこの活性化関数を使う」というのが、ある程度決まっています。
活性化関数の種類はたくさんありますが、だいたい 5種類や6 種類くらい知っていれば OK です。
...]]></summary>
        <author>
            <name>NekoAllergy</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【活性化関数】03 活性化関数の重要ポイント]]></title>
        <id>https://zenn.dev/nekoallergy/articles/ml-basic-act-03</id>
        <link href="https://zenn.dev/nekoallergy/articles/ml-basic-act-03"/>
        <updated>2024-03-04T08:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
前回までの内容で、活性化関数の概要と、種類について紹介してきました。
↓　Past...　↓
https://zenn.dev/nekoallergy/articles/ml-basic-act-02
今回は、活性化関数の注意点を解説していきます。
一言で言うと、活性化関数は、「どのような形のグラフになっているか」が非常に重要です。もっというと、活性化関数は、「非線形」な変換 である必要があります。

この「非線形」という用語について、詳しく、わかりやすく解説していきます。

線形と非線形のイメージ
線形と非線形って？
活性化関数は非線形変換

活性化関数は、ニューラルネ...]]></summary>
        <author>
            <name>NekoAllergy</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac OSでpythonのフレームワーク(Django)の開発環境設定の方法]]></title>
        <id>https://zenn.dev/jboydev/articles/0d545bc2fbceab</id>
        <link href="https://zenn.dev/jboydev/articles/0d545bc2fbceab"/>
        <updated>2024-03-04T03:05:00.000Z</updated>
        <summary type="html"><![CDATA[ここではmac osでpythonの開発環境ができている上で進めます。
筆者の開発環境は以下になります。
pythonの開発環境についてはpyenvを使用することを強くお勧めします。
簡単な理由としてはpyenvを使用することでpythonのバージョンをローカル上で簡単に切り替えることができるためです。

 前提

python 3.10.4

mac上でpythonがインストールされているか確認をする際のコマンド
$ python --version
pythonがインストールされていることが確認できた場合には次に進んでください。

 vscode(visual studio code...]]></summary>
        <author>
            <name>jboydev</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Powertools for AWS (Python) を用いた Lambda 関数の実装]]></title>
        <id>https://zenn.dev/todoker_blog/articles/d0106d81e3c310</id>
        <link href="https://zenn.dev/todoker_blog/articles/d0106d81e3c310"/>
        <updated>2024-03-04T02:54:01.000Z</updated>
        <summary type="html"><![CDATA[こんにちは。hayata-yamamoto です。
今まで、いくつかの記事を通して Powertools for AWS (Python) を用いた実装例を紹介してきました。今回は、今までの記事を踏まえた総論になるような記事にできればと考えています。「なぜ、Powertools を使うようになったのか」から始まり、実際にどのような運用をしているのかなどを共有できれば嬉しいです。
<今までの記事のリンクすべて貼る>

 なぜ使うようになったのか
メンバーからの提案により採用が決まりました。採用したのはおおよそ2年前ほどで、当時は今よりもずっと運用している Lambda 関数が多...]]></summary>
        <author>
            <name>山本隼汰 | Hayata Yamamoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PyCloneの紹介と使い方]]></title>
        <id>https://zenn.dev/naoki0103/articles/introducing-pyclone</id>
        <link href="https://zenn.dev/naoki0103/articles/introducing-pyclone"/>
        <updated>2024-03-03T18:00:38.000Z</updated>
        <summary type="html"><![CDATA[はじめに
PyCloneは、my-python-templateを効率的に利用するために私が作成したコマンドラインユーティリティです。このツールを使用すると、プロジェクトのクローン、セットアップ、GitHubへの初期バージョンのコミットを素早く行うことができます。my-python-templateに関するZennの記事はこちらをご覧ください。

 セットアップ
PyCloneを使用するためには、まずpyclone関数をシェルの設定ファイルにコピーする必要があります。Bashユーザーの場合は.bashrc、ZSHユーザーの場合は.zshrcとなります。
関数の宣言は以下のようになりま...]]></summary>
        <author>
            <name>Naoki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonプロジェクトのためのテンプレート: my-python-templateの紹介]]></title>
        <id>https://zenn.dev/naoki0103/articles/my-python-template</id>
        <link href="https://zenn.dev/naoki0103/articles/my-python-template"/>
        <updated>2024-03-03T17:50:02.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Pythonプロジェクトを始める際には、プロジェクトの構造や依存関係の管理、コードの品質を保つためのツールなど、設定すべき項目が多くあります。そこで今回は、これらの設定を一元化したPythonプロジェクトのテンプレート、my-python-templateを作成しました。こちらについて今回は紹介いたします。

 my-python-templateの内容
このテンプレートには以下のファイルとフォルダが含まれています。


pyproject.toml: プロジェクトの設定と依存関係を管理するためのファイルです。

.pre-commit-config.yaml: pre-c...]]></summary>
        <author>
            <name>Naoki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Docker]Flaskのサーバーにローカル接続できないとき]]></title>
        <id>https://zenn.dev/kotopasi/articles/9165dd128d9b0c</id>
        <link href="https://zenn.dev/kotopasi/articles/9165dd128d9b0c"/>
        <updated>2024-03-03T12:17:07.000Z</updated>
        <summary type="html"><![CDATA[はじめに
ネットワーク周りの理解が浅いなぁ…と実感しました

 動作環境

Docker 24.0.7

Pythonイメージ python:3.9-slim

Flask 2.3.3



 手順
以下のPythonコードを実行したいとき
from flask import Flask

app=Flask(__app__)

@app.route('/')
def hello():
	return ("<p>hello, world!<p>")
docker-compose.yml
version: '3'

services:
  server:
   ...]]></summary>
        <author>
            <name>あまたつ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Python].envから環境変数を読み込む]]></title>
        <id>https://zenn.dev/kotopasi/articles/174bde362d0267</id>
        <link href="https://zenn.dev/kotopasi/articles/174bde362d0267"/>
        <updated>2024-03-03T12:17:07.000Z</updated>
        <summary type="html"><![CDATA[はじめに
.envファイルに設定した環境変数を読み込むときの備忘録です

 動作環境

Docker 24.0.7

Pythonイメージ python:3.9-slim

Flask 2.3.3



 手順

ルートディレクトリに.envファイルを作成する

requirements.txtにpython-dotenvを追加してモジュールをインストール

OPENAI_API_KEY="XXXXXXX"

読み込みたいファイルで以下を書く

from dotenv import load_dotenv
import os

load_dotenv()

OPENAI_KEY=os...]]></summary>
        <author>
            <name>あまたつ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[KaggleのNLPコンペで初手に使える可視化 〜BERTopicを用いた文書クラスタリングと可視化〜]]></title>
        <id>https://zenn.dev/nishimoto/articles/74fddcb5c67960</id>
        <link href="https://zenn.dev/nishimoto/articles/74fddcb5c67960"/>
        <updated>2024-03-03T10:29:37.000Z</updated>
        <summary type="html"><![CDATA[BERTopic は、Transformersを用いて文書のトピックモデリングを行うためのPythonライブラリです。本記事では、自分がKaggleコンペの初手EDAによく使うコードをまとめました。


 入出力のイメージ
入力： 文章のリスト
（例：["I am sure some bashers of Pens fans ...", "My brother is in the market for a high-performance video card that supports VESA local bus with 1-2MB RAM.  Does anyone hav......]]></summary>
        <author>
            <name>nishimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[prefect の work-pool / worker について理解する]]></title>
        <id>https://zenn.dev/massu_devix/articles/905d6172687f5e</id>
        <link href="https://zenn.dev/massu_devix/articles/905d6172687f5e"/>
        <updated>2024-03-03T09:27:46.000Z</updated>
        <summary type="html"><![CDATA[はじめに
prefect の構成要素のうち、work-pool / worker について理解します。

 work-pool
work-pool は、prefect の work flow を適切なインフラにデプロイするための架け橋となるコンポーネントです。work-pool には様々なタイプを指定できますが、例えば docker のタイプを持つ work-pool を作成した場合、その work-pool から実行された work flow は後述する worker を通して docker コンテナのインフラで起動することになります。
他にも、単一のプロセスとして work fl...]]></summary>
        <author>
            <name>mas_dx</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python でpip installができない 　command not found: pip]]></title>
        <id>https://zenn.dev/shimouta/articles/c81de05cafe6d2</id>
        <link href="https://zenn.dev/shimouta/articles/c81de05cafe6d2"/>
        <updated>2024-03-03T07:52:16.000Z</updated>
        <summary type="html"><![CDATA[「ChatGPTAPI×Pythonで始める対話型AI実践入門」でOpenAIのAPIを用いた実装の学習をしています。
OpenAIのライブラリをインストールするときの備忘録です。
https://book.impress.co.jp/books/1123101013

 やりたいこと
OpenAIのライブラリをインストールしたい。

 環境

チップ：M1
OS：Ventura　13.2.1

python3は公式サイトからインストール済みです。
% python3 --version
Python 3.12.2

 pip install openai を実行できない
python3...]]></summary>
        <author>
            <name>Sho</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【型アノテーション】Pythonの矢印は何者か]]></title>
        <id>https://zenn.dev/nii/articles/what-is-python-annotations</id>
        <link href="https://zenn.dev/nii/articles/what-is-python-annotations"/>
        <updated>2024-03-03T00:17:44.000Z</updated>
        <summary type="html"><![CDATA[この記事は何
Pythonのコードを読んでいたら急に矢印(->)が現れてびっくりした人向けの記事です。
備忘録でもあります。

 TL;DR
Pythonでの -> 表記は型アノテーションを表しています。
変数や関数の引数や戻り値の型のヒントを定義できます。
型を定義するのではなくあくまで型のヒントを記述しているだけ、というところがポイントです。
これに違反していても実行時にエラーにならないことに注意してください。

 実際に触ってみる
2つの値を足すだけの簡単な関数を定義してみましょう。
def Addition(x, y):
    return x + y
これらを...]]></summary>
        <author>
            <name>nii</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【2024年3月】エンジニアなら読むべき技術書TOP5]]></title>
        <id>https://zenn.dev/yottabyte/articles/c91b2b16820467</id>
        <link href="https://zenn.dev/yottabyte/articles/c91b2b16820467"/>
        <updated>2024-03-02T11:00:00.000Z</updated>
        <summary type="html"><![CDATA[情報セキュリティの敗北史


相次ぐ個人情報の大規模漏洩、米・中・露による国家主導のハッキング、企業・病院を標的にして猛威を振るうランサムウェア…
IT社会が急速な発展を続ける一方で、私たちの「情報」を取り巻く状況は日に日に悪化している。
数々のセキュリティ対策が打ち出されているにもかかわらず、サイバー攻撃による被害は増え続けている。
今日の情報セキュリティが抱える致命的な〈脆弱性〉は、どこから来たのか?
コンピュータの誕生前夜から現代のハッキング戦争まで、半世紀以上にわたるサイバー空間の攻防を描いた、情報セキュリティ史の決定版。
【Cybersecurity Canon Hall ...]]></summary>
        <author>
            <name>Raio｜高校生エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[NuShellでPythonのvenvを使用する方法]]></title>
        <id>https://zenn.dev/akazdayo/articles/d9ecfe5baec5af</id>
        <link href="https://zenn.dev/akazdayo/articles/d9ecfe5baec5af"/>
        <updated>2024-03-02T09:49:20.000Z</updated>
        <summary type="html"><![CDATA[はじめに
少し前に、PowerShellから、NuShellに移行してからPythonのvenvがうまく使えなかったのでメモ的な感じでここに書いておきます。
何か間違っていたり、うまくできない場合はお手数ですが、編集リクエストまたは、コメントをいただけると幸いです。

 事前インストールが必要なもの
> pip install virtualenv

 使用方法
> python -m virtualenv venv
> overlay use 作った環境のパス/activate.nu

 参考
https://github.com/nushell/nushell/...]]></summary>
        <author>
            <name>akazdayo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【GitHub Copilot】実践ガイド：図解と例で学ぶ使い方とコード品質向上のポイント]]></title>
        <id>https://zenn.dev/safubuki/articles/turtle-20240223-gitcopilot</id>
        <link href="https://zenn.dev/safubuki/articles/turtle-20240223-gitcopilot"/>
        <updated>2024-03-02T08:16:58.000Z</updated>
        <summary type="html"><![CDATA[AIがコードを書いてくれる画期的なツール、GitHub Copilotをご存知ですか？
私は2024年1月から使い始めましたが、驚くほど便利です。GitHub Copilotは、自然言語による指示やコードの一部を入力するだけで、目的のコードを生成してくれます。そして、エディタ上で、すぐに反映できるので、開発をとてもスムーズに行うことができます。
私は、GitHub Copilotのおかげで、小規模ながらも個人のOSS(オープンソースソフトウェア)開発にチャレンジすることができました。効率よく開発ができたのは言うまでもありませんが、Copilotが提案するコードから多くのことを学びました。...]]></summary>
        <author>
            <name>タートルヴィレッジ・ゆう</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[1日で雰囲気を掴む！Pythonの基礎のキ]]></title>
        <id>https://zenn.dev/takusys/books/2bf634d271939d</id>
        <link href="https://zenn.dev/takusys/books/2bf634d271939d"/>
        <updated>2024-03-02T07:52:35.000Z</updated>
        <summary type="html"><![CDATA[急にPythonが必要になった！　そんなあなたに贈る本です。
必須レベルのPython記法を重点的に取り上げています。]]></summary>
        <author>
            <name>たく。</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[open_jtalkを使って発声したい]]></title>
        <id>https://zenn.dev/abekobo/articles/86e44c3ed96450</id>
        <link href="https://zenn.dev/abekobo/articles/86e44c3ed96450"/>
        <updated>2024-03-02T07:46:09.000Z</updated>
        <summary type="html"><![CDATA[背景
さっくと音声合成をしていきたいがpyttsx3を試したところ、自分の環境だと日本語に対応した発声ができないことが分かったのでopen-jtalkコマンドを使って発声をしていく
エンジンリスト確認ソース
```
    import pyttsx3

    engine = pyttsx3.init()
　　voicelist = engine.getProperty('voices')
    for voice in voicelist:
        print(f'voice: {voice.name}')
        print(f'id: {voice.id}...]]></summary>
        <author>
            <name>阿部工房</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Power BIでのデータ取得にPythonスクリプトを使用する方法]]></title>
        <id>https://zenn.dev/headwaters/articles/29de94ce24c7ca</id>
        <link href="https://zenn.dev/headwaters/articles/29de94ce24c7ca"/>
        <updated>2024-03-02T05:21:13.000Z</updated>
        <summary type="html"><![CDATA[やりたいこと
Power BIでデータの取得にPythonを使いたいです。
AzureのBlobやSQL DB、SharePointやローカルのCSV、Excelファイルなど色々な取得方法がありますが、公開されているAPIを直接叩いて取得したいため、Pythonを使ってデータを取得できないか調べてみました。

 事前準備
Power BIでPythonスクリプトを使うためにはローカルのPythonと紐づける必要があります。
Power BI Desktopを開いて、左上の「ファイル」を選択


左下の「オプションと設定」を選択


「オプション」を選択


左のメニュー一覧から「Py...]]></summary>
        <author>
            <name>ikebowsan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VSCode × Docker × Python環境でタイプヒントを使う方法]]></title>
        <id>https://zenn.dev/yanoken101/articles/46207fd28786ad</id>
        <link href="https://zenn.dev/yanoken101/articles/46207fd28786ad"/>
        <updated>2024-03-02T03:34:03.000Z</updated>
        <summary type="html"><![CDATA[背景
Docker上でPythonアプリを開発する場合、タイプヒントの拡張機能の参照先がローカル環境なので、「インポート "fastapi" を解決できませんでした」みたいなエラー警告がでてタイプヒントが使えない。

この問題を解決する手順を紹介します。

 手順

VSCode拡張機能の[Dev Container]をインストール
Dev Containerでdockerコンテナに接続
dockerコンテナ内でAppフォルダを開く
接続したdockerコンテナ内でpythonをインストール


 参照：
https://it-dxblog.com/vscode-python-doc...]]></summary>
        <author>
            <name>やのけん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonでLINEに通知を送る]]></title>
        <id>https://zenn.dev/joho0724/articles/sankaku0724-newcreate4</id>
        <link href="https://zenn.dev/joho0724/articles/sankaku0724-newcreate4"/>
        <updated>2024-03-02T03:27:55.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回はPythonでLINEに通知を送る方法について記事を書いてみました。
少しでも参考になれば幸いです。

 LINE Notifyのアクセストークンの発行
今回はLINEが提供している公式アカウントであるLINE Notifyを利用します。
LINE Notifyは、LINEと外部のサービスやアプリを連携して通知を受け取ることができるサービスです。
無料で使用できるため、活用までのハードルが低いのも特徴です。
以下のリンクからLINE Notifyのサイトにアクセスすることができます。
https://notify-bot.line.me/ja/
LINEアカウントでロ...]]></summary>
        <author>
            <name>さんかく</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tensorflowしたかっただけなのに、SSL:CERTIFICATE_VERIFY_FAILEDで詰んだ]]></title>
        <id>https://zenn.dev/mi0256/articles/tensorflow_ssl</id>
        <link href="https://zenn.dev/mi0256/articles/tensorflow_ssl"/>
        <updated>2024-03-02T02:36:45.000Z</updated>
        <summary type="html"><![CDATA[Python3環境で以下のエラーが出て、久々に詰まりまくったので備忘録。
Exception: URL fetch failure on https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz: None -- [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:1007)
動作環境
PC : M1 MacBook Pro (Apple M1)
python
- python3.12
- python3.11
- pytho...]]></summary>
        <author>
            <name>mio256</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ゼロから始めるStableDiffusion生活]]></title>
        <id>https://zenn.dev/mi0256/books/stable-diffusion-life</id>
        <link href="https://zenn.dev/mi0256/books/stable-diffusion-life"/>
        <updated>2024-03-02T02:36:45.000Z</updated>
        <summary type="html"><![CDATA[巷にはGoogleColabを用いた方法や難解過ぎる画像生成系AIの解説などが多く、ローカル環境で心地よいStableDiffusionの解説記事がなかったため自身のアウトプットがてら本にまとめます。]]></summary>
        <author>
            <name>mio256</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenAI Python SDK v1.0がめちゃくちゃ使いやすくなってた]]></title>
        <id>https://zenn.dev/yosemat/articles/da8a633d93bbaf</id>
        <link href="https://zenn.dev/yosemat/articles/da8a633d93bbaf"/>
        <updated>2024-03-01T14:35:09.000Z</updated>
        <summary type="html"><![CDATA[ハイライト

インスタンス化されたクライアントの利用を推奨するようになった
Async/Azure専用のクライアントが追加された
レスポンス（出力）がPydantic Modelになった
リクエストパラメータ（入力）がTypedDictになった


 インスタンス化されたクライアントの利用を推奨するようになった
これまではopenaiモジュールに定義されていたopenai.ChatCompletion.create関数をよんでいたところがインスタンス化されたOpenAIオブジェクトのchat.completions.createメソッドを呼ぶ仕様になりました。
これまで
import...]]></summary>
        <author>
            <name>Yosemat</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【pyinstaller】tesseract-ocrを同封して、１つのexeファイルを作成する方法]]></title>
        <id>https://zenn.dev/yk5322/articles/017aa5f5e2c825</id>
        <link href="https://zenn.dev/yk5322/articles/017aa5f5e2c825"/>
        <updated>2024-03-01T13:16:07.000Z</updated>
        <summary type="html"><![CDATA[概要
tesseractで文字認識するpythonプログラムを１つのexeファイル化する際につまづいたので、
その解決方法について紹介します。

 先に結論！
pyinstaller実行後に作成されるspecファイルに、下記記述を追加します。
specファイルで再度pyinstaller実行すれば、Tesseractを含んだexeファイルが作成できます。

main.spec
binaries=[(r'C:\Program Files\Tesseract-OCR', r'tesseract')],
datas=[(r'C:\Program Files\Tesseract-OCR\te...]]></summary>
        <author>
            <name>yosuke</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Amazonエンジニアが選ぶ技術書35選まとめ]]></title>
        <id>https://zenn.dev/yottabyte/articles/5724d108de02ad</id>
        <link href="https://zenn.dev/yottabyte/articles/5724d108de02ad"/>
        <updated>2024-03-01T11:00:00.000Z</updated>
        <summary type="html"><![CDATA[リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック


「美しいコードを見ると感動する。優れたコードは見た瞬間に何をしているかが伝わってくる。そういうコードは使うのが楽しいし、
自分のコードもそうあるべきだと思わせてくれる。本書の目的は、君のコードを良くすることだ」(本書「はじめに」より)。
コードは理解しやすくなければならない。本書はこの原則を日々のコーディングの様々な場面に当てはめる方法を紹介します。
名前の付け方、コメントの書き方など表面上の改善について。コードを動かすための制御フロー、論理式、変数などループとロジックについて。
またコードを再構成するた...]]></summary>
        <author>
            <name>Raio｜高校生エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ X / Twitter ] 自分の全ツイートを一括で削除手順]]></title>
        <id>https://zenn.dev/shomtsm/articles/52864a4b7b5eec</id>
        <link href="https://zenn.dev/shomtsm/articles/52864a4b7b5eec"/>
        <updated>2024-03-01T10:51:56.000Z</updated>
        <summary type="html"><![CDATA[前提

一括削除したいツイートは自分のツイートであること
アカウントのアーカイブを取得してしておくこと(データバックアップの意味も)
pythonを動かせる環境であること

twitter apiの仕様変更で、いままでの一括削除ルーツは基本使えなくなった。
でも自分のツイッターアカウントの全投稿を一括で削除したい。
公式ヘルプには「ツイートを一括削除することはできません。複数のツイートを削除する場合は、1つずつ手動で削除してください」とあるが、手動で全ツイート削除する作業は不毛で楽しくない
というわけでAPIで一括削除する方法を模索してできたのでメモっておきます。
流れは、自分の全ツ...]]></summary>
        <author>
            <name>松嶋松</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[CORS]FastAPIで許可するOriginを正規表現で設定する]]></title>
        <id>https://zenn.dev/purratto/articles/bfe6f551ad56da</id>
        <link href="https://zenn.dev/purratto/articles/bfe6f551ad56da"/>
        <updated>2024-03-01T08:23:33.000Z</updated>
        <summary type="html"><![CDATA[from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

app = FastAPI()

# CORSの設定
app.add_middleware(
    CORSMiddleware,
    # 許可するOriginを正規表現で設定
    allow_origin_regex="https://.*\.example\.org",
    allow_credentials=True,
    allow_methods=["GET"],
    allow_headers=[...]]></summary>
        <author>
            <name>purratto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[oh-my-posh でPythonのvenv promptが正しく表示されない]]></title>
        <id>https://zenn.dev/enven/articles/oh-my-posh-python-venv</id>
        <link href="https://zenn.dev/enven/articles/oh-my-posh-python-venv"/>
        <updated>2024-03-01T01:52:27.000Z</updated>
        <summary type="html"><![CDATA[環境

WSL2 Ubuntu22.04.03
GNU bash, version 5.1.16(1)-release (x86_64-pc-linux-gnu)
oh-my-posh 12.29.0


 背景

pythonでvenvやuvを使って.venvフォルダに仮想環境を作成する

. .venv/bin/activateして仮想環境を有効化するとoh-my-poshがプロンプトに仮想環境名とPythonのバージョンを表示してくれる

https://ohmyposh.dev/docs/segments/python
設定どおりに書くと以下のような感じ

 theme.om...]]></summary>
        <author>
            <name>えんぶん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Microsoft Fabricを使ってZennの投稿状況を可視化できるBIを作成する]]></title>
        <id>https://zenn.dev/headwaters/articles/c69811c3ed54c0</id>
        <link href="https://zenn.dev/headwaters/articles/c69811c3ed54c0"/>
        <updated>2024-03-01T01:49:26.000Z</updated>
        <summary type="html"><![CDATA[やりたいこと
今年から全社的に取り組んでいるZennでのテック記事投稿の状況を可視化できるようにしたいです。

 Microsoft Fabricとは？
データ分析を円滑に行うための統合サービスです。
データ統合やデータエンジニアリング・データサイエンスからビジネスインテリジェンスまで、さまざまな環境が提供されています。

 ZennにはAPIがあるっぽい
RSS以外にAPIもあるとのこと。
ただ、publication単位でのAPIはないっぽいので、ユーザー管理は別途ハードコーディングでやるしかないのと、各ユーザーごとにAPIを叩く必要があります。
https://zenn.dev...]]></summary>
        <author>
            <name>ikebowsan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】LangChainのLangSmithを試してみた]]></title>
        <id>https://zenn.dev/nari007/articles/e1531d3b9370cb</id>
        <link href="https://zenn.dev/nari007/articles/e1531d3b9370cb"/>
        <updated>2024-02-29T12:03:23.000Z</updated>
        <summary type="html"><![CDATA[はじめに
前回LangChainの記事を書きましたが、そのソースコードを使ってLangSmithで処理をトレースしてみました。初めて使ってみましたが簡単で便利だったので、その使い方をご紹介します。
前回の記事
https://zenn.dev/nari007/articles/900290ed31c7be

 LangSmithとは
LangSmithとは、LLMアプリケーションの開発、コラボレーション、テスト、デプロイ、監視のための統合 DevOpsプラットフォーム、とのことです。
無料プランがあり、毎月3000トレースまで使えるようなので開発時に使えるかなと思いました。
http...]]></summary>
        <author>
            <name>Nari</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ブルースカイのAPI経由で、ハッシュタグを付与する方法]]></title>
        <id>https://zenn.dev/ryo__matsu/articles/6b10652c12f976</id>
        <link href="https://zenn.dev/ryo__matsu/articles/6b10652c12f976"/>
        <updated>2024-02-29T04:32:47.000Z</updated>
        <summary type="html"><![CDATA[ブルースカイにハッシュタグの機能が追加されたようなので、早速試してみました。

 コード

post
from atproto import Client, client_utils, models

#ログイン
user = 'XXXXXXXXXXXX.bsky.social'
password = 'XXXXXXXXXXXX'
client = Client()
client.login(login=user, password=password)

#投稿するテキスト
text = client_utils.TextBuilder().text('普通のテキスト').tag('#ハ...]]></summary>
        <author>
            <name>りょーへー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FastAPI×MongoDBを用いたAPI開発の手ほどき② 〜DB接続〜]]></title>
        <id>https://zenn.dev/ryota_tamura_jp/articles/8d8811c9925fdd</id>
        <link href="https://zenn.dev/ryota_tamura_jp/articles/8d8811c9925fdd"/>
        <updated>2024-02-28T15:06:51.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは。LIRIS株式会社で取締役兼エンジニアをしています田村です。
前回投稿した「FastAPI×MongoDBを用いたAPI開発の手ほどき① 〜環境構築〜」の続きを書いていきます。初めての方は是非前回分から見ていただければと思います。
今回は、FastAPIとMongoDBを接続し、実際にCRUD操作を実装します。
コードだけ見たいという方はこちらから取得してください。

 想定読者

PythonでWeb API開発したい、されている方
FastAPIに興味のある方、数年使っている方
パフォーマンス向上に興味のある方


 フォルダ・ファイル構成
今回は、DBとの...]]></summary>
        <author>
            <name>Ryota Tamura (LIRIS Co., Ltd.)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Seleniumをヘッドフルブラウザで実行する]]></title>
        <id>https://zenn.dev/o_____i_o/articles/4de052f7350ca4</id>
        <link href="https://zenn.dev/o_____i_o/articles/4de052f7350ca4"/>
        <updated>2024-02-28T14:31:00.000Z</updated>
        <summary type="html"><![CDATA[概要
本来Seleniumはヘッドレスモードによるコード上でのブラウザ操作を行います。
今回はあえてヘッドフルモードでブラウザの操作を行い、
ついでに操作状況を確認できる環境を構築しようと思います。

 MAC M1/M2でDockerコンテナ上のChromeついて
現状arm64向けのGoogle Chromeが提供されていないため
そのままM1(M2) MACで動かそうとするとブラウザ起動の際にエラー落ちしてしまいます。
対応としてDocker Desktop設定でRosettaを利用するようにしておきましょう。
General > Use Rosetta for x86/...]]></summary>
        <author>
            <name>Ryo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Modular MojoがPythonより68000倍早いのは本当なのか]]></title>
        <id>https://zenn.dev/minedia/articles/70fd47d9a229d5</id>
        <link href="https://zenn.dev/minedia/articles/70fd47d9a229d5"/>
        <updated>2024-02-28T11:00:01.000Z</updated>
        <summary type="html"><![CDATA[はじめに
mojoについては過去の記事でご紹介しました
https://zenn.dev/shintaroamaike/articles/afcbc867db495e
今回の記事ではMojoはPython 3.10.9の68000倍早いと公式のブログで紹介されていますが、
内容を確認します。

 3行まとめ
・AIに特化した言語mojoに触れてみる
・Macbook proでマンデルブロ集合の処理時間を見てみる
・mojoでのpandasのloop処理がどれくらい早くなるのか見てみる

 概要
https://www.modular.com/blog/mojo-a-journey-t...]]></summary>
        <author>
            <name>ShintaroAmaike</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Modular MojoがPythonより68000倍早いのは本当なのか]]></title>
        <id>https://zenn.dev/shintaroamaike/articles/70fd47d9a229d5</id>
        <link href="https://zenn.dev/shintaroamaike/articles/70fd47d9a229d5"/>
        <updated>2024-02-28T11:00:01.000Z</updated>
        <summary type="html"><![CDATA[はじめに
mojoについては過去の記事でご紹介しました
https://zenn.dev/shintaroamaike/articles/afcbc867db495e
今回の記事ではMojoはPython 3.10.9の68000倍早いと公式のブログで紹介されていますが、
本当にその速度が出るのか確認します

 3行まとめ
・AIに特化した言語mojoに触れてみる
・Macbook proでマンデルブロ集合の処理時間を見てみる
・mojoでのpandasのloop処理がどれくらい早くなるのか見てみる

 概要
https://www.modular.com/blog/mojo-a-j...]]></summary>
        <author>
            <name>ShintaroAmaike</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【2024年2月】エンジニアなら読むべき技術書TOP5]]></title>
        <id>https://zenn.dev/yottabyte/articles/5ca10229d7e0d5</id>
        <link href="https://zenn.dev/yottabyte/articles/5ca10229d7e0d5"/>
        <updated>2024-02-28T10:50:00.000Z</updated>
        <summary type="html"><![CDATA[情報セキュリティの敗北史


相次ぐ個人情報の大規模漏洩、米・中・露による国家主導のハッキング、企業・病院を標的にして猛威を振るうランサムウェア…
IT社会が急速な発展を続ける一方で、私たちの「情報」を取り巻く状況は日に日に悪化している。
数々のセキュリティ対策が打ち出されているにもかかわらず、サイバー攻撃による被害は増え続けている。
今日の情報セキュリティが抱える致命的な〈脆弱性〉は、どこから来たのか?
コンピュータの誕生前夜から現代のハッキング戦争まで、半世紀以上にわたるサイバー空間の攻防を描いた、情報セキュリティ史の決定版。
【Cybersecurity Canon Hall ...]]></summary>
        <author>
            <name>Raio｜高校生エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python Notebookを速く安全に書く]]></title>
        <id>https://zenn.dev/shundeveloper/articles/4322d4dad72b9f</id>
        <link href="https://zenn.dev/shundeveloper/articles/4322d4dad72b9f"/>
        <updated>2024-02-27T16:55:31.000Z</updated>
        <summary type="html"><![CDATA[この記事で紹介する方法について
Pythonを以下の要件で動かしたいときに便利です.

すぐに動かさないといけない
Notebookを共有しないといけない
後で参照したい　(スパゲッティを避ける)
VMは使う時だけ動けばいい

逆に以下のようなときはやらない方がいいです

パッケージ管理を行う
長期間保守する

紹介する方法は長期間に渡って動作が保証される方法ではありません. 長期間保守するなら素直にDocker+pyenv+Poetryで構築することを推奨します.

 環境編
Google Colabを直接使います. ローカルで開発してNotebookをuploadといったことはし...]]></summary>
        <author>
            <name>shunsock</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ydata-profiling の日本語化]]></title>
        <id>https://zenn.dev/misaya/articles/e6c815da5056f5</id>
        <link href="https://zenn.dev/misaya/articles/e6c815da5056f5"/>
        <updated>2024-02-27T16:02:04.000Z</updated>
        <summary type="html"><![CDATA[困っていたこと
csv ファイルに日本語が含まれていた場合に、ydata-profiling による可視化のうち seaborn を使用して可視化している部分で、文字化け（豆腐化現象）が起こる。
import japanize_matplotlib/ を実行しても対応できなくて最初困った。
OS : Windows11
ydata-profiling のバージョン : 4.6.5

 参考
https://qiita.com/yubiquita/items/9c056e175ccb085eb137
https://qiita.com/hazigin/items/77cedbb61c7...]]></summary>
        <author>
            <name>misaya</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ローカルLLMの応答文を好みの出力に整えるDPOの学習]]></title>
        <id>https://zenn.dev/kaeru39/articles/f7231eb68649d6</id>
        <link href="https://zenn.dev/kaeru39/articles/f7231eb68649d6"/>
        <updated>2024-02-27T15:00:20.000Z</updated>
        <summary type="html"><![CDATA[背景と目的

LLMの応答文をユーザーの嗜好に沿った応答に整える手法が提案されています。

https://arxiv.org/abs/2305.18290

LLMは従来ユーザーの入力に沿った応答を返すように微調整(SFT,Supervised Fine Tuning)されていますが、しばしば応答が淡白であったり、品質の低い応答を返すなど、ユーザーの嗜好に沿わない応答文を生成することがあります。
この問題に対して、従来はOpenAIが報告したRLHFのように報酬モデルを学習し、好みを実数で表現する関数を獲得した後、この好みを最大化するような応答が得られるように強化学習することが必要...]]></summary>
        <author>
            <name>kaeru39</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Raspberry Pi5のVS CodeでPython開発環境を整える]]></title>
        <id>https://zenn.dev/tanny/articles/8dd312c880e325</id>
        <link href="https://zenn.dev/tanny/articles/8dd312c880e325"/>
        <updated>2024-02-27T14:12:59.000Z</updated>
        <summary type="html"><![CDATA[はじめに
2024年2月に日本でも販売が開始されたRaspberry Pi5を購入し、久しぶりに電子工作をやりはじめてみました。ソースコードはPythonで書いています。

ラズパイで7Seg LEDをチカチカ
Raspberry Pi OSにはPython用IDEのThonnyが搭載されていますが、普段から使い慣れているVS Codeで書く方が何かと便利です。
メインPCのVS Codeの設定をそのまま反映しても良いですが、最近ではRuffなどの新しいツールも登場しているため、この機会に拡張機能や設定を見直すことにしました。
この記事では、Raspberry Pi OS上で電子工作...]]></summary>
        <author>
            <name>Tanny</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[今更ながらDataScienceライクな研究の環境構築をいちからつくっていくぅ]]></title>
        <id>https://zenn.dev/killy/articles/d6b8b9943a3b8b</id>
        <link href="https://zenn.dev/killy/articles/d6b8b9943a3b8b"/>
        <updated>2024-02-27T12:10:40.000Z</updated>
        <summary type="html"><![CDATA[研究でPythonを使って久しい, 特に個々数年はニューラルネットワークの研究をしている
今までは自分ひとりで完結していたが, これからは複数人での作業が増えることもあり, 環境構築をきちんとしようと思い立った
少し調べるといろいろと最近は便利なものも増えてきていて, 自分への備忘録も兼ねてイチからやっていく
この記事シリーズでは

仮想環境周り
レポジトリー周り
ニューラルネットワークの学習周り
などなどをつらつらと書いていきたい

まずは, 仮想環境まわり

 pipx
https://pipx.pypa.io/stable/
pipと似ていますが, pythonで走るアプリケーショ...]]></summary>
        <author>
            <name>代理構成体</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WebVM： Tailscale経由のフルネットワーキングによるWebAssemblyでのLinux仮想化]]></title>
        <id>https://zenn.dev/leaning_tech_jp/articles/469247a54cb0a7</id>
        <link href="https://zenn.dev/leaning_tech_jp/articles/469247a54cb0a7"/>
        <updated>2024-02-27T05:27:44.000Z</updated>
        <summary type="html"><![CDATA[WebVMは、ブラウザ上で完全にクライアントサイドで動作する仮想Linux環境です。
CheerpX（WebAssemblyによるx86仮想化技術）をベースにしています。強力なJITリコンパイルエンジンとext2ブロックベースのファイルシステムにより、大規模なユースケースの実行が可能です： GCC / Clang / Python / Node.js / Rubyやその他多くのものがすぐにサポートされます。
しかし、重要なことが欠けていました。
ネットワーキングはWebVMで最も要望の多かった機能で、それには理由があった。ネットワーキングがないと、ターミナル経由でしかデータを入出力でき...]]></summary>
        <author>
            <name>Leaning Technologies Japan (リーニングテクノロジー)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[S3のadd_event_notificationのハマりポイント]]></title>
        <id>https://zenn.dev/inunekousapon/articles/9a8e4fee1286dc</id>
        <link href="https://zenn.dev/inunekousapon/articles/9a8e4fee1286dc"/>
        <updated>2024-02-26T22:02:50.000Z</updated>
        <summary type="html"><![CDATA[CDKでS3のPubObjectイベントをLambdaで受け取ろうとCDKを書いた時にいくつかハマりポイントがありました。ハマりポイントの紹介とその対応方法を残しておきます。

 環境
確認したバージョンは下記です。

Python3.9以上
aws-cdk-lib=2.128.0


 1. サンプルコードに書かれている通りに書いても動かない
まずは書いてみます。ちなみにこのコードは正しくないです。
import aws_cdk as cdk
from aws_cdk import aws_lambda
from aws_cdk import aws_s3_notifications
...]]></summary>
        <author>
            <name>inunekousapion</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】Langchainを簡単に試してみた]]></title>
        <id>https://zenn.dev/nari007/articles/900290ed31c7be</id>
        <link href="https://zenn.dev/nari007/articles/900290ed31c7be"/>
        <updated>2024-02-26T18:47:48.000Z</updated>
        <summary type="html"><![CDATA[はじめに
gpt-3.5-turboを使ってLangchainを試してみました。
はじめてのLangchainという感じで、推奨されているLCELを使った基本的な内容となります。

 参考ドキュメント
公式ドキュメント
https://python.langchain.com/docs/get_started/quickstart
LCEL
https://python.langchain.com/docs/expression_language/

 試してみる
必要なものをインストール
python -V
Python 3.9.18

pip install langchain
...]]></summary>
        <author>
            <name>Nari</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[とりまやってみるAHC 〜Algo灰色による初AHC参加記〜（AHC030）]]></title>
        <id>https://zenn.dev/tabetai/articles/2fa0a862ec6881</id>
        <link href="https://zenn.dev/tabetai/articles/2fa0a862ec6881"/>
        <updated>2024-02-26T18:27:50.000Z</updated>
        <summary type="html"><![CDATA[はじめに
はじめましてtabetaiです。大学院（M1）で機械学習の研究をしています。

タイトルの通り、数理最適化や競プロはからっきしなのですが、今回AHC030で初めてAHCに参加してみたのでつらつらと参加記を書いてみます。なお、解法についての説明はあまりに貧弱で冗長ですが、そこが主眼ではないということで見逃してください。以降精進します。

 記事の目的
この記事を読んでくれた方が、初AHC参加ハードルを下げるきっかけになればなと思っています。
「典型手法とか知らなくても、気楽にAHC始められる＆そこそこ楽しめるんだ！」と思っていただけたら何よりです。
（競プロ始めたての自分が布...]]></summary>
        <author>
            <name>tabetai</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonとTensorFlowでAIを学ぶ]]></title>
        <id>https://zenn.dev/keison8864/articles/0e9cac8eefdf0b</id>
        <link href="https://zenn.dev/keison8864/articles/0e9cac8eefdf0b"/>
        <updated>2024-02-26T14:25:36.000Z</updated>
        <summary type="html"><![CDATA[はじめに
PythonとTensorflowを使ってAIを学びます。この記事では、ニューラルネットワークの基本的な概念を理解し、実装できることを目指します。Pythonは、その読みやすい構文と豊富なライブラリで、AIの分野で人気があります。TensorFlowはオープンソースの深層学習ライブラリで、機械学習モデルの開発とトレーニングに広く用いられています。サンプルコードはこちらにありますので、理論と照らし合わせながらご活用ください。この記事ではコードには触れません。

 用語整理

 AI（人工知能）
コンピューターが、人間のようになにかを考えてなにかをすることです。幅広い概念です。...]]></summary>
        <author>
            <name>keison</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Open3Dの視点のあれこれ(ViewControl編)]]></title>
        <id>https://zenn.dev/hiroysato/articles/f20a55d682f3a4</id>
        <link href="https://zenn.dev/hiroysato/articles/f20a55d682f3a4"/>
        <updated>2024-02-26T12:49:18.000Z</updated>
        <summary type="html"><![CDATA[1. はじめに
「詳解　３次元点群処理 Pythonによる基礎アルゴリズムの実装」というとても良い本があるが、この本を読む前にいくつか必要だった前提知識
Open3Dを使っている人との情報交換用で間違っていることが書いてあったら是非教えていただけると助かります。


詳解　３次元点群処理 Pythonによる基礎アルゴリズムの実装
著：金崎　朝子　著：秋月　秀一　著：千葉　直也


 2. 基礎知識

 2.1 Open3Dは右手系、左手系

Open3Dは右手系
デフォルトでは、X(赤/水平)、Y(緑/高さ)、Z(青/奥行き)となる。Zが高さになっているので注意する。


 2.2 ...]]></summary>
        <author>
            <name>Hiroyuki Sato</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Powertools for AWS (Python) を用いた S3 Trigger のカスタマイズ方法]]></title>
        <id>https://zenn.dev/todoker_blog/articles/c616fe424fb671</id>
        <link href="https://zenn.dev/todoker_blog/articles/c616fe424fb671"/>
        <updated>2024-02-26T01:54:00.000Z</updated>
        <summary type="html"><![CDATA[こんにちは。hayata-yamamoto です。
今回は、Powertools for AWS (Python) を用いて、S3 のイベントトリガーで動く Lambda 関数の提供方法を紹介します。私が思うに、Lambda と S3 はファイルアップロード時に何か処理を非同期で動かしたい時にとても便利で、多くの利用事例があるイメージです。これから、何か実装しようと思ってる方の参考になれば嬉しいです

 S3 と Lambda の統合はどのようなもの？
公式によりますと、

Amazon Simple Storage Service からのイベント通知は、Lambda を使用して処理する...]]></summary>
        <author>
            <name>山本隼汰 | Hayata Yamamoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[M3Macに開発環境を用意する - Part1]]></title>
        <id>https://zenn.dev/hir0_728/articles/eee4d51551da38</id>
        <link href="https://zenn.dev/hir0_728/articles/eee4d51551da38"/>
        <updated>2024-02-26T00:15:29.000Z</updated>
        <summary type="html"><![CDATA[はじめに
以前、MacbookPro M3Proを購入し、環境構築をした際に手順をZennのスクラップとしてまとめていたが、改めてちゃんと記事としてまとめ直すことにした。

 Homebrewのインストール
Macを使うのであればパッケージマネージャーであるHomebrewは欠かせないので、一番最初にインストールしてしまう。AppleSiliconとIntelで手順が若干異なるそうなので、注意してね。
公式サイト
# インストールコマンド
$ /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/i...]]></summary>
        <author>
            <name>HIR0</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GA4のデータを収集して、issueに貯めてみた]]></title>
        <id>https://zenn.dev/secondselection/articles/ga4_api_sample</id>
        <link href="https://zenn.dev/secondselection/articles/ga4_api_sample"/>
        <updated>2024-02-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事はGA4の集計データをGitLabのissueに貯めて（保存して）みたというやってみた記事です。
きっかけは「探索レポートで2か月前までしか参照できない」のため、どこかに貯めたいなと思ったことがきっかけです。
※ 記事を書くために調べて初めて知りました。
https://inhouse-plus.jp/marketing/data-retention
最終的に作ってみたものとしては、以下のような流れでデータを保管します。

GitLabのCIで毎日スクリプト（Python）を実行する
GA4 Data APIでデータを取得し、Issueに集計結果を保存する


 下...]]></summary>
        <author>
            <name>u_hijiri</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[マイクラ鯖の情報を取得できるwebAPIを作った]]></title>
        <id>https://zenn.dev/ziaensochan/articles/fed5fd4d1e0b0a</id>
        <link href="https://zenn.dev/ziaensochan/articles/fed5fd4d1e0b0a"/>
        <updated>2024-02-25T14:10:53.000Z</updated>
        <summary type="html"><![CDATA[開発経緯
Pythonでapiってどうやって作るんだろうってなったので試しに作ってみただけです。
阿波連さんを見てたら一瞬で開発終わった。

 作ったもの
curl https://mcapi.ziaenso.me/status?address=<サーバーアドレス>&port=<ポート>
で呼び出せます。
address=でアドレス又はIPを指定します。これは必須。
port=でポートを指定します。25565番の場合は必要ないです。
jsonで帰ってきます。
ハイピクセルでやってみるよ。あとcurlだとjsonが見にくいのでブラウザでやりました。
ht...]]></summary>
        <author>
            <name>ziaenso_</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AIPscanを試す]]></title>
        <id>https://zenn.dev/nakamura196/articles/2917442dd6b9f5</id>
        <link href="https://zenn.dev/nakamura196/articles/2917442dd6b9f5"/>
        <updated>2024-02-25T13:52:35.000Z</updated>
        <summary type="html"><![CDATA[概要
以下のツールを試します。
https://github.com/artefactual-labs/AIPscan
本ツールは以下のように説明されています。

AIPscan was developed to provide a more in-depth reporting solution for Archivematica users. It crawls METS files from AIPs in the Archivematica Storage Service to generate tabular and visual reports about reposit...]]></summary>
        <author>
            <name>nakamura196</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonでデザインパターンを学ぼう (Facade)]]></title>
        <id>https://zenn.dev/shimakaze_soft/articles/dfff44831193c8</id>
        <link href="https://zenn.dev/shimakaze_soft/articles/dfff44831193c8"/>
        <updated>2024-02-25T12:13:50.000Z</updated>
        <summary type="html"><![CDATA[Pythonを用いてのGoFの定義した23個のデザインパターンの一つであるFacadeパターンの実装方法について解説します。
Facadeパターンは、「構造に関するデザインパターン」に分類されます。
複雑なシステムに対する簡単なインターフェースを提供します。
このパターンの目的は、システムの複雑さを隠蔽し、クライアントがより簡単にシステムを利用できるようにすることです。

 Facadeパターンとは？
Facadeパターンでは、複数のサブシステムを統合して一つの統一されたインターフェースを提供するFacade(ファサード)クラスを設けます。
クライアントはこのFacadeクラスを通じて、...]]></summary>
        <author>
            <name>shimakaze_soft</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python(Flask)からSwitchBotAPIを叩いてみる]]></title>
        <id>https://zenn.dev/tamagoyaki/articles/7761183901c0eb</id>
        <link href="https://zenn.dev/tamagoyaki/articles/7761183901c0eb"/>
        <updated>2024-02-25T11:16:11.000Z</updated>
        <summary type="html"><![CDATA[1. 環境想定

macOS Sonoma 14.3.1
Python 3.12.1
pipenv version 2023.12.0
SwitchBotAPI 1.1


 2. 事前準備

 Python

下記のコマンドを実行する。

pip install --upgrade pip
pip install pipenv
pipenv install flask flask-restful requests python-dotenv

 SwitchBot

SwitchBotアプリをインストールする

iOS
Android


アプリを起動してSwitchBotアカウン...]]></summary>
        <author>
            <name>tamagoyaki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Next.js + Fastapi]Next.jsからfetchでデータをfastapiに送る方法]]></title>
        <id>https://zenn.dev/umikaze/articles/06ea1c96682ef0</id>
        <link href="https://zenn.dev/umikaze/articles/06ea1c96682ef0"/>
        <updated>2024-02-25T10:58:00.000Z</updated>
        <summary type="html"><![CDATA[このコードにたどり着くまで2日かかってしまったので…

 注意
Next.js App Routerの方を使っています。
Pages Routerではないので注意してください。

 コード例
Nextjs側

page.tsx
  async function sendMessage(formData: FormData) {
    "use server";
    const json = JSON.stringify(Object.fromEntries(formData));
    await fetch("http://127.0.0.1:8000/receive-json...]]></summary>
        <author>
            <name>うみかぜ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ツェラーの公式を使ったタイムスタンプ]]></title>
        <id>https://zenn.dev/nyasocom/articles/3cbc18ed2db288</id>
        <link href="https://zenn.dev/nyasocom/articles/3cbc18ed2db288"/>
        <updated>2024-02-25T10:22:23.000Z</updated>
        <summary type="html"><![CDATA[./go_straight/unit/timestamp.py

# ...

        if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
            if month == 2:
                calc = ((365 * year + year / 4 - year / 100 + year / 400 +
                         (306 * (month + 1)) / 10 + day) - 426) % 7
            elif mont...]]></summary>
        <author>
            <name>T.K</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python+Selenium+Edgeでブラウザ操作を自動化してみた]]></title>
        <id>https://zenn.dev/mac709/articles/848fdbf9db6919</id>
        <link href="https://zenn.dev/mac709/articles/848fdbf9db6919"/>
        <updated>2024-02-25T07:30:48.000Z</updated>
        <summary type="html"><![CDATA[はじめに
PythonでWebブラウザ操作を自動化するために、Seleniumを利用したので紹介します。

 動作環境

Python : 3.10.2
Selenium : 3.141.0


 プロジェクト構成
project
|-edgedriver
| |-msedgedriver.exe
|
|-selenium.py

 Seleniumをインストール

terminal
$ pip install selenium==3.141.0


 Edge用のドライバーをインストール
WebDriverをインストール
https://developer.microsoft.co...]]></summary>
        <author>
            <name>daichi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CGIとFastCGIでPythonフレームワーク(FastAPI, Flask)を実行する方法]]></title>
        <id>https://zenn.dev/cti1650/articles/5e6c7bd15d7fbe</id>
        <link href="https://zenn.dev/cti1650/articles/5e6c7bd15d7fbe"/>
        <updated>2024-02-25T02:58:02.000Z</updated>
        <summary type="html"><![CDATA[はじめに
本記事では、CGI（Common Gateway Interface）とFastCGI（Fast Common Gateway Interface）を使用してPythonフレームワーク（FastAPIやFlask）を実行する方法について解説します。CGIやFastCGIはWebサーバーと外部プログラムとの間で情報をやり取りするための仕組みであり、Pythonフレームワークをこれらのインターフェースを介して実行することで、Webアプリケーションを動作させることができます。

 想定読者
スケールを想定しない個人開発などの小規模な開発の簡易的なデプロイ先としてレンタルサーバー(...]]></summary>
        <author>
            <name>cti1650</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Microsoft Fabric】NotebookのData Wranglerを触ってみた]]></title>
        <id>https://zenn.dev/headwaters/articles/27f65c33cabd3c</id>
        <link href="https://zenn.dev/headwaters/articles/27f65c33cabd3c"/>
        <updated>2024-02-25T00:00:01.000Z</updated>
        <summary type="html"><![CDATA[はじめに
FabricのNotebookを触ってみました。
適当にいじって遊んでいたらData Wranglerの機能を見つけたのでご紹介します。
ちなみにWranglerとは「口論者」「数学の学位試験の一級合格者」「カウボーイ」という意味があるようです。
Data Wranglerとはデータを扱える一級者てきな意味合いなのでしょうか…

 前提
こちらの記事を参考にNotebookで適当なテストデータを作成しています。
10個前後のデータがあれば大丈夫です。
https://zenn.dev/headwaters/articles/6c08f8ba1f8e47
https://ze...]]></summary>
        <author>
            <name>t.yuto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PyInstallerでexe化するときにトロイの木馬認定されないようにする]]></title>
        <id>https://zenn.dev/ziaensochan/articles/8e59973360ab4d</id>
        <link href="https://zenn.dev/ziaensochan/articles/8e59973360ab4d"/>
        <updated>2024-02-24T22:41:55.000Z</updated>
        <summary type="html"><![CDATA[ち、違います!!
お前の作ったそのソフト、トロイの木馬だろ!!ってあらぬ疑いをかけられ秒で消される悲劇が起きたのでそれの修正です。
あと配布したときに「あそこの開発者はウイルスばら撒いてる」って言われたら嫌じゃん？

 解決策
調べたところ、bootloaderっていうのが悪さしてるらしいのでそれを自前でビルドすればいいらしい。

 ソースをクローン
git clone https://github.com/pyinstaller/pyinstaller.git

 MinGWを入れる
https://github.com/niXman/mingw-builds-binaries/r...]]></summary>
        <author>
            <name>ziaenso_</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[classmethodを使った代替コンストラクタ]]></title>
        <id>https://zenn.dev/yosemat/articles/1ba7bc3d426953</id>
        <link href="https://zenn.dev/yosemat/articles/1ba7bc3d426953"/>
        <updated>2024-02-24T18:58:13.000Z</updated>
        <summary type="html"><![CDATA[クラスメソッドを使って長すぎる__init__にお別れを告げる
こんばんはYosematです。
TypeHintとPydanticの狂信者でこれまでにもdataclassを捨ててpydanticに乗り換えるなどでTypeSafeなクラスであるdataclassやpydanticのすばらしさをご紹介しています。
今日はこれらと相性のいいクラスメソッドによる代替コンストラクタについてご説明します。

 複雑な初期化ロジックを書きたい
「dataclassやpydanticは__init__を自動で作っちゃうけど、俺はもっと複雑な初期化ロジックを使いたいんだが...」という人もいるでしょう...]]></summary>
        <author>
            <name>Yosemat</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[langchain + RAGで手元の資料（新たな情報）をllmに読み込ませる]]></title>
        <id>https://zenn.dev/yumefuku/articles/llm-langchain-rag</id>
        <link href="https://zenn.dev/yumefuku/articles/llm-langchain-rag"/>
        <updated>2024-02-24T18:49:21.000Z</updated>
        <summary type="html"><![CDATA[はじめに

 RAG（検索拡張生成）について
huggingfaceなどからllmをダウンロードしてそのままチャットに利用した際、参照する情報はそのllmの学習当時のものとなります。（当たり前ですが）学習していない会社の社内資料や個人用PCのローカルなテキストなどはllmの知識にありません。
このような存在しない情報をllmに与える（参照させる）手法がRAGです。
ファインチューニングという手法もありますが、そちらはllmに再学習を行わせる手法です。ファインチューニングでは、llm自体に学習させることで知識を追加しますが、RAGの場合は用意したデータベースから検索することで、追加の情...]]></summary>
        <author>
            <name>ゆめふく</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【実践】エンジニアの基礎教養-アルゴリズムを学べる本]]></title>
        <id>https://zenn.dev/mandenaren/books/algorithm-study</id>
        <link href="https://zenn.dev/mandenaren/books/algorithm-study"/>
        <updated>2024-02-24T15:07:07.000Z</updated>
        <summary type="html"><![CDATA[筆者は新卒エンジニア時代に社内でアルゴリズム勉強会を主催していました。
 その内容を本形式に書き起こしたものになります。

【この本の特徴】
 📗問題演習形式でアルゴリズムの基礎が身に付く構成となっています。
 📗分かりにくい概念は丁寧に図解で解説しています。
 📗基礎的なアルゴリズムがどのように世の中に役立っているのかを言及しています。

アルゴリズムに関して、皆さんの理解を深めるお手伝いができれば幸いです。]]></summary>
        <author>
            <name>なりん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonでマルチスレッド処理]]></title>
        <id>https://zenn.dev/unico417/articles/py_threadpoolexecutor_introduction</id>
        <link href="https://zenn.dev/unico417/articles/py_threadpoolexecutor_introduction"/>
        <updated>2024-02-24T13:42:59.000Z</updated>
        <summary type="html"><![CDATA[Pythonでマルチスレッド処理をするには、ThreadPoolExecutorというクラスを使います。
このライブラリは、Python3.2以降でビルトインで使えます。
from concurrent.futures import ThreadPoolExecutor
ThreadPoolExecutorはスレッドプールというだけあって、処理を溜めこむプールを持っているイメージです。
そのプールにある処理を順番に行っていきます。

 最小構成のプログラム
簡単に、ただ処理をするならこれだけです。
from concurrent.futures import ThreadPoolExec...]]></summary>
        <author>
            <name>Unico417</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Amazon Connectで着信した電話番号をGoogle Maps APIで場所特定する]]></title>
        <id>https://zenn.dev/nyancat/articles/20240224-amazon-connect-google-places-api</id>
        <link href="https://zenn.dev/nyancat/articles/20240224-amazon-connect-google-places-api"/>
        <updated>2024-02-24T11:05:40.000Z</updated>
        <summary type="html"><![CDATA[はじめに: Google Maps PlatformのPlaces API
電話番号をGoogle検索すると、その電話番号に当てはまるGoogle Mapの施設や場所が表示されることがありますよね。それと同じことをAPIでできないか？と調べたら、Google Maps PlatformのPlaces APIの Text Search で実現できると分かったので使ってみました。
https://developers.google.com/maps/documentation/places/web-service/text-search?hl=ja

「+1 + 514-670-8700...]]></summary>
        <author>
            <name>nyancat</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【LangChain】ParentDocumentRetrieverのデータを永続化する方法]]></title>
        <id>https://zenn.dev/koujimachi2023/articles/7a113a32473166</id>
        <link href="https://zenn.dev/koujimachi2023/articles/7a113a32473166"/>
        <updated>2024-02-24T07:34:19.000Z</updated>
        <summary type="html"><![CDATA[概要
ParentDocumentRetrieverのデータを永続化するのにハマったので、備忘録として残します。
結論から言うと、こちら のページの内容を以下のように書き換えれば行けそうです

retriver構築時

InMemoryByteStoreをLocalFileStore + create_kv_docstoreに置き換える。
vectorstoreもsave_loacalでローカルに保存する。


retriver使用時

ローカルに保存したstoreとvectorstoreを使用してParentDocumentRetrieverを再構築する。




 Retriev...]]></summary>
        <author>
            <name>おいしい</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Micorsoftのguidanceをgpt-3.5-turboで試してみた]]></title>
        <id>https://zenn.dev/nari007/articles/f298f28ff239be</id>
        <link href="https://zenn.dev/nari007/articles/f298f28ff239be"/>
        <updated>2024-02-23T16:32:12.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Micorsoftが公開しているguidanceをgpt-3.5-turboなどで簡単に試してみました。
guidanceとは ※翻訳文
ガイダンスは、従来のプロンプトやチェイニングに比べて優れた制御と効率を提供するプログラミングパラダイムである。これにより、ユーザーは（正規表現やCFGなどで）生成を制約したり、制御（条件分岐やループ）と生成をシームレスにインターリーブしたりすることができる。
とのことです。
詳細は下記ページをチェックしてみてください。
https://github.com/guidance-ai/guidance

 使ってみる
guidanceのver...]]></summary>
        <author>
            <name>Nari</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Kaggle】実践！Titanicコンペティション]]></title>
        <id>https://zenn.dev/team_delta/articles/kaggle_article_2</id>
        <link href="https://zenn.dev/team_delta/articles/kaggle_article_2"/>
        <updated>2024-02-23T16:01:22.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Kaggleのアカウントを発行して間もないですが、早速Kaggleでモデルを構築したい気持ちが抑えきれないので、Competitionにチャレンジしてみました。
とは言っても、モデルを構築するにはどうすればいいのっていう話です。
実はKaggleには、このようにレベルに応じたチュートリアルのCompetitionが用意されています！

最初はBeginnerとして選択すると、３つのCompetitionが表示されました。

その中でも一番左端にある、参加Team数が一番多いTitanicを選んでやっていこうと思います。

 Titanicコンペティションについて
そもそもこ...]]></summary>
        <author>
            <name>reochiyo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python 日本の祝日と土曜日・日曜日の日付一覧を取得する]]></title>
        <id>https://zenn.dev/mkymdk/articles/053083e53c8caa</id>
        <link href="https://zenn.dev/mkymdk/articles/053083e53c8caa"/>
        <updated>2024-02-23T10:40:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Pythonで日本の祝日と土曜日・日曜日の日付一覧を取得するコードを書いてみました。
注意：祝日の日付はholidaysというライブラリを使用して取得しているため、その結果は正確ではない可能性があります。

 環境
・Google Colaboratory

 コード
# 作成したい年度を入力してください。
year = 2024
import pandas as pd
import numpy as np
import datetime
import holidays
今回の要となるのが、holidaysという祝日を取得するライブラリです。
# year年の日本の祝日を取...]]></summary>
        <author>
            <name>Mukaiyama</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonでHAproxyのログを抽出する方法]]></title>
        <id>https://zenn.dev/yslius/articles/d237ff1aaddcab</id>
        <link href="https://zenn.dev/yslius/articles/d237ff1aaddcab"/>
        <updated>2024-02-23T08:08:48.000Z</updated>
        <summary type="html"><![CDATA[やりたいこと
Pythonを使ってアクセスログの分析をしたく、サーバーからHAproxyのログをPythonで取得できないかと思って作ってみたらできたので残しておく。

 前提条件

ログを取得したいサーバーへSSHコマンドでアクセスできるようにしておく

鍵の設定などを済ませておく




 説明

HAproxyのログは/var/log/に作られる
ログのファイル名は以下のようになっている（おそらくデフォルト）
haproxy.log　　←リアルタイムのログ
aproxy.log.1　←リアルタイムのバックアップログ
haproxy.log.2.gz　←１つ前のバックアップログ（...]]></summary>
        <author>
            <name>yslius</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[diffusers で Attention の処理をカスタマイズする方法 | AttnProcessor]]></title>
        <id>https://zenn.dev/prgckwb/articles/4510b3a06b8163</id>
        <link href="https://zenn.dev/prgckwb/articles/4510b3a06b8163"/>
        <updated>2024-02-23T07:11:14.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Stable Diffusion に用いられている U-Net では、内部に複数の Attention モジュールが含まれており、画像生成時に Attention の処理を操作することで生成画像のピクセルの情報を確認したり、生成画像の領域とプロンプトとの対応関係を明示的にコントロールすることが出来るようになりますが、その forward 処理は高度にラップされていることが多く、コードの深掘りが必要なことがよくあります。
そこで、本記事では Huggingface の diffusers ライブラリにおいて、Attention Processor という仕組みを利用することで...]]></summary>
        <author>
            <name>ちくわぶ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pipenv-pipesでPipenvが作成した仮想環境の一覧を取得する]]></title>
        <id>https://zenn.dev/shotaro_tsuji/articles/bb9c288362d067</id>
        <link href="https://zenn.dev/shotaro_tsuji/articles/bb9c288362d067"/>
        <updated>2024-02-23T04:43:43.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Pipenvで管理されたPythonのプロジェクトを作成してからプロジェクトディレクトリだけを消してしまったり、たくさんのプロジェクトをホームディレクトリ以下のあちこちで作成していたりしていると、Pipenvが作成した仮想環境が残っているのか気になったり、どのディレクトリにプロジェクトがあるのかわからなくなってしまうことがあります。そんなときにはpipenv-pipesを使うことで、Pipenvが作成した仮想環境を一覧することができます。
https://pipenv-pipes.readthedocs.io/en/latest/readme.html

 インストール
公...]]></summary>
        <author>
            <name>Shotaro Tsuji</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ヒストグラム内の最大長方形を求めるアルゴリズム]]></title>
        <id>https://zenn.dev/k41531/articles/22df24117c1a15</id>
        <link href="https://zenn.dev/k41531/articles/22df24117c1a15"/>
        <updated>2024-02-23T01:13:54.000Z</updated>
        <summary type="html"><![CDATA[ヒストグラム内の最大長方形を求めるアルゴリズム
プログラム内では、ヒストグラムを整数のリストで表します。
[8, 10, 4, 6, 8, 6, 2, 2]


 素直な求め方
それぞれのビンにおいて、そのビン高さを基準に左右に高さを調べていきます。
基準以上の高さを持つビンが左右に何個あるかで横幅を導き、面積を求めます。

def largestRectangleArea(hist):
    max_area = 0
    for index, height in enumerate(hist):
        left, right = index, index
       ...]]></summary>
        <author>
            <name>kaisei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[エンジニアリング・マネージャーの仕事を経験してモノの見え方が変わった話]]></title>
        <id>https://zenn.dev/spiralai/articles/0bcf12d88b4ec1</id>
        <link href="https://zenn.dev/spiralai/articles/0bcf12d88b4ec1"/>
        <updated>2024-02-22T09:06:45.000Z</updated>
        <summary type="html"><![CDATA[こんにちは。わいけいです。
最近エンジニアとしてマネージング寄りの業務をすることが増えてきました。
今回の記事では、その中で自分の考え方がどう変わってきたかをメモしておきます。
私の場合は、まずフリーランスエンジニアとしてこの業界に入ってきました。
それもあって、今までは基本的にあくまで「良いコードを書く」ことが仕事であり目標でした。
以前からいわゆる上流工程にも全く興味関心がなかった訳ではありません。
しかし、これまで私が経験したのは

システムの要件定義（ビジネス的な視点も含む）は社員が行う
フリーランスは（やったとしても）技術的な設計のみ担当する

という切り分けの現場が多かったん...]]></summary>
        <author>
            <name>わいけい</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[競技プログラム用のローカル実行環境を作ってみた]]></title>
        <id>https://zenn.dev/gotoooo/articles/77eb7d96a512e5</id>
        <link href="https://zenn.dev/gotoooo/articles/77eb7d96a512e5"/>
        <updated>2024-02-21T23:49:43.000Z</updated>
        <summary type="html"><![CDATA[はじめに
もともと筆者はプログラミング初心者でしたがpaizaで数年の時間をかけてスキルチェックを進める中で段々とランクの高い問題に正答できるようになりました。目下のところAランク、Sランクを安定して正答できるようになるところが目標です。
paizaのWebサイト上でのコーディングだと部分的なデバッグがやりずらいなど諸々コーディング効率が下がるのを感じたため、使い慣れた環境でコーディング＆実行確認する環境を作ってみました。paizaの問題のみならずAtCoderなど「ソースコードを提出してWebサイト上で実行結果の成否を評価する」枠組みのサイトであれば汎用的に活用できると思います。
...]]></summary>
        <author>
            <name>gotoooo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Seleniumを使ったWebアプリケーションテストの自動化]]></title>
        <id>https://zenn.dev/kou_kawa/articles/28-selenium-python</id>
        <link href="https://zenn.dev/kou_kawa/articles/28-selenium-python"/>
        <updated>2024-02-21T13:43:14.000Z</updated>
        <summary type="html"><![CDATA[はじめに
WebアプリケーションテストでSeleniumを学ぶ機会がありました。
手動な画面操作を自動化し、テストの自動化へと活かせるので記録に残します。

 Seleniumとは
Seleniumは、Webアプリケーションのテストを自動化するためのオープンソースツールセットです。
主要なコンポーネントは以下の通りです。


Selenium WebDriver: ブラウザをプログラムから直接制御し、ウェブページ上の要素を操作します。

Selenium IDE: テストケースの記録と再生を行うブラウザ拡張機能です。

Selenium Grid: テストスクリプトを複数のブラウザや...]]></summary>
        <author>
            <name>Kou</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで財務分析3 ~ROAツリーをPlotly Dashで可視化~]]></title>
        <id>https://zenn.dev/gotoooo/articles/d8f1e26976d9ec</id>
        <link href="https://zenn.dev/gotoooo/articles/d8f1e26976d9ec"/>
        <updated>2024-02-21T13:30:28.000Z</updated>
        <summary type="html"><![CDATA[はじめに
前回はEDINET APIで取得したデータからROAツリー作成に必要なデータを抽出するところまでできました。
https://zenn.dev/gotoooo/articles/7ce9b8f7c43c5a
今回はROAツリーの可視化の部分を紹介します。

 やりたいこと
こんな感じのツリー構造のグラフを表示させたい。
ROA
|--総資産回転率
|　　|--固定資産回転率
|　　　　|--有形固定資産回転率
|　　　　|--無形固定資産回転率
|　　|--運転資金回転日数
|　　　　|--売掛債権回転日数
|　　　　|--買掛債権回転日数
|　　　　|--在庫回転日数
|...]]></summary>
        <author>
            <name>gotoooo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[一日一処: 瞬間的にJavaScriptとPythonを空目する文字列を取り扱うコード]]></title>
        <id>https://zenn.dev/jinkutoriu/articles/a6cc88b5052c01</id>
        <link href="https://zenn.dev/jinkutoriu/articles/a6cc88b5052c01"/>
        <updated>2024-02-21T13:06:23.000Z</updated>
        <summary type="html"><![CDATA[スクリプト言語
JavaScriptやPythonはいわゆるスクリプト言語と呼ばれる種類のもので、他にはRubyなども記法の雰囲気がなんとなく似ているものがある。
複数のプログラム言語を触れたことある人は、パッとあるソースコードを見たときに、ふむふむ、この言語だなと察することもできる。特にドラマやCMなどのソースコードが映るシーンで一時停止した事がある人も少なくないだろう。

 空目するコードを作る
name = 'bob'
print(f'Hello {name}')
さて、このコードをみて、一体なんの言語だと思うだろうか。瞬間的に目が行くのは、変数宣言だろう。変数宣言で、宣言子が...]]></summary>
        <author>
            <name>鳥生 甚句</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで財務分析2 ~有価証券報告書からのデータ抽出~]]></title>
        <id>https://zenn.dev/gotoooo/articles/7ce9b8f7c43c5a</id>
        <link href="https://zenn.dev/gotoooo/articles/7ce9b8f7c43c5a"/>
        <updated>2024-02-21T13:02:41.000Z</updated>
        <summary type="html"><![CDATA[はじめに
前回はEDINET APIを介して調べたい企業の10年分の有価証券報告書に基づくデータを取得するところまでできました。
https://zenn.dev/gotoooo/articles/c71169e4b16f3e
本記事では取得したデータからROAツリー作成に必要なデータを抽出する部分を紹介します。

 やりたいこと
こんな感じで財務指標をツリー構造にしてグラフ表示させたい。
ROA
|--総資産回転率
|　　|--固定資産回転率
|　　　　|--有形固定資産回転率
|　　　　|--無形固定資産回転率
|　　|--運転資金回転日数
|　　　　|--売掛債権回転日数
|　...]]></summary>
        <author>
            <name>gotoooo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【LangChain】テキストをDocumentオブジェクトに変換する]]></title>
        <id>https://zenn.dev/buenotheebiten/articles/00120430d9182c</id>
        <link href="https://zenn.dev/buenotheebiten/articles/00120430d9182c"/>
        <updated>2024-02-21T12:02:00.000Z</updated>
        <summary type="html"><![CDATA[LangChainを使っていると、Documentオブジェクトを使う場面が多くあります。
今回は、テキストをDocumentオブジェクトに変換する方法のメモです。

 テキストをDocumentオブジェクトに変換するコード
とても簡単でした。
from langchain_core.documents import Document

text = "ジェシーは赤が好きだけど黄色は好きではない"
document = Document(page_content=text)
document

# Document(page_content='ジェシーは赤が好きだけど黄色は好きではない')...]]></summary>
        <author>
            <name>えびてん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python GUIソフトのexeファイル作成]]></title>
        <id>https://zenn.dev/kitagawadisk/articles/aead46336ce3b7</id>
        <link href="https://zenn.dev/kitagawadisk/articles/aead46336ce3b7"/>
        <updated>2024-02-21T03:48:36.000Z</updated>
        <summary type="html"><![CDATA[目標
Pythonで作成したGUIソフトをexeファイルにし、配布可能なGUIソフトを作成する。

 Python環境の設定
最終的にexeファイルを作成する時、Pythonの場合は現在のPython環境にインストールしたライブラリが全てコンパイルされてしまう。その場合、作成されたソフトの動作が遅くなったり、不必要にソフトのファイル容量が重くなる。
Pythonでコンパイルを行う場合は、先に特別環境を作成することが望ましい。
pyenv, pyenv-virtualenv, venv, Anaconda, Pipenv場合によってはDockerなど選択枝はあるが、今回はPipenvを...]]></summary>
        <author>
            <name>kitagawadisk</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FastAPI CRUD操作]]></title>
        <id>https://zenn.dev/kumaaa1212/articles/ed737c388b177d</id>
        <link href="https://zenn.dev/kumaaa1212/articles/ed737c388b177d"/>
        <updated>2024-02-21T02:38:05.000Z</updated>
        <summary type="html"><![CDATA[FastAPI CRUD操作
FastAPI CRUD操作について紹介していきます。CRUD操作ができるようになればその言語に対する基礎的な操作は行えるようになります。

 CRUD操作とは



英語
意味




C
Create(作成)　post


R
Read(読む）    get


U
Update(更新)　put


D
Delete(削除)　delete



エンジニアとして必要となる基本的な操作をCRUD操作と言います。作成・読む・更新・削除の４つです。

 Create(作成)　post
from fastapi import APIRouter, Path,...]]></summary>
        <author>
            <name>kuma</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Automating GIS Processes 2023 を読む その４]]></title>
        <id>https://zenn.dev/mopinfish/articles/automating-gis-04</id>
        <link href="https://zenn.dev/mopinfish/articles/automating-gis-04"/>
        <updated>2024-02-20T23:07:04.000Z</updated>
        <summary type="html"><![CDATA[概要
ヘルシンキ大学地球科学・地理学科の GIS コースの教材であるAutomating GIS Processes 203を読んでいきます。

 Lesson4

 講義動画
https://www.youtube.com/watch?v=xpetCZXp9Y4

 Overray Analysis

オーバーレイ解析は、2 つ以上のベクトル レイヤーを組み合わせて新しいジオメトリを作成する GIS 操作です。典型的なオーバーレイ操作には、2 つのレイヤーの結合結果にちなんで名付けられた和、交、差があります。


 Aggregating data

データ集計とは、データをグルー...]]></summary>
        <author>
            <name>Otsuka Noboru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FastAPI×MongoDBを用いたAPI開発の手ほどき① 〜環境構築〜]]></title>
        <id>https://zenn.dev/ryota_tamura_jp/articles/c1e72f47e5adce</id>
        <link href="https://zenn.dev/ryota_tamura_jp/articles/c1e72f47e5adce"/>
        <updated>2024-02-20T14:14:23.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは。LIRIS株式会社で取締役兼エンジニアをしています田村です。
4年ほどFastAPIを使ったAPI開発をしています。
昔はFlaskを扱っていましたが、FastAPIは軽量でAPIドキュメントを自動生成してくれるらしいということで乗り換えました。記法もFlaskに似ているため、Flask経験者はとっつきやすいと思います。
また、DBはPostgreSQLを使っていましたが、複雑な構造のデータ処理をすることが増え、パフォーマンス重視になってきたことからNoSQLのMongoDBを使うことにしました。
FastAPI×MongoDBで開発するようになり、パフォーマン...]]></summary>
        <author>
            <name>Ryota Tamura (LIRIS Co., Ltd.)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【フルマネージドRedisクラウド】Google Memory Storeってなんだ？？]]></title>
        <id>https://zenn.dev/ryuji_cre8ive/articles/8877103f7b9409</id>
        <link href="https://zenn.dev/ryuji_cre8ive/articles/8877103f7b9409"/>
        <updated>2024-02-20T13:06:53.000Z</updated>
        <summary type="html"><![CDATA[そもそもRedisって？


無料で使えるデータベース管理システムの一つ
高速にデータを処理することができる、という特徴がある
データベースの種類としては"NO SQL"というものに分類される


一言で言うと高速にデータを処理することができるNoSQLです。
高速な理由としてはオンメモリでデータを保存している揮発性のあるメモリだからです。
詳しくは以下の参考記事を参照してみてください。

 Memory Storeを使う
MemoryStoreとはGoogleが提供するフルマネージドなRedisクラウドです。

 自分の環境

Google Cloud Run (v1)
Redis...]]></summary>
        <author>
            <name>ryuji_cre8ive</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで財務分析1 ~EDINETからのデータ取得~]]></title>
        <id>https://zenn.dev/gotoooo/articles/c71169e4b16f3e</id>
        <link href="https://zenn.dev/gotoooo/articles/c71169e4b16f3e"/>
        <updated>2024-02-20T06:29:28.000Z</updated>
        <summary type="html"><![CDATA[はじめに
昨年末から新NISAをきっかけに株式投資を始め、諸々勉強中の者です。
Udemyでこちらの講座に感化され、Pythonでデータ収集から可視化まで自動化できるのではと思い立ったのがことの発端です。
「はじめての財務分析（中級）～財務分析から戦略へ！解説3.5時間超の演習中心コース、多くの実例から自分の事業観を深めよう！」
ネットを探ると先人の方々の記事がたくさん見つかり、大いに参考にさせていただきました。

 当面の目標
調べたい企業のROAツリーを作成して表示する

 当初の目論見
大まかな流れとしては

EDINETからデータを取得する
ROAツリーの作成に必要なデータを...]]></summary>
        <author>
            <name>gotoooo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pandasのメソッド以外でグループごとのdataframe操作がしたい]]></title>
        <id>https://zenn.dev/shakesalmon/articles/87f3a6702fad62</id>
        <link href="https://zenn.dev/shakesalmon/articles/87f3a6702fad62"/>
        <updated>2024-02-20T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[初めに
pythonでテーブル構造のデータを扱う際に、pandasでグループごとに分けて操作をしたいときがあると思います。そんな時にdf.groupby()によるグループ操作を必ず行うのですが、いろんな記事を見てもgroupyした後に集計とか平均値とか取るだけの記事ばかりだったので、groupe分けしてそのあとにdataframeに対して操作したいんや～～ってなったんで、その時に使った便利なコードをまとめました。

 既存のメソッド
pandasのgroupebyオブジェクトには既に便利なメソッドが豊富にあります。
例えば、以下のようなdataframeがあるとします。



id
...]]></summary>
        <author>
            <name>shakesalmon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TiDB Cloudにローカルから接続してみる...GUIツールとPythonの2パターン]]></title>
        <id>https://zenn.dev/icck/articles/c4344f75460b53</id>
        <link href="https://zenn.dev/icck/articles/c4344f75460b53"/>
        <updated>2024-02-19T15:16:30.000Z</updated>
        <summary type="html"><![CDATA[はじめに
TiDB Cloudを動かしながら学ぶ、アカウント作成〜DB基本操作までの記事にてTiDB Cloud上でSQLを実行することができるようになりました。
今回は、「TiDB Cloud上以外では、どうやってDB接続するんだろう？」を実践していこうと思います。
言語やツール、プログラムを一度に全部試せないので対象を絞らせて頂きましたが下記条件で試します。



#
シーン
利用手段




1
開発・本番運用とリリース後考えてローカルからツールによるDB接続
DBeaver


2
AWS上で稼働を目指したローカル開発でのテスト接続
Python(SQLAlchemy）

...]]></summary>
        <author>
            <name>icck</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[llama-cpp-pythonをMacで動かしているときにやたら遅いと思ったら]]></title>
        <id>https://zenn.dev/optimisuke/articles/da30187e9895b8</id>
        <link href="https://zenn.dev/optimisuke/articles/da30187e9895b8"/>
        <updated>2024-02-19T14:07:19.000Z</updated>
        <summary type="html"><![CDATA[llama-cpp-python 使ってる？
https://github.com/abetlen/llama-cpp-python
macOS (Metal) で動く。すごい。
https://llama-cpp-python.readthedocs.io/en/latest/install/macos/
ただ、環境変えたら何故か動かなくなった。。。
調べたら、どうもバグっぽい。バージョンを低くしたら動いた。Activity Monitor 見たら 期待通り GPU も使ってくれてそう。
pip uninstall llama-cpp-python
CMAKE_ARGS="-DLLAM...]]></summary>
        <author>
            <name>Naosuke</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[設定管理ツール Hydra で内部構造ごと書き換える。]]></title>
        <id>https://zenn.dev/gesonanko/articles/417d43669cf2af</id>
        <link href="https://zenn.dev/gesonanko/articles/417d43669cf2af"/>
        <updated>2024-02-19T12:36:08.000Z</updated>
        <summary type="html"><![CDATA[はじめに
本記事は 機械学習の領域で主にハイパーパラメータの管理に用いられるツールである、Hydraについて解説する。Hydraは単にハイパーパラメータを階層的に記述できるというだけでなく、より複雑に、クラス・処理構造そのものを、ソースファイルを新たに追加することなく変更したい、という要望に応える。
本記事の対象読者はある程度Pythonやシステム設計に精通した者とする。モジュールシステム、クラス、デコレータなどの概念を理解していることが前提である。
さらに本記事は 機械学習のハイパーパラメータの管理だけでなく、システムそのものを コンフィギュレーション することに興味がある読者も対...]]></summary>
        <author>
            <name>GesonAnko</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonの非同期処理の基礎とOpenAI APIへ並列リクエストする実践例]]></title>
        <id>https://zenn.dev/commmune/articles/19296b87231ea8</id>
        <link href="https://zenn.dev/commmune/articles/19296b87231ea8"/>
        <updated>2024-02-19T09:20:05.000Z</updated>
        <summary type="html"><![CDATA[こんにちは、commmuneでデータサイエンティストをしているひぐです。
人間が苦手なマルチタスクをLLMに任せたら、効果的に処理してくれるのではないか?というモチベーションのもと、Pythonの非同期処理を使って並列かつストリーミングでChatGPTの回答を出力するアプリを作りました🤖
例えば下記は、ある課題を入力すると、深さ・広さ・構造・時間軸という異なる観点で解像度を上げてくれるアプリケーションです。

アプリに関する登壇資料↓
https://speakerdeck.com/zerebom/async-call-llm
このアプリ作成にあたってPythonの非同期処理を勉強したと...]]></summary>
        <author>
            <name>zerebom</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kotomamba: mamba-2.8B 学習知見]]></title>
        <id>https://zenn.dev/kotoba_tech/articles/f15b2495d44c4f</id>
        <link href="https://zenn.dev/kotoba_tech/articles/f15b2495d44c4f"/>
        <updated>2024-02-19T03:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Kotoba Technologiesでインターンをしている東京工業大学 B4 横田研究室の藤井(@okoge_kaz)です。
Kotoba TechnologiesはNLPと分散並列学習に関する技術を用いて、日本及び非英語圏におけるLLMやマルチモーダルモデルの実運用に向けた研究開発を行っています。
本日(2024/2/19) 2つのmambaモデルをリリースさせて頂きました。
1つは、from scratchから日本語と英語のコーパスにて学習を行ったkotomamba-2.8B-v1.0、もう１つはstate-spaces/mamba-2.8b-slimpjから日本語と...]]></summary>
        <author>
            <name>Kazuki Fujii</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Powertools for AWS (Python) を用いた DynamoDB Streams Trigger のカスタマイズ方法]]></title>
        <id>https://zenn.dev/todoker_blog/articles/217da602e2cff3</id>
        <link href="https://zenn.dev/todoker_blog/articles/217da602e2cff3"/>
        <updated>2024-02-19T02:53:00.000Z</updated>
        <summary type="html"><![CDATA[こんにちは。hayata-yamamoto です。
今回は、Powertools for AWS (Python) を用いて、DynamoDB Streams で動く Lambda 関数を実装する方法を共有します。直近、ゼロETL統合が発表されたばかりの部分ですが、自前でハンドラを書きたいケースはおそらくまだまだ多いはずです。まずは、ゼロ統合ETLでシンプルに解決できるかを考えた後に、もしそれでも実装が必要なら本記事を参考にしてみてくださいませ！
https://aws.amazon.com/jp/blogs/news/amazon-dynamodb-zero-etl-integrati...]]></summary>
        <author>
            <name>山本隼汰 | Hayata Yamamoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで高速なグラフネットワーク計算: グラフライブラリの比較実験とrustworkxの紹介]]></title>
        <id>https://zenn.dev/zenkigen_tech/articles/e1f8c90b7a7a8b</id>
        <link href="https://zenn.dev/zenkigen_tech/articles/e1f8c90b7a7a8b"/>
        <updated>2024-02-19T01:30:00.000Z</updated>
        <summary type="html"><![CDATA[TL;DR

NetworkXはよく知られたPythonのネットワーク分析ライブラリだが、遅い

実験の結果、Rustで実装されたrustworkxが速く、さらにNetworkXからの置き換えやすさの観点で優れている
NetworkXからrustworkxに置き換えたい人はここから読んでください

rustworkxの公式ドキュメントは以下です。
https://www.rustworkx.org/#

 はじめに
こんにちは。ZENKIGENデータサイエンスチーム所属の廣田です。原籍はオムロンソーシアルソリューションズ株式会社 技術創造センタですが、社外出向でZENKIGENに所属...]]></summary>
        <author>
            <name>redtea</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitLabでTODO登録を自動化してみた]]></title>
        <id>https://zenn.dev/secondselection/articles/gitlab_todos</id>
        <link href="https://zenn.dev/secondselection/articles/gitlab_todos"/>
        <updated>2024-02-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
皆さんは、TODO管理を"Google Keep"などのツールで実施されているのではないでしょうか。
また、実施すべきタスク（月次処理など）をチームメンバー全員に登録するのは大変です。
今回は普段使っているGitLabを使ったチームや部署のTODO管理を実施する方法を記事にしました。
ポイントとしては、以下の2つになります。

「定義用のIssue」を1つ立てることでメンバー全員にTODOを登録するところを自動化
毎朝、リマインダーをチャット（Google Chat）に投稿する


 下準備

 Issueのテンプレートを用意する
「タスク定義用」のissueテンプレートは...]]></summary>
        <author>
            <name>u_hijiri</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[数理最適化で看護師のシフト（勤務表）を自動生成してみた]]></title>
        <id>https://zenn.dev/gorori/articles/shift-auto-generate</id>
        <link href="https://zenn.dev/gorori/articles/shift-auto-generate"/>
        <updated>2024-02-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[最近、看護師のシフト（勤務表）の自動生成について調査したので、その内容を少しご紹介しようと思います。
Colab で実装したので、リンク貼っておきます。
https://colab.research.google.com/drive/1W04EwTSQqtMtJKlK7GTXNadsLZulwcTI?usp=sharing

 シフト作成って思っているより難しい
シフトの作成は職員のシフト希望やスキル、労務規定など考慮しないといけないことが多く、実はかなり複雑です。
看護師のシフト（勤務表）作成をピックしたナーススケジューリング問題というテーマが存在するぐらいです。
参考
https:/...]]></summary>
        <author>
            <name>Maron</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ローカルでSentencepieceを使ってトークナイザーを作成し、BERTを事前学習させ、JGLUEで性能評価するまで]]></title>
        <id>https://zenn.dev/y_u_k_i/books/6dc2cefe59ddde</id>
        <link href="https://zenn.dev/y_u_k_i/books/6dc2cefe59ddde"/>
        <updated>2024-02-18T22:13:38.000Z</updated>
        <summary type="html"><![CDATA[日本語のBERTを作ろうと思ったとき、文献が微妙に古かったり、Google Colaboratory環境上での解説だったりと、学部生やつよつよPC所持AI入門者にはやや辛い環境だと思います。そこで、4年生の1年間で得た知識を本にしました。これだけでスタートラインはだいぶ変わります。環境構築をなるべく細かく記載するので、ぜひ読んでください。]]></summary>
        <author>
            <name>ゆうき</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【FDUA】第2回 金融データ活用チャレンジ参加記（15th solution）]]></title>
        <id>https://zenn.dev/ttaichicchi/articles/54727aeb9b401b</id>
        <link href="https://zenn.dev/ttaichicchi/articles/54727aeb9b401b"/>
        <updated>2024-02-18T14:08:18.000Z</updated>
        <summary type="html"><![CDATA[はじめに
https://signate.jp/competitions/1325
開催期間：2024/1/18 18:00 ～ 2024/2/15 23:59
第2回 金融データ活用チャレンジに参加し、最終結果15位になりました。
解法とコンペ開催中の流れを振り返りながら感じたことをまとめていきます。


 15th解法
CV: 0.687
Public: 0.6889767
Private: 0.6869111

 サマリ


 1. 特徴量エンジニアリング + 線形モデル/GBDT/NN

 特徴量エンジニアリング
最終的に各モデルに入力した特徴量は以下のものです。


カテゴ...]]></summary>
        <author>
            <name>たいちっち</name>
        </author>
    </entry>
</feed>