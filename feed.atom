<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://s-i27.github.io/Rssfeed/index.html</id>
    <title>osmos::feed</title>
    <updated>2023-05-29T01:37:29.766Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="https://s-i27.github.io/Rssfeed/index.html"/>
    <link rel="self" href="https://s-i27.github.io/Rssfeed/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[現在最強のText-to-3Dモデル"ProlificDreamer"をちゃんと理解する]]></title>
        <id>https://zenn.dev/kamata1729/articles/55fda1a884bdfe</id>
        <link href="https://zenn.dev/kamata1729/articles/55fda1a884bdfe"/>
        <updated>2023-05-28T23:46:16.000Z</updated>
        <summary type="html"><![CDATA[Text-to-3Dがアツい
最近かなりText-to-3Dモデルがアツくなってきました。昨年9月末に発表されたDreamFusionから急速に発展し、11月にはMagic3DやLatent-NeRF, 12月にはSJCやDream3D, 今年に入って3月にはFantasia3DやText2Room, 今月5月にはOpenAIのShap-E, Text2NeRFが発表されるなど、ちょうど1年ほど前のText-to-Imageモデルの盛り上がり方を彷彿とさせます。
※この記事は2023/5/29に執筆したものです
その中で、5/25に発表された ProlificDreamerが強すぎる...]]></summary>
        <author>
            <name>kamata1729</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[LangChain の Vectorstore として Azure Cache for Redis を使ってベクトルの格納と検索を行う]]></title>
        <id>https://zenn.dev/microsoft/articles/6d4a04a6f45d4d</id>
        <link href="https://zenn.dev/microsoft/articles/6d4a04a6f45d4d"/>
        <updated>2023-05-28T22:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
LangChain の Vectorestore として Azure Cache for Redis を使おうとしたときに LangChain のドキュメントを読むだけでは一筋縄ではいかなかったため、一連の手順と参考情報へのリンクをまとめました。
全体として以下の絵のようなことを行います。


 方法

 1. Python
以下のパッケージを Pyhton 実行環境にインストールします。バージョンは執筆時点での最新版です。tensorflow-datasets は今回使用するサンプルデータの準備に使います。


langchain 0.0.181


openai 0.2...]]></summary>
        <author>
            <name>ryohtaka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nuke Python Script]]></title>
        <id>https://zenn.dev/omakazu/articles/1ae66c0960a2f2</id>
        <link href="https://zenn.dev/omakazu/articles/1ae66c0960a2f2"/>
        <updated>2023-05-28T16:28:18.000Z</updated>
        <summary type="html"><![CDATA[メモです。
随時更新
最終更新 : 2023/05/29

 まとめられているサイト
Welcome to NUKE Python Developer’s Guide — Nuke Python API Reference
https://learn.foundry.com/nuke/developers/latest/pythonreference/index.html
http://mukaimame.blog111.fc2.com/blog-entry-1228.html
Welcome to NUKE Python Developers Guide — NUKE Python D...]]></summary>
        <author>
            <name>omakazu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[torchのviewメモ]]></title>
        <id>https://zenn.dev/curry/articles/295138b0ff64cb</id>
        <link href="https://zenn.dev/curry/articles/295138b0ff64cb"/>
        <updated>2023-05-28T15:51:38.000Z</updated>
        <summary type="html"><![CDATA[torchのviewによる変化がしりたかったのでちょっと試してみた。
a = torch.tensor([[[0,1,2,3,4,5], 
              [6,7,8,9,10,11]],
             [[12,13,14,15,16,17], 
              [18,19,20,21,22,23]],
             ])
	    
## torch.Size([2, 2, 6])
これを 2,4,3　に変えてみる。
一番最後の軸が分割されて、dim=1に移動した。
b = a.view((2,4,3))
tensor([[[ 0,...]]></summary>
        <author>
            <name>imori no shippo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pyenvとpipenvの導入方法をまとめる(Windows版)]]></title>
        <id>https://zenn.dev/tikita/articles/f7a5bc16c36101</id>
        <link href="https://zenn.dev/tikita/articles/f7a5bc16c36101"/>
        <updated>2023-05-28T14:47:41.000Z</updated>
        <summary type="html"><![CDATA[概要

Dockerを使用しないといけないレベルではないが、Python関連の環境を管理したい、またはすぐに共有したい場合にpyenvとpipenvが便利なので導入方法をまとめる。


 前提

OS:Windows
状態:Pythonをインストール済み, cmdでpipが使用できる


 目次

pyenv, pipenvとは？
pyenv, pipenv導入方法（Windows版）
実際にpyenvとpipenvを使ってみる
pipenvの応用
pyenv,pipenvのリセット
参考文献


 1. pyenvとpipenvとは？

 pyenvとpyenv-winについて

...]]></summary>
        <author>
            <name>masa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Stable Diffusion web UIを起動する際にオプションをつけて高機能で動かす]]></title>
        <id>https://zenn.dev/ksk2/articles/7bb055597a5d38</id>
        <link href="https://zenn.dev/ksk2/articles/7bb055597a5d38"/>
        <updated>2023-05-28T09:10:13.000Z</updated>
        <summary type="html"><![CDATA[Stable Diffusion web UIには様々なオプションがあり、起動時に付与することでより便利に使うことができます。
この記事では一部のオプションの説明と、オプションをどのように付与するかについて解説します。

 よくある立ち上げ方
Google ColabやWindowsの場合、以下のようなコマンドで立ち上げることが多いと思います。
$ python launch.py --share --xformers

$ ./webui.sh
以下のオプションは解説記事などでもよく出てきますがそれぞれこのような意味があります。
--share
web UIをGradioで起動して閲覧...]]></summary>
        <author>
            <name>KS</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[5/22~5/26で技術的にやったこと]]></title>
        <id>https://zenn.dev/zi_matsu/articles/c6e81602ecaf0a</id>
        <link href="https://zenn.dev/zi_matsu/articles/c6e81602ecaf0a"/>
        <updated>2023-05-28T06:13:23.000Z</updated>
        <summary type="html"><![CDATA[悲観ロックと楽観ロックについて
参考文献

 排他制御とは？
共有資源に対して複数のアクセスが見込まれる場合に同時アクセスにより不整合が発生することを防ぐためあるトランザクションが共有資源にアクセスしているときは他トランザクションからはアクセスできないようにして直列に処理されるように制御すること

 悲観ロック（悲観的排他制御）
他者が同じデータに頻繁に変更が加えられると悲観的な排他制御。更新対象のデータ取得する際にロックをかけることで他のトランザクションから更新しないようにする方式。悲観ロックを使用する場合はトランザクション開始直後に更新対象となるレコードをロックを取得する。ロック...]]></summary>
        <author>
            <name>Matsuzaki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[バイナリーオプションRSI15分足の1時間区切りの勝率を見る]]></title>
        <id>https://zenn.dev/harukii/articles/2be226efdb76bb</id>
        <link href="https://zenn.dev/harukii/articles/2be226efdb76bb"/>
        <updated>2023-05-27T23:08:21.000Z</updated>
        <summary type="html"><![CDATA[もしかしたら間違ってるかも！

 プロンプト1
一時間区切りの勝率を出したいのです。ヒートマップで可視化して。可視化にsns使ってね。

 プロンプト2
BUYとSELLは分けてください。
あとセルが小さいので文字が重なって見えないです。
ヒートマップのサイズを大きくしてください。
このあと何回か回答がパッとせず、
元のコードを修正する方向にします。

 プロンプト3
このコードのmerged_dfにhourのカラムを追加して

 プロンプト4
ヒートマップのタイトルに英語でprint(5 * i, "分後")の部分を追加して何分後のデータなのかわかるようにしてください。
できた！
im...]]></summary>
        <author>
            <name>ホソノP</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[バイナリーオプションのRSI15分足で5分後、10分後、15分後の勝率を出すPythonコード]]></title>
        <id>https://zenn.dev/harukii/articles/34504f0d00e49b</id>
        <link href="https://zenn.dev/harukii/articles/34504f0d00e49b"/>
        <updated>2023-05-27T22:04:45.000Z</updated>
        <summary type="html"><![CDATA[Twitterで質問いただきましたので継続で検証
https://twitter.com/noway_pway/status/1662263374007390209?s=20

 5分足の5，10，15分後の勝率
import pandas as pd
import MetaTrader5 as mt5
import talib
from datetime import timedelta

# MT5への接続
mt5.initialize()

# 読み込む通貨ペアと時間枠、データの件数を指定
symbol = 'USDJPYm'
timeframe = mt5.TIMEFRAME_M...]]></summary>
        <author>
            <name>ホソノP</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[現状]]></title>
        <id>https://zenn.dev/yw_works/articles/0e9a57f45a6cc8</id>
        <link href="https://zenn.dev/yw_works/articles/0e9a57f45a6cc8"/>
        <updated>2023-05-27T18:01:23.000Z</updated>
        <summary type="html"><![CDATA[今年（2023/01）入ったくらいから業務で
VBAを積極的に使い始め、プログラミング、
開発に興味を持ちました。
Pythonを学び始めたのが3月頃で、
VSCodeでの開発環境を構築。
Excel周りの業務効率化アプリに始まり、
ようやくFlaskでサンプルレベルのWEBアプリを
作成できるようになり、AzureAppServiceで
公開することができるように。。
HTML/CSSは以前仕事で触っていたため、
まったくの0からという訳ではなかったですが、
これだけでもなかなか苦労してしまいました。
今はより仕事に結びつきそうな
Django、Docker、AWSを用いて
もっと実用...]]></summary>
        <author>
            <name>Y.Watanabe</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[邪神ちゃんドロップキック画像bot (公式) を支える技術]]></title>
        <id>https://zenn.dev/zeriyoshi/articles/36f33259f23059</id>
        <link href="https://zenn.dev/zeriyoshi/articles/36f33259f23059"/>
        <updated>2023-05-27T17:56:08.000Z</updated>
        <summary type="html"><![CDATA[背景

 邪神ちゃんドロップキック画像botとは
アニメーション作品 邪神ちゃんドロップキック のキャプチャ画像を一定時間毎に投稿する Twitter の bot でした
元々は海外のファンの方が運営していた非公式の Twitter bot で、法的にグレー (というかアウト) だったことが影響しているのか、 Twitter の運営体制が変わったからか、 API が停止され動かなくなっていました。
https://twitter.com/jashinchan_img/status/1661112279473987599
一方で、作品ファンの間では長きに渡って親しまれており、止まってし...]]></summary>
        <author>
            <name>zeriyoshi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pyenvのPythonと組み合わせるOpenCVのビルド: Ubuntu-22.04編]]></title>
        <id>https://zenn.dev/waruby/articles/a634537c3ca919</id>
        <link href="https://zenn.dev/waruby/articles/a634537c3ca919"/>
        <updated>2023-05-27T17:02:47.000Z</updated>
        <summary type="html"><![CDATA[はじめに
OpenCVのビルドは依存ライブラリの準備など色々面倒ですが、Pythonから使えるようにビルドするのはさらに大変です。また、自前でビルドしたものを使うときは、既存の環境に影響を与えないよう/usr/local/libなどの標準のインストール先でない場所に入れたいものです。そこでここでは以下の環境でOpenCVをビルドする方法を説明します。

OS: Ubuntu-22.04 (WSL2上でもよい)
OpenCV: 4.7.0 + conrtib
Python: 3.11.3 (pyenvでインストールしたもの)
インストール先: $HOME/dev-root/opencv...]]></summary>
        <author>
            <name>waruby</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonデバッガpdbを使ってみましょう]]></title>
        <id>https://zenn.dev/xurenjun/articles/53901af019c3b3</id>
        <link href="https://zenn.dev/xurenjun/articles/53901af019c3b3"/>
        <updated>2023-05-27T15:16:48.000Z</updated>
        <summary type="html"><![CDATA[Pythonは独学で学びました。キョです。
みなさんはPythonプログラムをデバッグする時、どうやっていますか？
私はprintをゴリゴリ使っていますねｗ
簡単なプログラムとか、自分で作ったプログラムの場合はいいかもしれないですが、
ちょっと複雑なプログラムになるとやはりデバッガを使いたくなりますね。
それで、Python公式のデバッガpdbをちょっと触ってみましたので、
簡単に紹介したいと思います。

 pdbとは？
pdbはPython公式のコマンドラインデバッガになります。
公式説明は以下になります。

モジュール pdb は Python プログラム用の対話型ソースコードデバッ...]]></summary>
        <author>
            <name>キョ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[論文に使えるヒートマップをPythonのSeabornで描きたい！]]></title>
        <id>https://zenn.dev/nishimoto/articles/3ea475309e0443</id>
        <link href="https://zenn.dev/nishimoto/articles/3ea475309e0443"/>
        <updated>2023-05-27T14:36:03.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんな感じのヒートマップを描きたい！ということで諸々調整してみました。目次に「やりたいこと」が書いてあるので、そこから見てってください。

https://www.nature.com/articles/s41598-018-38216-9 のFigure4より

 ソースコードについて
以下で公開しています。
https://colab.research.google.com/drive/1VPk0LH2T92-izksbC6oJm5o6lyE4s-_y#scrollTo=I_XDPYID4_A3
環境は以下の通り。
Python 3.10.11
Seaborn Vers...]]></summary>
        <author>
            <name>nishimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Snowflake Event Table と Logging と Tracing と私]]></title>
        <id>https://zenn.dev/allllllllez/articles/cfd3e43925fff0</id>
        <link href="https://zenn.dev/allllllllez/articles/cfd3e43925fff0"/>
        <updated>2023-05-27T13:04:24.000Z</updated>
        <summary type="html"><![CDATA[はじめに 

2023年5月のアップデートでパブリックプレビューになった「Logging and Tracing in Procedures and Functions」。
ストアドプロシージャおよび UDFs で、ログメッセージとトレースデータを Event Table（新しいテーブルタイプ！）に記録できます。
これまで、Snowflake のストアドプロシージャや UDFs で実行するコードを作成する際にロギングを仕込んでおいても、開発環境ではコンソール等でログ出力を確認できるものの、Snowflake 上でログ出力を確認する術はなかったのではないかと思います。[1]
というわ...]]></summary>
        <author>
            <name>あれ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[boto3,InquirerPyを使って、AWS/Lambdaで出力したログを閲覧する]]></title>
        <id>https://zenn.dev/not75743/articles/0090a986e6da52</id>
        <link href="https://zenn.dev/not75743/articles/0090a986e6da52"/>
        <updated>2023-05-27T12:41:54.000Z</updated>
        <summary type="html"><![CDATA[背景
Lambda関数を作成すると対応するcloudwatch logsグループが作成されます。
そこにLambda関数のログが格納されるのですが、利便性のためにawscliでログを見ようとすると

ロググループの一覧を出力し、そこから対象となるものを探す

$ aws logs describe-log-groups | jq -r '.logGroups[].logGroupName'

ロググループ内のログストリームを検索する

$ aws logs describe-log-streams --log-group-name '<ロググループ名>' | jq -r ...]]></summary>
        <author>
            <name>not75743</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GPT-4 と Guidance で記事の要約をしてバズるTweetを作成+投稿するbotの作成ガイド]]></title>
        <id>https://zenn.dev/ekusiadadus/articles/gpt_4_twitter_sum</id>
        <link href="https://zenn.dev/ekusiadadus/articles/gpt_4_twitter_sum"/>
        <updated>2023-05-27T09:33:18.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは、@ekusiadadusです。
今回は、GPT-4 を使って記事の要約をしてバズる Tweet を作成+投稿する bot の作り方を紹介します。
特に、GPT-4 を使用して Tweet の記事を要約する箇所に関しては、Microsoft が最近公開したGuidanceを使用しています。
一般的には、LangChain を使う人が多いと思いますが、興味で Guidance を使ってみました。
使用する主な技術は以下の通りです：

OpenAI GPT-4
ChatGPT Plugins
Python
Tweepy
Twitter API
Guidance

ht...]]></summary>
        <author>
            <name>ekusiadadus</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[久しぶりのPython環境をRyeで整える]]></title>
        <id>https://zenn.dev/watany/articles/f69db9e33d4427</id>
        <link href="https://zenn.dev/watany/articles/f69db9e33d4427"/>
        <updated>2023-05-27T08:53:37.000Z</updated>
        <summary type="html"><![CDATA[はじめに
よくAWSの仕事をするので、開発環境をAWS Cloud9(以下Cloud9)で用意することがある。
IAM Roleが使えるのでAWS内の開発は便利なのだが、そのままPythonで開発しようとすると、2023/05/27時点でこう表示されるので、ちゃんと開発環境作らなくちゃね。という気持ちになる。
python --version
Python 3.7.16
久々にLangChainやLlamaIndexやらで盛り上がってるし、Python環境でも作るか！ と思い立った筆者。じゃあ何を準備すればいいんだっけ、と軽く調べただけでもpip, venv, pyenv, pipe...]]></summary>
        <author>
            <name>watany</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【OpenCV + Python】LINE Notifyで動体検知を知らせる]]></title>
        <id>https://zenn.dev/yukitezuka/articles/d0c324141f9874</id>
        <link href="https://zenn.dev/yukitezuka/articles/d0c324141f9874"/>
        <updated>2023-05-27T08:10:29.000Z</updated>
        <summary type="html"><![CDATA[【OpenCV + Python】LINE Notify で動体検知を知らせる

 動作環境

OS: macOS Ventura Version13.3.1
Python 3.9.13
OpenCV 4.7.0

OpenCV は pip install opencv-python でインストールできます。

 ソースコード
import cv2
import time
import requests
import json

# LINE Notify token (replace with your own)
LINE_NOTIFY_TOKEN = "YOUR_LINE_NOT...]]></summary>
        <author>
            <name>手塚裕貴</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[シーン内のキーフレームを編集する]]></title>
        <id>https://zenn.dev/gacha0923/books/edit-keyframes-in-a-scene</id>
        <link href="https://zenn.dev/gacha0923/books/edit-keyframes-in-a-scene"/>
        <updated>2023-05-27T07:08:22.000Z</updated>
        <summary type="html"><![CDATA[この本は、シーン内のキーフレームを指定のフレーム数移動させるツールを作ることを目的とします。
toolを作る場合の考え方、python scriptの書き方、GUIの作り方をそれぞれチャプターに分けて解説していきます。 環境は、maya2020, python2.7になります。 python3ではありませんので、ご注意ください。]]></summary>
        <author>
            <name>gacha</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[バイナリーオプションRSIだけで勝てるのか検証する]]></title>
        <id>https://zenn.dev/harukii/articles/ecc732da544c48</id>
        <link href="https://zenn.dev/harukii/articles/ecc732da544c48"/>
        <updated>2023-05-27T00:47:18.000Z</updated>
        <summary type="html"><![CDATA[テクニカル指標。RSIでバイナリーオプションをしたらどうなる？勝てるのか検証する。

 方法
RSIを計算してPythonで勝率をだす。
始まりはいつもこのコードです。
import pandas as pd
import MetaTrader5 as mt5
from datetime import timedelta

# MT5への接続
mt5.initialize()

# 読み込む通貨ペアと時間枠、データの件数を指定
symbol = 'USDJPYm'
timeframe = mt5.TIMEFRAME_M5
count = 100000

# データの取得
rates = ...]]></summary>
        <author>
            <name>ホソノP</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[EVA3Dをgoogle colabで試してみた。]]></title>
        <id>https://zenn.dev/tatsuromurata/articles/b251faefd915d1</id>
        <link href="https://zenn.dev/tatsuromurata/articles/b251faefd915d1"/>
        <updated>2023-05-26T12:07:03.000Z</updated>
        <summary type="html"><![CDATA[EVA3Dとは
EVA3Dは高品質なHuman 3Dモデルを2D Image collectionから学習させたデータから自動生成するモデルです。Text等で指定することはできないですがかなり綺麗な3Dモデルをランダムに作成し、かつ綺麗なTextureもついてきます。
https://github.com/hongfz16/EVA3D/tree/main

 リンク
Colab
github

 準備
Google Colabを開き、メニューから「ランタイム→ランタイムのタイプを変更」でランタイムを「GPU」に変更します。

 環境構築
(1) EVA3D Install
インストー...]]></summary>
        <author>
            <name>しば🐕AI</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[データサイエンス100本ノック（構造化データ加工編）（中級）]]></title>
        <id>https://zenn.dev/joel/articles/4321b9f3a00020</id>
        <link href="https://zenn.dev/joel/articles/4321b9f3a00020"/>
        <updated>2023-05-26T11:59:19.000Z</updated>
        <summary type="html"><![CDATA[[!Important]+ Goals
一般社団法人データサイエンス協会が GitHub に公開した「データサイエンス 100 のノック（構造化データ処理編）」の問題演習を行うコースです。
このコースでは、曖昧な条件、ソート、集計、サンプリングなどについて学ぶことができます。
ビジネス現場での分析実務では、データのほとんどが構造化データです。構造化データを自由に加工・集計するスキルを磨き、データサイエンスの実践力を高めましょう。


[!abstract]+ Curriculum
1.曖昧な条件
2.ソート
3.集計
4.サブクエリ
5.サンプリング
6.減算エラー対応
7. name...]]></summary>
        <author>
            <name>Joel Lee</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Whisper API と COEIROINK でボイスチェンジャーを作ってみた]]></title>
        <id>https://zenn.dev/comachi/articles/1e5835ff797d51</id>
        <link href="https://zenn.dev/comachi/articles/1e5835ff797d51"/>
        <updated>2023-05-26T10:48:21.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事では、Whisper API と COEIROINK でボイスチェンジャーを作る方法について解説します。


 事前準備


COEIROINK のダウンロード

OpenAI API key の取得


 処理の流れ

マイクから入力された音声を SpeechRecognition で認識します。
Whisper API による音声の解析を行います。
解析した音声を基に、COEIROINK を使用して音声を合成し、再生します。


 マイクから入力された音声の認識

Python のモジュールである SpeechRecognition を使用します。

examp...]]></summary>
        <author>
            <name>comachi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-233｜A - 10yen Stamp]]></title>
        <id>https://zenn.dev/hyperdb/articles/8f10aa10e61737</id>
        <link href="https://zenn.dev/hyperdb/articles/8f10aa10e61737"/>
        <updated>2023-05-26T05:06:54.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-233 A - 10yen Stamp



 提出結果
import math


def getIntMap():
    return map(int, input().split())


def main():
    x, y = getIntMap()

    print(0 if y <= x else math.ceil((y - x) / 10))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-233｜B - A Reverse]]></title>
        <id>https://zenn.dev/hyperdb/articles/4e31352c50da20</id>
        <link href="https://zenn.dev/hyperdb/articles/4e31352c50da20"/>
        <updated>2023-05-26T05:06:53.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-233 B - A Reverse



 提出結果
def getIntMap():
    return map(int, input().split())


def getString():
    return input()


def main():
    l, r = getIntMap()
    s = getString()

    print(s[:l - 1] + "".join([x for x in reversed(s[l - 1:r])]) + s[r:])


if __name__ == "__main__":
   ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Cloud FunctionsからSlackへmatplotlibで生成したグラフを投稿する]]></title>
        <id>https://zenn.dev/spacemarket/articles/441c6d26c79778</id>
        <link href="https://zenn.dev/spacemarket/articles/441c6d26c79778"/>
        <updated>2023-05-26T04:56:04.000Z</updated>
        <summary type="html"><![CDATA[こんにちは、Miotavaです。
直近で引越しをすることとなり、どんな書斎にしようかなとイメージをStable Diffusionで生成しながら固めているところです。
今まではPinterestでインテリアの参考画像を探していたのですが、生成AI使えば割とドンピシャ（死語？）のイメージを作ってくれるので、チョベリグ（死語）です。

 本記事について
さて、以前BigQueryから抽出したデータを表形式でSlack投稿する方法をまとめてみました。
https://zenn.dev/spacemarket/articles/c6f99ca8a36b8a
本記事ではさらにリッチなデータ集計とし...]]></summary>
        <author>
            <name>miotava</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonデコレータ入門]]></title>
        <id>https://zenn.dev/pypypymi/articles/1a21f553f4842f</id>
        <link href="https://zenn.dev/pypypymi/articles/1a21f553f4842f"/>
        <updated>2023-05-26T00:39:26.000Z</updated>
        <summary type="html"><![CDATA[Python のデコレータは、関数やメソッドの振る舞いを変更するために使用される特殊な機能です。
デコレータは、関数を引数として受け取り、新しい関数を返す関数です。
デコレータは、@記号を使用して簡単に適用することができます。
デコレータの例
例えば、次のようなデコレータがあります。
def my_decorator(func):
    def wrapper():
        print("Something is happening before the function is called.")
        func()
        print("Something ...]]></summary>
        <author>
            <name>tac-tac-go@rm -rf /</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[IIIFマニフェストファイルからPDFファイルを作成する]]></title>
        <id>https://zenn.dev/nakamura196/articles/e940e062908b6b</id>
        <link href="https://zenn.dev/nakamura196/articles/e940e062908b6b"/>
        <updated>2023-05-25T20:32:44.000Z</updated>
        <summary type="html"><![CDATA[概要
IIIFマニフェストファイルからPDFファイルを作成する機会がありました。このソリューションとして、以下のリポジトリが見つかりましたが、うまく動かすことができませんでした。
https://github.com/jbaiter/pdiiif
そこで、上記リポジトリはJavaScriptを使用していますが、今回はPythonを用いた変換ツールを作成しました。

 使い方
以下のノートブックからお試しいただけます。
https://colab.research.google.com/github/nakamura196/ndl_ocr/blob/main/iiif2pdf.ipyn...]]></summary>
        <author>
            <name>nakamura196</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[QLORAをgoogle colabで試してみた。]]></title>
        <id>https://zenn.dev/tatsuromurata/articles/30e2dcd1cd5412</id>
        <link href="https://zenn.dev/tatsuromurata/articles/30e2dcd1cd5412"/>
        <updated>2023-05-25T12:18:59.000Z</updated>
        <summary type="html"><![CDATA[QLoRAとは
QLoRAとは4bitでquantizeすることにより、大幅にLLMモデルのメモリを減らして動かせるようにしたプロジェクトです。
huggingfaceで4bitが利用できるようになりました。
https://huggingface.co/blog/4bit-transformers-bitsandbytes

 リンク
Colab
github

 準備
Google Colabを開き、メニューから「ランタイム→ランタイムのタイプを変更」でランタイムを「GPU」に変更します。

 環境構築
インストール手順です。
!pip install -q -U bitsand...]]></summary>
        <author>
            <name>しば🐕AI</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[2023年5月版]Redis 再入門 その②: Redis Stackお試し]]></title>
        <id>https://zenn.dev/asopitech/articles/20230518-100535_1</id>
        <link href="https://zenn.dev/asopitech/articles/20230518-100535_1"/>
        <updated>2023-05-25T12:07:14.000Z</updated>
        <summary type="html"><![CDATA[!
個人ブログでも記事をあげています。こちらもあわせてご覧ください！


前回はRedisの基本機能と"Redis Stack"についての紹介でした。
今回は Python でのクライアント実装のサンプルを…と思いまして。クライアントのリストページを参照してみました。

https://redis.io/docs/clients/
https://redis.io/docs/stack/get-started/clients/

で、今回は Python OMに挑戦したいと思います。

 Python OM
Python OM のリポジトリは以下です。
https://github.co...]]></summary>
        <author>
            <name>あそぴテック</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ColaboratoryでBigQueryのクエリ結果をDataFrameにしてqueryメソッドを実行したときのエラー対応]]></title>
        <id>https://zenn.dev/hagino3000/articles/ffe7ab391edc12</id>
        <link href="https://zenn.dev/hagino3000/articles/ffe7ab391edc12"/>
        <updated>2023-05-25T09:53:08.000Z</updated>
        <summary type="html"><![CDATA[概要
Google Colaboratory(以下 Colab)ではBigQueryのクエリ結果を直にPandas DataFrameに変換できる。ちょっとした調査でColabを使う事が多いのだが、過去に作成した調査用Colabノートが軒並エラーが出て動かなくなったので対応内容をメモしておく。
具体的にはPandas DataFrameの query メソッドがそのままでは動作しなくなったのでdtypeを変換する処理を挟んで回避した。

 再現コード
%%bigquery df_sample --project xxx

select
  `DATE` as pub_date,
  ...]]></summary>
        <author>
            <name>Takashi Nishibayashi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FlaskアプリをさくらVPSでデプロイしてみた]]></title>
        <id>https://zenn.dev/renn/articles/ab0fefcb50491d</id>
        <link href="https://zenn.dev/renn/articles/ab0fefcb50491d"/>
        <updated>2023-05-25T08:59:13.000Z</updated>
        <summary type="html"><![CDATA[ゴール：さくらVPS上のapp.pyを起動し、It Works!と表示させる
HerokuなどのPaasサービスはいくつも記事がありましたが、VPSサーバーの記事はあまりなかったのでここに書き留めておきます。

 開発環境

M1Mac(Ventura 13.3.1)
さくらVPS
VScode
既にSSH接続できる
さくらVPS内にApacheはインストール済


 やったこと
実際にやったことを書いていきます。

 app.pyの中身
まず今回起動させるFlaskのコードはこちらです。

app.py
from flask import Flask

# おまじない
app = ...]]></summary>
        <author>
            <name>れん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonのFirebase FunctionsでRegionを指定する方法]]></title>
        <id>https://zenn.dev/singularity/articles/deploy_firebase_functions_in_different_resion</id>
        <link href="https://zenn.dev/singularity/articles/deploy_firebase_functions_in_different_resion"/>
        <updated>2023-05-25T08:46:17.000Z</updated>
        <summary type="html"><![CDATA[これは何？
PythonのFirebase Functionsはbetaということもあり、Regionを指定する方法が2023年5月25日時点では公式ドキュメントに記載されていない。Pythonのfirebase_functionsのソースコードを見て調べる必要があった。

 方法
以下のようにして指定できることが分かった。
options.set_global_options(region=options.SupportedRegion.ASIA_NORTHEAST1)
以下のようなpythonファイルを作ってデプロイすれば良い:
from firebase_admin impor...]]></summary>
        <author>
            <name>Mai Nakagawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-232｜B - Caesar Cipher]]></title>
        <id>https://zenn.dev/hyperdb/articles/45a48b94e704af</id>
        <link href="https://zenn.dev/hyperdb/articles/45a48b94e704af"/>
        <updated>2023-05-25T04:49:51.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-232 B - Caesar Cipher



 提出結果
def getString():
    return input()


def diff(x, y):
    a = ord(y) - ord(x)
    return a if a >= 0 else a + 26


def main():
    s = list(getString())
    t = list(getString())

    u = [diff(s[i], t[i]) for i in range(len(s))]

    print('Yes' if...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-232｜A - QQ solver]]></title>
        <id>https://zenn.dev/hyperdb/articles/2944556eba10c9</id>
        <link href="https://zenn.dev/hyperdb/articles/2944556eba10c9"/>
        <updated>2023-05-25T04:49:50.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-232 A - QQ solver



 提出結果
def getString():
    return input()


def main():
    s = getString()
    n = s.split('x')

    print(int(n[0]) * int(n[1]))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Whisperを使ったYouTubeの文字起こしのスクリプトを書いてみた]]></title>
        <id>https://zenn.dev/0xyusuke/articles/2be799dff07ffd</id>
        <link href="https://zenn.dev/0xyusuke/articles/2be799dff07ffd"/>
        <updated>2023-05-24T21:39:48.000Z</updated>
        <summary type="html"><![CDATA[前置き
Whisperを使ったYouTubeの文字起こしのスクリプトを書いてみました。
理由は、CrowdWorksでYouTubeの文字起こしの案件を請け負って小遣い銭稼ぎをしたくなったからです。
そこで目を付けたのが、今流行りのOpenAIのWhisperを活用して、効率化することでした。
ライブラリのインストールのコマンドと、文字起こしのコードを載せます。
言語はPython、実行環境はGoogle Colaboratoryです。

 ライブラリをインストールするコマンド
!pip install yt-dlp
!pip install openai
!pip install ...]]></summary>
        <author>
            <name>0xYusuke</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PDFを章ごとに分けてより効果的なEmbeddingを]]></title>
        <id>https://zenn.dev/ryoutaros/articles/20a8f6279171e8</id>
        <link href="https://zenn.dev/ryoutaros/articles/20a8f6279171e8"/>
        <updated>2023-05-24T12:29:10.000Z</updated>
        <summary type="html"><![CDATA[はじめに
現在、POCである商品の取り扱い説明書のPDFをEmbeddingしChatGPTのAPIを経由して、ユーザーからの質問を回答するLINE Botを作成しています。
PDFをEmbeddingする際に、Langchainのドキュメントを読むとPDFからテキストを特定の文字ごとに分割してEmbeddingを行うやり方が記載されています。
しかし、それでは章が分割され章の後半に記載されていたユーザーからの質問に正しく答えられないケースが発生していました。
# 実装は以下で記載しているのですが、一部抜粋します。
# このコードでは、1000文字ずつにPDFを分割しています。
lo...]]></summary>
        <author>
            <name>unochanel</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AirflowからDataformにdata_interval_endなどのcontext変数を渡す方法]]></title>
        <id>https://zenn.dev/jcc/articles/6fd049d98467bd</id>
        <link href="https://zenn.dev/jcc/articles/6fd049d98467bd"/>
        <updated>2023-05-24T12:02:25.000Z</updated>
        <summary type="html"><![CDATA[先日GCPのDataformがGAリリースされました。
せっかくなので、まずAirflowにある既存ワークフローの一部をDataformで書き換えようと思いました。

 AirflowからDataformをトリッガーする
ドキュメントを調べると、AirflowからDataformをトリッガーするoperatorはすでに存在しています。
https://cloud.google.com/dataform/docs/schedule-executions-composer#create_an_airflow_dag_that_schedules_workflow_invocations
簡単...]]></summary>
        <author>
            <name>jc</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenAssistant Llama 13Bをgoogle colabで試してみた。]]></title>
        <id>https://zenn.dev/tatsuromurata/articles/b090440b87812a</id>
        <link href="https://zenn.dev/tatsuromurata/articles/b090440b87812a"/>
        <updated>2023-05-24T11:55:52.000Z</updated>
        <summary type="html"><![CDATA[OpenAssistantとは
OpenAssistantは誰でも容易に大規模言語モデルにアクセスし、利用できるようにと開始されたProjectです。
OpenAssistantの目指しているVisionは誰でも容易に拡張することが可能かつPersonalにカスタマイズされたAI Assistantを構築したいというもののようです。
OpenAssistantの計画としては以下の３点があります。

高品質な指示-達成サンプルを収集するためのクラウドソーシングプロセスを設計する。
収集されたデータをランキング化して報酬モデルをトレーニングする。
トップ貢献者にSwagを贈呈し、コミュニ...]]></summary>
        <author>
            <name>しば🐕AI</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-231｜B - Election]]></title>
        <id>https://zenn.dev/hyperdb/articles/eb106af67e8b3c</id>
        <link href="https://zenn.dev/hyperdb/articles/eb106af67e8b3c"/>
        <updated>2023-05-24T08:20:48.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-231 B - Election



 提出結果
def getInt():
    return int(input())


def getStringRow(N):
    return [input() for _ in range(N)]


def main():
    n = getInt()
    s = getStringRow(n)
    t = list(set(s))

    if len(t) == 1:
        print(t[0])
    else:
        r = {}
        for p i...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-231｜A - Water Pressure]]></title>
        <id>https://zenn.dev/hyperdb/articles/7e70684d5462ea</id>
        <link href="https://zenn.dev/hyperdb/articles/7e70684d5462ea"/>
        <updated>2023-05-24T08:20:47.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-231 A - Water Pressure



 提出結果
def getInt():
    return int(input())


def main():
    x = getInt()

    m = x / 100

    print("%d" % m if m.is_integer() else m)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python Dataclass: A Paradigm Shift in Class Definitions]]></title>
        <id>https://zenn.dev/dshekhar17/articles/171fc6da3ca73d</id>
        <link href="https://zenn.dev/dshekhar17/articles/171fc6da3ca73d"/>
        <updated>2023-05-24T07:47:38.000Z</updated>
        <summary type="html"><![CDATA[Are you tired of writing endless lines of code to define classes and manage data in Python? Well, worry no more! In this blog, we’ll dive into the exciting world of Python dataclass, where we’ll explore how these nifty tools can simplify your coding life and boost your productivity. So, fasten yo...]]></summary>
        <author>
            <name>Divyanshu Shekhar</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[開発環境のセットアップ]]></title>
        <id>https://zenn.dev/akgcog/articles/082ea94fe00d99</id>
        <link href="https://zenn.dev/akgcog/articles/082ea94fe00d99"/>
        <updated>2023-05-24T07:31:08.000Z</updated>
        <summary type="html"><![CDATA[はじめに
最近PCを変えて開発環境のセットアップをしたのでその時のメモです。
本環境はWindows10ですので、MacやUbuntuの人は参考程度に。

 セットアップ一覧

Visual Studio Code(VScode)
Docker
Git


 1.Visual Studio Code(以下VScode)のセットアップ
プログラミングのエディターとして一般的に使用されてるソフトになります。
他にも使い勝手が良いエディターはあるので、自分に合ったものを見つけてみてください。
下記のリンクからダウンロード
https://azure.microsoft.com/ja-jp/...]]></summary>
        <author>
            <name>akgcog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Firebase Functionsで新たにサポートされたPythonをSetupし、更にTypeScriptと共存させる]]></title>
        <id>https://zenn.dev/singularity/articles/firebase-functions-python-functions</id>
        <link href="https://zenn.dev/singularity/articles/firebase-functions-python-functions"/>
        <updated>2023-05-24T07:15:02.000Z</updated>
        <summary type="html"><![CDATA[Google I/O 2023でFirebaseの新機能としてFunctionsのPythonのサポートが発表されました。
https://www.youtube.com/watch?v=emIxn-f9bK0
早速、試してみたいと思います。
まず、Pythonを含むFunctionsをデプロイするにはfirebase-toolsのバージョンを上げる必要があります (ChangeLogを追ったが、どのバージョンからPythonをサポートしているかは不明でした。)
npm install -g firebase-tools
で最新にupdate.
続いて、firebaseの初期をします。
...]]></summary>
        <author>
            <name>Isamu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[PyO3]Rustで自作したTOMLパーサーをPythonから呼び出す]]></title>
        <id>https://zenn.dev/skwbc/articles/pyo3_toml_parser</id>
        <link href="https://zenn.dev/skwbc/articles/pyo3_toml_parser"/>
        <updated>2023-05-24T03:08:37.000Z</updated>
        <summary type="html"><![CDATA[!
前の記事の続きになりますが、この記事だけで完結するように書いているので前の記事を読んでいる必要はありません。興味がある方は前の記事も読んでみて下さい。


 概要
最近、RustでTOMLパーサーを実装してみるという記事を書きました。
この記事では、自作したTOMLパーサーをPythonから呼び出せるようにしてみたいと思います。
(パーサーに限らず、重い処理やバグを起こしやすそうな処理をRustで実装してPythonから呼び出すというケース[1]を最近よく目にするので個人的に気になっていました。)
RustとPythonの連携にはPyO3というRustのライブラリを使います。
このラ...]]></summary>
        <author>
            <name>skwbc</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonにasyncioってあるけどよく知らなかったので調べた]]></title>
        <id>https://zenn.dev/knowhere_imai/articles/ba850780152b01</id>
        <link href="https://zenn.dev/knowhere_imai/articles/ba850780152b01"/>
        <updated>2023-05-24T02:18:11.000Z</updated>
        <summary type="html"><![CDATA[1.はじめに
Pythonのasyncioは、async・await構文を利用して並行処理を行うため公式ライブラリです。
筆者はFastAPIやuvicornのドキュメントでasync・awaitまたはasyncioなるキーワードをちらほらと目にしてはいたのですが、FastAPI製のWebアプリを公開するにあたって理解を避けて通れないと考えたため、キャッチアップしてこの記事に情報をまとめました。

まず、asyncioの基本的な使い方を改めて整理しました。
特に、並行処理のタスク遷移と例外周りについて、パッと検索した範囲ではあまり情報が見つからなかったため、深掘りしてまとめました。
...]]></summary>
        <author>
            <name>今井@Knowhere</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonの環境構築をマスターする（pyenv,venv版）（WSL2,Ubuntu利用）]]></title>
        <id>https://zenn.dev/tigrebiz/articles/2822fb4de256d8</id>
        <link href="https://zenn.dev/tigrebiz/articles/2822fb4de256d8"/>
        <updated>2023-05-24T02:13:01.000Z</updated>
        <summary type="html"><![CDATA[マスターするとは何か
完全に理解して、人に説明できることである。
とりあえずできればいい、ではなく、ちゃんと応用の効く形で理解することである。
でなければ、忘れてしまうからね。

 一次情報
一次情報が一番正確。

 Python環境構築ガイド
https://www.python.jp/install/install.html

 pyenv
https://github.com/pyenv/pyenv

 venv
https://docs.python.org/ja/3/library/venv.html
あとは構造を理解するためにChatGPTに質問攻めをする。

 Pyth...]]></summary>
        <author>
            <name>taiga</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Javascriptとpythonで共通する配列操作関数に関する実装の違い]]></title>
        <id>https://zenn.dev/pypypymi/articles/184e60126fc254</id>
        <link href="https://zenn.dev/pypypymi/articles/184e60126fc254"/>
        <updated>2023-05-23T17:45:31.000Z</updated>
        <summary type="html"><![CDATA[CodeWars などのプログラミング学習サイトで複数言語で問題を解く際に、
言語間で実装の引き出しを覚えていたら便利だと感じています。
本記事では、PythonとJavaScriptの両方で利用できるmap、filter、reduce関数
について紹介します。これらの関数は、配列やリストなどのシーケンスの要素に対して、
効率的に操作を行うことができます。
map関数
map 関数は、配列やリストの要素に対して、指定した関数を適用した新しい配列を作成します。
Python
# 1から5までの数字を2倍したリストを作成する
numbers = [1, 2, 3, 4, 5]
doubled...]]></summary>
        <author>
            <name>tac-tac-go@rm -rf /</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[music21で遊ぼう]]></title>
        <id>https://zenn.dev/kthrlab_blog/articles/1686fd19dab5b9</id>
        <link href="https://zenn.dev/kthrlab_blog/articles/1686fd19dab5b9"/>
        <updated>2023-05-23T12:25:08.000Z</updated>
        <summary type="html"><![CDATA[はじめに
本記事では、music21というライブラリを用いてPythonを使用した楽譜制作の基礎を簡単に解説していきたいと思います。
筆者は以下の環境で実行しています。

Windows10 home
Python3.9.12
vscode 1.78.2
MuseScore version (64-bit): 3.6.2.548021803

なお、この記事は大学の授業の一環で作成された簡易的な説明のため、詳細な情報は公式ドキュメントなどを参考にして頂きたいと思います。
https://web.mit.edu/music21/doc/moduleReference/index.htm...]]></summary>
        <author>
            <name>ssk</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[RedPajama-INCITEをgoogle colabで試してみた]]></title>
        <id>https://zenn.dev/tatsuromurata/articles/4308f18ef1d9de</id>
        <link href="https://zenn.dev/tatsuromurata/articles/4308f18ef1d9de"/>
        <updated>2023-05-23T10:50:36.000Z</updated>
        <summary type="html"><![CDATA[RedPajama-INCITEとは
「RedPajama」は、オープンソースモデルを作成するプロジェクトで、12兆トークン以上のLLaMAトレーニングデータセットを再現するを基点としています。
https://github.com/togethercomputer/RedPajama-Data
高品質なLLMのためのデータセットが揃っています。
今回試すものはRedPajamaがこれらのデータセットを利用してinstruction finetuning等を行い、公開しているモデルです。以下のサイトで説明されています。
https://www.together.xyz/blog/re...]]></summary>
        <author>
            <name>しば🐕AI</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Whisper】Pythonで音声を文字に書きだしてみよう！]]></title>
        <id>https://zenn.dev/jyouhou_info/articles/2bccaa11848fbf</id>
        <link href="https://zenn.dev/jyouhou_info/articles/2bccaa11848fbf"/>
        <updated>2023-05-23T10:29:06.000Z</updated>
        <summary type="html"><![CDATA[Whisper
Whisperとは、OpenAIが開発している汎用的な音声認識モデルです。
https://github.com/openai/whisper
Web上から収集した68万時間におよぶ音声データで学習され、音声翻訳や言語識別だけでなく、多言語音声認識を行うことができるマルチタスクモデルでもあるモデルになります。
Whisperを用いることで、音声からの文字起こしと音声からの翻訳処理を行えます。
日本語の単語誤り率（WER/Word Error Rate）は6.4%とグラフに記載があります。
この数値は、Whisperが対応している他の言語と比較しても、上位に位置しており...]]></summary>
        <author>
            <name>サルでもわかる大学受験の情報Ⅰ.Ⅱ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonでfloatの値をfloat32の値に変換する]]></title>
        <id>https://zenn.dev/herumi/articles/float32-in-python</id>
        <link href="https://zenn.dev/herumi/articles/float32-in-python"/>
        <updated>2023-05-23T07:28:20.000Z</updated>
        <summary type="html"><![CDATA[初めに
先日、fmathのlog(x)関数をXbyak(C++)からs_xbyak(Python)で書き直しているときに、少し不思議な現象に出会いました。s_xbyakで書き直すと演算精度が少し悪くなってしまったのです。
もちろん最初は移植ミスを疑ったのですが、調べても生成コードに問題はありません。よく調べると関数が参照するテーブルがC++とPythonとで少し異なる値になっていたためでした。
その解決方法は、途中であえて精度を落として計算するという珍しいパターンだったので紹介します。

 原因となったコード
実装したlog(x)は次のtbl1, tbl2を参照します。
#inclu...]]></summary>
        <author>
            <name>herumi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonで基礎的なプログラムを作る（会計）]]></title>
        <id>https://zenn.dev/waiwawaiwai/articles/77a02c71e4d5bd</id>
        <link href="https://zenn.dev/waiwawaiwai/articles/77a02c71e4d5bd"/>
        <updated>2023-05-23T06:44:05.000Z</updated>
        <summary type="html"><![CDATA[pythonで基礎的なプログラムを作る
こんにちは！pythonの勉強をしております、わいわわです
progateさんのカリキュラムを学習中、
課題のプログラム作りがありましたのでアウトプットとしてまとめます。

 ３種の果物のお会計を、残金と比べながら実行するプログラム
money = 1000
items = {'apple': 100, 'banana': 200, 'orange': 400}
for item_name in items:
    print('--------------------------------------------------')
    ...]]></summary>
        <author>
            <name>わいわわ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-230｜B - Triple Metre]]></title>
        <id>https://zenn.dev/hyperdb/articles/b5ca85154765ff</id>
        <link href="https://zenn.dev/hyperdb/articles/b5ca85154765ff"/>
        <updated>2023-05-23T04:59:15.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-230 B - Triple Metre



 提出結果
def getString():
    return input()


def main():
    s = getString()
    t = "oxx" * 5

    print('Yes' if s in t else 'No')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-230｜A - AtCoder Quiz 3]]></title>
        <id>https://zenn.dev/hyperdb/articles/a476675e59d17e</id>
        <link href="https://zenn.dev/hyperdb/articles/a476675e59d17e"/>
        <updated>2023-05-23T04:59:14.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-230 A - AtCoder Quiz 3



 提出結果
def getInt():
    return int(input())


def main():
    n = getInt()

    print("AGC%03d" % (n if n < 42 else n + 1))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【OpenCV + Python】LINE Notifyで動体検知を知らせる]]></title>
        <id>https://zenn.dev/yukitezuka/articles/d37cc26a3f89f6</id>
        <link href="https://zenn.dev/yukitezuka/articles/d37cc26a3f89f6"/>
        <updated>2023-05-23T00:38:09.000Z</updated>
        <summary type="html"><![CDATA[【OpenCV + Python】LINE Notifyで動体検知を知らせる

 動作環境

OS: macOS Ventura Version13.3.1
Python 3.9.13
OpenCV 4.7.0

OpenCVはpip install opencv-pythonを使ってインストールできます。

 ソースコード
import cv2
import time
import requests
import json

# LINE Notify token (replace with your own)
LINE_NOTIFY_TOKEN = "YOUR_LINE_NOTI...]]></summary>
        <author>
            <name>手塚裕貴</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Made with 120 lines of Python program MOD extensible fullscreen editor]]></title>
        <id>https://zenn.dev/kojisaito/articles/6cd03c4a086ef3</id>
        <link href="https://zenn.dev/kojisaito/articles/6cd03c4a086ef3"/>
        <updated>2023-05-22T12:46:06.000Z</updated>
        <summary type="html"><![CDATA[This is the English version of an article I wrote in Japanese. Though I wrote it while checking the output of AI translation, Please point out any strange expressions.

 Introduction
  I was thinking whether "note" (Japanese text-based SNS) or Zenn (this site) would be a good place to move from Q...]]></summary>
        <author>
            <name>Koji Saito</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで例外処理を書く]]></title>
        <id>https://zenn.dev/joo_hashi/articles/66c11b5bac41cc</id>
        <link href="https://zenn.dev/joo_hashi/articles/66c11b5bac41cc"/>
        <updated>2023-05-22T11:19:57.000Z</updated>
        <summary type="html"><![CDATA[独特の記述に悩まされた
Pythonで例外処理を書くと、他の言語と違って、try, catchと書かずに、try: exceptと書き、インデントの設定も必要なお作法があります。
今回は、リストの数が１０を超えたら例外処理が発生するプログラムを書いてビジネスロジックを作ってみました。
以下に、Python 3を使用して例外処理を行うプログラムの例を示します。指定された要件に基づいて、print文でログを出力し、try-exceptブロックとExceptionクラスを使用します。また、必要に応じてif文やforループ、メソッドを活用します。
def divide_numbers(a, ...]]></summary>
        <author>
            <name>JboyHashimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[120 行の Python プログラムで作る Mod 拡張可能なフルスクリーンエディタ]]></title>
        <id>https://zenn.dev/kojisaito/articles/fd1b828b1005f9</id>
        <link href="https://zenn.dev/kojisaito/articles/fd1b828b1005f9"/>
        <updated>2023-05-22T10:58:19.000Z</updated>
        <summary type="html"><![CDATA[はじめに
  Qiita からの引越し先として note が良いか Zenn が良いか…と考えていたら Zenn を押す声があり、練習がてら書いてみる。
  取り扱う題材はタイトルにもあるように、120 行の Python コードで記述された Mod　で拡張可能なフルスクリーンエディタである。120 行はエディタ本体部分のコードサイズであり、Mod のプログラムは含んでいない。curses ライブラリを使い、開発は MacOS で行っている（なので、動作確認は MacOS のターミナル上で行っている）。
本文書の構成は以下のとおり：

エディタ本体のソースコード
エディタ本体のプログ...]]></summary>
        <author>
            <name>Koji Saito</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Inpainting Anythingをgoogle colabで試してみた。]]></title>
        <id>https://zenn.dev/tatsuromurata/articles/05872226747f5f</id>
        <link href="https://zenn.dev/tatsuromurata/articles/05872226747f5f"/>
        <updated>2023-05-22T10:04:37.000Z</updated>
        <summary type="html"><![CDATA[Inpainting Anythingとは
Inpainting AnythingとはMetaAIから発表されたSemantic Anything ModelとStable diffusionを組み合わせて色々な物体を消去したり、入れ替えたりすることができるツールです。
https://github.com/geekyutao/Inpaint-Anything

 リンク
Colab
github

 準備
Google Colabを開き、メニューから「ランタイム→ランタイムのタイプを変更」でランタイムを「GPU」に変更します。

 環境構築
インストールの手順です。公式の通りにやる...]]></summary>
        <author>
            <name>しば🐕AI</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで辞書型を使う]]></title>
        <id>https://zenn.dev/joo_hashi/articles/9b93d1d2b08cc5</id>
        <link href="https://zenn.dev/joo_hashi/articles/9b93d1d2b08cc5"/>
        <updated>2023-05-22T09:39:47.000Z</updated>
        <summary type="html"><![CDATA[辞書型とは？
他のプログラミング言語では、配列、リストと呼ばれているものですね。
以下に、Python 3を使用して辞書型の操作を行うプログラムの例を示します。指定された要件に基づいて、print文でログを出力し、辞書を操作するメソッドの例を提供します。また、メソッドのテーブル形式での解説も行います。
# 辞書の作成
person_info = {'Alice': 25, 'Bob': 30, 'Charlie': 35}

# 辞書の要素を表示
print(f"Initial dictionary: {person_info}")  # 出力: Initial dictionary...]]></summary>
        <author>
            <name>JboyHashimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonのCondaで環境構築]]></title>
        <id>https://zenn.dev/zenzenr_2/articles/3bed1898bccc62</id>
        <link href="https://zenn.dev/zenzenr_2/articles/3bed1898bccc62"/>
        <updated>2023-05-22T09:25:32.000Z</updated>
        <summary type="html"><![CDATA[こんにちは。zenzen@R-2です。
Pythonで環境構築に手間取ったので、簡単に仮想環境を構築する方法のメモを書きました。
OS：windows11

 やりたいこと
任意のPythonバージョンで仮想環境を作りたい。

 やったことの流れ


Anaconda promptを立ち上げる。


conda createで仮想環境を作る。


#これで名前が付いた任意のpythonのバージョンができる。
conda create -n [name] python=[version]
#(例)
conda create -n test python=3.0
仮想環境の作成完了!!

仮...]]></summary>
        <author>
            <name>zenzen@R-2</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのリストについて学んでみる]]></title>
        <id>https://zenn.dev/joo_hashi/articles/1daf7b0575a022</id>
        <link href="https://zenn.dev/joo_hashi/articles/1daf7b0575a022"/>
        <updated>2023-05-22T09:20:39.000Z</updated>
        <summary type="html"><![CDATA[公式のだとちょっと分かりずらかった
PyCharmやVisual Studio Codeで、Runしてすぐに、ログを見れるコードに書き換えてみた。自分の学習用のメモです。公式ドキュメントだとターミナルでやるのが前提なので、IDEやPlaygrandを使用して、学習できるコードにしました。
以下に、Python 3を使用してリストの操作を行うプログラムの例を示します。指定された要件に基づいて、print文でログを出力し、コメントを追加し、各メソッドの解説を提供しています。
fruits = ['orange', 'apple', 'pear', 'banana', 'kiwi', 'a...]]></summary>
        <author>
            <name>JboyHashimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのクラスについて学んでみる]]></title>
        <id>https://zenn.dev/joo_hashi/articles/a17382daefe9d2</id>
        <link href="https://zenn.dev/joo_hashi/articles/a17382daefe9d2"/>
        <updated>2023-05-22T09:05:35.000Z</updated>
        <summary type="html"><![CDATA[独特な記号と文法を理解したい
以下に、Python 3を使用してクラス構文の学習を行うプログラムの例を示します。それぞれ、クラスの継承、コンストラクターとデストラクター、変数とメソッドの使用の例を含んでいます。
クラスの継承の例:
class Animal:
    def __init__(self, name):
        self.name = name

    def speak(self):
        raise NotImplementedError("Subclass must implement the 'speak' method.")


class...]]></summary>
        <author>
            <name>JboyHashimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Serverless Framework(Python)でLambda Layerを使う]]></title>
        <id>https://zenn.dev/cbcloud_blog/articles/93dfa4c76a2475</id>
        <link href="https://zenn.dev/cbcloud_blog/articles/93dfa4c76a2475"/>
        <updated>2023-05-22T08:53:32.000Z</updated>
        <summary type="html"><![CDATA[概要

Serverless Frameworkを使ってLambda Layerを利用するLambdaを用意したかった
単純に利用するだけだったらドキュメント読んで、はい、おわり。だったんだけど、Serverless Frameworkを利用経験が浅いのと、Pluginを利用したことで混乱した

利用したPlugin「Serverless Python Requirements」


その時混乱したことも含め、デプロイ手順をメモする
あと、他にもいくつか試してみた


--stageオプションで環境変数とデプロイ先を変更する
Lambda関数を複数管理する




 環境
$ sw_...]]></summary>
        <author>
            <name>aipacommander</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonでメモリの消費を抑えたい]]></title>
        <id>https://zenn.dev/joo_hashi/articles/43c119012538ba</id>
        <link href="https://zenn.dev/joo_hashi/articles/43c119012538ba"/>
        <updated>2023-05-22T08:52:13.000Z</updated>
        <summary type="html"><![CDATA[どうすればいいのか？
以下にPython3を使用してメモリ消費を抑えるための2つのコード例を示します。それぞれがデバッグ情報をコンソールに出力します。
with ステートメントを使用する方法:
import sys

with open('test.txt', 'a') as f:
    f.write('test')
    print('test', file=sys.stdout)

# ファイルが自動的に閉じられることを確認するために別のコンソール出力
print('File closed:', f.closed)
実行結果
/usr/local/bin/python3.1...]]></summary>
        <author>
            <name>JboyHashimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【新人】macOSにインストールしているアプリ]]></title>
        <id>https://zenn.dev/mshrynzw/articles/91ea213b43bf22</id>
        <link href="https://zenn.dev/mshrynzw/articles/91ea213b43bf22"/>
        <updated>2023-05-22T08:42:15.000Z</updated>
        <summary type="html"><![CDATA[概要
一例としての参考。

 一覧

 基本

 Clipy
クリップボードのコピー履歴
https://clipy-app.com/

 BetterSnapTool
ウィンドウの整列
https://apps.apple.com/jp/app/bettersnaptool/id417375580?mt=12

 Docker Desktop
よく利用する環境構築
https://www.docker.com/products/docker-desktop/

 Visual Studio Code
よく利用するエディター
https://azure.microsoft.com/j...]]></summary>
        <author>
            <name>mshrynzw</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-229｜A - First Grid]]></title>
        <id>https://zenn.dev/hyperdb/articles/ee8dd263c6a57d</id>
        <link href="https://zenn.dev/hyperdb/articles/ee8dd263c6a57d"/>
        <updated>2023-05-22T05:25:35.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-229 A - First Grid



 提出結果
def getStringRow(N):
    return [input() for _ in range(N)]


def main():
    s = getStringRow(2)

    s.sort()

    print('No' if s[0] == '#.' and s[1] == '.#' else 'Yes')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-229｜B - Hard Calculation]]></title>
        <id>https://zenn.dev/hyperdb/articles/01396edb071637</id>
        <link href="https://zenn.dev/hyperdb/articles/01396edb071637"/>
        <updated>2023-05-22T05:25:34.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-229 B - Hard Calculation



 提出結果
def getStringMap():
    return input().split()


def main():
    a, b = getStringMap()

    l = max(len(a), len(b))
    if len(a) != len(b):
        a = a.zfill(l)
        b = b.zfill(l)

    r = 'Easy'
    for i in range(l):
        if int(a[i]) + ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dockerを使用してDjango開発環境を簡単にセットアップする方法]]></title>
        <id>https://zenn.dev/minnanowp/articles/372f2ea53d147c</id>
        <link href="https://zenn.dev/minnanowp/articles/372f2ea53d147c"/>
        <updated>2023-05-21T19:08:34.000Z</updated>
        <summary type="html"><![CDATA[Djangoで開発したくなったので、Dockerで開発環境を簡単にセットアップしました。
以下が、GitHubリポジトリです。データベースはPostgreSQLにしています。
https://github.com/pop-web/django-docker-test-env

 前提条件

Dockerがインストールされていること
Docker Composeがインストールされていること


 環境設定


このリポジトリをクローンします：
git clone git@github.com:pop-web/django-docker-test-env.git



クローンしたディレクト...]]></summary>
        <author>
            <name>POP</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AtCoder Beginner Contest 302 B問題]]></title>
        <id>https://zenn.dev/lia/articles/c5e00435659ea2</id>
        <link href="https://zenn.dev/lia/articles/c5e00435659ea2"/>
        <updated>2023-05-21T14:21:26.000Z</updated>
        <summary type="html"><![CDATA[今回はAtCoder Beginner Contest 302のB問題です．
そうです．まさかのB問題で躓きました．はぁ・・・・
言語はPython3(PyPy3)になります.
ちなみに前回はcollectionライブラリのCounterモジュールを使った問題を解説してますので，よければご覧ください．
https://zenn.dev/lia/articles/7f0a1af230bbfb
まずは問題を見てみましょう．

 問題文
縦 H マス × 横 W マスのマス目があり、各マスに 1 つずつ英小文字が書き込まれています。 上から i 行目かつ左から j 列目のマスを (i,j) で...]]></summary>
        <author>
            <name>りあ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChatGPT・GitHubCopilotを使用したAI時代のアプリケーション開発]]></title>
        <id>https://zenn.dev/raku/articles/7b647a11a7a766</id>
        <link href="https://zenn.dev/raku/articles/7b647a11a7a766"/>
        <updated>2023-05-21T14:17:07.000Z</updated>
        <summary type="html"><![CDATA[初めに
ChatGPTの登場によって、ここ数カ月、生成系AIが非常に盛り上がっていますね。
連日新しいサービスやプラグインが生まれているイメージです。
さて、エンジニア界隈では、このChatGPTにプログラムを自動生成してもらい、ノーコードツールのように使用するようなユースケースが度々見受けられます。（日本語で書いた文章から自動でアプリケーションを構築するサービスなんかも出来てましたね）
今回は、そんなChatGPTとGitHubCopilot（以降Copilotと表記します）を使用してアプリケーション開発をしてみたので、その感想や上記ツールを使用するコツを書いていこうと思います。
...]]></summary>
        <author>
            <name>raku</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FlaskアプリケーションのHerokuデプロイ：'Procfile'名前エラーの解決]]></title>
        <id>https://zenn.dev/keisuke_05410/articles/bf589deea27876</id>
        <link href="https://zenn.dev/keisuke_05410/articles/bf589deea27876"/>
        <updated>2023-05-21T13:29:38.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは、今回はFlaskのアプリケーションをHerokuにデプロイしようとした際に遭遇した問題とその解決方法について話したいと思います。特に、'Procfile'の名前に関連する問題で、私の経験が同じ問題に直面している方々の助けになればと思います。

 エラー内容
私の目標は、作成したFlaskアプリケーションをHerokuにデプロイすることでした。しかし、デプロイプロセスを開始したところで、私はエラーに直面しました。
at=error code=H14 desc=”No web processes running” method=GET path=”/” host=x...]]></summary>
        <author>
            <name>Keisuke_Kaji</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AtCoder Beginner Contest 301 C問題]]></title>
        <id>https://zenn.dev/lia/articles/7f0a1af230bbfb</id>
        <link href="https://zenn.dev/lia/articles/7f0a1af230bbfb"/>
        <updated>2023-05-21T11:51:17.000Z</updated>
        <summary type="html"><![CDATA[最近プログラミングコンテストに興味を持ちまして，まぁこれが難しい．
てことで備忘録として躓いた問題を復習したいと思います．
ちなみに言語はPython3です
今回は，AtCoder Beginner Contest 301のC問題

 問題文
AtCoder社ではカードを使った 1 人ゲームが流行っています。
ゲームで使う各カードには、英小文字 1 文字または @ の文字が書かれており、いずれのカードも十分多く存在します。
ゲームは以下の手順で行います。

カードを同じ枚数ずつ 2 列に並べる。
@ のカードを、それぞれ a, t, c, o, d, e, r のいずれかのカードと置き換...]]></summary>
        <author>
            <name>りあ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】pandas の apply系関数まとめ]]></title>
        <id>https://zenn.dev/shiro46/articles/fdd474403f6554</id>
        <link href="https://zenn.dev/shiro46/articles/fdd474403f6554"/>
        <updated>2023-05-21T09:36:47.000Z</updated>
        <summary type="html"><![CDATA[使用するライブラリ
import pandas as pd

 (備考) 列指定の方法
df['a'] と指定すれば Series になる。
df[['a']] と指定すれば DataFrame になる。

 apply系の関数の選択チートシート
新しい列を追加する処理を実装したい場面を想定。



input
output
functions
func in apply





pd.Series
pd.Series

pd.Series.map  pd.Series.apply

スカラー → スカラー


pd.Series
pd.DataFrame
pd.Series.ap...]]></summary>
        <author>
            <name>SHIRO</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】バイナリサーチの実装]]></title>
        <id>https://zenn.dev/takuh/articles/122ee1611f6a6c</id>
        <link href="https://zenn.dev/takuh/articles/122ee1611f6a6c"/>
        <updated>2023-05-21T08:14:25.000Z</updated>
        <summary type="html"><![CDATA[はじめに
与えられた数字のインデックス番号を返すアルゴリズムです（binary_search）。

 実装

binary_search.py
from typing import List, NewType

IndexNum = NewType("IndexNum", int)

def linear_search(numbers: List[int], value: int) -> IndexNum:
  for i in range(0, len(numbers)):
    if numbers[i] == value:
      return i
  return...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】カウントソートの実装]]></title>
        <id>https://zenn.dev/takuh/articles/5c0c0e56ac3541</id>
        <link href="https://zenn.dev/takuh/articles/5c0c0e56ac3541"/>
        <updated>2023-05-21T06:10:41.000Z</updated>
        <summary type="html"><![CDATA[はじめに
カウントソートの実装例です。

 実装

counting_sort.py
from typing import List

def counting_sort(numbers: List) -> List[int]:
  max_num = max(numbers)
  counts = [0] * (max_num + 1)
  result = [0] * len(numbers)
  
  for num in numbers:
    counts[num] += 1
  
  # 各数字の個数を調べる
  for i in range(1, len(cou...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ナンピンマーチンの通貨ペアはAUDCADとXAUUSDと、どちらが良いのか？]]></title>
        <id>https://zenn.dev/harukii/articles/eb07ea9a1d1c07</id>
        <link href="https://zenn.dev/harukii/articles/eb07ea9a1d1c07"/>
        <updated>2023-05-21T04:34:03.000Z</updated>
        <summary type="html"><![CDATA[ナンピンマーチンはもうすでにご存知のように一定期間は無敵の手法です。
どの通貨ペアを選択すればいいかを考えてみます。
事前にTwitterで調査したところ、

AUDCAD
XAUUSD
その他なんでもヨシ

とのことです。

 日足チャートの値動き率でボラティリティを確認する
Trading Viewの日足チャートの値動き率ご覧ください。

紫 USDJPY
水 XAUUSD
黄 AUDCAD
オレンジ AUDNZD
見えてるレンジでオレンジの線が一番値動きがおとなしいです。
では オレンジ色の通貨ペア「AUDCAD」が最良なのでしょうか？
これはどうですか？

これを見ると水色の「X...]]></summary>
        <author>
            <name>ホソノP</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】データ可視化に使えるseabornまとめ]]></title>
        <id>https://zenn.dev/shiro46/articles/5653a2905328a4</id>
        <link href="https://zenn.dev/shiro46/articles/5653a2905328a4"/>
        <updated>2023-05-21T03:37:56.000Z</updated>
        <summary type="html"><![CDATA[使用するライブラリ
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
データはすべて long-form の pd.DataFrame とする。

 (おまけ) よく使う設定
!
完全に個人の趣味です。

sns.set_style('whitegrid') # darkgrid, whitegrid, dark, white
sns.set_context('talk') # paper < notebook < talk < poster
sns.set_palet...]]></summary>
        <author>
            <name>SHIRO</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonの基礎的な問題を解く]]></title>
        <id>https://zenn.dev/waiwawaiwai/articles/96c53787491f80</id>
        <link href="https://zenn.dev/waiwawaiwai/articles/96c53787491f80"/>
        <updated>2023-05-21T03:18:30.000Z</updated>
        <summary type="html"><![CDATA[pythonでりんごの会計を出すコードを作る
こんにちは！pythonの勉強に励んでおります、わいわわです！
progateさんのカリキュラムを学習していたら
最後に問題が出てきましたのでアウトプットとしてまとめます。

 りんごの個数を入力し、合計金額が出るコード
apple_price = 200
money = 1000

input_count = input('購入するりんごの個数を入力してください：')
count = int(input_count)
total_price = apple_price * count

print('購入するりんごの個数は' + str...]]></summary>
        <author>
            <name>わいわわ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PandasとSnowpark for pythonの対応表]]></title>
        <id>https://zenn.dev/parfait/articles/2349f015addbaf</id>
        <link href="https://zenn.dev/parfait/articles/2349f015addbaf"/>
        <updated>2023-05-21T03:15:53.000Z</updated>
        <summary type="html"><![CDATA[この記事の対象ユーザー

Snowflakeユーザー
Pandasはわかるけど，Snowpark for pythonは不慣れな方
Snowpark for pythonのチートシートを探している方


 背景
「Snowpark for python，書きにくい・・・」
同じ感想を持った方は同士だ．是非，この記事を最後まで読んだうえで「私が知ってるTips」をコメントで残してほしい．
なぜ，Snowpark for python(以下，Snowpark)を書きにくいと感じるのか？理由はいくつかあるが，一番の理由は「Pandas likeなコードでsnowflakeを操作できる」と勘...]]></summary>
        <author>
            <name>parfait</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】偶数のリストを返すアルゴリズム]]></title>
        <id>https://zenn.dev/takuh/articles/c0b74d9aaec8f7</id>
        <link href="https://zenn.dev/takuh/articles/c0b74d9aaec8f7"/>
        <updated>2023-05-21T01:08:36.000Z</updated>
        <summary type="html"><![CDATA[はじめに
偶数のリストを返すアルゴリズムです。
（例）input: 20, output: [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]

 実装

even_numbers.py
from typing import List
def func(num: int) -> List[int]:
  numbers = []
  for i in range(num+1):
    if i%2 == 0:
      numbers.append(i)
    else:
      continue
  return numbers

if ...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】素数のリストを作成するアルゴリズム]]></title>
        <id>https://zenn.dev/takuh/articles/fd84d5a8047ebb</id>
        <link href="https://zenn.dev/takuh/articles/fd84d5a8047ebb"/>
        <updated>2023-05-21T00:05:55.000Z</updated>
        <summary type="html"><![CDATA[はじめに
与えた数字までに存在する素数を格納したリストを作成するアルゴリズムです。
（例）input: 20, output: [2, 3, 5, 7, 11, 13, 17, 19]

 実装

prime_numbers.py
# 関数に型明示ができるようにする
from typing import List, Generator

# 素数を抽出する関数（与えた数字までの素数を抽出する）
def generate_primes_v1(numbers: int) -> List[int]:
  # 空のリストの作成
  primes = []
  # for文を何回回したか...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで学ぶデジタル信号処理（1イントロダクション）]]></title>
        <id>https://zenn.dev/kazu22/articles/8c6dbf14185724</id>
        <link href="https://zenn.dev/kazu22/articles/8c6dbf14185724"/>
        <updated>2023-05-20T14:33:33.000Z</updated>
        <summary type="html"><![CDATA[まだPythonは出てこないです。。。

イントロダクション

デジタル信号処理の概要
応用分野と重要性




 デジタル信号処理の概要
デジタル信号処理とは、文字通りデジタル化（量子化、離散化）された信号（光、音、加速度など）を処理（フィルタ、周波数解析など）すること。

↑アナログ（青）とデジタル（赤）のイメージ。赤は飛び飛びの値しかない。（実際は細かいだけで青もデジタルなのだが、、、）

 応用分野と重要性
応用分野には以下のようなものがある

テレビ
電話
音楽再生

デジタル信号処理は情報の再現、保存、伝送を可能にする技術であり、現代の情報技術に欠かせないもの。また、医療画像...]]></summary>
        <author>
            <name>Kazu22</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonはPoetryを使用する]]></title>
        <id>https://zenn.dev/kkj/articles/d14470babe1930</id>
        <link href="https://zenn.dev/kkj/articles/d14470babe1930"/>
        <updated>2023-05-20T08:51:27.000Z</updated>
        <summary type="html"><![CDATA[Poetryは、Pythonのパッケージ管理ツールです。
今までパッケージ管理せずにコードを書いていたので、Poetryの使い方を学習します。
学習するメリット
・共同作業時に環境を合わせることができる
・個人開発でコードを公開するときも役立ちそう

Poetry は、 Python で依存関係を管理およびパッケージ化するためのツールです。これを使用すると、プロジェクトが依存するライブラリを宣言でき、ライブラリが管理 (インストール/更新) されます。Poetry は、繰り返しインストールを確実にするためのロックファイルを提供し、配布用にプロジェクトを構築できます。
https://py...]]></summary>
        <author>
            <name>kkj</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[エラーハンドリング]No module named 'corsheaders']]></title>
        <id>https://zenn.dev/misakiishihara/articles/7571fa98b8e2b0</id>
        <link href="https://zenn.dev/misakiishihara/articles/7571fa98b8e2b0"/>
        <updated>2023-05-20T03:37:00.000Z</updated>
        <summary type="html"><![CDATA[venvでmigrateしようとした際にcorsheadesにエラーがあると怒られた際の対処法です。同じ状況の方がいましたら参考にしてください。

 エラー
$ python3 manage.py makemigrations
Traceback (most recent call last):
File "C:\Users\81902\Desktop\Dev\ishiharatech\ishihara-tech-back\manage.py", line 22, in <module>
main()
File "C:\Users\81902\Desktop\Dev\ishi...]]></summary>
        <author>
            <name>石原岬</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[自社開発メガベンチャーをわずか半年で鬱退職した雑魚エンジニアの話]]></title>
        <id>https://zenn.dev/joanofarc/articles/depressied_fired_engineer_on_mega_venture</id>
        <link href="https://zenn.dev/joanofarc/articles/depressied_fired_engineer_on_mega_venture"/>
        <updated>2023-05-20T01:47:28.000Z</updated>
        <summary type="html"><![CDATA[はじめに
当記事を開いてくださりありがとうございます。私は表題の通り、私は一般にメガベンチャーと呼ばれる自社開発企業で機械学習エンジニアとして勤務しはじめてからわずか半年で、鬱を発症し退職することになったものです。この会社は待遇も良く、社風としても労働者思いのとても素晴らしい会社であったと私自身振り返って思います。
　そんな会社に運よく入社することができた私ですが、わずか半年で「鬱状態」と心療内科から診断を受け休職し、会社制度により退職することになりました。「え？そんなに素晴らしい環境なのにメンタル弱すぎでは？」と思われる方もいらっしゃることでしょう。返す言葉が全くありません。おっし...]]></summary>
        <author>
            <name>JoanOfArc</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[哲学者名言のスクレイピング]]></title>
        <id>https://zenn.dev/louloutech/articles/f161fdec424c57</id>
        <link href="https://zenn.dev/louloutech/articles/f161fdec424c57"/>
        <updated>2023-05-19T23:57:32.000Z</updated>
        <summary type="html"><![CDATA[こちらの記事（https://tomo8language.com/quotes-list-philosopher/）を用いて、スクレイピングの練習をしたので、その際の思考整理としてのメモ書きです。
【目標】
哲学者の名前とその名言を表示するコードを作成する
【コード】
まず広い範囲から、スクレイピングして、徐々に範囲を狭めていく
from time import sleep

import requests
from bs4 import BeautifulSoup
import pandas as pd

url = 'https://tomo8language.com/quotes-...]]></summary>
        <author>
            <name>louloutech</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Slackのメッセージを一括削除したい]]></title>
        <id>https://zenn.dev/takenokopjt/articles/30ca07eb59abcb</id>
        <link href="https://zenn.dev/takenokopjt/articles/30ca07eb59abcb"/>
        <updated>2023-05-19T23:02:36.000Z</updated>
        <summary type="html"><![CDATA[いきさつ
Slackを運営する中で外部の人を招くことになった。#Generalにあまり公開したくない内容があったので、新しいプライベートチャンネルに内容をコピーしたが、メッセージの一括削除機能はないらしい。調べるとSlack APIを使ってまとめて削除するしかないらしい。

 手順

Slack APIの取得
Pythonで処理を実行


 Slack設定（API_token取得）
この記事を参考にさせてもらいました。Google Apps Scriptを使う記事ですが、APIの取得のところは参考になります。実は、スクリプトはこの通りにやってもエラーが出たのであきらめた次第です。
h...]]></summary>
        <author>
            <name>珍竹林_八号</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pandas → Polars 早見表]]></title>
        <id>https://zenn.dev/bee2/articles/e8623a603752ff</id>
        <link href="https://zenn.dev/bee2/articles/e8623a603752ff"/>
        <updated>2023-05-19T13:50:44.000Z</updated>
        <summary type="html"><![CDATA[データサイエンスやデータエンジニアリングの分野において、効率的かつ柔軟なデータ処理を実現するためには、適切なツールの選択が不可欠です。最近では、高速かつ省メモリなデータ操作ライブラリであるPolarsが注目を浴びています。本記事では、この新たなライブラリと既存のデータ処理ツールであるPandasとの対応関係を簡潔にまとめます。特に、Polarsへの移行やトライアルをスムーズに進めるために、両ライブラリの使い方に焦点を当てて解説します。

 本ブログの見方
以下のフォーマットでまとめています。

 <処理概要>
< <Pandasコード>
> <P...]]></summary>
        <author>
            <name>bee2</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Elevenlabsのmultilingual TTSをgoogle colabで試してみた。]]></title>
        <id>https://zenn.dev/tatsuromurata/articles/fb6fbc23849e38</id>
        <link href="https://zenn.dev/tatsuromurata/articles/fb6fbc23849e38"/>
        <updated>2023-05-19T09:02:31.000Z</updated>
        <summary type="html"><![CDATA[Elevenlabs TTSとは
Elevenlabs TTSはElevenlabsから提供されたリアルな声を高品質に生成するためのモデルであり、複数の言語をサポートする単一のTTSモデルとなっています。
https://huggingface.co/spaces/elevenlabs/tts
clone voicesとかもありますが課金しなきゃできませんでした。

 リンク
Colab
github

 準備
Google Colabを開き、メニューから「ランタイム→ランタイムのタイプを変更」でランタイムを「GPU」に変更します。

 環境構築
インストール手順は以下の通りです。
...]]></summary>
        <author>
            <name>しば🐕AI</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-228｜B - Takahashi's Secret]]></title>
        <id>https://zenn.dev/hyperdb/articles/5727f6b3f44e82</id>
        <link href="https://zenn.dev/hyperdb/articles/5727f6b3f44e82"/>
        <updated>2023-05-19T05:05:03.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-228 B - Takahashi's Secret



 提出結果
def getIntMap():
    return map(int, input().split())


def getIntList():
    return list(map(int, input().split()))


def main():
    n, x = getIntMap()
    a = getIntList()
    f = [False for _ in range(n)]

    i = x - 1
    while f[i] == False...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-228｜A - On and Off]]></title>
        <id>https://zenn.dev/hyperdb/articles/53c761314aa95e</id>
        <link href="https://zenn.dev/hyperdb/articles/53c761314aa95e"/>
        <updated>2023-05-19T05:05:03.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-228 A - On and Off



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    s, t, x = getIntMap()

    if s < t:
        print('Yes' if s <= x < t else 'No')
    else:
        print('No' if t <= x < s else 'Yes')


if __name__ == "__main__":
  ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで学ぶデジタル信号処理（目次）]]></title>
        <id>https://zenn.dev/kazu22/articles/3bb9c8579e962f</id>
        <link href="https://zenn.dev/kazu22/articles/3bb9c8579e962f"/>
        <updated>2023-05-18T21:25:48.000Z</updated>
        <summary type="html"><![CDATA[動機
業務で加速度センサで測定したデータを振動分析していますが、デジタル信号処理について十分に学んでいないので、勉強してアウトプットすることにしました。以下はChatGPTに作成してもらったカリキュラムです。これに沿って進めていきます。文体にはあまり意識せず、書きやすいように書いたため、読みにくいかもしれません。アウトプットのハードルを下げるためですので、ご了承ください。

 カリキュラム

イントロダクション

デジタル信号処理の概要
応用分野と重要性


離散時間信号とシステム

離散時間信号の表現と性質
離散時間システムのモデリングと特性


離散時間信号の変換

離散時間フー...]]></summary>
        <author>
            <name>Kazu22</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Transformerを用いた文章のクラスタリング]]></title>
        <id>https://zenn.dev/shungo_a/articles/be767f772bc0d8</id>
        <link href="https://zenn.dev/shungo_a/articles/be767f772bc0d8"/>
        <updated>2023-05-18T11:23:15.000Z</updated>
        <summary type="html"><![CDATA[前記事のまとめ、および、本記事の目的
前記事では、ChatGPTのAPIキーを用いて、指示文を与えることでプログラムを作成可能なのかを確認しました。その結果、下記のような指示文を与えたら、以下のプログラムを作成できました。


　このようにAPIを用いることでコメント文を記載しつつ、コーディング可能であることが分かります。ChatGPTは、2023/4/6時点で1000トークンで0.002ドルとかなり安いです。しかしながら、エラーのない正しいプログラムを書くためには、慣れるまで何回もやり直す必要があり、気が付いたら支払金額が多くなるという可能性があります。
　そこで、指示文と今までで...]]></summary>
        <author>
            <name>S.A</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[__init__.py の書き方を永遠に覚えられない私へ]]></title>
        <id>https://zenn.dev/h_waka/articles/67d0dd45d8dc50</id>
        <link href="https://zenn.dev/h_waka/articles/67d0dd45d8dc50"/>
        <updated>2023-05-18T08:23:28.000Z</updated>
        <summary type="html"><![CDATA[自作スクリプトをパッケージ化するときの書き方
業務で自作のPythonスクリプトをパッケージ化する必要に迫られたのですが、意外とハマったので備忘録を残しておきます。
Pythonバージョンは3.9.xです。

 例示

 構成
+ hoge/
    +- __init__.py
    +- foo.py
$ cat hoge/__init__.py

from .foo import bar

$ cat hoge/foo.py

def bar(msg :str="Hello World!"):
    print(msg)
    return None

if __name...]]></summary>
        <author>
            <name>わかまつ＠iCARE</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-227｜A - Last Card]]></title>
        <id>https://zenn.dev/hyperdb/articles/e1dbcf0f2e8bc6</id>
        <link href="https://zenn.dev/hyperdb/articles/e1dbcf0f2e8bc6"/>
        <updated>2023-05-18T04:19:02.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-227 A - Last Card



 提出結果
def getIntMap():
    return map(int, input().split())


def num(i, n):
    return n if i % n == 0 else i % n


def main():
    n, k, a = getIntMap()

    p = [num(i, n) for i in range(a, a + k)]

    print(p[-1])


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-227｜B - KEYENCE building]]></title>
        <id>https://zenn.dev/hyperdb/articles/5ac52b584b8b51</id>
        <link href="https://zenn.dev/hyperdb/articles/5ac52b584b8b51"/>
        <updated>2023-05-18T04:19:01.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-227 B - KEYENCE building



 提出結果
def getInt():
    return int(input())


def getIntList():
    return list(map(int, input().split()))


def f(a, b):
    return 4 * a * b + 3 * a + 3 * b


def main():
    n = getInt()
    s = getIntList()

    a = []
    l = min(max(s), 1000) + 1
  ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[captchaモジュールを使った画像認証ボットを作る]]></title>
        <id>https://zenn.dev/luv/articles/cee43ccc05ae20</id>
        <link href="https://zenn.dev/luv/articles/cee43ccc05ae20"/>
        <updated>2023-05-17T12:14:45.000Z</updated>
        <summary type="html"><![CDATA[discord.pyでcaptchaモジュールを使用した画像認証ボットを作ったのでせっかくならと紹介。

 完成型
/panelというコマンドを送信すると認証パネルが送信され、チェックマークが書かれたボタンを押すとぼかしが入った認証コードが表示されるというものになっています。

「表示する」を押すとぼかしが消され、認証と書かれたボタンを押すと認証コードを入力するモーダルが出るというものになっています。



 使うモジュール

discord.py
captcha
random (標準モジュール)
string (標準モジュール)
io (標準モジュール)
pillow


 コード
!...]]></summary>
        <author>
            <name>lovespaces</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[クックパッドから複数ページをSeleniumでスクレイピング!!]]></title>
        <id>https://zenn.dev/yosuke00/articles/4484f8b5443047</id>
        <link href="https://zenn.dev/yosuke00/articles/4484f8b5443047"/>
        <updated>2023-05-17T08:42:19.000Z</updated>
        <summary type="html"><![CDATA[1.はじめに
今回は、自然言語処理の自己学習の一環としてレシピサイトの言語情報が必要でスクレイピングを行った際に個人的に詰まった点や注意点を備忘録として記事を書いていきます。
　あと、規約的におそらくスクレイピング自体はサーバーに負荷がかからないよう配慮すれば大丈夫だとは思っているのですがもしこの認識が間違っているようであればご指摘よろしくお願いします。

 2.Seleniumについて
今回用いたSeleniumとは、Webアプリケーションのテストを自動化するオープンソースのテストフレームワークで、ジェイソン・ハギンズ氏によって2004年に開発されました。
　Pythonによるスク...]]></summary>
        <author>
            <name>Yosuke00</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python: 文字列の実行でeval,execからは卒業しよう]]></title>
        <id>https://zenn.dev/sergicalsix/articles/92b9526e20c7a6</id>
        <link href="https://zenn.dev/sergicalsix/articles/92b9526e20c7a6"/>
        <updated>2023-05-17T07:38:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Pythonには、文字列の評価や動的なコード操作を行うための複数の手法が存在します。
文字列の実行では、eval()やexec()がポピュラーですが、本記事では安全で信頼性の高い方法としてast.literal_eval()、getattr()の活用方法を紹介します。

 exec,evalとそのセキュリティリスク
Pythonのexec()を使用すると、文字列をPythonのコードとして実行することができます。以下はexec()の基本的な使用例です。
agg = "sum"
l = [1, 2, 3]
exec(f'result = {agg}(l)')
print(re...]]></summary>
        <author>
            <name>sergicalsix</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[x64用主要アセンブラの構文差異クイズ]]></title>
        <id>https://zenn.dev/herumi/articles/s_xbyak-assembler-2</id>
        <link href="https://zenn.dev/herumi/articles/s_xbyak-assembler-2"/>
        <updated>2023-05-17T07:23:48.000Z</updated>
        <summary type="html"><![CDATA[初めに
これはx64用JITアセンブラXbyakや静的アセンブラs_xbyakを開発するときに、各種アセンブラの差異についてはまったり調べたりしたことをまとめるにあたり、せっかくなのでクイズ形式にしたものです。
中級以降は主にAVX-512に関するかなりマニアックで瑣末な知識です。何を聞かれてるのか分からなくても殆どの場合、何の問題もありません。

 前置き
ここで扱うアセンブラは

GAS (GNU Assembler) 2.38

Netwide Assembler (NASM) 2.16

Microsoft Macro Assembler 14.35.32217.1

です。...]]></summary>
        <author>
            <name>herumi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WSLを呼び出してシェル芸する]]></title>
        <id>https://zenn.dev/ma5me/articles/f558076fc4c77c</id>
        <link href="https://zenn.dev/ma5me/articles/f558076fc4c77c"/>
        <updated>2023-05-17T05:53:05.000Z</updated>
        <summary type="html"><![CDATA[概要
なんとなくzennを始めたので、テストを兼ねた投稿です。
WSL（Windows Subsystem for Linux）を使ってるホスト側（Windows）で、
いつも同じようなシェル芸を使ってテキスト加工するときに使えるネタです。
作業環境のホスト側にPythonいれてあって、業務で同じシェル芸を繰り返す方に役立ちます。
補足：そもそもbash等のシェルスクリプトで済むじゃんって話ではあるのですが･･･

 想定
ノートアプリで学習サイト[1]のメモを書き残すようなときに、
各タイトルが含まれるページをHTMLで保存したものから抽出するケースを想定してます。
今回は以下の二...]]></summary>
        <author>
            <name>Ma5Me</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-226｜B - Counting Arrays]]></title>
        <id>https://zenn.dev/hyperdb/articles/91eab5f42dc9c9</id>
        <link href="https://zenn.dev/hyperdb/articles/91eab5f42dc9c9"/>
        <updated>2023-05-17T04:47:27.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-226 B - Counting Arrays



 提出結果
def getInt():
    return int(input())


def getStringRow(N):
    return [input() for _ in range(N)]


def main():
    n = getInt()
    l = getStringRow(n)

    print(len(set(l)))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-226｜A - Round decimals]]></title>
        <id>https://zenn.dev/hyperdb/articles/1a8e79aa412ea0</id>
        <link href="https://zenn.dev/hyperdb/articles/1a8e79aa412ea0"/>
        <updated>2023-05-17T04:47:27.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-226 A - Round decimals



 提出結果
import math


def getFloat():
    return float(input())


def main():
    x = getFloat()

    print(math.floor(x + 0.5))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【新卒1年目】記事を自動生成するwebサイトAuticleを個人開発しました。]]></title>
        <id>https://zenn.dev/takahiro1127/articles/1ff142cc210025</id>
        <link href="https://zenn.dev/takahiro1127/articles/1ff142cc210025"/>
        <updated>2023-05-17T01:08:00.000Z</updated>
        <summary type="html"><![CDATA[ブログやメディアのライターさん向けに3000文字以上のSEO記事を自動生成するwebサイトを個人開発し、リリースしたので記事にしてみました。

 リリースしたwebサイト
Auto(自動) + Article(記事)でAuticleという名前にしました。

メインのキーワードとテールワードを入力するだけで記事を自動生成してくれるプロダクトになります。

↓自動生成された記事です。こちらはPDCAについての解説記事を作成しました。

↓無料で数記事作れますので、皆様よろしければ使ってみてください。↓
https://auticle.tech/web/

 webサイトを作成したきっかけ
ラ...]]></summary>
        <author>
            <name>Tokyo ネオニート</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ポケモンWordleの回答を補助するコードを書いた（Pythonにおけるargparse, re, csvモジュールを使った習作）]]></title>
        <id>https://zenn.dev/kumasun/articles/def24ae21f6c9d</id>
        <link href="https://zenn.dev/kumasun/articles/def24ae21f6c9d"/>
        <updated>2023-05-17T00:58:13.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Wordleというゲームをご存知だろうか。
固定長の枠に単語を当てはめると、当てはめた文字が「正解（正しい位置にあり、文字も正しい）」なのか、「惜しい（その文字が含まれるが場所が違う）」、「間違い（その文字は含まれない）」の状態で表され
それを元に正解の単語を探し当てるという言葉遊びだ。
一時期流行し、各国版が作られたり、特定ジャンルに特化したものが作られたりと派生したが、
そのうちの一つが「ポケモンWordle」だ。
https://wordle.mega-yadoran.jp/
これを解くには、かなりの数のポケモンの名前を把握している必要があり
ポケモンに全然詳しくない...]]></summary>
        <author>
            <name>Kumasun Morino</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[selenium IDEからPython実行コードをエクスポートして実行するまで]]></title>
        <id>https://zenn.dev/ikeda1151/articles/fd921d49a00ed6</id>
        <link href="https://zenn.dev/ikeda1151/articles/fd921d49a00ed6"/>
        <updated>2023-05-16T13:58:26.000Z</updated>
        <summary type="html"><![CDATA[前提
IDEを動かす環境:Windows10
seleniumを動かす環境:WSL

 
以下でseleniumIDEを取得する。 ブラウザもここに入ってるので、FirefoxやChromeにプラグインを入れる必要はない。
https://github.com/SeleniumHQ/selenium-ide/releases/tag/4.0.0-alpha.14

 環境構築
pip install selenium==4.0
vi /etc/yum.repos.d/google-chrome.repo
以下を入力
[google-chrome]
name=google-chrome...]]></summary>
        <author>
            <name>ikeda1151</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】ヴィジュネル暗号の実装]]></title>
        <id>https://zenn.dev/takuh/articles/fc87667c5f2ab3</id>
        <link href="https://zenn.dev/takuh/articles/fc87667c5f2ab3"/>
        <updated>2023-05-16T11:37:47.000Z</updated>
        <summary type="html"><![CDATA[はじめに
ヴィジュネル暗号の実装例（Python）です。

 ヴィジュネル暗号とは？
平文のアルファベットのインデックス番号と、鍵のアルファベットのインデックス番号を足し、２６で割った時の余りのインデックス番号に対応するアルファベットに変換する。

平文　（元の文字列）：ABCDXYZ
鍵（暗号化に使う文字列）：MORNING
暗号文（暗号化した文字列）：MPTQFLF

※ 参考図（wikipediaより引用）


 実装

vigenere_cipher.py
import string

# 大文字での実装
ALPHABET = string.ascii_uppercase

...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[python]poetryの導入と感想]]></title>
        <id>https://zenn.dev/masa0317/articles/49345f7ab1e434</id>
        <link href="https://zenn.dev/masa0317/articles/49345f7ab1e434"/>
        <updated>2023-05-16T11:18:09.000Z</updated>
        <summary type="html"><![CDATA[私はこれまでpythonプロジェクトのライブラリ管理には
pip-tools
https://github.com/jazzband/pip-tools
を利用していましたが、
現在のプロジェクトで
poetry
https://github.com/python-poetry/poetry
を導入しました。
その理由は

PyPIのbuildとpublish機能がある
poetry自体が枯れてきて、安定感が出てきた

となります。
web上に溢れているpoetryに関する記事の多くは
poetryに関する良い所
しか取り上がれらていませんが、
この記事では
エンジニアとして現実的な目線...]]></summary>
        <author>
            <name>masa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-225｜B - Star or Not]]></title>
        <id>https://zenn.dev/hyperdb/articles/798ea3cba60ea1</id>
        <link href="https://zenn.dev/hyperdb/articles/798ea3cba60ea1"/>
        <updated>2023-05-16T04:04:29.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-225 B - Star or Not



 提出結果
def getInt():
    return int(input())


def getIntListRow(N):
    return [list(map(int, input().split())) for _ in range(N)]


def main():
    n = getInt()
    ab = getIntListRow(n - 1)

    c = [0 for _ in range(0, n + 1)]

    for a, b in ab:
        c...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-225｜A - Distinct Strings]]></title>
        <id>https://zenn.dev/hyperdb/articles/059bac02447217</id>
        <link href="https://zenn.dev/hyperdb/articles/059bac02447217"/>
        <updated>2023-05-16T04:04:28.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-225 A - Distinct Strings



 提出結果
import itertools


def getString():
    return input()


def main():
    s = list(getString())
    t = ["".join(w) for w in itertools.permutations(s, 3)]

    print(len(set(t)))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GCPでgsutilは通るのにstorage.Client()が通らなかった話]]></title>
        <id>https://zenn.dev/shkik/articles/41d77ee0247c12</id>
        <link href="https://zenn.dev/shkik/articles/41d77ee0247c12"/>
        <updated>2023-05-15T20:26:57.000Z</updated>
        <summary type="html"><![CDATA[困ったこと
Google Cloud Storageからオブジェクトを2通りの方法で取得しようとした。実行環境はローカル。

gsutil

gsutil ls gs://bucket/[bucket]/[object]
成功。
gs://bucket/[bucket_name]/[object_path]

Python Cloud Storage Client

from google.cloud import storage

def main():
    client = storage.Client()
    bucket = client.bucket("[bucke...]]></summary>
        <author>
            <name>きくち</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[C++でアルゴ (幅優先探索 キューorデキューを使って) 迷路の最短路を解く]]></title>
        <id>https://zenn.dev/noneprogrammer/articles/f163941f4ecdd3</id>
        <link href="https://zenn.dev/noneprogrammer/articles/f163941f4ecdd3"/>
        <updated>2023-05-15T07:06:25.000Z</updated>
        <summary type="html"><![CDATA[C++でアルゴ (幅優先探索 キューorデキューを使って) 迷路の最短路を解く
(S-->Gへの最短経路を探して移動回数を返す)
#include <iostream>
#include <vector>
#include <queue>
#include <iomanip>
#include <string>

using namespace std;

void printMaze(const vector<vector<string>>& maze) {
    /*地図を表示する...]]></summary>
        <author>
            <name>none_programmer</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Xbyakライクなx64用静的ASM生成ツールs_xbyak]]></title>
        <id>https://zenn.dev/herumi/articles/s_xbyak-assembler-1</id>
        <link href="https://zenn.dev/herumi/articles/s_xbyak-assembler-1"/>
        <updated>2023-05-15T05:40:30.000Z</updated>
        <summary type="html"><![CDATA[初めに
これはx64用JITアセンブラXbyakに慣れてしまい、JITでなく静的なアセンブリ言語（以下ASM）もXbyakライクに書きたいという人（つまり私）がPython上で似た開発体験を求めて作ったツールです。
s_xbyakの"s_"は静的(static)からつけました。

 s_xbyakの特徴

Pythonで作られたASMコードジェネレータ
gas (GNU Assembler), Netwide Assembler (NASM), Microsoft Macro Assemblerに対応
Win64 ABIとAMD64 (Linux)に（一部）対応
XbyakライクなD...]]></summary>
        <author>
            <name>herumi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-224｜A - Tires]]></title>
        <id>https://zenn.dev/hyperdb/articles/e3722c9af92207</id>
        <link href="https://zenn.dev/hyperdb/articles/e3722c9af92207"/>
        <updated>2023-05-15T04:20:04.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-224 A - Tires



 提出結果
def getString():
    return input()


def main():
    s = getString()

    print('er' if s.endswith('er') else 'ist')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-224｜B - Mongeness]]></title>
        <id>https://zenn.dev/hyperdb/articles/7c8269e598d801</id>
        <link href="https://zenn.dev/hyperdb/articles/7c8269e598d801"/>
        <updated>2023-05-15T04:20:03.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-224 B - Mongeness



 提出結果
def getIntMap():
    return map(int, input().split())


def getIntListRow(N):
    return [list(map(int, input().split())) for _ in range(N)]


def main():
    h, w = getIntMap()
    a = getIntListRow(h)

    f = True
    for y in range(h - 1):
        for ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[深さ優先探索 python,go,cpp(goとcppはほぼ同じ)]]></title>
        <id>https://zenn.dev/noneprogrammer/articles/d13a8f3e4537d8</id>
        <link href="https://zenn.dev/noneprogrammer/articles/d13a8f3e4537d8"/>
        <updated>2023-05-14T13:28:10.000Z</updated>
        <summary type="html"><![CDATA[繋がっている水たまり(w)の数を数えるアルゴ(水たまりは8近傍で隣接している場合につながっているとみなします。)

 pythonで深さ優先探索の実装
def lake_counting(field):
    #debug_print(field)
    field_x_length = len(field) #10行
    field_y_length = len(field[0]) #12列
    lake_count = 0 #答え用のポケット用意

    #深さ優先検索(再帰)
    def dfs(x,y):                
        fi...]]></summary>
        <author>
            <name>none_programmer</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[要点がギュっと詰まった「FastAPI入門」を読みながらTODOアプリを作った]]></title>
        <id>https://zenn.dev/ky0yk/articles/21cf1355858ffd</id>
        <link href="https://zenn.dev/ky0yk/articles/21cf1355858ffd"/>
        <updated>2023-05-14T11:25:15.000Z</updated>
        <summary type="html"><![CDATA[FastAPIに入門すべく「FastAPI入門」を写経したのでレポートします。

 はじめに

 FastAPIとは

FastAPI は、Pythonの標準である型ヒントに基づいてPython 3.6 以降でAPI を構築するための、モダンで、高速(高パフォーマンス)な、Web フレームワークです。

https://fastapi.tiangolo.com/

 FastAPI入門とは
FastAPI入門は、その名の通り、FastAPIの入門としてZennで公開されている本です。

DjangoやFlaskを使っている方にもおすすめ、最近人気のPython製高速Webフレームワーク、...]]></summary>
        <author>
            <name>ky0yk</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FX自動売買ツール作り方：為替のヒートマップからアノマリーEAを作成する]]></title>
        <id>https://zenn.dev/harukii/articles/c48e5a665c6d2b</id>
        <link href="https://zenn.dev/harukii/articles/c48e5a665c6d2b"/>
        <updated>2023-05-14T08:13:09.000Z</updated>
        <summary type="html"><![CDATA[はじめに
FX（外国為替）の自動売買ツールは、トレーディングの自動化を可能にし、効率的な取引を実現するためのツールです。本記事では、為替のヒートマップを活用してアノマリー（異常値）を検出し、それを基にした自動売買ツール（Expert Advisor, EA）の作成方法について説明します。
為替のヒートマップとは、通貨ペアの価格変動を視覚化したもので、時間軸と価格レベルを組み合わせて表示します。ヒートマップは、価格の変動や傾向を一目で把握するのに便利であり、アノマリーの検出にも役立ちます。

 データの収集と前処理
最初に、過去の価格データを収集しましょう。信頼性のあるデータプロバイダーや...]]></summary>
        <author>
            <name>ホソノP</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GoogleColaboratoryでSeleniumを動かそうとすると出るエラーの話]]></title>
        <id>https://zenn.dev/omizunomitaro/articles/39837cf82b16d1</id>
        <link href="https://zenn.dev/omizunomitaro/articles/39837cf82b16d1"/>
        <updated>2023-05-14T07:07:36.000Z</updated>
        <summary type="html"><![CDATA[✅目的
google colaboratoryでSeleniumを動かすことが思った以上に設定が必要だったためメモしします。

 エラー内容
google colaboratoryの現在のubuntuバージョンではchromium-browserが配布されなくなったためインストールができません。

 実行内容
!pip install chromium chromium-driver
!pip install selenium

 実行内容(エラー)
Looking in indexes: https://pypi.org/simple, https://us-python.pkg....]]></summary>
        <author>
            <name>おみずのみ太郎</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[結合テスト・システムテストを自動化した話]]></title>
        <id>https://zenn.dev/ikeda1151/articles/3c75e6ec8d61bf</id>
        <link href="https://zenn.dev/ikeda1151/articles/3c75e6ec8d61bf"/>
        <updated>2023-05-14T06:52:27.000Z</updated>
        <summary type="html"><![CDATA[前提
プロジェクト：Webアプリ開発
チームメンバー数：６〜７人
自担当：設計〜結合テスト(後にシステムテストまで)

 経緯

 序
ワイ「結合テスト手動なんキツイな...重いとこだけでもちまちま自動化しとかんと後々ヤバそう」
ワイ「半年くらい弄り倒してたら色々できること増えたわ」(Step1~3)

 破
メンバー1「ここの改修テスト工数がヤベぇ！」
ワイ「そこシナリオ弄るだけで自動テスト回せるからこっちでやるで」
メンバー2「すまんワイのも頼むわ」
メンバー3「よろ」
ワイ「ヒィ！」
ワイ「項目表からシナリオ生成できるようにしといたから、各々で自動テスト回して！」(Step4)...]]></summary>
        <author>
            <name>ikeda1151</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FX取引と五十日アノマリー：その発見と新たな可能性の探索]]></title>
        <id>https://zenn.dev/harukii/articles/0efcf8072daf7b</id>
        <link href="https://zenn.dev/harukii/articles/0efcf8072daf7b"/>
        <updated>2023-05-14T05:30:58.000Z</updated>
        <summary type="html"><![CDATA[FX（外国為替取引）の世界では、ドル円の「五十日仲値アノマリー」という現象が注目を集めています。この現象は、一部のトレーダーによって検証され、自動売買ツールに組み込まれ、実際のトレーディングに活用されているという報告があがっています。
ところで、この五十日アノマリーは誰によって初めて発見されたのでしょうか？そして、このような情報はどのようにして生まれ、広まっていくのでしょうか？こういった疑問を抱くのは自然なことです。
また、アノマリーとは、通常のパターンから外れた現象を指す言葉です。では、この五十日アノマリー以外にも、時間帯による値動きを調べることで新たなアノマリーが発見できる可能性はあ...]]></summary>
        <author>
            <name>ホソノP</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】コーディング練習]]></title>
        <id>https://zenn.dev/takuh/articles/45fc0a6c9738bc</id>
        <link href="https://zenn.dev/takuh/articles/45fc0a6c9738bc"/>
        <updated>2023-05-14T02:49:09.000Z</updated>
        <summary type="html"><![CDATA[はじめに
コーディング練習１日目です。

 コーディング内容
リスト内の数字の中で、値の大きなもの２つの差をリストに追加していき、使用した値の大きなもの２つはリストから除外する。
この処理を繰り返していき、最後にリストに残った値を出力する。

 実装

sample.py
# 関数内で型明示する
from typing import List

class Solution:
    def lastStoneWeight(self, stones: List[int]) -> int:
        def remove_largest():
            # リ...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】挿入ソート（Insertion Sort）を使ってみた。]]></title>
        <id>https://zenn.dev/takuh/articles/22ed4bc99f797f</id>
        <link href="https://zenn.dev/takuh/articles/22ed4bc99f797f"/>
        <updated>2023-05-14T02:38:24.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Insertion sortは、リスト内の値をインデックス順に見ていき、現在の値よりも数の小さいものがあったら、その値を適切な位置まで移動させるようなソート方法である。

 実装【Python】

insertion_sort.py
# 一回のリストのループ中に数の逆転があったら、その値を適切な位置まで移動させる
from typing import List


def insertion_sort(numbers: List[int]) -> List[int]:
    len_numbers = len(numbers)
    for i in range(...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】選択ソートを使ってみた。]]></title>
        <id>https://zenn.dev/takuh/articles/c0c4db2539fd1c</id>
        <link href="https://zenn.dev/takuh/articles/c0c4db2539fd1c"/>
        <updated>2023-05-14T02:37:17.000Z</updated>
        <summary type="html"><![CDATA[はじめに
選択ソートは、先頭にある値とそれ以降の値を比較し、一番小さい値を先頭に持ってくる（これを繰り返す）ソート手法です。

 実装
# 選択ソート：リストの中から１番小さな数値を探す → 見つけた最小の数値と、リストの始めの数値を入れ替える → これを繰り返す
from typing import List

# 関数の定義：
def selection_sort(numbers: List[int]) -> List[int]:
    # インデックス番号の取り出し
    len_numbers = len(numbers)
    for i in range(le...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】バブルソートを使ってみた。]]></title>
        <id>https://zenn.dev/takuh/articles/3c087a5132dfaa</id>
        <link href="https://zenn.dev/takuh/articles/3c087a5132dfaa"/>
        <updated>2023-05-14T02:36:09.000Z</updated>
        <summary type="html"><![CDATA[はじめに
バブルソートとは、リスト内の要素２つを前から順に見ていき、大きいものが右側になるように並べ替えていくものです。

 実装

bubble_sort.py
# バブルソート：隣同士を比較する → 最後まで繰り返す → 始めに戻り、隣同士を比較 → 最後から２番目まで繰り返す
from typing import List

# 関数の定義(入力：元のリスト、出力：並べ替えた後のリスト)
def bubble_sort(numbers: List[int]) -> List[int]:
    # リストの長さを求める
    len_numbers = len(numb...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】リスト内の数字を偶数、奇数の順に並べ替えるアルゴリズム]]></title>
        <id>https://zenn.dev/takuh/articles/300320a0911227</id>
        <link href="https://zenn.dev/takuh/articles/300320a0911227"/>
        <updated>2023-05-14T02:34:49.000Z</updated>
        <summary type="html"><![CDATA[はじめに
リストの数字を偶数、奇数の順に並べ替えるアルゴリズムを実装しました。

 方針
1.　偶数と奇数用の殻のリストを用意する。
2.　リストを始めから順に見ていき、２で割り切れるものは偶数のリストに追加する。それ以外は奇数のリストに追加する。
3.　偶数、奇数のリストを結合する。

 実装

even_first_odd_end.py
# 関数の引数に型を明示できるようにする。
from typing import List

# Noneを指定することで、対象のリストを上書きできるようにする。
def even_first_odd_end(numbers: List[int]...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】palindromeの実装]]></title>
        <id>https://zenn.dev/takuh/articles/2e6c64d843c08a</id>
        <link href="https://zenn.dev/takuh/articles/2e6c64d843c08a"/>
        <updated>2023-05-14T02:33:03.000Z</updated>
        <summary type="html"><![CDATA[はじめに
palindromeとは
逆さに読んでも同じもの。
例）abcba
※ 1文字の時も今回は含めることにする。

 実装

palindrome.py
def palindrome(strings: str) -> bool:
    len_strings = len(strings)
    if not len_strings:
        return False
    if len_strings == 1:
        return True

    start, end = 0, len_strings - 1
    while start ...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[~コピペでOK~ 実際に動かして体験する機械学習入門]]></title>
        <id>https://zenn.dev/tsukatsuka1783/articles/introduction_machine_learning</id>
        <link href="https://zenn.dev/tsukatsuka1783/articles/introduction_machine_learning"/>
        <updated>2023-05-14T02:28:10.000Z</updated>
        <summary type="html"><![CDATA[この記事の目的
「機械学習とは結局なんぞや、何ができるんや。」
「こまけぇことはいいからとりあえずサンプルを動かして挙動確認してみたい。」
といった、機械学習という言葉は知っているが、実際の動作イメージがついていない人 が実際に動作確認して体験してみよう。
といった記事です。
今回はMNISTという手書き数字の画像データを使って、数字を推論するプロブラムを作成します。
「機械学習ってこういったこともできるんやなぁ。」となんとなく掴んで頂けたら幸いです。
※ とりあえず機械学習を体験してみることが目的なので、技術的に詳しいことは書いてない＆参考になるようなコードは書いてません。あしから...]]></summary>
        <author>
            <name>ゆーと</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GCP AWS等のクラウドプラットフォームに最新のpythonを入れる]]></title>
        <id>https://zenn.dev/ashitahonkidasu/articles/36d64bfc4e4bc2</id>
        <link href="https://zenn.dev/ashitahonkidasu/articles/36d64bfc4e4bc2"/>
        <updated>2023-05-14T01:14:18.000Z</updated>
        <summary type="html"><![CDATA[今回試した環境
ローカル環境: windows 11
クラウドプラットフォーム: GCP compute engin m2-micro
OS: ubuntu 22.04lts

 wgetでminiforgeスクリプトをダウンロード
miniforgeのgithubにアクセスします。
miniforge
自分が使うOSに対応したスクリプトを右クリックしてリンク先をコピーします。
wget "リンク先を貼り付け"

 実行
lsでさっきダウンロードしたスクリプト名を確認します。
ls
Miniforge〇〇.shを実行します。
bash "Miniforge-スクリプト名.sh"

 ...]]></summary>
        <author>
            <name>shiba</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[TIL] ディープラーニング基礎]]></title>
        <id>https://zenn.dev/joel/articles/575b7c20aa780c</id>
        <link href="https://zenn.dev/joel/articles/575b7c20aa780c"/>
        <updated>2023-05-13T16:00:28.000Z</updated>
        <summary type="html"><![CDATA[[!Important]+ Goals

基本アルゴリズムの概要
基本的な実装方法
チューニング方法



[!info]+ Subject

機械学習プロジェクトに関わる全ての方
DL の実装を始めたい方



[!abstract]+ Curriculum
1.深層学習の実践
2.深層学習チューニング
添削問題



 ディープラーニング実践

 ディープラーニングの概要

 フレームワーク

TensorFlow by Google

本講義ではtensorflow.kerasを使用します。


PyTorch by Facebook


 基本用語

Epoch : トレーニン...]]></summary>
        <author>
            <name>Joel Lee</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[（英語解説）LeetCode 27: Remove Element in-Place]]></title>
        <id>https://zenn.dev/eric233/articles/8781fa03b6359c</id>
        <link href="https://zenn.dev/eric233/articles/8781fa03b6359c"/>
        <updated>2023-05-13T15:49:43.000Z</updated>
        <summary type="html"><![CDATA[Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.
Consider the number of elements in nums which are not equal to val be k, to get accepted...]]></summary>
        <author>
            <name>Eric</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChatGPTで日英医薬品マスター作成の試み]]></title>
        <id>https://zenn.dev/parfait/articles/5aebc4523dc52f</id>
        <link href="https://zenn.dev/parfait/articles/5aebc4523dc52f"/>
        <updated>2023-05-13T10:55:52.000Z</updated>
        <summary type="html"><![CDATA[結論

DeepL + GPT3.5である程度日英の医薬品名の名寄せは可能。
SemanticSimilarityExampleSelector + Few Shotが有効。
名寄せ補助ツールとして、ChatGPTを使うのはあり。


 背景
顧客「臨床データベースA(DB)と臨床データベースBを統合して解析してほしい」
こういった要望は定期的にあるがさて困った。なぜなら2つのDBは同じ臨床データなのだが、言語が異なるのだ。
またそれぞれ独自の入力ルールが多々見られ、良い結合keyが見つからない。あえて選ぶとしたら医薬品名になるのだが、片方を単純に翻訳しても医薬品名同士で結合できるわ...]]></summary>
        <author>
            <name>parfait</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】ハノイの塔の実装]]></title>
        <id>https://zenn.dev/takuh/articles/8aa97212202951</id>
        <link href="https://zenn.dev/takuh/articles/8aa97212202951"/>
        <updated>2023-05-13T09:43:46.000Z</updated>
        <summary type="html"><![CDATA[はじめに
ハノイの塔の実装コードです。

 実装

tower_of_hanoi.py
from typing import List, Tuple


def hanoi(disk: int, src: str, dest: str, support: str):
    if disk < 1:
        return

    hanoi(disk-1, src, support, dest)
    print(f'move {disk} from {src} to {dest}')
    hanoi(disk-1, support, dest, src)


...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】スパイラルマトリックスの実装]]></title>
        <id>https://zenn.dev/takuh/articles/9086178dbfbbec</id>
        <link href="https://zenn.dev/takuh/articles/9086178dbfbbec"/>
        <updated>2023-05-13T09:42:18.000Z</updated>
        <summary type="html"><![CDATA[はじめに
与えられた行列を螺旋状のリスト形式で返すアルゴリズムです。

 参考図


 実装

spiral_matrix.py
from typing import List

class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        # 出力配列を初期化
        result = []
        rows, columns = len(matrix), len(matrix[0])
        # 上、右、下、左の境界をup、right、...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】シーザー暗号の実装]]></title>
        <id>https://zenn.dev/takuh/articles/b2e50c34b8dad3</id>
        <link href="https://zenn.dev/takuh/articles/b2e50c34b8dad3"/>
        <updated>2023-05-13T09:30:34.000Z</updated>
        <summary type="html"><![CDATA[はじめに
シーザー暗号：入力されたアルファベットを３つシフトさせて暗号化する方法。
（例）art → duw

 実装

caesar_cipher(not_use_stringModule)
# 文字列を暗号化する関数（stringモジュールを使わない場合）
from typing import Generator, Tuple

def caesar_cipher(text: str, shift: int) -> str:
    result = ""
    len_alphabet = ord("Z") - ord("A") + 1
    for char in ...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】パスカルのトライアングル（実装）]]></title>
        <id>https://zenn.dev/takuh/articles/b2a7f802f98d43</id>
        <link href="https://zenn.dev/takuh/articles/b2a7f802f98d43"/>
        <updated>2023-05-13T09:25:41.000Z</updated>
        <summary type="html"><![CDATA[はじめに
パスカルのトライアングルをPythonで実装しました。

 参考図（パスカルのトライアングル）　Wikipediaより引用


 実装

pascal_triangle.py
from typing import List

# 値を足し合わせる部分のアルゴリズム（出力はリストに入ったままの状態）
def pascal_triangle(depth: int) -> List[List[int]]:
    # 各深さ毎のリストを作成する（深くなる毎に1が追加されていく）
    data = [[1] * (i + 1) for i in range(depth)]...]]></summary>
        <author>
            <name>takuh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DataplexのデータリネージAPIを使って、対象のテーブルに依存しているテーブルを自動で列挙する]]></title>
        <id>https://zenn.dev/kashira/articles/290de0b35836ae</id>
        <link href="https://zenn.dev/kashira/articles/290de0b35836ae"/>
        <updated>2023-05-13T06:05:31.000Z</updated>
        <summary type="html"><![CDATA[なぜこの記事を書くのか？
DataplexのデータリネージAPIを有効にすることで、BigQueryのテーブル間の依存関係を簡単に可視化することが出来る。
https://cloud.google.com/data-catalog/docs/concepts/about-data-lineage?hl=ja
特定のテーブルを参照しているテーブルが少ないうちはGUIを使うだけで問題ないが、よく参照されるテーブルの依存関係を把握する際に辛い部分もある。
筆者が体験したものとして、テーブルAに問題が発生したので、テーブルAを参照しているテーブルをリストアップして関係者に連絡したいケースがあ...]]></summary>
        <author>
            <name>kashira</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[データオーケストレーションツールDagsterの紹介]]></title>
        <id>https://zenn.dev/datamarket/articles/dagster_cloud</id>
        <link href="https://zenn.dev/datamarket/articles/dagster_cloud"/>
        <updated>2023-05-13T03:38:00.000Z</updated>
        <summary type="html"><![CDATA[データオーケストレーションとは

データオーケストレーションという言葉をご存知でしょうか？日本ではまだ耳慣れない言葉ですが、data orchestrationでgoogle検索すると実に3000万件以上ヒットし、世界的には十分に市民権を得ている言葉です。Databricksではデータオーケストレーションを以下のように説明しています。
データオーケストレーションとは
データオーケストレーションとは、複数のストレージからサイロ化したデータを取り出し、組み合わせて整理し、分析に利用できるようにするための自動化されたプロセスです。
このプロセスでは、レガシーシステム、クラウドベースのツール...]]></summary>
        <author>
            <name>datamarket</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[IfcOpenShellで階情報を取得する]]></title>
        <id>https://zenn.dev/cote2/articles/6459c1c44091da</id>
        <link href="https://zenn.dev/cote2/articles/6459c1c44091da"/>
        <updated>2023-05-13T01:24:31.000Z</updated>
        <summary type="html"><![CDATA[!
筆者は職業プログラマーではないためおかしな記述が多々あると思いますがご容赦ください。


 対象
Pythonのごく初歩的な知識があること。

 この記事でできること
IFCデータ内に含まれる階情報（階名称、レベル）を取得する

 環境

Python 3.10.6
ifcopenshell 0.7.0
ifcファイルは2x3を使用

今回はSolibriのサンプルファイル（Solibriビル.ifc）を使用




 下準備
ターミナルから pip install ifcopenshell等でIfcOpenShellライブラリをインストールしておく

 コード

IfcStorey...]]></summary>
        <author>
            <name>Kotetsu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-223｜A - Exact Price]]></title>
        <id>https://zenn.dev/hyperdb/articles/c49158fcdeaee2</id>
        <link href="https://zenn.dev/hyperdb/articles/c49158fcdeaee2"/>
        <updated>2023-05-12T08:08:19.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-223 A - Exact Price



 提出結果
def getInt():
    return int(input())


def main():
    x = getInt()

    print('No' if x == 0 or x % 100 > 0 else 'Yes')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-223｜B - String Shifting]]></title>
        <id>https://zenn.dev/hyperdb/articles/3342a2028ee5aa</id>
        <link href="https://zenn.dev/hyperdb/articles/3342a2028ee5aa"/>
        <updated>2023-05-12T08:08:18.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-223 B - String Shifting



 提出結果
def getString():
    return input()


def main():
    s = getString()

    if len(s) == 1:
        print(s)
        print(s)
    else:
        t = s
        l = []
        for i in range(len(s)):
            t = t[1:] + t[0]
            l.append(t)
 ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows11HOMEで手早くウェブサイトを表示する方法]]></title>
        <id>https://zenn.dev/masaru21/articles/4dc6ed298601b8</id>
        <link href="https://zenn.dev/masaru21/articles/4dc6ed298601b8"/>
        <updated>2023-05-12T07:59:29.000Z</updated>
        <summary type="html"><![CDATA[ウェブサイトの引っ越しのために、素材のフォルダを頂きました。
でも、このフォルダがウェブサイトをスクレイピングしたような感じでHTMLファイルとフォルダの構成で、保存されていました。
そのため今回、ウェブサーバーを起動して、内容を確認したいと思いました。
私は、Windows11HOMEを使っていますが、Stable Diffusionを使っている関係もあり、Pythonをインストールしています。
今回は、PythonのWebサーバーを起動したいと思い作業しました。
その内容を自分の備忘録を兼ねて、記録します。
今回は、HTMLのファイルを表示するために行っています。
PHPなどは動かな...]]></summary>
        <author>
            <name>lonely_creator_m</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[シンボリック回帰PySRで外挿予測性能評価]]></title>
        <id>https://zenn.dev/gkchop/articles/8ada22b2d078f2</id>
        <link href="https://zenn.dev/gkchop/articles/8ada22b2d078f2"/>
        <updated>2023-05-12T07:43:34.000Z</updated>
        <summary type="html"><![CDATA[はじめに
前回はシンボリック回帰のインストールから簡単なチュートリアルによる動作確認までを行いました。
この記事では、裏に方程式が隠れているX（説明変数）とy（目的変数）の関係について、シンボリック回帰による外挿予測性能について評価しました。典型的な機械学習手法であるElasticNet、RandomForest、Support Vector Machineをベンチマークとして比較しました。

 環境

Ubuntu 20.04.1
Python 3.9.15
japanize-matplotlib 1.1.3
matplotlib 3.6.2
numpy 1.23.5
optuna...]]></summary>
        <author>
            <name>TangeDanpei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[大学4年生がバイト先の塾にて, 出欠管理システムを開発した話。]]></title>
        <id>https://zenn.dev/kuwaigan/articles/9cfcf42dfba6ea</id>
        <link href="https://zenn.dev/kuwaigan/articles/9cfcf42dfba6ea"/>
        <updated>2023-05-12T05:19:30.000Z</updated>
        <summary type="html"><![CDATA[はじめに
はじめまして、クワイガンです(スターウォーズが好きだからこの名前にしました)。
現在大学4年生で、来年からITベンダに入社予定です。
先日、内定者懇親会に参加したところ、同期が結構な開発経験を積んでいる猛者ばかりだということに気がつきました。入社後、同期のみんなに置いて行かれたくないので、何か自分も成果物を作ろうということで、厚かましくもアルバイト先の塾長に、出欠管理システムの導入をプレゼンをしたところ、意外にもすんなりOKが出ました。この記事では初めての大規模？開発の苦難について語らせていただきたいと思います。大学生のみんなのモチベ向上に繋がれば幸いです。それではレッツゴ...]]></summary>
        <author>
            <name>クワイガン</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[テキストから音楽を作るWebUIを作りました]]></title>
        <id>https://zenn.dev/shiro_toy_box/articles/4652feadecc681</id>
        <link href="https://zenn.dev/shiro_toy_box/articles/4652feadecc681"/>
        <updated>2023-05-12T03:40:00.000Z</updated>
        <summary type="html"><![CDATA[テキストから音楽を誰でも簡単に作れるWebUIを作りました。
壮大なものは作れないものの単純なメロディーぐらいなら作れるものになります。
作成されるファイルはABC、MIDI、wavが生成されます。
https://github.com/massao000/text-to-music-webui

 デモ
https://youtu.be/cxlemBVQ9Lg
https://youtu.be/NVf9__rH1Nw

 画面


 使用
使用しているものとしては以下のものになります。
https://huggingface.co/sander-wood/text-to-music]]></summary>
        <author>
            <name>しろ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pandas  データ処理]]></title>
        <id>https://zenn.dev/baayashi884/books/6347ec59e0175c</id>
        <link href="https://zenn.dev/baayashi884/books/6347ec59e0175c"/>
        <updated>2023-05-12T02:23:43.000Z</updated>
        <summary type="html"><![CDATA[pandasについて、最小限の知識に絞って扱う。]]></summary>
        <author>
            <name>digitalWagon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[anyenvを用いてCleanなMac開発環境を構築する]]></title>
        <id>https://zenn.dev/duke13/articles/9c74dd595823cbd</id>
        <link href="https://zenn.dev/duke13/articles/9c74dd595823cbd"/>
        <updated>2023-05-11T15:15:37.000Z</updated>
        <summary type="html"><![CDATA[これから開発者として新品のMacを手に入れましたあなたに、なるべくCleanな開発環境の構築方法を説明します。
ここで言うCleanの定義とは、各種のプログラミング言語をインストールして、バージョンを切り替えられる構成の意味です。
今回は、Pyhton , Node.js , Java の環境構築の手順を詳しく解説していきます。
環境のイメージ


 1. Homebrew のインストール
まずは、パッケージマネージャーの Homebrew をインストールしましょう。Macを使う以上、いずれインストールすることになると思います。
/bin/bash -c "$(curl -fsSL ht...]]></summary>
        <author>
            <name>duke13</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Apache Airflowのコミッターになった話]]></title>
        <id>https://zenn.dev/jcc/articles/43c441c1e8929e</id>
        <link href="https://zenn.dev/jcc/articles/43c441c1e8929e"/>
        <updated>2023-05-11T14:16:40.000Z</updated>
        <summary type="html"><![CDATA[Google Providersのバグを見つけた
先日DAGを開発中にGoogle Providers (apache-airflow-providers-google==8.9.0)のCloudDataTransferServiceJobStatusSensorを使用したところ、
project_idはオプション引数であるにも関わらず、省略するとエラーが発生するというバグに遭遇しました。
[2023-03-09, 02:31:24 UTC] {taskinstance.py:1774} ERROR - Task failed with exception
Traceback (mo...]]></summary>
        <author>
            <name>jc</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Astropyで天文データ解析 [2] -convolution, filtering-]]></title>
        <id>https://zenn.dev/twinkle_star/articles/d82a4c79e691a6</id>
        <link href="https://zenn.dev/twinkle_star/articles/d82a4c79e691a6"/>
        <updated>2023-05-11T14:06:33.000Z</updated>
        <summary type="html"><![CDATA[はじめに
本記事ではPythonを用いた天文解析の理解を深めることを目的に、Astropy公式チュートリアルのSynthetic Images from simulated dataとConvolution and Filteringを参考に記事にまとめる。なお、筆者の備忘録として活用できるように分かりやすい解説を付け加えるよう配慮した。

 本記事のゴール


astropy.wcsを用いた天体画像へのWCS座標の割り当て

astropy.modeling.modelを用いたPSF(Point Spread Function)の構築

astropy.convolutionを用い...]]></summary>
        <author>
            <name>comet</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[TIL] 機械学習概論]]></title>
        <id>https://zenn.dev/joel/articles/5f9f937272984c</id>
        <link href="https://zenn.dev/joel/articles/5f9f937272984c"/>
        <updated>2023-05-11T09:06:19.000Z</updated>
        <summary type="html"><![CDATA[[!Important]+ Goals
人工知能の注目分野「機械学習」について正確に理解すること。


[!info]+ Subject

機械学習プロジェクトに関わる全ての人
機械学習を体系的に復習したい人 >- 機械学習を体系的に復習したい人



[!abstract]+ Curriculum
1.機械学習概論
2.機械学習の流れ
3.性能評価指標
添削問題



 機械学習概論

ディープラーニング：生物の神経細胞の構造を模倣したアルゴリズム「ニューラルネットワーク」の利用が主流で、現在最も高い精度が得やすい機械学習技術。
強化学習：正解ラベルも大量のデータも必要としない...]]></summary>
        <author>
            <name>Joel Lee</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pyminizip で日本語ファイル名を含めて ZIP ファイルを作成したときは注意しよう]]></title>
        <id>https://zenn.dev/miwarin/articles/9d31448cfa7e7f</id>
        <link href="https://zenn.dev/miwarin/articles/9d31448cfa7e7f"/>
        <updated>2023-05-11T08:51:11.000Z</updated>
        <summary type="html"><![CDATA[pyminizip · PyPI で日本語ファイル名を含めて ZIP を作成した場合 且つ その ZIP ファイルを Python 3.11 未満の ZipFile クラスで参照すると、ファイル名が文字化けします。それ以外の場合は問題ありません。まとめると以下のとおり:




Python 3.11 未満でZIP参照
Python 3.11 以上でZIP参照




pyminizipでZIP作成
問題あり
問題なし


それ以外でZIP作成
問題なし
問題なし




 事例
テキトーに日本語のファイル名を作成して
% echo 'pyminizipで生成した' > pymin...]]></summary>
        <author>
            <name>三輪晋</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[TIL] データサイエンス100本ノック（構造化データ加工編）（初級）]]></title>
        <id>https://zenn.dev/joel/articles/92c36798182a7a</id>
        <link href="https://zenn.dev/joel/articles/92c36798182a7a"/>
        <updated>2023-05-11T07:39:44.000Z</updated>
        <summary type="html"><![CDATA[[!Important]+ Goals
一般社団法人データサイエンス協会がGitHubに公開した「データサイエンス100のノック（構造化データ加工編）」の問題演習を行うコースです。 このコースでは、行や列の操作、結合、アスペクト変換、四則演算などを学ぶことができます。
ビジネス現場での分析実務では、データのほとんどが構造化データです。構造化データを自由に加工・集計するスキルを磨き、データサイエンスの実践力を高めましょう。


[!abstract]+ Curriculum
1.列に対する操作
2.行に対する操作
3.結合
4.縦横変換
5.四捨五入演算
6.正規化、非正規化
7.ファイ...]]></summary>
        <author>
            <name>Joel Lee</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-222｜A - Four Digits]]></title>
        <id>https://zenn.dev/hyperdb/articles/c6be983556aaae</id>
        <link href="https://zenn.dev/hyperdb/articles/c6be983556aaae"/>
        <updated>2023-05-11T04:18:36.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-222 A - Four Digits



 提出結果
def getInt():
    return int(input())


def main():
    n = getInt()

    print('%04d' % n)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-222｜B - Failing Grade]]></title>
        <id>https://zenn.dev/hyperdb/articles/40f6ebd0104bcc</id>
        <link href="https://zenn.dev/hyperdb/articles/40f6ebd0104bcc"/>
        <updated>2023-05-11T04:18:35.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-222 B - Failing Grade



 提出結果
def getIntMap():
    return map(int, input().split())


def getIntList():
    return list(map(int, input().split()))


def main():
    n, p = getIntMap()
    a = getIntList()
    b = [i for i in a if i < p]

    print(len(b))


if __name__ == "__mai...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OSに環境変数を設定せずに外部ソフトをPythonで利用する方法]]></title>
        <id>https://zenn.dev/shiro_toy_box/articles/1a65c8a901e854</id>
        <link href="https://zenn.dev/shiro_toy_box/articles/1a65c8a901e854"/>
        <updated>2023-05-11T03:03:03.000Z</updated>
        <summary type="html"><![CDATA[Pythonの標準ライブラリのosのos.environを利用します。
os.environはPythonスクリプト内で環境変数の設定、確認、削除することができるものです。

!
OSの環境に影響を与えることはありません。

なぜ、直接環境変数を設定をしないのか

ソフトの持ち運びができ、開発環境が1つにまとめることができる
各OS（Windows、macOS、Linux）によって環境変数の設定の方法が異なるため
OSの種類に関係なく同じ方法で環境変数を設定ができる


!
ただし外部ソフトは各OSごとのものをインストールする必要がある


 使い方

 パスが通っているか確認

サン...]]></summary>
        <author>
            <name>しろ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[renderなるものを使ってみた]]></title>
        <id>https://zenn.dev/joo_hashi/articles/e33e3eadf979ef</id>
        <link href="https://zenn.dev/joo_hashi/articles/e33e3eadf979ef"/>
        <updated>2023-05-11T02:55:49.000Z</updated>
        <summary type="html"><![CDATA[色々ハマったので、メモしておく
Herokuが有料化されたことになり、代替手段として、renderなるものが話題になっていて、デプロイするのをやってみました。しかし、デプロイに失敗して原因を調べてみたとこと、今回だとPythonならではのルールがあったみたいです。

 ソースコード
最初は、main.pyでやってましたが、エラーの原因になるそうで、app.pyに変更しました。

app.py
from flask import Flask, request, json, jsonify

app = Flask(__name__)
app.config['JSON_AS_ASCII'...]]></summary>
        <author>
            <name>JboyHashimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[TIL] ライブラリ「Matplotlib」基礎（可視化）]]></title>
        <id>https://zenn.dev/joel/articles/c55987e1d57bf0</id>
        <link href="https://zenn.dev/joel/articles/c55987e1d57bf0"/>
        <updated>2023-05-10T16:46:24.000Z</updated>
        <summary type="html"><![CDATA[[!Important]+ Goals
データ可視化コースでは、Matplotlibを使ってデータを可視化する方法を学びます。折れ線グラフ、円グラフ、ヒストグラムなどの作成から3Dグラフの作成方法まで学びます。


[!abstract]+ Curriculum
1.データ可視化のための準備

様々なグラフ
乱数生成
時系列データ
データの操作


Matplotlibの使い方


一種類のデータを可視化しよう
複数のデータを可視化しよう 1
複数のデータを可視化しよう 2


いろいろなグラフを作ろう


折れ線グラフ
棒グラフ
ヒストグラム
散布図
円グラフ
3Dグラフ
添削問題
...]]></summary>
        <author>
            <name>Joel Lee</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[TIL]【新】ライブラリ「pandas」基礎（表計算）]]></title>
        <id>https://zenn.dev/joel/articles/339736cf136996</id>
        <link href="https://zenn.dev/joel/articles/339736cf136996"/>
        <updated>2023-05-10T13:27:02.000Z</updated>
        <summary type="html"><![CDATA[本記事はAidemyの【新】ライブラリ「pandas」基礎（表計算）の講義ノートです。


[!abstract]+ Curriculum

pandas とは
pandas の操作方法
複数の DataFrame の利用


添削問題




 Pandas とは
テーブルデータを扱うことに特化したライブラリ。



 Pandas 操作

 データの読み書き
#pd/リード #pd/セーブ

pd.read_csv() : sep, header, names, encodinng
pd.read_excel() : 'Sheet1'.
.to_csv(˶´꒳˵), .to_exce...]]></summary>
        <author>
            <name>Joel Lee</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[吹奏楽の楽譜から、ピアノ連弾用の楽譜を作る話]]></title>
        <id>https://zenn.dev/kthrlab_blog/articles/cbde0ff0aa6e7f</id>
        <link href="https://zenn.dev/kthrlab_blog/articles/cbde0ff0aa6e7f"/>
        <updated>2023-05-10T07:26:45.000Z</updated>
        <summary type="html"><![CDATA[研究紹介
吹奏楽やオーケストラなどの多人数演奏用の楽譜から、ピアノ連弾用の楽譜を生成するプログラムを紹介します。当研究室卒業生の島村さんが研究開発しました。

合奏はオーケストラや吹奏楽など多人数で演奏するため、和音などの魅力がある一方で、演奏者や楽器、場所の確保など課題があり、気軽に楽しむことができません。一方、ピアノソロは一人で演奏できるため手軽ですが、演奏の厚みに限界があり、合奏の楽しみを味わうことができません。
合奏とピアノソロの中間的な演奏形態の一つに「ピアノ連弾」があります。2人の演奏者と1台のピアノがあれば演奏が可能であり、合奏の楽しみを味わいつつも手軽に演奏ができます...]]></summary>
        <author>
            <name>Junko Fujii</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-221｜B - typo]]></title>
        <id>https://zenn.dev/hyperdb/articles/f70c0091460393</id>
        <link href="https://zenn.dev/hyperdb/articles/f70c0091460393"/>
        <updated>2023-05-10T05:47:27.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-221 B - typo



 提出結果
def getString():
    return input()


def main():
    s = list(getString())
    t = list(getString())
    x = []
    y = []

    for i in range(len(s) - 1):
        if s[i] != t[i]:
            x.append(s[i])
            x.append(s[i + 1])
            y.append(...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-221｜A - Seismic magnitude scales]]></title>
        <id>https://zenn.dev/hyperdb/articles/da8e0ad4e6c188</id>
        <link href="https://zenn.dev/hyperdb/articles/da8e0ad4e6c188"/>
        <updated>2023-05-10T05:47:27.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-221 A - Seismic magnitude scales



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    a, b = getIntMap()

    print(32 ** (a - b))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[シンボリック回帰向けPySRのインストール]]></title>
        <id>https://zenn.dev/gkchop/articles/9fc05fd286d124</id>
        <link href="https://zenn.dev/gkchop/articles/9fc05fd286d124"/>
        <updated>2023-05-10T05:28:28.000Z</updated>
        <summary type="html"><![CDATA[はじめに
データサイエンスにおいてしばしばデータの裏側で起こっている事象の解釈性が求められることがあります。ドメインの原理原則に則った数式をデータから推測することができたらドメインの理解や新たな知見を得ることに役立つだけでなく、原理原則という汎用性をモデル化できている可能性があるため外挿予測性の向上も期待できます。
この記事ではJuliaをバックエンドとしたPythonライブラリPySRをインストールするための手順を示します。

元論文
Github


 環境

Ubuntu 20.04.1
Python 3.9.15
pysr 0.12.3


 手順

 Juliaのインストー...]]></summary>
        <author>
            <name>TangeDanpei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dockerを使ってStreamlitのwebアプリを動かそう]]></title>
        <id>https://zenn.dev/kthrlab_blog/articles/2250b74ec16206</id>
        <link href="https://zenn.dev/kthrlab_blog/articles/2250b74ec16206"/>
        <updated>2023-05-10T05:19:47.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事では、Streamlitで作成したwebアプリをDockerでコンテナを立てて動かすことを目標とします。
尚、この記事は身内向けのチュートリアルなので若干いい加減に書いていますが、ご容赦ください。

 Dockerとは

Dockerは、コンテナ仮想化という技術を用いてアプリを開発・実行することが出来るプラットフォームです。開発したアプリをDockerを使ってコンテナ化すれば、別の環境でも同じように動作させることができます。
Dockerは2013年にDocker社から登場し、今ではVirtualBoxなどの仮想マシンなどに取って変わる仮想環境として世界中で利用され...]]></summary>
        <author>
            <name>Justin Wulf</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[TIL] Python基礎]]></title>
        <id>https://zenn.dev/joel/articles/b742c79462b6bc</id>
        <link href="https://zenn.dev/joel/articles/b742c79462b6bc"/>
        <updated>2023-05-09T15:00:50.000Z</updated>
        <summary type="html"><![CDATA[[!Important]+ Goals

複数の値を持つタイプ、関数、クラスについて理解する。
効果的なコードが記述できる



[!abstract]+ Curriculum

はじめに
複数の値を持つタイプ
リストタイプ
辞書タイプ
for 文によるループ処理
for 文
for 文の応用例
関数
関数とは
関数を作って理解しよう (独自関数) > 3.
内蔵関数
クラス
1.クラス
2.クラスを作って理解しよう
よく使うメソッド
ライブラリ
添削問題




 はじめに

 複数の値を持つタイプ

 リストタイプ

del list[index] : 要素の削除
list....]]></summary>
        <author>
            <name>Joel Lee</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[TIL] ライブラリ「NumPy」基礎（数値計算）]]></title>
        <id>https://zenn.dev/joel/articles/5ee50809a18ed5</id>
        <link href="https://zenn.dev/joel/articles/5ee50809a18ed5"/>
        <updated>2023-05-09T14:47:51.000Z</updated>
        <summary type="html"><![CDATA[[!abstract]+ Curriculum

NumPyとは
データ操作
NumPyとメモリ
Numpyによる統計解析
今後の学習の進め方
添削問題




 NumPyとは

NumPy配列と四則演算

ブロードキャスト：演算前にNumPy配列の shape を合わせること。


データの読み込み : delimiter, skiprows, usecols

import numpy as np

arr_1 = np.loadtxt("./4002_new_numpy/csv_example.csv",
				   delimiter=",", # 区切り文字をカンマに指定...]]></summary>
        <author>
            <name>Joel Lee</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのライブラリで「お気に入りのショートカットキー作ってみる」]]></title>
        <id>https://zenn.dev/timoneko/articles/7612a5972297b1</id>
        <link href="https://zenn.dev/timoneko/articles/7612a5972297b1"/>
        <updated>2023-05-09T14:17:35.000Z</updated>
        <summary type="html"><![CDATA[下記のライブラリを利用してみます。
https://github.com/boppreh/keyboard
pip install keyboard

 キーボードの押した内容を記録する。

escapeを押すまで記録する。
import keyboard

record_list = keyboard.record(until='escape')

for i in record_list:
    print(i)


実行結果
KeyboardEvent(w down)
KeyboardEvent(w up)
KeyboardEvent(e down)
KeyboardEvent(...]]></summary>
        <author>
            <name>timoneko</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonの辞書型を使いこなすための基本操作方法と応用テクニック]]></title>
        <id>https://zenn.dev/sergicalsix/articles/34572ce4ec6ee4</id>
        <link href="https://zenn.dev/sergicalsix/articles/34572ce4ec6ee4"/>
        <updated>2023-05-09T13:46:08.000Z</updated>
        <summary type="html"><![CDATA[はじめに
pythonでよく使う辞書型について、様々な組み込みのメソッドや便利メソッドをまとめました。
どれか一つでも役に立つものがあれば幸いです。
カリキュラムは以下となっています。

辞書への読み取り処理
辞書への書き込み処理
辞書の定義

!
取り扱わないもの: 辞書型に似たものたち namedtuple, dataclass


 辞書への読み取り処理
以下辞書はdとします。

 キー(key)とバリュー(value)の取得


d.keys()
全てのkeyが取得ができます。型はdict_keysです。

特定の要素が辞書内にあるかどうかを確認する場合は、inを使って次のよ...]]></summary>
        <author>
            <name>sergicalsix</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[goofiで見る👀色んな言語の知っておきたいOSSプロジェクト]]></title>
        <id>https://zenn.dev/bs_kansai/articles/a41961614c4b25</id>
        <link href="https://zenn.dev/bs_kansai/articles/a41961614c4b25"/>
        <updated>2023-05-09T10:33:44.000Z</updated>
        <summary type="html"><![CDATA[Tl;DR

"good first issue"があるということはコントリビュートの敷居を下げてくれているということ。
スター数が多いということはそれだけ認知されているということで、コントリビュートが盛んに行われている可能性が高いということ。
コントリビュートが盛んということは、ソースコードが洗練されている可能性が高いとこと。

この 3 つが言えるんじゃないかと考えました。
そこで、この記事ではgoofiというツールを使って 10 個の言語の"good first issue"がありなおかつスター 500 以上ある GitHub リポジトリを 3 つずつ見ていきます。
これにより...]]></summary>
        <author>
            <name>Kanon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-220｜B - Base K]]></title>
        <id>https://zenn.dev/hyperdb/articles/e931f01e962d42</id>
        <link href="https://zenn.dev/hyperdb/articles/e931f01e962d42"/>
        <updated>2023-05-09T04:28:48.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-220 B - Base K



 提出結果
def getInt():
    return int(input())


def getStringMap():
    return input().split()


def main():
    k = getInt()
    a, b = getStringMap()

    print(int(a, k) * int(b, k))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-220｜A - Find Multiple]]></title>
        <id>https://zenn.dev/hyperdb/articles/708c142a267424</id>
        <link href="https://zenn.dev/hyperdb/articles/708c142a267424"/>
        <updated>2023-05-09T04:28:48.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-220 A - Find Multiple



 提出結果
def getIntMap():
    return map(int, input().split())


def main():
    a, b, c = getIntMap()

    d = a if a == c else (a // c + 1) * c

    print(d if d <= b else -1)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonでJSONを扱う方法]]></title>
        <id>https://zenn.dev/gk12/articles/python-use-json</id>
        <link href="https://zenn.dev/gk12/articles/python-use-json"/>
        <updated>2023-05-09T02:59:14.000Z</updated>
        <summary type="html"><![CDATA[こんにちは。今回は、Pythonについて初心者エンジニアに向けて、JSONを扱う方法をご紹介します。

 JSONとは
JSON(JavaScript Object Notation)は、データをクライアントとサーバーの間で簡単にやりとりするための形式です。JavaScriptで使用されるオブジェクトの記法を参考に、テキストベースの軽量な文書形式で記述されます。PythonでもJSONを扱うことができます。

 JSONの書式
JSONは、以下のような書式で表現されます。
{
  "name": "John",
  "age": 30,
  "city": "New York"
}
上記...]]></summary>
        <author>
            <name>gk12</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[小ネタ]AWS東京・大阪リージョンで使えるサービスを最新版で比較するPythonスクリプト]]></title>
        <id>https://zenn.dev/shimo_s3/articles/e1a3021cd263a7</id>
        <link href="https://zenn.dev/shimo_s3/articles/e1a3021cd263a7"/>
        <updated>2023-05-08T22:32:39.000Z</updated>
        <summary type="html"><![CDATA[以前書いた記事でも紹介したのですが、AWS services mappingという、AWSの各リージョンでどのサービスの対応しているかを随時更新しているAWS公式のページがあります。
https://aws-new-features.s3.amazonaws.com/html/aws_services.html
大阪リージョンでのサービス対応状況を東京リージョンと比較したかったので、このAWS services mappingからデータを取得して比較するスクリプトを作ってみました。

 Code


 Results
2023/05/09の時点で、ap-northeast-1(東京)と ...]]></summary>
        <author>
            <name>shimo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GradioでStableDiffusionのWebUIを自作してみた]]></title>
        <id>https://zenn.dev/climt/articles/create-stable-diffusion-webui-by-gradio</id>
        <link href="https://zenn.dev/climt/articles/create-stable-diffusion-webui-by-gradio"/>
        <updated>2023-05-08T11:28:51.000Z</updated>
        <summary type="html"><![CDATA[はじめに
株式会社CLIMTのshalinです。
普段はAUTOMATIC1111/stable-diffusion-webuiを利用してStableDiffusionを実行させていただいてますが、最近どうも更新が遅くなってしまったりバグが増えてきたりと、ビジネス利用をする上で悩ましい点が増えてきました。
せっかくOSSのstable diffusionなので、自分たちの要件にあったWebUIを作ってしまおうということで、Gradioを使って自作していこうと思います。

 前提

python3.9以降がインストールされている
pythonを最低限触ったことがある


 環境構築
ま...]]></summary>
        <author>
            <name>5HAL1N</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-219｜A - AtCoder Quiz 2]]></title>
        <id>https://zenn.dev/hyperdb/articles/f90f1ee7f3801f</id>
        <link href="https://zenn.dev/hyperdb/articles/f90f1ee7f3801f"/>
        <updated>2023-05-08T10:45:57.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-219 A - AtCoder Quiz 2



 提出結果
def getInt():
    return int(input())


def main():
    x = getInt()

    print('expert' if x >= 90 else 90 - x if x >=
          70 else 70 - x if x >= 40 else 40 - x)


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-219｜B - Maritozzo]]></title>
        <id>https://zenn.dev/hyperdb/articles/df58d7d0edd3a8</id>
        <link href="https://zenn.dev/hyperdb/articles/df58d7d0edd3a8"/>
        <updated>2023-05-08T10:45:56.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-219 B - Maritozzo



 提出結果
def getStringRow(N):
    return [input() for _ in range(N)]


def getString():
    return input()


def main():
    s = getStringRow(3)
    t = map(int, list(getString()))
    u = []

    for i in t:
        u.append(s[i - 1])
    print("".join(u))


if __...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PyGWalkerをStreamlitで動作させてみた]]></title>
        <id>https://zenn.dev/naiq112/articles/f57cc333ee8b3c</id>
        <link href="https://zenn.dev/naiq112/articles/f57cc333ee8b3c"/>
        <updated>2023-05-08T10:10:45.000Z</updated>
        <summary type="html"><![CDATA[Tableauが使えない状況だったのでTableauみたいな分析ツールを使いたく、いいものはないかと探したところ、PyGWalkerというツールを見つけました。
Streamlitに対応していたので、ファイルのアップロードをドラッグ&ドロップで直感的に利用できるように実装してみました。

 PyGWalkerとは
PyGWalkerは、pandasやpolarsのデータフレームをTableauスタイルのユーザインタフェースにてデータ分析・可視化をできるようにするツールです。
Tableauのオープンソースの代替品Graphic WalkerをPythonで実行できるようにしたもの...]]></summary>
        <author>
            <name>naiq112</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[１歩目の衛星データの取得判読解析予測の基礎]]></title>
        <id>https://zenn.dev/syu_tan/articles/c331eee691749c</id>
        <link href="https://zenn.dev/syu_tan/articles/c331eee691749c"/>
        <updated>2023-05-08T05:43:43.000Z</updated>
        <summary type="html"><![CDATA[１歩目の衛星データの取得判読解析予測の基礎
!

衛星データの扱い方
地理空間処理
Deep Learning を利用したモデリング
などの一連の簡単な流れを紹介したいと思います。



 概要
!


本編

検証事象の紹介
衛星の撮像検索
衛星画像の取得
事象の判読
地理空間処理
画像解析
事象のモデリング
予測の可視化
山火事の影響



おまけ

きっかけ
モチベーション
作業処理フロー



参考




 本編
よくやる簡単な衛星データの扱いや利用について記載しまーす！

 検証事象の紹介

今回は 山火事 を題材にします。
特に、長野県諏訪市と茅野市の境にある霧ヶ峰高...]]></summary>
        <author>
            <name>syu-tan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SQLMeshが提供するVirtual Data Environments(データ環境の仮想化)を体験してみた]]></title>
        <id>https://zenn.dev/kashira/articles/ad470ce26c5e79</id>
        <link href="https://zenn.dev/kashira/articles/ad470ce26c5e79"/>
        <updated>2023-05-07T09:05:16.000Z</updated>
        <summary type="html"><![CDATA[はじめに
開発・運用のコストを最小限にしつつDev・Staging・Prodをシームレスに切り替える設計思想としてVirtual Data Environments(データ環境の仮想化)という概念があるらしい。
SQLMeshで実装されており、簡単に試すことが出来るので、どんな感じかさわってみた。
https://sqlmesh.readthedocs.io/en/stable/

 Virtual Data Environments(データ環境の仮想化)

 TL;DR
Physical layerにデータのスナップショットを作成して、それをVirtual layerから参照するこ...]]></summary>
        <author>
            <name>kashira</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FastAPI で CURD する。]]></title>
        <id>https://zenn.dev/hasegawasatoshi/articles/648f6c1035282b</id>
        <link href="https://zenn.dev/hasegawasatoshi/articles/648f6c1035282b"/>
        <updated>2023-05-07T08:28:23.000Z</updated>
        <summary type="html"><![CDATA[FastAPI の使い方について学習してみました。とてもシンプルなフレームワークで、公式のチュートリアル も分かりやすかったのですが、最小限の機能を提供しているがゆえに、RDBMS へのアクセスまでやろうとすると、ORM は SQLAlchemy、マイグレーションは Alembic と、その辺の前提知識がないと理解しにくい部分があったので、備忘としてメモをしておきます。
基本的にはチュートリアルの「 SQL (Relational) Databases 」の写経ですが、同じく、「Bigger Applications - Multiple Files 」を参考に、ファイル分割などをしてい...]]></summary>
        <author>
            <name>Satoshi Hasegawa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【初心者でもできる】GoogleColaboratoryでStableDiffusionのWebUIを動かす]]></title>
        <id>https://zenn.dev/robes/articles/555367ebe25196</id>
        <link href="https://zenn.dev/robes/articles/555367ebe25196"/>
        <updated>2023-05-07T07:47:49.000Z</updated>
        <summary type="html"><![CDATA[以前、こちらの記事で、GoogleColaboratory（以下、Googleコラボといいます）上でStableDiffusionを実装する方法についてご紹介しました。
https://zenn.dev/robes/articles/8ea32494d40f06
正直、画像の精度はそれほど高くありませんでしたが、テキストを入れるだけで、AIが様々な画像を生成してくれることが大変驚きでした。
時は過ぎ、今（2023年5月時点）のStableDiffusionは、画像の精度が、ほぼ写真と言っていいくらい、かなり高くなっています。
また、Googleコラボを操作することに変わりはないのですが、...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Transformersの'from_pretrained'の使い方とリスクを考察]]></title>
        <id>https://zenn.dev/yagiyuki/articles/load_pretrained</id>
        <link href="https://zenn.dev/yagiyuki/articles/load_pretrained"/>
        <updated>2023-05-07T07:12:59.000Z</updated>
        <summary type="html"><![CDATA[Transformersの事前学習済みのモデルのロード処理で、こんなコードをよく見かけませんか?
from transformers import HogeModel
hoge_model = HogeModel.from_pretrained('hoge_model_name')
Hugging Face上のモデルロードのサンプルは、だいたい上のような実装になっています。
これまでなんとなく使っていましたが、少し詳しく挙動を知りたいと思い調査したので、まとめておきます。
また、上記のコードをそのまま実運用システムへ組み込むのにもリスクを感じたので、そのあたりも書いておきます。

 'f...]]></summary>
        <author>
            <name>yagiyuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Poisson Image Editing を画像ピラミッドで高速化する]]></title>
        <id>https://zenn.dev/kymok/articles/593ccf5eb56385</id>
        <link href="https://zenn.dev/kymok/articles/593ccf5eb56385"/>
        <updated>2023-05-07T05:20:58.000Z</updated>
        <summary type="html"><![CDATA[概要
本稿では， Poisson Image Editing (Perez et al., 2003) を Python で実装してみます．ヤコビ法で高解像度画像を処理すると時間がかかるところ，あらかじめ画像ピラミッドを作成して低解像度側から順に処理することで処理時間を短縮できました．
考え方はマルチグリッド法と似ているところもあります（マルチグリッド法のほうが洗練されています）が，少しの書き換えだけで実装できるので，小難しいことを考えたくないときには便利です．

 方法

 Poisson Image Editing
Poisson Image Editing (Perez et ...]]></summary>
        <author>
            <name>kymok</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonコードを35000倍に高速化したい]]></title>
        <id>https://zenn.dev/turing_motors/articles/8b9a2c4d3e8882</id>
        <link href="https://zenn.dev/turing_motors/articles/8b9a2c4d3e8882"/>
        <updated>2023-05-07T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Pythonは世界的にも人気のあるプログラミング言語ですが、実行速度については課題があります。Pythonの実行速度を高速化したい、という要求は根強く、これまでにも様々な処理系が開発されています。
この記事はPythonで書かれたコードを35000倍に高速化するにはどのような方法があるかについてまとめたものです。
この記事は：

Pythonで書かれたアルゴリズムを35000倍に高速化する
事前コンパイル、並列化、SIMD演算を駆使する
最終的に44000倍まで高速化できた


 なぜ35000倍？
2023年5月2日にModular社よりPythonの使いやすさとC言語...]]></summary>
        <author>
            <name>ymg_aq</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ROS 2 : Pythonでパッケージ作成するときのチップス]]></title>
        <id>https://zenn.dev/tasada038/articles/f2f5b500cdc36a</id>
        <link href="https://zenn.dev/tasada038/articles/f2f5b500cdc36a"/>
        <updated>2023-05-07T04:24:11.000Z</updated>
        <summary type="html"><![CDATA[海洋ロボコンをやってた人です。
今回は久しぶりにPythonでROS 2 パッケージ ping_sonar_ros を作成したので、その備忘録として記載していきます。
なぜまとめるかは以下です。

C++で慣れるとPython ROS 2の書き方忘れるため
setup.pyとCMakeLists.txtで(インポートなどの)各依存関係の書き方が違うため（ここ大切）

また、本記事に対するコメントも積極的に募集しますので、よろしくお願いいたします。

 ROS 2 Pythonパッケージ作成のチップス
ROS 2 Pythonの基本は以下です。

パッケージの作成

cd ~/dev_ws...]]></summary>
        <author>
            <name>Takumi Asada</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[「Clean Architectures in Python」を読み解いてクリーンアーキテクチャを具体的に理解する]]></title>
        <id>https://zenn.dev/tanny/articles/4820776f992d2f</id>
        <link href="https://zenn.dev/tanny/articles/4820776f992d2f"/>
        <updated>2023-05-07T03:02:38.000Z</updated>
        <summary type="html"><![CDATA[はじめに
ソフトウェアアーキテクチャーの一種として、クリーンアーキテクチャがあります。クリーンアーキテクチャは、Robert C. Martin氏（「ボブおじさん」と呼ばれているらしい）が提唱したもので、以下のブログの説明が有名なようです。
https://blog.tai2.net/the_clean_architecture.html
私もこのブログの内容をざっと読んでみたのですが、具体的にはどんな実装になるのかがさっぱりわかりませんでした😇。そこで、いつも利用しているPythonでの実装例を探してみたところ、「Clean Architectures in Python」という英...]]></summary>
        <author>
            <name>Tanny</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[tensorflow2.xで推論中、メモリ使用量がどんどん増えていく事象への対処]]></title>
        <id>https://zenn.dev/watarungurunnn/articles/738c63c55a62cc</id>
        <link href="https://zenn.dev/watarungurunnn/articles/738c63c55a62cc"/>
        <updated>2023-05-06T18:25:11.000Z</updated>
        <summary type="html"><![CDATA[tensorflow2.xでModel.predictを実行するたびにメモリ使用量がもりもり増えていく現象が観測されている。
まず思いつくのはgc.collect()であるが、今回はこれが効かない。
参考: https://github.com/keras-team/keras/issues/13118

 1. Sequential APIの場合
まず、提案されている解決法がModel.predict_on_batch()を用いる方法。
for x in dataset:
    y_pred = model.predct_on_batch(x)

 2. Functional API...]]></summary>
        <author>
            <name>watarungurunnn</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[LangChainのtext_splitterについて軽く調べた]]></title>
        <id>https://zenn.dev/seiyakitazume/articles/fa0013f71d04f2</id>
        <link href="https://zenn.dev/seiyakitazume/articles/fa0013f71d04f2"/>
        <updated>2023-05-06T17:33:56.000Z</updated>
        <summary type="html"><![CDATA[text_splitterを使うと、長い文章を分割してくれます。
以下のように数行のコードで使うことできます。
from langchain.text_splitter import RecursiveCharacterTextSplitter
text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=0)
texts = text_splitter.split_documents(documents)
上記のRecursiveCharacterTextSplitterは、文字単位でテキスト...]]></summary>
        <author>
            <name>seiyakitazume</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vertex AI Matching Engineでフィルタ機能を使う]]></title>
        <id>https://zenn.dev/sugasuga/articles/18a8f352025e3c</id>
        <link href="https://zenn.dev/sugasuga/articles/18a8f352025e3c"/>
        <updated>2023-05-06T17:28:39.000Z</updated>
        <summary type="html"><![CDATA[ベクトルのフィルタ機能
前回の記事にて、Matching Engineを触ってみました。
https://zenn.dev/articles/2bdde4e7169eed
実際に使う場合は、特定のデータにフィルタした上で、近傍探索をしたい場合があると思います。
例えば、公開・非公開状態の記事がある中で、公開されている記事のみでベクトル検索を行い関連する記事のデータを取得したい場合などです。事前のフィルタができないと、ベクトル検索結果後にフィルタされ十分な検索結果が残らなかったりする可能性があります。
ElasticSearchは事前のフィルタ機能があります。faissは記事執筆時点の...]]></summary>
        <author>
            <name>sugasuga</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【LangChain】chromadbを使ってローカルの文章(PDF・ワード)をembeddingした上で格納する]]></title>
        <id>https://zenn.dev/seiyakitazume/articles/117048f486f707</id>
        <link href="https://zenn.dev/seiyakitazume/articles/117048f486f707"/>
        <updated>2023-05-06T17:22:52.000Z</updated>
        <summary type="html"><![CDATA[ChromaDBは、文書の埋め込みデータを格納・管理し、文書間の類似性を効率的に検索できるデータベースです。
LangChainからも使え、以下のコードのように数行のコードでChromaDBの中にembeddingしたPDFやワードなどの文章データを格納することが出来ます。
from langchain.vectorstores import Chroma
texts = text_splitter.split_documents(documents)
embeddings = OpenAIEmbeddings()
vectordb = Chroma.from_documents(tex...]]></summary>
        <author>
            <name>seiyakitazume</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[量子フーリエ変換を眺める]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-qft-numpy</id>
        <link href="https://zenn.dev/derwind/articles/dwd-qft-numpy"/>
        <updated>2023-05-06T12:32:04.000Z</updated>
        <summary type="html"><![CDATA[目的
Qiskit textbook の 量子フーリエ変換 を見ると、Bloch 球上のアニメーションが掲載されている。そう言えば以前に勉強した時は「ふ〜ん」で流した気がするので、少し真面目に見てみようという企画。

 量子フーリエ変換とは？
量子コンピュータの色々な FTQC アルゴリズム、例えば量子位相推定や Shor のアルゴリズムで利用されるモジュールである。形式的には、古典的な離散フーリエ変換と対をなす形で定義される。

 離散フーリエ変換
N \in \N に対し x を [0, 1, \cdots, N-1] 上の函数とし、x_j = x(j),\ j \in [0, ...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[troccoで簡易MLOpsをまわしてみる2（Snowflake ver）]]></title>
        <id>https://zenn.dev/stranglehello/articles/d7567ac87c2d0b</id>
        <link href="https://zenn.dev/stranglehello/articles/d7567ac87c2d0b"/>
        <updated>2023-05-06T12:03:35.000Z</updated>
        <summary type="html"><![CDATA[はじめに

この記事は前回のこちらからのちょっとした派生です
良かったら先に目を通していただければ嬉しいです😁


 今回の利用するサービス


Snowflake(DWH)

少し前にpreviewになったPythonのワークシートをメインに使います



trocco

前回と同じくデータを取得する部分とワークフローで呼び出す部分を担当します
前回の記事からのUpdateとしてはFreeプランが登場しており、今回はFreeで使える範囲で対応できます




 対応内容

こちら前回と同じでtitanic問題での利用を想定してみます！（変わり映えがなくてすみません、、）


 さっ...]]></summary>
        <author>
            <name>stranglehello</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[テキストから3Dアセットを生成するShap-EをColaboratoryで試用]]></title>
        <id>https://zenn.dev/t_o_d/articles/d3b2ba62989a27</id>
        <link href="https://zenn.dev/t_o_d/articles/d3b2ba62989a27"/>
        <updated>2023-05-06T10:47:26.000Z</updated>
        <summary type="html"><![CDATA[先日OpenAIからテキストや画像の入力から3Dアセットを生成するShap-Eが発表されました。
そこでGoogle Colaboratoryを利用してShap-Eを試した方法を記録いたします。


 結論

本記事の手順で以下のように「テキストを指定して3Dアセットの作成」がColaboratory上で試すことが可能です。



 準備

実行環境を整えるため、Google Colaboratory上にGPU(T4)環境を作成します。

※詳細な作成方法はこちらを参考にしてください。







 手順

 リポジトリ取得

実行環境の作成後、以下を実行してShap-Eのソースコー...]]></summary>
        <author>
            <name>t_o_d</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[TIL] Python&機械学習入門2(完)]]></title>
        <id>https://zenn.dev/joel/articles/a7d18b4861f550</id>
        <link href="https://zenn.dev/joel/articles/a7d18b4861f550"/>
        <updated>2023-05-06T10:06:02.000Z</updated>
        <summary type="html"><![CDATA[ノート
本記事は、Kikagakuの無料講座「Python&機械学習入門」の講義ノートの第2回目です。
以下のリストは当該講座のカリキュラムで、本ノートは「8.導入」から「11.単回帰分析の実装」までの内容を簡単にまとめたものです。

Curriculum (401/548)
1.導入 (42 min)
2.微分 (49 min)
3.線形代数 (55 min)
4.単回帰分析 (52 min)
5.重回帰分析 (56 min)
6.Python属性講義 (101 min)
7.単回帰分析の実装 (51 min)



8.重回帰分析の実装 (27 min)
9. 練習問題 ...]]></summary>
        <author>
            <name>Joel Lee</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dashのdatatableに画像を挿入する]]></title>
        <id>https://zenn.dev/hodakam/articles/a7d5c8253c9ad5</id>
        <link href="https://zenn.dev/hodakam/articles/a7d5c8253c9ad5"/>
        <updated>2023-05-06T09:33:07.000Z</updated>
        <summary type="html"><![CDATA[datatableに画像を挿入する方法
Dashという簡単にデータ分析のためのダッシュボードが作れるライブラリがあります。Dashの中にはdatatableという便利なライブラリがあり、これを利用することでソートやページング、フィルターなどのテーブル形式のデータでよく用いられる機能を非常に簡単に実装することができます。
実際にダッシュボードを作成する場合、フィールドとして数値や文字列だけでなく画像やファイルへのリンクなどを使いたくなることがあります。Dashのdatatableにこれらのオブジェクトを埋め込むには実はそれなりに工夫が必要です。

 実現方法1：html.ImgでImg...]]></summary>
        <author>
            <name>hodakam</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】ZetaChain上のuniswapでswap]]></title>
        <id>https://zenn.dev/lud/articles/616777396e54a2</id>
        <link href="https://zenn.dev/lud/articles/616777396e54a2"/>
        <updated>2023-05-06T07:57:33.000Z</updated>
        <summary type="html"><![CDATA[この記事では，ZetaChain(testnet)上に実装されたUniswapにPythonでアクセスしてswapする方法を紹介します．
環境はjupyterlabを想定しています．

 解説
privateな情報は.envファイルから環境変数として読み込みます．
ADDRESS=0x...
PRIVATE_KEY=0x...
%load_ext dotenv
%dotenv .env -o -v

 各種設定
ZetaChain上のtokenアドレス等を設定します．(公式リンク)
from web3 import Web3, HTTPProvider
import json, os, ...]]></summary>
        <author>
            <name>t_nakatani</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pip ライブラリを一括更新したかった]]></title>
        <id>https://zenn.dev/sho7650/articles/b05b3afc3dda31</id>
        <link href="https://zenn.dev/sho7650/articles/b05b3afc3dda31"/>
        <updated>2023-05-06T01:06:32.000Z</updated>
        <summary type="html"><![CDATA[Raspberry PiにCO2モニター CO2-mini | 自然環境測定器 - 製品情報 - 計測器のカスタムと、PM2.5などをチェックするセンサーをつけて、部屋の中の空気を管理しています。主にCO2やPM2.5を気にしてます。
今回それは置いといて。
これらを制御するためにPythonのライブラリを使っています。しばらく放置しすぎたために、pipでインストールするライブラリ群が古くなっていたので、今回いきおいあまってアップデートしてみたら、非常に大変で萎えたことを報告します。

 いっぺんに更新ができない
bundle updateとかnpm updateをしたかっただけですが、...]]></summary>
        <author>
            <name>しょっさん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[LangChainを使った文章の要約方法]]></title>
        <id>https://zenn.dev/seiyakitazume/articles/d4a11404320a07</id>
        <link href="https://zenn.dev/seiyakitazume/articles/d4a11404320a07"/>
        <updated>2023-05-05T16:31:40.000Z</updated>
        <summary type="html"><![CDATA[データの準備
from langchain import OpenAI, PromptTemplate, LLMChain
from langchain.chains.mapreduce import MapReduceChain
from langchain.prompts import PromptTemplate

# 要約に使用したいモデルを定義
llm = OpenAI(temperature=0)

long_text = "(要約したい長文)"

from langchain.text_splitter import CharacterTextSplitter
# 長文...]]></summary>
        <author>
            <name>seiyakitazume</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[TIL] Python&機械学習入門1]]></title>
        <id>https://zenn.dev/joel/articles/080cbd42c66cef</id>
        <link href="https://zenn.dev/joel/articles/080cbd42c66cef"/>
        <updated>2023-05-05T16:06:49.000Z</updated>
        <summary type="html"><![CDATA[Notes
本記事は、Kikagaku の無料講座「Python&機械学習入門」の講義ノートの最初のノートです。
以下のリストは当該講座のカリキュラムであり、本ノートは「1.導入」から「7.単回帰分析の実装」までの内容を簡単にまとめたものです。

Curriculum (401/548) > **Curriculum (401/548)
1.導入 (42 min)
2. 微分 (49 min)
3.線形代数 (55 min)
4.単回帰分析 (52 min) > 5.重回帰分析 (56 min)
5.重回帰分析 (56 min) > 6.
6.Python ...]]></summary>
        <author>
            <name>Joel Lee</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vertex AI Matching Engineを試す]]></title>
        <id>https://zenn.dev/sugasuga/articles/2bdde4e7169eed</id>
        <link href="https://zenn.dev/sugasuga/articles/2bdde4e7169eed"/>
        <updated>2023-05-05T15:55:15.000Z</updated>
        <summary type="html"><![CDATA[この記事について
GCPにはVertex AI Matching Engineという低レイテンシで近似最近傍探索を行なってくれるサービスがあります。レコメンドや検索に活用できそうなので気になっており、実際に使ってみました。
2023/05月の時点だと情報が少なく、いろんな事にハマったので記録として残しておきます。

 構築する際の選択肢

 ネットワーク関連


vpc peeringをして繋ぐ方法


public endpointという方法 (2023/05時点でプレビュー)


private service connectという方法 (2023/05時点でプレビュー)


の...]]></summary>
        <author>
            <name>sugasuga</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS Lambda、Python、Dockerを活用する実践的なチュートリアル]]></title>
        <id>https://zenn.dev/ovrsa/articles/4db3a7f206616b</id>
        <link href="https://zenn.dev/ovrsa/articles/4db3a7f206616b"/>
        <updated>2023-05-05T15:53:42.000Z</updated>
        <summary type="html"><![CDATA[はじめに: AWS Lambda, Python, Dockerを使用した開発の効果
近年、クラウドコンピューティングが益々普及し、アプリケーション開発においても効率的かつ柔軟な方法が求められています。その中で、AWS Lambda、Python、およびDockerは、開発者にとって非常に有用な技術として注目されています。
AWS Lambdaは、サーバーレスコンピューティングサービスであり、コードの実行とスケーリングを自動的に行います。これにより、開発者はインフラ管理の負担を軽減し、コードの開発に集中できます。
Pythonは、読みやすく、書きやすいプログラミング言語であり、多くの...]]></summary>
        <author>
            <name>ovrsa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[クラサバアプリ脳で Webアプリを学ぶ(vue + python) ４０代後半　のメモ その5 バックエンドにPythonを選んだ理由]]></title>
        <id>https://zenn.dev/okojyo21/articles/e32246f626e67b</id>
        <link href="https://zenn.dev/okojyo21/articles/e32246f626e67b"/>
        <updated>2023-05-05T15:41:49.000Z</updated>
        <summary type="html"><![CDATA[Web アプリのバックエンドに、なぜ Python を選んだのか？
アプリケーションの動作環境・開発環境を決めるのに、言語や方式の選定は重要です。
本来であれば、私自身はマイクロソフトの技術で育ってきたこともあり、C#ならびに、ASP.Net Core という組み合わせで Web アプリケーションを作成していきたいところでした。
が、社内アプリケーション開発環境において、用意された資源の中に、Windows または Linux サーバーを利用するという選択肢がなく、IBM 系のサーバーしか選択することができない状況にありました。
また、基幹システムが登録されているオフコンをインターネ...]]></summary>
        <author>
            <name>okojyo21</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[クラサバアプリ脳で Webアプリを学ぶ(vue.js + python) ４０代後半　のメモ その１]]></title>
        <id>https://zenn.dev/okojyo21/articles/19557a0118e8fc</id>
        <link href="https://zenn.dev/okojyo21/articles/19557a0118e8fc"/>
        <updated>2023-05-05T15:41:47.000Z</updated>
        <summary type="html"><![CDATA[Webアプリ開発の重要性を痛感・・
いきなりですが、何をあたりまえな！という人もいるかと思いますが、世の中には全くWebアプリケーション開発に触れずにシステム屋さんをしている人たちもいます。
しかしながら、Zennの投稿記事を見ていても、主要なキーワードは、TypeScript フロントエンド　など モバイルまたはWebアプリに関するキーワードが並んでいることを考えても、近年のアプリケーション開発において、何らかの形でWebアプリケーションに携わっている人が多いことが伺えます。
また、よくポートメッセ（住んでいるところがバレますね・・）などのIT系やメーカー企業の製品展示会（RX J...]]></summary>
        <author>
            <name>okojyo21</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[イナババ怪文書生成AIをHugging Face Spaces + Streamlitでデプロイした]]></title>
        <id>https://zenn.dev/koujimachi2023/articles/b70ddeee91f3fb</id>
        <link href="https://zenn.dev/koujimachi2023/articles/b70ddeee91f3fb"/>
        <updated>2023-05-05T14:02:56.000Z</updated>
        <summary type="html"><![CDATA[モデル公開しました
以下のサイトでモデル公開中です。
君だけのオリジナル怪文書を生成しよう！
https://huggingface.co/spaces/Oishiyo/zupposhi-maker

 Hightlights

huggingface + streamlitで自作AIアプリをデプロイ
かんたん！😁


 初めに

 今回の目的
プログラミングの成果物を公表する方法としては

GitHubに上げる
Pyinstallerなどでexeに固めて配布する
Heroku、Render、GCP、AWSなどのPaaS(またはPaaSを含むサービス)を使って公開する
などの方法があ...]]></summary>
        <author>
            <name>おいしい</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonでChatGPT APIを使って自然言語処理をする方法]]></title>
        <id>https://zenn.dev/gk12/articles/chatgpt-use-api-python</id>
        <link href="https://zenn.dev/gk12/articles/chatgpt-use-api-python"/>
        <updated>2023-05-05T12:41:41.000Z</updated>
        <summary type="html"><![CDATA[こんにちは。今回は、ChatGPTについて初心者エンジニアに向けて、PythonでChatGPT APIを使って自然言語処理をする方法について紹介します。

 はじめに
ChatGPTは、OpenAIが開発した自然言語処理の技術です。ChatGPT APIは、このChatGPTを利用したAPIであり、開発者が簡単に自然言語処理を組み込むことができます。Pythonは、ChatGPT APIを使った自然言語処理を行うために最適なプログラミング言語の1つです。この記事では、PythonでChatGPT APIを使って自然言語処理をする方法について説明します。

 ChatGPT APIの準備...]]></summary>
        <author>
            <name>gk12</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windowsでのpoetry installがSSLErrorで落ちる人へ向けて]]></title>
        <id>https://zenn.dev/mnonamer/articles/poetry-install-sslerror</id>
        <link href="https://zenn.dev/mnonamer/articles/poetry-install-sslerror"/>
        <updated>2023-05-05T10:50:04.000Z</updated>
        <summary type="html"><![CDATA[始めに
  MaxRetryError

  HTTPSConnectionPool(host='github.com', port=443): Max retries exceeded with url: /user/repo/info/refs?service=git-upload-pack (Caused by SSLError(FileNotFoundError(2, 'No such file or directory')))

  at .venv\Lib\site-packages\urllib3\util\retry.py:592 in increment
     ...]]></summary>
        <author>
            <name>名無し。</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonでデザインパターンを学ぼう (Adapter)]]></title>
        <id>https://zenn.dev/shimakaze_soft/articles/21428033c4f4b9</id>
        <link href="https://zenn.dev/shimakaze_soft/articles/21428033c4f4b9"/>
        <updated>2023-05-05T09:41:21.000Z</updated>
        <summary type="html"><![CDATA[Pythonを用いてのGoFの定義した23個のデザインパターンの一つであるAdapterパターンの実装方法について解説します。
Adapterパターンは、「構造に関するデザインパターン」に分類されます。

 Adapterパターンとは
システムを利用するクライアントは、簡単なインターフェースを通じてサブシステムと連携できるパターンです。
このパターンを使用することで、既存のクラスに対して変更を加えることなく、インターフェースを変更することができます。

 利点


既存のクラスを変更せずに新しいインターフェースと連携させることができます。これにより、コードの再利用が容易になり、保守性が向...]]></summary>
        <author>
            <name>shimakaze_soft</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonと国土地理院APIで施設名から緯度経度を一括取得してCSV出力]]></title>
        <id>https://zenn.dev/yamadamadamada/articles/3fb198003c5428</id>
        <link href="https://zenn.dev/yamadamadamada/articles/3fb198003c5428"/>
        <updated>2023-05-05T07:48:16.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Google Maps APIやLeafletなどのマップ上にマーカーを表示する際、緯度経度が必要です。
しかし、施設名から緯度経度を調べることは手間がかかるため、本記事では国土地理院APIを使ってCSVファイルから一括で緯度経度を取得する方法を紹介します。

 国土地理院APIについて

無料で施設名から緯度経度を取得できるAPI
いつ使えなくなるかわからないので注意
精度

有名施設：かなり近い位置まで緯度経度を取得できる
あまり有名ではない施設：市町村まで・取得できない



国土地理院APIは情報の誤差が許容できないサービスには向きません。
有料ですがGoogleM...]]></summary>
        <author>
            <name>やまだまだまだ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【徹底解説】Flask VS FastAPI]]></title>
        <id>https://zenn.dev/nameless_sn/articles/flask_vs_fastapi</id>
        <link href="https://zenn.dev/nameless_sn/articles/flask_vs_fastapi"/>
        <updated>2023-05-05T06:54:14.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回の記事では、PythonでWeb開発を進める際に使われるWebフレームワークである「FastAPI」と「Flask」について、両者それぞれの特徴と強みを具体的なソースコードを用いて解説する。

 この記事の対象とする読者

これからPythonでWeb開発を進めることを検討している人
APIを開発したいものの、どのような技術を使うべきが迷っている人
FlaskとFastAPI両方とも、あるいはどちらか一方に興味を持っている人
社内あるいは個人開発の技術選定で、FastAPIあるいはFlaskの導入を検討している人


 Flaskとは
FlaskはPythonで開発され...]]></summary>
        <author>
            <name>Shota Nukumizu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【ChatGPT】エンジニアの生産性を爆上げする活用術]]></title>
        <id>https://zenn.dev/ot12/articles/19ffe5d03bd1d9</id>
        <link href="https://zenn.dev/ot12/articles/19ffe5d03bd1d9"/>
        <updated>2023-05-05T05:40:40.000Z</updated>
        <summary type="html"><![CDATA[ChatGPTを使ってエンジニアの生産性を爆上げする活用術をまとめました！
今回はGPT-4を使用しています。

 コードの生成
ChatGPTにやりたいことを伝えるだけで良い感じのコードを書いてくれます。
試しに「はてなブックマークの昨日の人気記事TOP10をスクレイピングするコード」の生成をお願いしてみたところ、1分かからないくらいでサンプルコードを生成してくれました！

ちなみに、コードが長くなる場合は会話の途中で途切れてしまいますが「続けて」と言えば続きを書いてくれます。

 エラーの原因特定
上で作成してもらったコードですが、エラーが出たのでエラーの原因を特定してもらいました。...]]></summary>
        <author>
            <name>つかさ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[(初/中級者向け) Python開発ですぐに役立つTIPS10選]]></title>
        <id>https://zenn.dev/fitness_densuke/articles/python_dev_tips10</id>
        <link href="https://zenn.dev/fitness_densuke/articles/python_dev_tips10"/>
        <updated>2023-05-05T04:39:57.000Z</updated>
        <summary type="html"><![CDATA[roadmap.shのPython Developerを眺めながら、
復習がてら色々調べていたのですが、せっかくなので使えそうなモノを10個ピックアップしました！
※ 分野や紹介するTIPSの粒度が整理されてないです。筆者の思いつきで書いてますので注意を

 1.pytest実行時のimportエラーの回避策
1.1と1.2セットでやることで効果を発揮します！

 1.1 ディレクトリ構成のトップレベルで"src tests"を使い分ける
ツリー階層で表すと以下のような形です。
project
    .env
    src
        __init__.py
        mo...]]></summary>
        <author>
            <name>Tamtam</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[歩行時の加速度,角速度データから歩行軌跡を描いてみた]]></title>
        <id>https://zenn.dev/happy663/articles/1a0abc285b3a33</id>
        <link href="https://zenn.dev/happy663/articles/1a0abc285b3a33"/>
        <updated>2023-05-05T04:24:35.000Z</updated>
        <summary type="html"><![CDATA[最近センサデータを用いて屋内推定をするために勉強しており今回は加速度と角速度から歩行軌跡を描いたのでその方法を書く.言語はPythonを使用している.

 実験環境

スマートフォン(iPhoneXR)を下記画像のようなポーチに入れ腰に巻き付けた状態で行う．そのためスマホの向きは横向きで装着される．
センシング動作は9歩直進した後,左に90度回転し5歩歩くという動作を行う.
加速度，角速度の取得には複数のセンサを同時に取得できるいるアプリphyphoxを使用する．iOS,Android共に提供されている.
歩行データをわかりやすくするために開始時，終了時に約5秒の時間を空ける．
サンプリ...]]></summary>
        <author>
            <name>happy663</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[LLMと電話を組み合わせたパッケージvocodeの中身を勉強する②]]></title>
        <id>https://zenn.dev/seiyakitazume/articles/4de750326a4c5d</id>
        <link href="https://zenn.dev/seiyakitazume/articles/4de750326a4c5d"/>
        <updated>2023-05-05T02:06:59.000Z</updated>
        <summary type="html"><![CDATA[langchainについてのパートをchatGPTに解説させました。
vocode.py
import logging
import os
from langchain.agents import tool
from dotenv import load_dotenv

from vocode.streaming.models.message import BaseMessage
from call_transcript_utils import delete_transcript, get_transcript

load_dotenv()

from vocode.streaming...]]></summary>
        <author>
            <name>seiyakitazume</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[LLMと電話を組み合わせたパッケージvocodeの中身を勉強する①]]></title>
        <id>https://zenn.dev/seiyakitazume/articles/1db5339cb42269</id>
        <link href="https://zenn.dev/seiyakitazume/articles/1db5339cb42269"/>
        <updated>2023-05-05T01:50:44.000Z</updated>
        <summary type="html"><![CDATA[LLMによる電話応答ができるパッケージであるvocodeの中身を勉強したいと思ったので、気になるpyファイルの中身がどのようになっているかをchatGPTに解説させました。
chat_gpt_agent.py
from typing import Optional
import openai
from langchain.prompts import (
    ChatPromptTemplate,
    MessagesPlaceholder,
    SystemMessagePromptTemplate,
    HumanMessagePromptTemplate,
)
fr...]]></summary>
        <author>
            <name>seiyakitazume</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[2023年最新版]Pythonを案件で使うなら、とりあえず入れるべきパッケージや構成]]></title>
        <id>https://zenn.dev/tk_resilie/articles/python_my_best_project</id>
        <link href="https://zenn.dev/tk_resilie/articles/python_my_best_project"/>
        <updated>2023-05-05T00:57:25.000Z</updated>
        <summary type="html"><![CDATA[概要
チームでPythonを開発する場合に活用可能な、パッケージや構成などの開発テンプレートを紹介します。
パッケージ管理、lint, test, loggingなどの、汎用的にプロジェクトで活用可能な構成になっています。
今回説明する内容のリポジトリは以下の通りです。
https://github.com/takashi-yoneya/python-template

 想定読者
PythonやGitの基本的な使い方を理解している方を想定しているため、基本的な用語説明は省略しています。

 環境
エンジニアの利用率の高いmacOSを前提として説明していますので、その他の環境の方は随...]]></summary>
        <author>
            <name>米谷 昂(Python/FastAPIプロフェッショナル)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[NumPyro：時系列分析]]></title>
        <id>https://zenn.dev/yoshida0312/articles/8f3d81313b555b</id>
        <link href="https://zenn.dev/yoshida0312/articles/8f3d81313b555b"/>
        <updated>2023-05-04T13:12:42.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回は時系列分析を扱います。NumPyroではFor文を使用すると速度が遅くなる＆メモリを大量に使用するようになるので、時系列などの繰り返し構造がある場合は、scan関数を使用する必要があります。この記事ではscan関数と簡単な分析にとどめて紹介します。

 ライブラリのインポート
import os

import jax
import jax.numpy as jnp
from jax import random
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import s...]]></summary>
        <author>
            <name>よしだ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[超簡単！ 小学生にもできるPython環境構築。]]></title>
        <id>https://zenn.dev/satoru_output/articles/3140c1b760fb66</id>
        <link href="https://zenn.dev/satoru_output/articles/3140c1b760fb66"/>
        <updated>2023-05-04T12:40:18.000Z</updated>
        <summary type="html"><![CDATA[使用OS
Windows11

 前書き
非エンジニアの方や学生でIT業界の転職を考えて自分のパソコンで
試しに簡単なプログラミング言語を書いてみたいと
思ったことはありませんか？
今回はそういった方向けに、タイトルにある通り小学生にもできるPythonの
環境構築(※)をお伝えします。
※環境構築とは、自分のパソコンでPyhtonを使えるように設定することです。

 環境構築手順


Microsoft Storeを開く



Microsoft Storeから「Pyhton」を検索



入手をクリック



「すべてのアプリ」からインストールされたことを確認

「Pyhton(...]]></summary>
        <author>
            <name>サトル アウトプット用</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[LMQL v0.0.6.1で日本語が通るようになった]]></title>
        <id>https://zenn.dev/laiso/articles/bb4b0a720983da</id>
        <link href="https://zenn.dev/laiso/articles/bb4b0a720983da"/>
        <updated>2023-05-04T06:14:30.000Z</updated>
        <summary type="html"><![CDATA[LMQLのtokenizerで文字化けするのを修正したので自分で試してみます。
https://github.com/eth-sri/lmql/pull/39
以前に構築したnoteの記事をLlamaIndex経由で参照してクエリしてみます。
https://zenn.dev/laiso/articles/faa984a3e33e2b
LlamaIndex 0.6.0はかなりの破壊的変更が入っているのでご注意ください。
https://betterprogramming.pub/llamaindex-0-6-0-a-new-query-interface-over-your-data-3...]]></summary>
        <author>
            <name>laiso</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[再帰的に.pyファイルを探して各ファイルの最大の文字数を出力]]></title>
        <id>https://zenn.dev/shimo_s3/articles/080677429b74d6</id>
        <link href="https://zenn.dev/shimo_s3/articles/080677429b74d6"/>
        <updated>2023-05-04T06:06:39.000Z</updated>
        <summary type="html"><![CDATA[フォルダを指定して、再帰的に.pyファイルを探して各ファイルの最大の文字数を出力します
デフォルトでは80文字を超えるものだけを出力
(調査用に作りました)]]></summary>
        <author>
            <name>shimo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS管理のIPが更新された時にプレフィックスリストに登録しいているIPレンジを自動更新する]]></title>
        <id>https://zenn.dev/nnydtmg/articles/aws-managed-prefixlist-update-lambda</id>
        <link href="https://zenn.dev/nnydtmg/articles/aws-managed-prefixlist-update-lambda"/>
        <updated>2023-05-04T03:28:49.000Z</updated>
        <summary type="html"><![CDATA[はじめに
皆さんはプレフィックスリスト利用していますか？
私はAmazon WorkSpacesクライアントアプリを利用した通信で、NetworkFirewallのアウトバウンドを厳密に制限する必要がある時に初めて使いました。
（なんでこんな構成になっているかは、詳しく書けないのでご了承ください。。）
が、この「Amazon WorkSpacesクライアントアプリを利用した通信に制限」がなかなか面倒で、要件で指定されるIPレンジが不定期にAWS側で変更され、その都度設定しているプレフィックスリストを更新する必要が出てきました。
毎度手動で更新しても良いですが、数百のレンジに対して差分...]]></summary>
        <author>
            <name>nnydtmg</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【機械学習】Optunaを使って効率よくハイパーパラメータを調整しよう]]></title>
        <id>https://zenn.dev/robes/articles/d53ff6d665650f</id>
        <link href="https://zenn.dev/robes/articles/d53ff6d665650f"/>
        <updated>2023-05-04T01:14:40.000Z</updated>
        <summary type="html"><![CDATA[機械学習において、モデルのハイパーパラメータの調整は非常に大事です。
大事なんですが、手動で行うと、時間も手間もすごくかかりますよね。
ここでは、ハイパーパラメータを効率的に調整するOptunaについてご紹介するとともに、Pythonでの具体的な実装方法をご説明します。

 Optunaとは
日本のPrefferdNetworks社が開発した、ハイパーパラメータの自動最適化フレームワークです。
Optunaは、ベイズ最適化を実装することで、パラメータの探索を効率的に行うことができます。
ベイズ最適化は、確率統計の理論の一つです。
具体的には、目的関数の値を評価するために、パラメータの値を...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Run python3 with 'python' command]]></title>
        <id>https://zenn.dev/tac519/articles/84a6c73b04dde0</id>
        <link href="https://zenn.dev/tac519/articles/84a6c73b04dde0"/>
        <updated>2023-05-04T00:29:20.000Z</updated>
        <summary type="html"><![CDATA[Edit bashrc
vi ~/.bashrc

 Append it to the end of file.
'G' is the jump command to the end.
alias python="python3" 
alias pip="pip3" 
'Esc' and, ':wq!' is the save command.

 Reflect to system
source ~/.bashrc]]></summary>
        <author>
            <name>tac</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AITuberにBERTを使った感情推定を導入する]]></title>
        <id>https://zenn.dev/kanadadada/articles/5438ce7dda7474</id>
        <link href="https://zenn.dev/kanadadada/articles/5438ce7dda7474"/>
        <updated>2023-05-03T23:30:01.000Z</updated>
        <summary type="html"><![CDATA[今回書くこと
OpenAIで対話するAIの対話アシスタント（AITuber）にPythonを使った感情推定の機能を導入します。感情が扱えるようになるとモデルの表情を変えたり、発言内容を記憶する際に重み付けを変えたりできそうなので導入をしてみることにしました。
具体的にはこんな内容を記載していきます。

感情推定はテキストからBERTを使って感情のラベルとスコアを算出するものとしています。


 なぜBERT？
昨今話題の大規模言語モデルで使われるTransformersを使った新しい手法ということで、こちらを試してみることにしました。
また感情推定というとJanome・日本語評価極性...]]></summary>
        <author>
            <name>Yuchiwo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChatGPTを使ったDiscord botを作る]]></title>
        <id>https://zenn.dev/yofa/articles/0acb3090d73e44</id>
        <link href="https://zenn.dev/yofa/articles/0acb3090d73e44"/>
        <updated>2023-05-03T17:54:31.000Z</updated>
        <summary type="html"><![CDATA[背景

DiscordでChatGPTを使いたい、使ってほしい


 ゴール

DiscordでChatGPTが使えるようになっている


 手順

chatGPT-discord-botをcloneする
Discord botを作る
OpenAI API keyを作る
dockerで実行する
テスト


 chatGPT-discord-botをcloneする

https://github.com/Zero6992/chatGPT-discord-bot

git clone https://github.com/Zero6992/chatGPT-discord-bot.git
...]]></summary>
        <author>
            <name>yofa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonでgRPC通信をやってみる]]></title>
        <id>https://zenn.dev/sugasuga/articles/10e9843263f215</id>
        <link href="https://zenn.dev/sugasuga/articles/10e9843263f215"/>
        <updated>2023-05-03T16:54:26.000Z</updated>
        <summary type="html"><![CDATA[この記事について
gRPC通信に関して知識と経験がない。とりあえずpythonでやってみる。
頭の整理も兼ねて、最もシンプルなgRPC通信でhello worldを返すアプリケーションを書いてみる。
gRPCの利点・詳細・各用語などは他記事などを参考にしてください。

 流れ

(諸々の環境構築)
gRPCのAPI定義ファイルであるprotoファイルを作成
protoファイルをコンパイル
サーバー側のpythonファイルを作成
サーバーを叩くクライアント側のpythonファイルを作成
実行

諸々のコードは下記になる
.
├── Dockerfile
├── README.md
├─...]]></summary>
        <author>
            <name>sugasuga</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[NumPyro：ガウス過程]]></title>
        <id>https://zenn.dev/yoshida0312/articles/f445335b7867c4</id>
        <link href="https://zenn.dev/yoshida0312/articles/f445335b7867c4"/>
        <updated>2023-05-03T15:01:15.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回はガウス過程を扱います。
!
2023年5月現在、NumPyroはデフォルトでガウス過程のためのモジュール/ツールがなくスクラッチで訓練/予測のコードを書く必要があります。tinygpという第三者のライブラリもありますが、予測はサポートしていません。また、MCMCが速いという特徴があるNumPyroでも、ガウス過程回帰は計算が重いです。一方で、ガウス過程回帰を実施する便利なライブラリとしてGPyやGPyTorchが既にあリます。以上の理由から、個人的にはある程度データが多くなった場合、ガウス過程回帰はGPyTorch + Pyroを使用していきたいと思っています。（デー...]]></summary>
        <author>
            <name>よしだ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[MediaPipe Pose をローカルのPythonで使う[備忘録]]]></title>
        <id>https://zenn.dev/nadegata_memo/articles/6e9b569c5be845</id>
        <link href="https://zenn.dev/nadegata_memo/articles/6e9b569c5be845"/>
        <updated>2023-05-03T13:29:52.000Z</updated>
        <summary type="html"><![CDATA[はじめに
MediaPipeを用いたポーズ推定を，ローカルでPythonを用いて行う方法．
下記ページのコードを使用しています．
https://github.com/google/mediapipe/blob/master/docs/solutions/pose.md#resources
私が使用した環境やアプリケーションは以下の通りです．
・windows
・コマンドプロンプト
・python3.10.11

 0.Pythonの保存場所の確認

コマンドプロンプトを起動する．

以下，全てのコードはコマンドプロンプトにて実行します．
 
Pythonの保存場所を確認

wher...]]></summary>
        <author>
            <name>nadegata</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】地図上に位置情報（緯度・経度）をプロットする方法]]></title>
        <id>https://zenn.dev/robes/articles/755e7ee27ce308</id>
        <link href="https://zenn.dev/robes/articles/755e7ee27ce308"/>
        <updated>2023-05-03T12:13:10.000Z</updated>
        <summary type="html"><![CDATA[Pythonを使って、緯度・経度の座標情報を地図上にプロットする方法についてご紹介します。
サンプルのデータとして、githubに公開されている米国の都市データを使いますので、ここに記載のコードをコピペすることで、お手元のPCでも同じものを見ることができます。
興味を持たれた方は、ぜひ、一緒にやってみてください。
地図に位置情報をプロットできるライブラリーとして、foliumとPlotlyの2種類あります。
それぞれについて、ご紹介していきます。

 データのダウンロード
まずは、サンプルデータをダウンロードしましょう。
import pandas as pd
df =pd.read_...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-218｜B - qwerty]]></title>
        <id>https://zenn.dev/hyperdb/articles/cd0ede289c3b28</id>
        <link href="https://zenn.dev/hyperdb/articles/cd0ede289c3b28"/>
        <updated>2023-05-03T03:19:55.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-218 B - qwerty



 提出結果
def getIntList():
    return list(map(int, input().split()))


def main():
    p = getIntList()

    a = ord('a') - 1
    s = []
    for i in p:
        s.append(chr(a + i))
    print(''.join(s))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-218｜A - Weather Forecast]]></title>
        <id>https://zenn.dev/hyperdb/articles/9d2bc146c7073d</id>
        <link href="https://zenn.dev/hyperdb/articles/9d2bc146c7073d"/>
        <updated>2023-05-03T03:19:54.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-218 A - Weather Forecast



 提出結果
def getInt():
    return int(input())


def getString():
    return input()


def main():
    n = getInt()
    s = list(getString())

    print('Yes' if s[n - 1] == 'o' else 'No')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WebAppにPython(Flask)を最小構成でVScodeデプロイする]]></title>
        <id>https://zenn.dev/daphnia/articles/1aa9acfcf14c72</id>
        <link href="https://zenn.dev/daphnia/articles/1aa9acfcf14c72"/>
        <updated>2023-05-03T03:04:39.000Z</updated>
        <summary type="html"><![CDATA[App Service(Webapp)にPython（Flask）を最小構成でVScodeからデプロイします。内容は、ルートページにアクセスした際に、{"status":200}を表示するだけのFlaskとします。App Serviceの構成も基本的にデフォルトで作成します。目的はVSCodeからApp Serviceにデプロイをするということとなります。
az cliとVScodeはインストールされている前提としています。また、az loginも済みで・・。

 App Serviceの構築
まず、App Serviceを作成します。今回は簡易的にAz CLIを使用してデプロイを実行し...]]></summary>
        <author>
            <name>Daphnia</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Djangoで全テーブルのIDの採番状況をチェックする]]></title>
        <id>https://zenn.dev/yktakaha4/articles/describe_remaining_id_length_in_django</id>
        <link href="https://zenn.dev/yktakaha4/articles/describe_remaining_id_length_in_django"/>
        <updated>2023-05-02T14:33:06.000Z</updated>
        <summary type="html"><![CDATA[小ネタです🍣
DjangoのModelにデフォルトで存在するidフィールドについて、idをどの程度採番しているか簡単にチェックするためのスクリプトです
全モデルの全フィールドを走査し、AutoFieldがあったら Model.objects.latest(*fields) を出力します
https://docs.djangoproject.com/en/4.2/ref/models/querysets/#latest
本スクリプトはSQLを扱わないため、MySQLでもPostgreSQLでも同様の結果を得ることができるものと思います
しかしながら、この実装だと最新のidが削除済みの場合に...]]></summary>
        <author>
            <name>Yuuki Takahashi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FlaskからHTMLに埋め込んだUnityWebGLを操作する方法]]></title>
        <id>https://zenn.dev/make_it_happen/articles/758264e7dd8d9c</id>
        <link href="https://zenn.dev/make_it_happen/articles/758264e7dd8d9c"/>
        <updated>2023-05-02T08:09:57.000Z</updated>
        <summary type="html"><![CDATA[前置き
RaspberryPiに接続したデバイスをプログラミングの出来ない人にプレゼントすることになり、Flaskを使ってブラウザからデバイス操作できるようにしてあげました。
その際にデバイス状態が視覚的にわかるようにUnityで3Dモデルを作成とWebGLビルドを行い、RaspberryPiからのセンサーデータでUnityのモデル状態が変更するようにしました。
今回は上記を実現するために使用した技術を忘れないために備忘録的にまとめました。

 作ったもの
前置きで書いたプレゼントの品は個人情報を含むので別途サンプルを作成しました。
今回はボタンを押すとボールの転がる速度が変化するサ...]]></summary>
        <author>
            <name>Make It happen</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Anomalib with custom data setup(日本語つき)]]></title>
        <id>https://zenn.dev/manyan3/articles/c42e3651e9fe8d</id>
        <link href="https://zenn.dev/manyan3/articles/c42e3651e9fe8d"/>
        <updated>2023-05-02T08:00:42.000Z</updated>
        <summary type="html"><![CDATA[Anomalib
https://github.com/openvinotoolkit/anomalib
https://openvinotoolkit.github.io/anomalib/

Anomalib is a deep learning library that aims to collect state-of-the-art anomaly detection algorithms for benchmarking on both public and private datasets.

!

公式Gitとページです。
Anomaly detection、異常検知の...]]></summary>
        <author>
            <name>Manyan3</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-217｜B - AtCoder Quiz]]></title>
        <id>https://zenn.dev/hyperdb/articles/c337cff7ac2197</id>
        <link href="https://zenn.dev/hyperdb/articles/c337cff7ac2197"/>
        <updated>2023-05-02T07:33:38.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-217 B - AtCoder Quiz



 提出結果
def getStringRow(N):
    return [input() for _ in range(N)]


def main():
    s = getStringRow(3)
    t = ['ABC', 'ARC', 'AGC', 'AHC']

    for w in t:
        if w in s:
            continue
        print(w)
        break


if __name__ == "__main__":
 ...]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-217｜A - Lexicographic Order]]></title>
        <id>https://zenn.dev/hyperdb/articles/bd91eeff631b5f</id>
        <link href="https://zenn.dev/hyperdb/articles/bd91eeff631b5f"/>
        <updated>2023-05-02T07:33:37.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-217 A - Lexicographic Order



 提出結果
def getStringList():
    return list(input().split())


def main():
    s = getStringList()
    t = sorted(s)

    print('Yes' if s[0] == t[0] else 'No')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[RDKitで拘束を入れて構造最適化をする]]></title>
        <id>https://zenn.dev/hodakam/articles/aae7e98b512783</id>
        <link href="https://zenn.dev/hodakam/articles/aae7e98b512783"/>
        <updated>2023-05-02T05:13:55.000Z</updated>
        <summary type="html"><![CDATA[RDKitの構造最適化
前回の記事で、RDKit上で複数分子を取り扱い、移動や回転を行ってみました。ただし、ここでの分子操作はあくまでも幾何的に行ったものであり化学的に正しいとは限りません。そのため、こういった化学構造を初期構造として量子化学計算を行うとうまく収束しないことが多いです。うまく構造を収束させるために低レベル基底や汎関数での事前の最適化や分子力場による構造最適化を行います。
RDKitにも分子力場による構造最適化の機能は備わっています。しかし、よくある公式リファレンスのやり方だと構造の拘束がないので、二量体のように特定の原子間の位置関係を制御した状態で最適化することはでき...]]></summary>
        <author>
            <name>hodakam</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[LangchainとGPTを使ってニュースの自動要約プログラムを作成した]]></title>
        <id>https://zenn.dev/seiyakitazume/articles/d791a37c73b63d</id>
        <link href="https://zenn.dev/seiyakitazume/articles/d791a37c73b63d"/>
        <updated>2023-05-02T05:07:32.000Z</updated>
        <summary type="html"><![CDATA[LangchainとGPTを使用したニュースの要約しました。

 主な処理

ニュース記事のスクレイピング（prtimes）
prtimesの記事の参照元のサイトを要約し、記事を生成


 1. ニュース記事のスクレイピング crawling.py
対象：prtimes

prtimes

data/prtimes_company.csvにpratimesにおけるcompany_idを一覧で保持する
保持しているcompany_idの企業の記事は、RSSでtitle、url、intro、updated（更新日）を取得してデータベースのprtimesテーブルに保存する。




 2. 記...]]></summary>
        <author>
            <name>seiyakitazume</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで気象庁の津波情報(XML電文)をパースする]]></title>
        <id>https://zenn.dev/zekkn/articles/ed170f977b086c</id>
        <link href="https://zenn.dev/zekkn/articles/ed170f977b086c"/>
        <updated>2023-05-02T04:34:39.000Z</updated>
        <summary type="html"><![CDATA[津波情報のXMLをパースする
気象庁のサイトには気象庁防災情報XMLフォーマット形式電文が公開されていて、一般の人でも取得することができる。
ここでは気象全般の情報、地震津波火山情報なども提供されている。
そこで、Pythonを使ってXML電文をパースしてみた。

 実際のXML電文の構造
2022年1月トンガ噴火に伴う地球規模の津波発生により奄美大島、トカラ列島に津波警報が発表されたときの実際の電文が以下のサイトでアーカイブされている。
http://agora.ex.nii.ac.jp/cgi-bin/cps/report_xml.pl?id=20220115151519_0_V...]]></summary>
        <author>
            <name>zekkn</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[すぐに実行できる、最もシンプルなAjaxのサンプル]]></title>
        <id>https://zenn.dev/amemy/articles/2f90ce384cd180</id>
        <link href="https://zenn.dev/amemy/articles/2f90ce384cd180"/>
        <updated>2023-05-02T04:15:41.000Z</updated>
        <summary type="html"><![CDATA[完成イメージ：

この記事では、ブラウザのボタンを押したら、サーバー内のPythonファイルを実行し、その実行結果をブラウザに表示するプログラムを作成します。
Ajaxを使用して非同期通信を行い、画面遷移を防ぎます。
Flaskを使ってPythonのウェブアプリケーションを作成し、JavaScriptと連携させます。

 前提

pythonがインストールされていて、実行可能なことを前提としています。
windows11でテストしましたが、他のパソコンでも同様に実行できるはずです。


 準備
以下のコマンドでFlaskをインストールします。
pip install Flask
次に、以...]]></summary>
        <author>
            <name>雨宮甲念</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonでHTMLからURLを抜き出す]]></title>
        <id>https://zenn.dev/nekodamistie/articles/4910ffa201dd9a</id>
        <link href="https://zenn.dev/nekodamistie/articles/4910ffa201dd9a"/>
        <updated>2023-05-02T03:06:05.000Z</updated>
        <summary type="html"><![CDATA[HTMLコードからURLだけ抜き出したい
URLだけ抜き出したい時には正規表現を使いました。

 URLの形を把握する
URLの形は、主に以下のようなものが多い。
・http://....
・https://...
別の形式が決まっていればそちらも検討する。

 使用した正規表現
url_pattern = "https?://[\w/:%#\$&\?\(\)~\.=\+\-]+"

 解説
http  --> httpがある（から始まる）
s?  --> sは0回か1回繰り返す
://  --> ://がある
[] --> 次の文字集合
\w --&...]]></summary>
        <author>
            <name>sacat.neko</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FastAPIで学ぶPythonによるREST API開発の基本]]></title>
        <id>https://zenn.dev/nameless_sn/articles/fastapi_tutorial_for_rest</id>
        <link href="https://zenn.dev/nameless_sn/articles/fastapi_tutorial_for_rest"/>
        <updated>2023-05-02T02:44:46.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回の記事では、FastAPIでREST APIを開発する手順を簡潔に解説する。

 本記事の対象読者

Pythonの基本文法(データ型、条件分岐、繰り返し)を理解している人
RailsやLaravel等のWebフレームワークで簡単なWebアプリケーションを開発できる人
FastAPIで簡潔にREST APIを開発したい人


 用語解説

 FastAPI
FastAPIの公式ドキュメントによると、以下のように説明されている。

FastAPI is a modern, fast (high-performance), web framework for buildin...]]></summary>
        <author>
            <name>Shota Nukumizu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Azure Functionsを vscodeからデプロイする(python,langchain)]]></title>
        <id>https://zenn.dev/hiroshimraz/articles/b65d3d06eebb95</id>
        <link href="https://zenn.dev/hiroshimraz/articles/b65d3d06eebb95"/>
        <updated>2023-05-01T22:15:53.000Z</updated>
        <summary type="html"><![CDATA[Azure Functionsのvscodeデプロイ(python,langchain)
azure funcitonsをvscode拡張でセットアップしてみるだけ
pythonを実行して、langchainもいれておいてみる
完成品プロジェクトはこちら
https://github.com/piroz/my-azure-langchain

 使用したもの
1.Azureのアカウント
2.vscode拡張
https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurefunctions

...]]></summary>
        <author>
            <name>hiroshiMraz</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[サイゼリヤの間違い探しをワンパンで倒す]]></title>
        <id>https://zenn.dev/yofa/articles/f2c4bd6ceba0e4</id>
        <link href="https://zenn.dev/yofa/articles/f2c4bd6ceba0e4"/>
        <updated>2023-05-01T17:25:46.000Z</updated>
        <summary type="html"><![CDATA[背景

サイゼリヤのキッズメニューの表紙には間違い探しが描かれている
間違い探しの難易度は非常に高く、全て見つけるのに数時間かかることもある


 ゴール

サイゼリヤの間違い探しをワンパンで倒す


 手順


サイゼリヤ公式HPから間違い探しを開いて、画像を保存する

Spot the difference in saizeriyaを使う

画像を左右2枚に分割する
分割した2枚の画像の差分を出力する




 参考

https://note.nkmk.me/python-opencv-numpy-image-difference/]]></summary>
        <author>
            <name>yofa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[NumPyro：各分布に関してまとめ]]></title>
        <id>https://zenn.dev/yoshida0312/articles/22ac86f3d8712e</id>
        <link href="https://zenn.dev/yoshida0312/articles/22ac86f3d8712e"/>
        <updated>2023-05-01T15:02:06.000Z</updated>
        <summary type="html"><![CDATA[連載している記事の１つです。以前までの記事を読んでいる前提で書いているので、必要であればNumPyroの記事一覧から各記事を参考にしてください。

 はじめに
ベイズを扱う際に避けて通れないのが、数多くある確率分布です。今回はこれまで扱ってきた分布をまとめていきます。

 分布
分布の形状を可視化するための準備を行います。
from jax import random
from jax import numpy as jnp
import numpyro.distributions as dist
import seaborn as sns
import matplotlib.pyplo...]]></summary>
        <author>
            <name>よしだ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[reactjs+Flaskでwebsocket通信]]></title>
        <id>https://zenn.dev/daphnia/articles/4a42bab05bd7b4</id>
        <link href="https://zenn.dev/daphnia/articles/4a42bab05bd7b4"/>
        <updated>2023-05-01T14:12:53.000Z</updated>
        <summary type="html"><![CDATA[フロントエンド(ReactJS)とバックエンド(Flask)をそれぞれ構築し、Websocket通信してみます。
フロントエンドから何か送信したらその送信した文字列に文字を追加してフロントエンドに送信し、画面に描画するアプリを構築します。つまり、フロントエンドからのリクエストをトリガーとしてバックエンドではフロントエンドに文字列を送信します。

 ディレクトリ
.
├─ be
    ├─ app.py
    ├─ requirements.txt
    └─ socket_manager.py
├─ fe
    ├─ App.js
    ├─ ...
    ├─ socket...]]></summary>
        <author>
            <name>Daphnia</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【CloudVisonAPI】シフト表からカレンダーに予定を入れる作業を自動化したい【Python】]]></title>
        <id>https://zenn.dev/ryosuke_horie/articles/ebb84b6974e991</id>
        <link href="https://zenn.dev/ryosuke_horie/articles/ebb84b6974e991"/>
        <updated>2023-05-01T13:55:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
使い物にはならなかったのですが、学びにはつながったので共有します。
主に、GoogleCloudVisonAPIに対する知見の共有となります。

 目次

#1 作ろうとしたアプリケーションについて
#2 実装した機能
#3 問題点（あきらめた理由）
#4 開発環境
#5 知見の共有
#6 今後の修正案
#7 最後に


 #1 作ろうとしたアプリケーションについて
1ヶ月のシフト表がカレンダー形式のPDFで共有されています。このカレンダーは1日毎に区切られていて、他の人のシフトも記載されているものです。
PDFだと自分のカレンダーに取り込むことができないので、画像認識を利...]]></summary>
        <author>
            <name>ryo-tech</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-216｜A - Signed Difficulty]]></title>
        <id>https://zenn.dev/hyperdb/articles/53b82847da2f07</id>
        <link href="https://zenn.dev/hyperdb/articles/53b82847da2f07"/>
        <updated>2023-05-01T04:16:36.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-126 A - Signed Difficulty



 提出結果
def getString():
    return input()


def main():
    x, y = getString().split('.')

    print('%s%s' % (x, '-' if y <= '2' else '+' if y >= '7' else ''))


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[［AtCoder］ABC-216｜B - Same Name]]></title>
        <id>https://zenn.dev/hyperdb/articles/1c4e3d3b581456</id>
        <link href="https://zenn.dev/hyperdb/articles/1c4e3d3b581456"/>
        <updated>2023-05-01T04:16:36.000Z</updated>
        <summary type="html"><![CDATA[設問ページ

🔗ABC-216 B - Same Name



 提出結果
def getInt():
    return int(input())


def getStringRow(N):
    return [input() for _ in range(N)]


def main():
    n = getInt()
    st = getStringRow(n)

    print('Yes' if len(set(st)) < n else 'No')


if __name__ == "__main__":
    main()]]></summary>
        <author>
            <name>はいぱぁ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChatGPT+DALL・Eで画像付きスライドを自動作成する]]></title>
        <id>https://zenn.dev/yuarth/articles/64c922e4abd84f</id>
        <link href="https://zenn.dev/yuarth/articles/64c922e4abd84f"/>
        <updated>2023-05-01T03:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事は、前回作成したものをベースに、各スライドに画像を挿入するためのプロンプトを追加＋スライドの内容をベースにDALL・Eで画像を生成する機能を追加したものです。

 必要なもの

OpenAIのAPIキー
３ヶ月で失効する$18の無料枠があります。（以降は従量課金製）
ChatGPTとDALL・EのAPIリクエストに使用します
APIの料金については以下参照

https://openai.com/pricing

Pythonのライブラリ

openai
unstructured
selenium




 実装

 テキストデータの読み込み
今回はWikipedi...]]></summary>
        <author>
            <name>yuarth</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OAuth 1.0a, OAuth 2.0 で Twitter 連携して Twitter API v2 を使う実装サンプル (Python)]]></title>
        <id>https://zenn.dev/chanmoro/articles/1552c120ec8f37</id>
        <link href="https://zenn.dev/chanmoro/articles/1552c120ec8f37"/>
        <updated>2023-05-01T02:22:56.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今年の2月頃に Twitter API に関する無料プランの廃止がアナウンスがされました。そして最近では色々なサービスで Twitter でのログインやアカウント連携に関わる機能が利用できなくなる事象が多発しているようです。
Twitter API を使っているアプリケーションの開発に関わられている方はいまいち状況が掴めずあわあわしていると思われます。安心してください、僕もその1人です。

今の時点で公式から発表されているのは Standard (v1.1), Essential (v2), Elevated (v2), Premium などのプランが廃止され、今後は新たな...]]></summary>
        <author>
            <name>Chanmoro</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VSCodeでSphinxドキュメント作成環境を整える]]></title>
        <id>https://zenn.dev/yamatonokuni/articles/33b9a917caf40c</id>
        <link href="https://zenn.dev/yamatonokuni/articles/33b9a917caf40c"/>
        <updated>2023-04-30T18:34:52.000Z</updated>
        <summary type="html"><![CDATA[はじめに
SphinxというPython製のドキュメント作成ツールがあります。テキストベースで記述したファイルをHTMLやPDFに変換することができて便利なのですが、変換にはビルドを伴うので、少し面倒です。
そこで、VSCodeに拡張機能を入れてライブプレビューをしながら記述できる環境を整えたので、その方法をメモしておこうと思います。
ちなみに、Pythonの公式ドキュメントや、Linux KernelのドキュメントなどがSphinxで作成されています。その外にもOSS（特にPython関連）のドキュメントはSphinxで作成されているものが多いです。こちらに採用例が載っていました。...]]></summary>
        <author>
            <name>たろう</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【まとめ】プログラマのツール【100選】]]></title>
        <id>https://zenn.dev/amifima/articles/2afd82ae92038a</id>
        <link href="https://zenn.dev/amifima/articles/2afd82ae92038a"/>
        <updated>2023-04-30T15:00:01.000Z</updated>
        <summary type="html"><![CDATA[エディタ

 vim
自分はVimmerなんで、Vimを推しておきます。Vimがあれば大抵の事が出来ると思ってます。
が、Vimは習得に時間がかかるという難点があります。
エディタプラグイン

neocomplcache.vim
quickrun.vim
vimproc + quickrun
unite.vim


 MacVim

 Emacs
VIM, Emacs は別格って感じですね・・・
エディタプラグイン

anything.el


 CocoaEmacs

 Mou
Markdownを書くためのエディタ。

http://mouapp.com/
 リアルタイムプレビュー...]]></summary>
        <author>
            <name>あみふぃま</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google Colabでpyopenjtalkがインストールできない]]></title>
        <id>https://zenn.dev/tukiakaritabane/articles/google-colab-pyopenjtalk-error</id>
        <link href="https://zenn.dev/tukiakaritabane/articles/google-colab-pyopenjtalk-error"/>
        <updated>2023-04-30T13:21:34.000Z</updated>
        <summary type="html"><![CDATA[pyopenjtalkのpip installでエラー

セル
!pip install pyopenjtalk

Google Colabでpyopenjtalkのpip installが失敗する。
pyopenjtalkは、PythonからOpenJtalkが使用できるライブラリである。
hts_engine_API、open_jtalkというC/C++のライブラリを参照していて、pip installの際、この２つのライブラリのビルドに失敗している。

出力
Looking in indexes: https://pypi.org/simple, https://us-pyth...]]></summary>
        <author>
            <name>月明たばね</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Flaskでwebsocketを試してみる]]></title>
        <id>https://zenn.dev/daphnia/articles/4d0574f75bbede</id>
        <link href="https://zenn.dev/daphnia/articles/4d0574f75bbede"/>
        <updated>2023-04-30T11:40:01.000Z</updated>
        <summary type="html"><![CDATA[FlaskでWebsocketを構築してみる。目的はPythonでWebsocketを使用してみるということで、サーバーサイドで完結する構成で組んでみます。

 完成


 環境

 ライブラリ

flask
flask_socketio


 構築

 まずはFlaskでHello World
venv 環境を使用して、簡単に構築します。


app.pyファイル作成

from flask import Flask, render_template

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'

@app.ge...]]></summary>
        <author>
            <name>Daphnia</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[因果推論100本ノック(4)RDD（回帰不連続デザイン）]]></title>
        <id>https://zenn.dev/s1ok69oo/articles/fb86aeacfba310</id>
        <link href="https://zenn.dev/s1ok69oo/articles/fb86aeacfba310"/>
        <updated>2023-04-30T10:48:48.000Z</updated>
        <summary type="html"><![CDATA[はじめに
因果推論100ノック（自作）31本目~40本目の問題とPythonのサンプルコードです．
RDDに関する問題です．問題の不備や内容の誤り等ありましたら，ご指摘いただけますと幸いです．

 設定
コンビニアプリでクーポンを配布するケースを考えます．
過去の購買が多いほどアプリ内の累計ポイントが高いとし，累計ポイントが100以上のユーザーにクーポンを配布した結果，クーポン配布期間のユーザーの売上がどれほど増加したかという効果を推定します．
利用するデータは，下記のファイルです．
https://github.com/s1ok69oo/causal_inference_100kn...]]></summary>
        <author>
            <name>Shingo Uto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[chatGPTを使って、文章からSQLを生成する方法を試しました]]></title>
        <id>https://zenn.dev/seiyakitazume/articles/7c0714539ded87</id>
        <link href="https://zenn.dev/seiyakitazume/articles/7c0714539ded87"/>
        <updated>2023-04-30T09:14:10.000Z</updated>
        <summary type="html"><![CDATA[株式会社piponではこのような病院検索のサイトを提供しています。
厚生労働省のデータをグラフ化して、病院ごとの症例数をグラフ化しています。
https://hospital-search.net/index.html
このサイトを作った理由としては、こんなエピソードを聞いたからです。
ある方が、舌がんになり、自分の出身大学の附属病院へ行きました。
しかし、その附属病院には、舌がんの症例数が少なく最適な治療をするまでに時間を要してしまいました。
結果的にその方は亡くなってしまいました。もし、最適な治療を最初から受けられたら結果はどうなっていたか・・・どうしても考えてしまいます。
しかし、...]]></summary>
        <author>
            <name>seiyakitazume</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonでQPS上限を指定して画像をダウンロードする]]></title>
        <id>https://zenn.dev/yagiyuki/articles/download_img_python</id>
        <link href="https://zenn.dev/yagiyuki/articles/download_img_python"/>
        <updated>2023-04-30T03:35:07.000Z</updated>
        <summary type="html"><![CDATA[Pythonで指定QPS範囲で画像をダウンロードするプログラムを書きました。
QPSはQueries Per Secondのことです。
今回の場合、1秒間にダウンロードする画像件数のことを指します。
たとえば、10QPSならば1秒間に10枚の画像をダウンロードするという意味になります。
クロール先のサイトの負荷を軽減するためにQPS上限を指定することは重要です。
以下がコード例となります。
import os
import time
import requests

def download_image(url, save_path):
    try:
        response...]]></summary>
        <author>
            <name>yagiyuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Twitter APIの無償枠をtweepyからなんとか使う]]></title>
        <id>https://zenn.dev/yj_szk/articles/c049bad009550f</id>
        <link href="https://zenn.dev/yj_szk/articles/c049bad009550f"/>
        <updated>2023-04-30T03:31:56.000Z</updated>
        <summary type="html"><![CDATA[何が変わったのか


これしかできなくなった

1日50投稿(メディア含む)
1日50ツイ消し
1日自分のツイートに対しての取得25回




検索とか色々全滅した
インスタとか顔本は投稿用のAPIないし今までのTwitterが異常だったのかもしれない

 ただツイートするだけの方法

 準備
pip install tweepy==4.14.0

 認証
設定ファイル

hoge.ini
[hoge]
consumer_key = 
consumer_secret = 
access_key = 
access_secret = 
bearer_token = 

ツイート用のv2...]]></summary>
        <author>
            <name>モケケ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[野獣先輩は抗うつ剤となりうるか。（電気羊はアンドロイドの夢を見るか）]]></title>
        <id>https://zenn.dev/kaedeee/articles/bf3573cf96f8ba</id>
        <link href="https://zenn.dev/kaedeee/articles/bf3573cf96f8ba"/>
        <updated>2023-04-30T01:45:37.000Z</updated>
        <summary type="html"><![CDATA[エピローグ
「やりますねぇ！」
初めて彼の声を聞いたのは、大学一年の夏休み。別大学に進学した、高校の親友の家だった。
小綺麗な家の中で響き渡る、「イキスギィ！！」僕にとっては、何が「行き過ぎ」ているのかさっぱりだったし、久しぶりに会った友人の代わり様に、驚くばかりだった。
そんな無垢なワイであったが、変化というものは恐ろしい。なんと現在は、迫真クリエイターとして野獣先輩シリーズを筆頭に数々の大人気アプリ（これもうわかんねぇな）を手がけているのだ。
ほら、見ろよ見ろよ👇
🍎 AppStore
https://bit.ly/kaedapple
🍏 GooglePlay
https://b...]]></summary>
        <author>
            <name>Kaede Games</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonでのデータ読み込みメモ]]></title>
        <id>https://zenn.dev/nicktominaga/articles/read_txt_python</id>
        <link href="https://zenn.dev/nicktominaga/articles/read_txt_python"/>
        <updated>2023-04-29T15:42:19.000Z</updated>
        <summary type="html"><![CDATA[シンプルに、以下のような時系列データを



time[s]
data




1
5


2
4


3
3


4
4


5
5



以下のようなスペース区切りのテキストファイルで扱うとする。
 1  5  
 2  4 
 3  3 
 4  4 
 5  5

コードは以下
import numpy as np

data = np.genfromtxt("sample.txt")

data_x = data[:,0]
data_y = data[:,1]
data[:,0]の意味は、行全体（左側の：）に沿って、0列目を取ってくる
という意味。]]></summary>
        <author>
            <name>Nick</name>
        </author>
    </entry>
</feed>