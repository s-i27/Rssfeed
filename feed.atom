<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://s-i27.github.io/Rssfeed/index.html</id>
    <title>osmos::feed</title>
    <updated>2024-03-04T01:13:20.470Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="https://s-i27.github.io/Rssfeed/index.html"/>
    <link rel="self" href="https://s-i27.github.io/Rssfeed/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[PyCloneの紹介と使い方]]></title>
        <id>https://zenn.dev/naoki0103/articles/introducing-pyclone</id>
        <link href="https://zenn.dev/naoki0103/articles/introducing-pyclone"/>
        <updated>2024-03-03T18:00:38.000Z</updated>
        <summary type="html"><![CDATA[はじめに
PyCloneは、my-python-templateを効率的に利用するために私が作成したコマンドラインユーティリティです。このツールを使用すると、プロジェクトのクローン、セットアップ、GitHubへの初期バージョンのコミットを素早く行うことができます。my-python-templateに関するZennの記事はこちらをご覧ください。

 セットアップ
PyCloneを使用するためには、まずpyclone関数をシェルの設定ファイルにコピーする必要があります。Bashユーザーの場合は.bashrc、ZSHユーザーの場合は.zshrcとなります。
関数の宣言は以下のようになりま...]]></summary>
        <author>
            <name>Naoki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonプロジェクトのためのテンプレート: my-python-templateの紹介]]></title>
        <id>https://zenn.dev/naoki0103/articles/my-python-template</id>
        <link href="https://zenn.dev/naoki0103/articles/my-python-template"/>
        <updated>2024-03-03T17:50:02.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Pythonプロジェクトを始める際には、プロジェクトの構造や依存関係の管理、コードの品質を保つためのツールなど、設定すべき項目が多くあります。そこで今回は、これらの設定を一元化したPythonプロジェクトのテンプレート、my-python-templateを作成しました。こちらについて今回は紹介いたします。

 my-python-templateの内容
このテンプレートには以下のファイルとフォルダが含まれています。


pyproject.toml: プロジェクトの設定と依存関係を管理するためのファイルです。

.pre-commit-config.yaml: pre-c...]]></summary>
        <author>
            <name>Naoki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Docker]Flaskのサーバーにローカル接続できないとき]]></title>
        <id>https://zenn.dev/kotopasi/articles/9165dd128d9b0c</id>
        <link href="https://zenn.dev/kotopasi/articles/9165dd128d9b0c"/>
        <updated>2024-03-03T12:17:07.000Z</updated>
        <summary type="html"><![CDATA[はじめに
ネットワーク周りの理解が浅いなぁ…と実感しました

 動作環境

Docker 24.0.7

Pythonイメージ python:3.9-slim

Flask 2.3.3



 手順
以下のPythonコードを実行したいとき
from flask import Flask

app=Flask(__app__)

@app.route('/')
def hello():
	return ("<p>hello, world!<p>")
docker-compose.yml
version: '3'

services:
  server:
   ...]]></summary>
        <author>
            <name>あまたつ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Python].envから環境変数を読み込む]]></title>
        <id>https://zenn.dev/kotopasi/articles/174bde362d0267</id>
        <link href="https://zenn.dev/kotopasi/articles/174bde362d0267"/>
        <updated>2024-03-03T12:17:07.000Z</updated>
        <summary type="html"><![CDATA[はじめに
.envファイルに設定した環境変数を読み込むときの備忘録です

 動作環境

Docker 24.0.7

Pythonイメージ python:3.9-slim

Flask 2.3.3



 手順

ルートディレクトリに.envファイルを作成する

requirements.txtにpython-dotenvを追加してモジュールをインストール

OPENAI_API_KEY="XXXXXXX"

読み込みたいファイルで以下を書く

from dotenv import load_dotenv
import os

load_dotenv()

OPENAI_KEY=os...]]></summary>
        <author>
            <name>あまたつ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[KaggleのNLPコンペで初手に使える可視化 〜BERTopicを用いた文書クラスタリングと可視化〜]]></title>
        <id>https://zenn.dev/nishimoto/articles/74fddcb5c67960</id>
        <link href="https://zenn.dev/nishimoto/articles/74fddcb5c67960"/>
        <updated>2024-03-03T10:29:37.000Z</updated>
        <summary type="html"><![CDATA[BERTopic は、Transformersを用いて文書のトピックモデリングを行うためのPythonライブラリです。本記事では、自分がKaggleコンペの初手EDAによく使うコードをまとめました。


 入出力のイメージ
入力： 文章のリスト
（例：["I am sure some bashers of Pens fans ...", "My brother is in the market for a high-performance video card that supports VESA local bus with 1-2MB RAM.  Does anyone hav......]]></summary>
        <author>
            <name>nishimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[prefect の work-pool / worker について理解する]]></title>
        <id>https://zenn.dev/massu_devix/articles/905d6172687f5e</id>
        <link href="https://zenn.dev/massu_devix/articles/905d6172687f5e"/>
        <updated>2024-03-03T09:27:46.000Z</updated>
        <summary type="html"><![CDATA[はじめに
prefect の構成要素のうち、work-pool / worker について理解します。

 work-pool
work-pool は、prefect の work flow を適切なインフラにデプロイするための架け橋となるコンポーネントです。work-pool には様々なタイプを指定できますが、例えば docker のタイプを持つ work-pool を作成した場合、その work-pool から実行された work flow は後述する worker を通して docker コンテナのインフラで起動することになります。
他にも、単一のプロセスとして work fl...]]></summary>
        <author>
            <name>mas_dx</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python でpip installができない 　command not found: pip]]></title>
        <id>https://zenn.dev/shimouta/articles/c81de05cafe6d2</id>
        <link href="https://zenn.dev/shimouta/articles/c81de05cafe6d2"/>
        <updated>2024-03-03T07:52:16.000Z</updated>
        <summary type="html"><![CDATA[「ChatGPTAPI×Pythonで始める対話型AI実践入門」でOpenAIのAPIを用いた実装の学習をしています。
OpenAIのライブラリをインストールするときの備忘録です。
https://book.impress.co.jp/books/1123101013

 やりたいこと
OpenAIのライブラリをインストールしたい。

 環境

チップ：M1
OS：Ventura　13.2.1

python3は公式サイトからインストール済みです。
% python3 --version
Python 3.12.2

 pip install openai を実行できない
python3...]]></summary>
        <author>
            <name>Sho</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【型アノテーション】Pythonの矢印は何者か]]></title>
        <id>https://zenn.dev/nii/articles/what-is-python-annotations</id>
        <link href="https://zenn.dev/nii/articles/what-is-python-annotations"/>
        <updated>2024-03-03T00:17:44.000Z</updated>
        <summary type="html"><![CDATA[この記事は何
Pythonのコードを読んでいたら急に矢印(->)が現れてびっくりした人向けの記事です。
備忘録でもあります。

 TL;DR
Pythonでの -> 表記は型アノテーションを表しています。
変数や関数の引数や戻り値の型のヒントを定義できます。
型を定義するのではなくあくまで型のヒントを記述しているだけ、というところがポイントです。
これに違反していても実行時にエラーにならないことに注意してください。

 実際に触ってみる
2つの値を足すだけの簡単な関数を定義してみましょう。
def Addition(x, y):
    return x + y
これらを...]]></summary>
        <author>
            <name>nii</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【2024年3月】エンジニアなら読むべき技術書TOP5]]></title>
        <id>https://zenn.dev/yottabyte/articles/c91b2b16820467</id>
        <link href="https://zenn.dev/yottabyte/articles/c91b2b16820467"/>
        <updated>2024-03-02T11:00:00.000Z</updated>
        <summary type="html"><![CDATA[情報セキュリティの敗北史


相次ぐ個人情報の大規模漏洩、米・中・露による国家主導のハッキング、企業・病院を標的にして猛威を振るうランサムウェア…
IT社会が急速な発展を続ける一方で、私たちの「情報」を取り巻く状況は日に日に悪化している。
数々のセキュリティ対策が打ち出されているにもかかわらず、サイバー攻撃による被害は増え続けている。
今日の情報セキュリティが抱える致命的な〈脆弱性〉は、どこから来たのか?
コンピュータの誕生前夜から現代のハッキング戦争まで、半世紀以上にわたるサイバー空間の攻防を描いた、情報セキュリティ史の決定版。
【Cybersecurity Canon Hall ...]]></summary>
        <author>
            <name>Raio｜高校生エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[NuShellでPythonのvenvを使用する方法]]></title>
        <id>https://zenn.dev/akazdayo/articles/d9ecfe5baec5af</id>
        <link href="https://zenn.dev/akazdayo/articles/d9ecfe5baec5af"/>
        <updated>2024-03-02T09:49:20.000Z</updated>
        <summary type="html"><![CDATA[はじめに
少し前に、PowerShellから、NuShellに移行してからPythonのvenvがうまく使えなかったのでメモ的な感じでここに書いておきます。
何か間違っていたり、うまくできない場合はお手数ですが、編集リクエストまたは、コメントをいただけると幸いです。

 事前インストールが必要なもの
> pip install virtualenv

 使用方法
> python -m virtualenv venv
> overlay use 作った環境のパス/activate.nu

 参考
https://github.com/nushell/nushell/...]]></summary>
        <author>
            <name>akazdayo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【GitHub Copilot】実践ガイド：図解と例で学ぶ使い方とコード品質向上のポイント]]></title>
        <id>https://zenn.dev/safubuki/articles/turtle-20240223-gitcopilot</id>
        <link href="https://zenn.dev/safubuki/articles/turtle-20240223-gitcopilot"/>
        <updated>2024-03-02T08:16:58.000Z</updated>
        <summary type="html"><![CDATA[AIがコードを書いてくれる画期的なツール、GitHub Copilotをご存知ですか？
私は2024年1月から使い始めましたが、驚くほど便利です。GitHub Copilotは、自然言語による指示やコードの一部を入力するだけで、目的のコードを生成してくれます。そして、エディタ上で、すぐに反映できるので、開発をとてもスムーズに行うことができます。
私は、GitHub Copilotのおかげで、小規模ながらも個人のOSS(オープンソースソフトウェア)開発にチャレンジすることができました。効率よく開発ができたのは言うまでもありませんが、Copilotが提案するコードから多くのことを学びました。...]]></summary>
        <author>
            <name>タートルヴィレッジ・ゆう</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[1日で雰囲気を掴む！Pythonの基礎のキ]]></title>
        <id>https://zenn.dev/takusys/books/2bf634d271939d</id>
        <link href="https://zenn.dev/takusys/books/2bf634d271939d"/>
        <updated>2024-03-02T07:52:35.000Z</updated>
        <summary type="html"><![CDATA[急にPythonが必要になった！　そんなあなたに贈る本です。
必須レベルのPython記法を重点的に取り上げています。]]></summary>
        <author>
            <name>たく。</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[open_jtalkを使って発声したい]]></title>
        <id>https://zenn.dev/abekobo/articles/86e44c3ed96450</id>
        <link href="https://zenn.dev/abekobo/articles/86e44c3ed96450"/>
        <updated>2024-03-02T07:46:09.000Z</updated>
        <summary type="html"><![CDATA[背景
さっくと音声合成をしていきたいがpyttsx3を試したところ、自分の環境だと日本語に対応した発声ができないことが分かったのでopen-jtalkコマンドを使って発声をしていく
エンジンリスト確認ソース
```
    import pyttsx3

    engine = pyttsx3.init()
　　voicelist = engine.getProperty('voices')
    for voice in voicelist:
        print(f'voice: {voice.name}')
        print(f'id: {voice.id}...]]></summary>
        <author>
            <name>阿部工房</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Power BIでのデータ取得にPythonスクリプトを使用する方法]]></title>
        <id>https://zenn.dev/headwaters/articles/29de94ce24c7ca</id>
        <link href="https://zenn.dev/headwaters/articles/29de94ce24c7ca"/>
        <updated>2024-03-02T05:21:13.000Z</updated>
        <summary type="html"><![CDATA[やりたいこと
Power BIでデータの取得にPythonを使いたいです。
AzureのBlobやSQL DB、SharePointやローカルのCSV、Excelファイルなど色々な取得方法がありますが、公開されているAPIを直接叩いて取得したいため、Pythonを使ってデータを取得できないか調べてみました。

 事前準備
Power BIでPythonスクリプトを使うためにはローカルのPythonと紐づける必要があります。
Power BI Desktopを開いて、左上の「ファイル」を選択


左下の「オプションと設定」を選択


「オプション」を選択


左のメニュー一覧から「Py...]]></summary>
        <author>
            <name>ikebowsan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VSCode × Docker × Python環境でタイプヒントを使う方法]]></title>
        <id>https://zenn.dev/yanoken101/articles/46207fd28786ad</id>
        <link href="https://zenn.dev/yanoken101/articles/46207fd28786ad"/>
        <updated>2024-03-02T03:34:03.000Z</updated>
        <summary type="html"><![CDATA[背景
Docker上でPythonアプリを開発する場合、タイプヒントの拡張機能の参照先がローカル環境なので、「インポート "fastapi" を解決できませんでした」みたいなエラー警告がでてタイプヒントが使えない。

この問題を解決する手順を紹介します。

 手順

VSCode拡張機能の[Dev Container]をインストール
Dev Containerでdockerコンテナに接続
dockerコンテナ内でAppフォルダを開く
接続したdockerコンテナ内でpythonをインストール


 参照：
https://it-dxblog.com/vscode-python-doc...]]></summary>
        <author>
            <name>やのけん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonでLINEに通知を送る]]></title>
        <id>https://zenn.dev/joho0724/articles/sankaku0724-newcreate4</id>
        <link href="https://zenn.dev/joho0724/articles/sankaku0724-newcreate4"/>
        <updated>2024-03-02T03:27:55.000Z</updated>
        <summary type="html"><![CDATA[はじめに
今回はPythonでLINEに通知を送る方法について記事を書いてみました。
少しでも参考になれば幸いです。

 LINE Notifyのアクセストークンの発行
今回はLINEが提供している公式アカウントであるLINE Notifyを利用します。
LINE Notifyは、LINEと外部のサービスやアプリを連携して通知を受け取ることができるサービスです。
無料で使用できるため、活用までのハードルが低いのも特徴です。
以下のリンクからLINE Notifyのサイトにアクセスすることができます。
https://notify-bot.line.me/ja/
LINEアカウントでロ...]]></summary>
        <author>
            <name>さんかく</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tensorflowしたかっただけなのに、SSL:CERTIFICATE_VERIFY_FAILEDで詰んだ]]></title>
        <id>https://zenn.dev/mi0256/articles/tensorflow_ssl</id>
        <link href="https://zenn.dev/mi0256/articles/tensorflow_ssl"/>
        <updated>2024-03-02T02:36:45.000Z</updated>
        <summary type="html"><![CDATA[Python3環境で以下のエラーが出て、久々に詰まりまくったので備忘録。
Exception: URL fetch failure on https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz: None -- [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:1007)
動作環境
PC : M1 MacBook Pro (Apple M1)
python
- python3.12
- python3.11
- pytho...]]></summary>
        <author>
            <name>mio256</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ゼロから始めるStableDiffusion生活]]></title>
        <id>https://zenn.dev/mi0256/books/stable-diffusion-life</id>
        <link href="https://zenn.dev/mi0256/books/stable-diffusion-life"/>
        <updated>2024-03-02T02:36:45.000Z</updated>
        <summary type="html"><![CDATA[巷にはGoogleColabを用いた方法や難解過ぎる画像生成系AIの解説などが多く、ローカル環境で心地よいStableDiffusionの解説記事がなかったため自身のアウトプットがてら本にまとめます。]]></summary>
        <author>
            <name>mio256</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenAI Python SDK v1.0がめちゃくちゃ使いやすくなってた]]></title>
        <id>https://zenn.dev/yosemat/articles/da8a633d93bbaf</id>
        <link href="https://zenn.dev/yosemat/articles/da8a633d93bbaf"/>
        <updated>2024-03-01T14:35:09.000Z</updated>
        <summary type="html"><![CDATA[ハイライト

インスタンス化されたクライアントの利用を推奨するようになった
Async/Azure専用のクライアントが追加された
レスポンス（出力）がPydantic Modelになった
リクエストパラメータ（入力）がTypedDictになった


 インスタンス化されたクライアントの利用を推奨するようになった
これまではopenaiモジュールに定義されていたopenai.ChatCompletion.create関数をよんでいたところがインスタンス化されたOpenAIオブジェクトのchat.completions.createメソッドを呼ぶ仕様になりました。
これまで
import...]]></summary>
        <author>
            <name>Yosemat</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【pyinstaller】tesseract-ocrを同封して、１つのexeファイルを作成する方法]]></title>
        <id>https://zenn.dev/yk5322/articles/017aa5f5e2c825</id>
        <link href="https://zenn.dev/yk5322/articles/017aa5f5e2c825"/>
        <updated>2024-03-01T13:16:07.000Z</updated>
        <summary type="html"><![CDATA[概要
tesseractで文字認識するpythonプログラムを１つのexeファイル化する際につまづいたので、
その解決方法について紹介します。

 先に結論！
pyinstaller実行後に作成されるspecファイルに、下記記述を追加します。
specファイルで再度pyinstaller実行すれば、Tesseractを含んだexeファイルが作成できます。

main.spec
binaries=[(r'C:\Program Files\Tesseract-OCR', r'tesseract')],
datas=[(r'C:\Program Files\Tesseract-OCR\te...]]></summary>
        <author>
            <name>yosuke</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Amazonエンジニアが選ぶ技術書35選まとめ]]></title>
        <id>https://zenn.dev/yottabyte/articles/5724d108de02ad</id>
        <link href="https://zenn.dev/yottabyte/articles/5724d108de02ad"/>
        <updated>2024-03-01T11:00:00.000Z</updated>
        <summary type="html"><![CDATA[リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック


「美しいコードを見ると感動する。優れたコードは見た瞬間に何をしているかが伝わってくる。そういうコードは使うのが楽しいし、
自分のコードもそうあるべきだと思わせてくれる。本書の目的は、君のコードを良くすることだ」(本書「はじめに」より)。
コードは理解しやすくなければならない。本書はこの原則を日々のコーディングの様々な場面に当てはめる方法を紹介します。
名前の付け方、コメントの書き方など表面上の改善について。コードを動かすための制御フロー、論理式、変数などループとロジックについて。
またコードを再構成するた...]]></summary>
        <author>
            <name>Raio｜高校生エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ X / Twitter ] 自分の全ツイートを一括で削除手順]]></title>
        <id>https://zenn.dev/shomtsm/articles/52864a4b7b5eec</id>
        <link href="https://zenn.dev/shomtsm/articles/52864a4b7b5eec"/>
        <updated>2024-03-01T10:51:56.000Z</updated>
        <summary type="html"><![CDATA[前提

一括削除したいツイートは自分のツイートであること
アカウントのアーカイブを取得してしておくこと(データバックアップの意味も)
pythonを動かせる環境であること

twitter apiの仕様変更で、いままでの一括削除ルーツは基本使えなくなった。
でも自分のツイッターアカウントの全投稿を一括で削除したい。
公式ヘルプには「ツイートを一括削除することはできません。複数のツイートを削除する場合は、1つずつ手動で削除してください」とあるが、手動で全ツイート削除する作業は不毛で楽しくない
というわけでAPIで一括削除する方法を模索してできたのでメモっておきます。
流れは、自分の全ツ...]]></summary>
        <author>
            <name>松嶋松</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[CORS]FastAPIで許可するOriginを正規表現で設定する]]></title>
        <id>https://zenn.dev/purratto/articles/bfe6f551ad56da</id>
        <link href="https://zenn.dev/purratto/articles/bfe6f551ad56da"/>
        <updated>2024-03-01T08:23:33.000Z</updated>
        <summary type="html"><![CDATA[from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware

app = FastAPI()

# CORSの設定
app.add_middleware(
    CORSMiddleware,
    # 許可するOriginを正規表現で設定
    allow_origin_regex="https://.*\.example\.org",
    allow_credentials=True,
    allow_methods=["GET"],
    allow_headers=[...]]></summary>
        <author>
            <name>purratto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[oh-my-posh でPythonのvenv promptが正しく表示されない]]></title>
        <id>https://zenn.dev/enven/articles/oh-my-posh-python-venv</id>
        <link href="https://zenn.dev/enven/articles/oh-my-posh-python-venv"/>
        <updated>2024-03-01T01:52:27.000Z</updated>
        <summary type="html"><![CDATA[環境

WSL2 Ubuntu22.04.03
GNU bash, version 5.1.16(1)-release (x86_64-pc-linux-gnu)
oh-my-posh 12.29.0


 背景

pythonでvenvやuvを使って.venvフォルダに仮想環境を作成する

. .venv/bin/activateして仮想環境を有効化するとoh-my-poshがプロンプトに仮想環境名とPythonのバージョンを表示してくれる

https://ohmyposh.dev/docs/segments/python
設定どおりに書くと以下のような感じ

 theme.om...]]></summary>
        <author>
            <name>えんぶん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Microsoft Fabricを使ってZennの投稿状況を可視化できるBIを作成する]]></title>
        <id>https://zenn.dev/headwaters/articles/c69811c3ed54c0</id>
        <link href="https://zenn.dev/headwaters/articles/c69811c3ed54c0"/>
        <updated>2024-03-01T01:49:26.000Z</updated>
        <summary type="html"><![CDATA[やりたいこと
今年から全社的に取り組んでいるZennでのテック記事投稿の状況を可視化できるようにしたいです。

 Microsoft Fabricとは？
データ分析を円滑に行うための統合サービスです。
データ統合やデータエンジニアリング・データサイエンスからビジネスインテリジェンスまで、さまざまな環境が提供されています。

 ZennにはAPIがあるっぽい
RSS以外にAPIもあるとのこと。
ただ、publication単位でのAPIはないっぽいので、ユーザー管理は別途ハードコーディングでやるしかないのと、各ユーザーごとにAPIを叩く必要があります。
https://zenn.dev...]]></summary>
        <author>
            <name>ikebowsan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】LangChainのLangSmithを試してみた]]></title>
        <id>https://zenn.dev/nari007/articles/e1531d3b9370cb</id>
        <link href="https://zenn.dev/nari007/articles/e1531d3b9370cb"/>
        <updated>2024-02-29T12:03:23.000Z</updated>
        <summary type="html"><![CDATA[はじめに
前回LangChainの記事を書きましたが、そのソースコードを使ってLangSmithで処理をトレースしてみました。初めて使ってみましたが簡単で便利だったので、その使い方をご紹介します。
前回の記事
https://zenn.dev/nari007/articles/900290ed31c7be

 LangSmithとは
LangSmithとは、LLMアプリケーションの開発、コラボレーション、テスト、デプロイ、監視のための統合 DevOpsプラットフォーム、とのことです。
無料プランがあり、毎月3000トレースまで使えるようなので開発時に使えるかなと思いました。
http...]]></summary>
        <author>
            <name>Nari</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ブルースカイのAPI経由で、ハッシュタグを付与する方法]]></title>
        <id>https://zenn.dev/ryo__matsu/articles/6b10652c12f976</id>
        <link href="https://zenn.dev/ryo__matsu/articles/6b10652c12f976"/>
        <updated>2024-02-29T04:32:47.000Z</updated>
        <summary type="html"><![CDATA[ブルースカイにハッシュタグの機能が追加されたようなので、早速試してみました。

 コード

post
from atproto import Client, client_utils, models

#ログイン
user = 'XXXXXXXXXXXX.bsky.social'
password = 'XXXXXXXXXXXX'
client = Client()
client.login(login=user, password=password)

#投稿するテキスト
text = client_utils.TextBuilder().text('普通のテキスト').tag('#ハ...]]></summary>
        <author>
            <name>りょーへー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FastAPI×MongoDBを用いたAPI開発の手ほどき② 〜DB接続〜]]></title>
        <id>https://zenn.dev/ryota_tamura_jp/articles/8d8811c9925fdd</id>
        <link href="https://zenn.dev/ryota_tamura_jp/articles/8d8811c9925fdd"/>
        <updated>2024-02-28T15:06:51.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは。LIRIS株式会社で取締役兼エンジニアをしています田村です。
前回投稿した「FastAPI×MongoDBを用いたAPI開発の手ほどき① 〜環境構築〜」の続きを書いていきます。初めての方は是非前回分から見ていただければと思います。
今回は、FastAPIとMongoDBを接続し、実際にCRUD操作を実装します。
コードだけ見たいという方はこちらから取得してください。

 想定読者

PythonでWeb API開発したい、されている方
FastAPIに興味のある方、数年使っている方
パフォーマンス向上に興味のある方


 フォルダ・ファイル構成
今回は、DBとの...]]></summary>
        <author>
            <name>Ryota Tamura (LIRIS Co., Ltd.)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Seleniumをヘッドフルブラウザで実行する]]></title>
        <id>https://zenn.dev/o_____i_o/articles/4de052f7350ca4</id>
        <link href="https://zenn.dev/o_____i_o/articles/4de052f7350ca4"/>
        <updated>2024-02-28T14:31:00.000Z</updated>
        <summary type="html"><![CDATA[概要
本来Seleniumはヘッドレスモードによるコード上でのブラウザ操作を行います。
今回はあえてヘッドフルモードでブラウザの操作を行い、
ついでに操作状況を確認できる環境を構築しようと思います。

 MAC M1/M2でDockerコンテナ上のChromeついて
現状arm64向けのGoogle Chromeが提供されていないため
そのままM1(M2) MACで動かそうとするとブラウザ起動の際にエラー落ちしてしまいます。
対応としてDocker Desktop設定でRosettaを利用するようにしておきましょう。
General > Use Rosetta for x86/...]]></summary>
        <author>
            <name>Ryo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Modular MojoがPythonより68000倍早いのは本当なのか]]></title>
        <id>https://zenn.dev/minedia/articles/70fd47d9a229d5</id>
        <link href="https://zenn.dev/minedia/articles/70fd47d9a229d5"/>
        <updated>2024-02-28T11:00:01.000Z</updated>
        <summary type="html"><![CDATA[はじめに
mojoについては過去の記事でご紹介しました
https://zenn.dev/shintaroamaike/articles/afcbc867db495e
今回の記事ではMojoはPython 3.10.9の68000倍早いと公式のブログで紹介されていますが、
内容を確認します。

 3行まとめ
・AIに特化した言語mojoに触れてみる
・Macbook proでマンデルブロ集合の処理時間を見てみる
・mojoでのpandasのloop処理がどれくらい早くなるのか見てみる

 概要
https://www.modular.com/blog/mojo-a-journey-t...]]></summary>
        <author>
            <name>ShintaroAmaike</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Modular MojoがPythonより68000倍早いのは本当なのか]]></title>
        <id>https://zenn.dev/shintaroamaike/articles/70fd47d9a229d5</id>
        <link href="https://zenn.dev/shintaroamaike/articles/70fd47d9a229d5"/>
        <updated>2024-02-28T11:00:01.000Z</updated>
        <summary type="html"><![CDATA[はじめに
mojoについては過去の記事でご紹介しました
https://zenn.dev/shintaroamaike/articles/afcbc867db495e
今回の記事ではMojoはPython 3.10.9の68000倍早いと公式のブログで紹介されていますが、
本当にその速度が出るのか確認します

 3行まとめ
・AIに特化した言語mojoに触れてみる
・Macbook proでマンデルブロ集合の処理時間を見てみる
・mojoでのpandasのloop処理がどれくらい早くなるのか見てみる

 概要
https://www.modular.com/blog/mojo-a-j...]]></summary>
        <author>
            <name>ShintaroAmaike</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【2024年2月】エンジニアなら読むべき技術書TOP5]]></title>
        <id>https://zenn.dev/yottabyte/articles/5ca10229d7e0d5</id>
        <link href="https://zenn.dev/yottabyte/articles/5ca10229d7e0d5"/>
        <updated>2024-02-28T10:50:00.000Z</updated>
        <summary type="html"><![CDATA[情報セキュリティの敗北史


相次ぐ個人情報の大規模漏洩、米・中・露による国家主導のハッキング、企業・病院を標的にして猛威を振るうランサムウェア…
IT社会が急速な発展を続ける一方で、私たちの「情報」を取り巻く状況は日に日に悪化している。
数々のセキュリティ対策が打ち出されているにもかかわらず、サイバー攻撃による被害は増え続けている。
今日の情報セキュリティが抱える致命的な〈脆弱性〉は、どこから来たのか?
コンピュータの誕生前夜から現代のハッキング戦争まで、半世紀以上にわたるサイバー空間の攻防を描いた、情報セキュリティ史の決定版。
【Cybersecurity Canon Hall ...]]></summary>
        <author>
            <name>Raio｜高校生エンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python Notebookを速く安全に書く]]></title>
        <id>https://zenn.dev/shundeveloper/articles/4322d4dad72b9f</id>
        <link href="https://zenn.dev/shundeveloper/articles/4322d4dad72b9f"/>
        <updated>2024-02-27T16:55:31.000Z</updated>
        <summary type="html"><![CDATA[この記事で紹介する方法について
Pythonを以下の要件で動かしたいときに便利です.

すぐに動かさないといけない
Notebookを共有しないといけない
後で参照したい　(スパゲッティを避ける)
VMは使う時だけ動けばいい

逆に以下のようなときはやらない方がいいです

パッケージ管理を行う
長期間保守する

紹介する方法は長期間に渡って動作が保証される方法ではありません. 長期間保守するなら素直にDocker+pyenv+Poetryで構築することを推奨します.

 環境編
Google Colabを直接使います. ローカルで開発してNotebookをuploadといったことはし...]]></summary>
        <author>
            <name>shunsock</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ydata-profiling の日本語化]]></title>
        <id>https://zenn.dev/misaya/articles/e6c815da5056f5</id>
        <link href="https://zenn.dev/misaya/articles/e6c815da5056f5"/>
        <updated>2024-02-27T16:02:04.000Z</updated>
        <summary type="html"><![CDATA[困っていたこと
csv ファイルに日本語が含まれていた場合に、ydata-profiling による可視化のうち seaborn を使用して可視化している部分で、文字化け（豆腐化現象）が起こる。
import japanize_matplotlib/ を実行しても対応できなくて最初困った。
OS : Windows11
ydata-profiling のバージョン : 4.6.5

 参考
https://qiita.com/yubiquita/items/9c056e175ccb085eb137
https://qiita.com/hazigin/items/77cedbb61c7...]]></summary>
        <author>
            <name>misaya</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ローカルLLMの応答文を好みの出力に整えるDPOの学習]]></title>
        <id>https://zenn.dev/kaeru39/articles/f7231eb68649d6</id>
        <link href="https://zenn.dev/kaeru39/articles/f7231eb68649d6"/>
        <updated>2024-02-27T15:00:20.000Z</updated>
        <summary type="html"><![CDATA[背景と目的

LLMの応答文をユーザーの嗜好に沿った応答に整える手法が提案されています。

https://arxiv.org/abs/2305.18290

LLMは従来ユーザーの入力に沿った応答を返すように微調整(SFT,Supervised Fine Tuning)されていますが、しばしば応答が淡白であったり、品質の低い応答を返すなど、ユーザーの嗜好に沿わない応答文を生成することがあります。
この問題に対して、従来はOpenAIが報告したRLHFのように報酬モデルを学習し、好みを実数で表現する関数を獲得した後、この好みを最大化するような応答が得られるように強化学習することが必要...]]></summary>
        <author>
            <name>kaeru39</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Raspberry Pi5のVS CodeでPython開発環境を整える]]></title>
        <id>https://zenn.dev/tanny/articles/8dd312c880e325</id>
        <link href="https://zenn.dev/tanny/articles/8dd312c880e325"/>
        <updated>2024-02-27T14:12:59.000Z</updated>
        <summary type="html"><![CDATA[はじめに
2024年2月に日本でも販売が開始されたRaspberry Pi5を購入し、久しぶりに電子工作をやりはじめてみました。ソースコードはPythonで書いています。

ラズパイで7Seg LEDをチカチカ
Raspberry Pi OSにはPython用IDEのThonnyが搭載されていますが、普段から使い慣れているVS Codeで書く方が何かと便利です。
メインPCのVS Codeの設定をそのまま反映しても良いですが、最近ではRuffなどの新しいツールも登場しているため、この機会に拡張機能や設定を見直すことにしました。
この記事では、Raspberry Pi OS上で電子工作...]]></summary>
        <author>
            <name>Tanny</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[今更ながらDataScienceライクな研究の環境構築をいちからつくっていくぅ]]></title>
        <id>https://zenn.dev/killy/articles/d6b8b9943a3b8b</id>
        <link href="https://zenn.dev/killy/articles/d6b8b9943a3b8b"/>
        <updated>2024-02-27T12:10:40.000Z</updated>
        <summary type="html"><![CDATA[研究でPythonを使って久しい, 特に個々数年はニューラルネットワークの研究をしている
今までは自分ひとりで完結していたが, これからは複数人での作業が増えることもあり, 環境構築をきちんとしようと思い立った
少し調べるといろいろと最近は便利なものも増えてきていて, 自分への備忘録も兼ねてイチからやっていく
この記事シリーズでは

仮想環境周り
レポジトリー周り
ニューラルネットワークの学習周り
などなどをつらつらと書いていきたい

まずは, 仮想環境まわり

 pipx
https://pipx.pypa.io/stable/
pipと似ていますが, pythonで走るアプリケーショ...]]></summary>
        <author>
            <name>代理構成体</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WebVM： Tailscale経由のフルネットワーキングによるWebAssemblyでのLinux仮想化]]></title>
        <id>https://zenn.dev/leaning_tech_jp/articles/469247a54cb0a7</id>
        <link href="https://zenn.dev/leaning_tech_jp/articles/469247a54cb0a7"/>
        <updated>2024-02-27T05:27:44.000Z</updated>
        <summary type="html"><![CDATA[WebVMは、ブラウザ上で完全にクライアントサイドで動作する仮想Linux環境です。
CheerpX（WebAssemblyによるx86仮想化技術）をベースにしています。強力なJITリコンパイルエンジンとext2ブロックベースのファイルシステムにより、大規模なユースケースの実行が可能です： GCC / Clang / Python / Node.js / Rubyやその他多くのものがすぐにサポートされます。
しかし、重要なことが欠けていました。
ネットワーキングはWebVMで最も要望の多かった機能で、それには理由があった。ネットワーキングがないと、ターミナル経由でしかデータを入出力でき...]]></summary>
        <author>
            <name>Leaning Technologies Japan (リーニングテクノロジー)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[S3のadd_event_notificationのハマりポイント]]></title>
        <id>https://zenn.dev/inunekousapon/articles/9a8e4fee1286dc</id>
        <link href="https://zenn.dev/inunekousapon/articles/9a8e4fee1286dc"/>
        <updated>2024-02-26T22:02:50.000Z</updated>
        <summary type="html"><![CDATA[CDKでS3のPubObjectイベントをLambdaで受け取ろうとCDKを書いた時にいくつかハマりポイントがありました。ハマりポイントの紹介とその対応方法を残しておきます。

 環境
確認したバージョンは下記です。

Python3.9以上
aws-cdk-lib=2.128.0


 1. サンプルコードに書かれている通りに書いても動かない
まずは書いてみます。ちなみにこのコードは正しくないです。
import aws_cdk as cdk
from aws_cdk import aws_lambda
from aws_cdk import aws_s3_notifications
...]]></summary>
        <author>
            <name>inunekousapion</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】Langchainを簡単に試してみた]]></title>
        <id>https://zenn.dev/nari007/articles/900290ed31c7be</id>
        <link href="https://zenn.dev/nari007/articles/900290ed31c7be"/>
        <updated>2024-02-26T18:47:48.000Z</updated>
        <summary type="html"><![CDATA[はじめに
gpt-3.5-turboを使ってLangchainを試してみました。
はじめてのLangchainという感じで、推奨されているLCELを使った基本的な内容となります。

 参考ドキュメント
公式ドキュメント
https://python.langchain.com/docs/get_started/quickstart
LCEL
https://python.langchain.com/docs/expression_language/

 試してみる
必要なものをインストール
python -V
Python 3.9.18

pip install langchain
...]]></summary>
        <author>
            <name>Nari</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[とりまやってみるAHC 〜Algo灰色による初AHC参加記〜（AHC030）]]></title>
        <id>https://zenn.dev/tabetai/articles/2fa0a862ec6881</id>
        <link href="https://zenn.dev/tabetai/articles/2fa0a862ec6881"/>
        <updated>2024-02-26T18:27:50.000Z</updated>
        <summary type="html"><![CDATA[はじめに
はじめましてtabetaiです。大学院（M1）で機械学習の研究をしています。

タイトルの通り、数理最適化や競プロはからっきしなのですが、今回AHC030で初めてAHCに参加してみたのでつらつらと参加記を書いてみます。なお、解法についての説明はあまりに貧弱で冗長ですが、そこが主眼ではないということで見逃してください。以降精進します。

 記事の目的
この記事を読んでくれた方が、初AHC参加ハードルを下げるきっかけになればなと思っています。
「典型手法とか知らなくても、気楽にAHC始められる＆そこそこ楽しめるんだ！」と思っていただけたら何よりです。
（競プロ始めたての自分が布...]]></summary>
        <author>
            <name>tabetai</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonとTensorFlowでAIを学ぶ]]></title>
        <id>https://zenn.dev/keison8864/articles/0e9cac8eefdf0b</id>
        <link href="https://zenn.dev/keison8864/articles/0e9cac8eefdf0b"/>
        <updated>2024-02-26T14:25:36.000Z</updated>
        <summary type="html"><![CDATA[はじめに
PythonとTensorflowを使ってAIを学びます。この記事では、ニューラルネットワークの基本的な概念を理解し、実装できることを目指します。Pythonは、その読みやすい構文と豊富なライブラリで、AIの分野で人気があります。TensorFlowはオープンソースの深層学習ライブラリで、機械学習モデルの開発とトレーニングに広く用いられています。サンプルコードはこちらにありますので、理論と照らし合わせながらご活用ください。この記事ではコードには触れません。

 用語整理

 AI（人工知能）
コンピューターが、人間のようになにかを考えてなにかをすることです。幅広い概念です。...]]></summary>
        <author>
            <name>keison</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Open3Dの視点のあれこれ(ViewControl編)]]></title>
        <id>https://zenn.dev/hiroysato/articles/f20a55d682f3a4</id>
        <link href="https://zenn.dev/hiroysato/articles/f20a55d682f3a4"/>
        <updated>2024-02-26T12:49:18.000Z</updated>
        <summary type="html"><![CDATA[1. はじめに
「詳解　３次元点群処理 Pythonによる基礎アルゴリズムの実装」というとても良い本があるが、この本を読む前にいくつか必要だった前提知識
Open3Dを使っている人との情報交換用で間違っていることが書いてあったら是非教えていただけると助かります。


詳解　３次元点群処理 Pythonによる基礎アルゴリズムの実装
著：金崎　朝子　著：秋月　秀一　著：千葉　直也


 2. 基礎知識

 2.1 Open3Dは右手系、左手系

Open3Dは右手系
デフォルトでは、X(赤/水平)、Y(緑/高さ)、Z(青/奥行き)となる。Zが高さになっているので注意する。


 2.2 ...]]></summary>
        <author>
            <name>Hiroyuki Sato</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Powertools for AWS (Python) を用いた S3 Trigger のカスタマイズ方法]]></title>
        <id>https://zenn.dev/todoker_blog/articles/c616fe424fb671</id>
        <link href="https://zenn.dev/todoker_blog/articles/c616fe424fb671"/>
        <updated>2024-02-26T01:54:00.000Z</updated>
        <summary type="html"><![CDATA[こんにちは。hayata-yamamoto です。
今回は、Powertools for AWS (Python) を用いて、S3 のイベントトリガーで動く Lambda 関数の提供方法を紹介します。私が思うに、Lambda と S3 はファイルアップロード時に何か処理を非同期で動かしたい時にとても便利で、多くの利用事例があるイメージです。これから、何か実装しようと思ってる方の参考になれば嬉しいです

 S3 と Lambda の統合はどのようなもの？
公式によりますと、

Amazon Simple Storage Service からのイベント通知は、Lambda を使用して処理する...]]></summary>
        <author>
            <name>山本隼汰 | Hayata Yamamoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[M3Macに開発環境を用意する - Part1]]></title>
        <id>https://zenn.dev/hir0_728/articles/eee4d51551da38</id>
        <link href="https://zenn.dev/hir0_728/articles/eee4d51551da38"/>
        <updated>2024-02-26T00:15:29.000Z</updated>
        <summary type="html"><![CDATA[はじめに
以前、MacbookPro M3Proを購入し、環境構築をした際に手順をZennのスクラップとしてまとめていたが、改めてちゃんと記事としてまとめ直すことにした。

 Homebrewのインストール
Macを使うのであればパッケージマネージャーであるHomebrewは欠かせないので、一番最初にインストールしてしまう。AppleSiliconとIntelで手順が若干異なるそうなので、注意してね。
公式サイト
# インストールコマンド
$ /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/i...]]></summary>
        <author>
            <name>HIR0</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GA4のデータを収集して、issueに貯めてみた]]></title>
        <id>https://zenn.dev/secondselection/articles/ga4_api_sample</id>
        <link href="https://zenn.dev/secondselection/articles/ga4_api_sample"/>
        <updated>2024-02-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事はGA4の集計データをGitLabのissueに貯めて（保存して）みたというやってみた記事です。
きっかけは「探索レポートで2か月前までしか参照できない」のため、どこかに貯めたいなと思ったことがきっかけです。
※ 記事を書くために調べて初めて知りました。
https://inhouse-plus.jp/marketing/data-retention
最終的に作ってみたものとしては、以下のような流れでデータを保管します。

GitLabのCIで毎日スクリプト（Python）を実行する
GA4 Data APIでデータを取得し、Issueに集計結果を保存する


 下...]]></summary>
        <author>
            <name>u_hijiri</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[マイクラ鯖の情報を取得できるwebAPIを作った]]></title>
        <id>https://zenn.dev/ziaensochan/articles/fed5fd4d1e0b0a</id>
        <link href="https://zenn.dev/ziaensochan/articles/fed5fd4d1e0b0a"/>
        <updated>2024-02-25T14:10:53.000Z</updated>
        <summary type="html"><![CDATA[開発経緯
Pythonでapiってどうやって作るんだろうってなったので試しに作ってみただけです。
阿波連さんを見てたら一瞬で開発終わった。

 作ったもの
curl https://mcapi.ziaenso.me/status?address=<サーバーアドレス>&port=<ポート>
で呼び出せます。
address=でアドレス又はIPを指定します。これは必須。
port=でポートを指定します。25565番の場合は必要ないです。
jsonで帰ってきます。
ハイピクセルでやってみるよ。あとcurlだとjsonが見にくいのでブラウザでやりました。
ht...]]></summary>
        <author>
            <name>ziaenso_</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AIPscanを試す]]></title>
        <id>https://zenn.dev/nakamura196/articles/2917442dd6b9f5</id>
        <link href="https://zenn.dev/nakamura196/articles/2917442dd6b9f5"/>
        <updated>2024-02-25T13:52:35.000Z</updated>
        <summary type="html"><![CDATA[概要
以下のツールを試します。
https://github.com/artefactual-labs/AIPscan
本ツールは以下のように説明されています。

AIPscan was developed to provide a more in-depth reporting solution for Archivematica users. It crawls METS files from AIPs in the Archivematica Storage Service to generate tabular and visual reports about reposit...]]></summary>
        <author>
            <name>nakamura196</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonでデザインパターンを学ぼう (Facade)]]></title>
        <id>https://zenn.dev/shimakaze_soft/articles/dfff44831193c8</id>
        <link href="https://zenn.dev/shimakaze_soft/articles/dfff44831193c8"/>
        <updated>2024-02-25T12:13:50.000Z</updated>
        <summary type="html"><![CDATA[Pythonを用いてのGoFの定義した23個のデザインパターンの一つであるFacadeパターンの実装方法について解説します。
Facadeパターンは、「構造に関するデザインパターン」に分類されます。
複雑なシステムに対する簡単なインターフェースを提供します。
このパターンの目的は、システムの複雑さを隠蔽し、クライアントがより簡単にシステムを利用できるようにすることです。

 Facadeパターンとは？
Facadeパターンでは、複数のサブシステムを統合して一つの統一されたインターフェースを提供するFacade(ファサード)クラスを設けます。
クライアントはこのFacadeクラスを通じて、...]]></summary>
        <author>
            <name>shimakaze_soft</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python(Flask)からSwitchBotAPIを叩いてみる]]></title>
        <id>https://zenn.dev/tamagoyaki/articles/7761183901c0eb</id>
        <link href="https://zenn.dev/tamagoyaki/articles/7761183901c0eb"/>
        <updated>2024-02-25T11:16:11.000Z</updated>
        <summary type="html"><![CDATA[1. 環境想定

macOS Sonoma 14.3.1
Python 3.12.1
pipenv version 2023.12.0
SwitchBotAPI 1.1


 2. 事前準備

 Python

下記のコマンドを実行する。

pip install --upgrade pip
pip install pipenv
pipenv install flask flask-restful requests python-dotenv

 SwitchBot

SwitchBotアプリをインストールする

iOS
Android


アプリを起動してSwitchBotアカウン...]]></summary>
        <author>
            <name>tamagoyaki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Next.js + Fastapi]Next.jsからfetchでデータをfastapiに送る方法]]></title>
        <id>https://zenn.dev/umikaze/articles/06ea1c96682ef0</id>
        <link href="https://zenn.dev/umikaze/articles/06ea1c96682ef0"/>
        <updated>2024-02-25T10:58:00.000Z</updated>
        <summary type="html"><![CDATA[このコードにたどり着くまで2日かかってしまったので…

 注意
Next.js App Routerの方を使っています。
Pages Routerではないので注意してください。

 コード例
Nextjs側

page.tsx
  async function sendMessage(formData: FormData) {
    "use server";
    const json = JSON.stringify(Object.fromEntries(formData));
    await fetch("http://127.0.0.1:8000/receive-json...]]></summary>
        <author>
            <name>うみかぜ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ツェラーの公式を使ったタイムスタンプ]]></title>
        <id>https://zenn.dev/nyasocom/articles/3cbc18ed2db288</id>
        <link href="https://zenn.dev/nyasocom/articles/3cbc18ed2db288"/>
        <updated>2024-02-25T10:22:23.000Z</updated>
        <summary type="html"><![CDATA[./go_straight/unit/timestamp.py

# ...

        if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
            if month == 2:
                calc = ((365 * year + year / 4 - year / 100 + year / 400 +
                         (306 * (month + 1)) / 10 + day) - 426) % 7
            elif mont...]]></summary>
        <author>
            <name>T.K</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python+Selenium+Edgeでブラウザ操作を自動化してみた]]></title>
        <id>https://zenn.dev/mac709/articles/848fdbf9db6919</id>
        <link href="https://zenn.dev/mac709/articles/848fdbf9db6919"/>
        <updated>2024-02-25T07:30:48.000Z</updated>
        <summary type="html"><![CDATA[はじめに
PythonでWebブラウザ操作を自動化するために、Seleniumを利用したので紹介します。

 動作環境

Python : 3.10.2
Selenium : 3.141.0


 プロジェクト構成
project
|-edgedriver
| |-msedgedriver.exe
|
|-selenium.py

 Seleniumをインストール

terminal
$ pip install selenium==3.141.0


 Edge用のドライバーをインストール
WebDriverをインストール
https://developer.microsoft.co...]]></summary>
        <author>
            <name>daichi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CGIとFastCGIでPythonフレームワーク(FastAPI, Flask)を実行する方法]]></title>
        <id>https://zenn.dev/cti1650/articles/5e6c7bd15d7fbe</id>
        <link href="https://zenn.dev/cti1650/articles/5e6c7bd15d7fbe"/>
        <updated>2024-02-25T02:58:02.000Z</updated>
        <summary type="html"><![CDATA[はじめに
本記事では、CGI（Common Gateway Interface）とFastCGI（Fast Common Gateway Interface）を使用してPythonフレームワーク（FastAPIやFlask）を実行する方法について解説します。CGIやFastCGIはWebサーバーと外部プログラムとの間で情報をやり取りするための仕組みであり、Pythonフレームワークをこれらのインターフェースを介して実行することで、Webアプリケーションを動作させることができます。

 想定読者
スケールを想定しない個人開発などの小規模な開発の簡易的なデプロイ先としてレンタルサーバー(...]]></summary>
        <author>
            <name>cti1650</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Microsoft Fabric】NotebookのData Wranglerを触ってみた]]></title>
        <id>https://zenn.dev/headwaters/articles/27f65c33cabd3c</id>
        <link href="https://zenn.dev/headwaters/articles/27f65c33cabd3c"/>
        <updated>2024-02-25T00:00:01.000Z</updated>
        <summary type="html"><![CDATA[はじめに
FabricのNotebookを触ってみました。
適当にいじって遊んでいたらData Wranglerの機能を見つけたのでご紹介します。
ちなみにWranglerとは「口論者」「数学の学位試験の一級合格者」「カウボーイ」という意味があるようです。
Data Wranglerとはデータを扱える一級者てきな意味合いなのでしょうか…

 前提
こちらの記事を参考にNotebookで適当なテストデータを作成しています。
10個前後のデータがあれば大丈夫です。
https://zenn.dev/headwaters/articles/6c08f8ba1f8e47
https://ze...]]></summary>
        <author>
            <name>t.yuto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PyInstallerでexe化するときにトロイの木馬認定されないようにする]]></title>
        <id>https://zenn.dev/ziaensochan/articles/8e59973360ab4d</id>
        <link href="https://zenn.dev/ziaensochan/articles/8e59973360ab4d"/>
        <updated>2024-02-24T22:41:55.000Z</updated>
        <summary type="html"><![CDATA[ち、違います!!
お前の作ったそのソフト、トロイの木馬だろ!!ってあらぬ疑いをかけられ秒で消される悲劇が起きたのでそれの修正です。
あと配布したときに「あそこの開発者はウイルスばら撒いてる」って言われたら嫌じゃん？

 解決策
調べたところ、bootloaderっていうのが悪さしてるらしいのでそれを自前でビルドすればいいらしい。

 ソースをクローン
git clone https://github.com/pyinstaller/pyinstaller.git

 MinGWを入れる
https://github.com/niXman/mingw-builds-binaries/r...]]></summary>
        <author>
            <name>ziaenso_</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[classmethodを使った代替コンストラクタ]]></title>
        <id>https://zenn.dev/yosemat/articles/1ba7bc3d426953</id>
        <link href="https://zenn.dev/yosemat/articles/1ba7bc3d426953"/>
        <updated>2024-02-24T18:58:13.000Z</updated>
        <summary type="html"><![CDATA[クラスメソッドを使って長すぎる__init__にお別れを告げる
こんばんはYosematです。
TypeHintとPydanticの狂信者でこれまでにもdataclassを捨ててpydanticに乗り換えるなどでTypeSafeなクラスであるdataclassやpydanticのすばらしさをご紹介しています。
今日はこれらと相性のいいクラスメソッドによる代替コンストラクタについてご説明します。

 複雑な初期化ロジックを書きたい
「dataclassやpydanticは__init__を自動で作っちゃうけど、俺はもっと複雑な初期化ロジックを使いたいんだが...」という人もいるでしょう...]]></summary>
        <author>
            <name>Yosemat</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[langchain + RAGで手元の資料（新たな情報）をllmに読み込ませる]]></title>
        <id>https://zenn.dev/yumefuku/articles/llm-langchain-rag</id>
        <link href="https://zenn.dev/yumefuku/articles/llm-langchain-rag"/>
        <updated>2024-02-24T18:49:21.000Z</updated>
        <summary type="html"><![CDATA[はじめに

 RAG（検索拡張生成）について
huggingfaceなどからllmをダウンロードしてそのままチャットに利用した際、参照する情報はそのllmの学習当時のものとなります。（当たり前ですが）学習していない会社の社内資料や個人用PCのローカルなテキストなどはllmの知識にありません。
このような存在しない情報をllmに与える（参照させる）手法がRAGです。
ファインチューニングという手法もありますが、そちらはllmに再学習を行わせる手法です。ファインチューニングでは、llm自体に学習させることで知識を追加しますが、RAGの場合は用意したデータベースから検索することで、追加の情...]]></summary>
        <author>
            <name>ゆめふく</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【実践】エンジニアの基礎教養-アルゴリズムを学べる本]]></title>
        <id>https://zenn.dev/mandenaren/books/algorithm-study</id>
        <link href="https://zenn.dev/mandenaren/books/algorithm-study"/>
        <updated>2024-02-24T15:07:07.000Z</updated>
        <summary type="html"><![CDATA[筆者は新卒エンジニア時代に社内でアルゴリズム勉強会を主催していました。
 その内容を本形式に書き起こしたものになります。

【この本の特徴】
 📗問題演習形式でアルゴリズムの基礎が身に付く構成となっています。
 📗分かりにくい概念は丁寧に図解で解説しています。
 📗基礎的なアルゴリズムがどのように世の中に役立っているのかを言及しています。

アルゴリズムに関して、皆さんの理解を深めるお手伝いができれば幸いです。]]></summary>
        <author>
            <name>なりん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonでマルチスレッド処理]]></title>
        <id>https://zenn.dev/unico417/articles/py_threadpoolexecutor_introduction</id>
        <link href="https://zenn.dev/unico417/articles/py_threadpoolexecutor_introduction"/>
        <updated>2024-02-24T13:42:59.000Z</updated>
        <summary type="html"><![CDATA[Pythonでマルチスレッド処理をするには、ThreadPoolExecutorというクラスを使います。
このライブラリは、Python3.2以降でビルトインで使えます。
from concurrent.futures import ThreadPoolExecutor
ThreadPoolExecutorはスレッドプールというだけあって、処理を溜めこむプールを持っているイメージです。
そのプールにある処理を順番に行っていきます。

 最小構成のプログラム
簡単に、ただ処理をするならこれだけです。
from concurrent.futures import ThreadPoolExec...]]></summary>
        <author>
            <name>Unico417</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Amazon Connectで着信した電話番号をGoogle Maps APIで場所特定する]]></title>
        <id>https://zenn.dev/nyancat/articles/20240224-amazon-connect-google-places-api</id>
        <link href="https://zenn.dev/nyancat/articles/20240224-amazon-connect-google-places-api"/>
        <updated>2024-02-24T11:05:40.000Z</updated>
        <summary type="html"><![CDATA[はじめに: Google Maps PlatformのPlaces API
電話番号をGoogle検索すると、その電話番号に当てはまるGoogle Mapの施設や場所が表示されることがありますよね。それと同じことをAPIでできないか？と調べたら、Google Maps PlatformのPlaces APIの Text Search で実現できると分かったので使ってみました。
https://developers.google.com/maps/documentation/places/web-service/text-search?hl=ja

「+1 + 514-670-8700...]]></summary>
        <author>
            <name>nyancat</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【LangChain】ParentDocumentRetrieverのデータを永続化する方法]]></title>
        <id>https://zenn.dev/koujimachi2023/articles/7a113a32473166</id>
        <link href="https://zenn.dev/koujimachi2023/articles/7a113a32473166"/>
        <updated>2024-02-24T07:34:19.000Z</updated>
        <summary type="html"><![CDATA[概要
ParentDocumentRetrieverのデータを永続化するのにハマったので、備忘録として残します。
結論から言うと、こちら のページの内容を以下のように書き換えれば行けそうです

retriver構築時

InMemoryByteStoreをLocalFileStore + create_kv_docstoreに置き換える。
vectorstoreもsave_loacalでローカルに保存する。


retriver使用時

ローカルに保存したstoreとvectorstoreを使用してParentDocumentRetrieverを再構築する。




 Retriev...]]></summary>
        <author>
            <name>おいしい</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Micorsoftのguidanceをgpt-3.5-turboで試してみた]]></title>
        <id>https://zenn.dev/nari007/articles/f298f28ff239be</id>
        <link href="https://zenn.dev/nari007/articles/f298f28ff239be"/>
        <updated>2024-02-23T16:32:12.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Micorsoftが公開しているguidanceをgpt-3.5-turboなどで簡単に試してみました。
guidanceとは ※翻訳文
ガイダンスは、従来のプロンプトやチェイニングに比べて優れた制御と効率を提供するプログラミングパラダイムである。これにより、ユーザーは（正規表現やCFGなどで）生成を制約したり、制御（条件分岐やループ）と生成をシームレスにインターリーブしたりすることができる。
とのことです。
詳細は下記ページをチェックしてみてください。
https://github.com/guidance-ai/guidance

 使ってみる
guidanceのver...]]></summary>
        <author>
            <name>Nari</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Kaggle】実践！Titanicコンペティション]]></title>
        <id>https://zenn.dev/team_delta/articles/kaggle_article_2</id>
        <link href="https://zenn.dev/team_delta/articles/kaggle_article_2"/>
        <updated>2024-02-23T16:01:22.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Kaggleのアカウントを発行して間もないですが、早速Kaggleでモデルを構築したい気持ちが抑えきれないので、Competitionにチャレンジしてみました。
とは言っても、モデルを構築するにはどうすればいいのっていう話です。
実はKaggleには、このようにレベルに応じたチュートリアルのCompetitionが用意されています！

最初はBeginnerとして選択すると、３つのCompetitionが表示されました。

その中でも一番左端にある、参加Team数が一番多いTitanicを選んでやっていこうと思います。

 Titanicコンペティションについて
そもそもこ...]]></summary>
        <author>
            <name>reochiyo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python 日本の祝日と土曜日・日曜日の日付一覧を取得する]]></title>
        <id>https://zenn.dev/mkymdk/articles/053083e53c8caa</id>
        <link href="https://zenn.dev/mkymdk/articles/053083e53c8caa"/>
        <updated>2024-02-23T10:40:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Pythonで日本の祝日と土曜日・日曜日の日付一覧を取得するコードを書いてみました。
注意：祝日の日付はholidaysというライブラリを使用して取得しているため、その結果は正確ではない可能性があります。

 環境
・Google Colaboratory

 コード
# 作成したい年度を入力してください。
year = 2024
import pandas as pd
import numpy as np
import datetime
import holidays
今回の要となるのが、holidaysという祝日を取得するライブラリです。
# year年の日本の祝日を取...]]></summary>
        <author>
            <name>Mukaiyama</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonでHAproxyのログを抽出する方法]]></title>
        <id>https://zenn.dev/yslius/articles/d237ff1aaddcab</id>
        <link href="https://zenn.dev/yslius/articles/d237ff1aaddcab"/>
        <updated>2024-02-23T08:08:48.000Z</updated>
        <summary type="html"><![CDATA[やりたいこと
Pythonを使ってアクセスログの分析をしたく、サーバーからHAproxyのログをPythonで取得できないかと思って作ってみたらできたので残しておく。

 前提条件

ログを取得したいサーバーへSSHコマンドでアクセスできるようにしておく

鍵の設定などを済ませておく




 説明

HAproxyのログは/var/log/に作られる
ログのファイル名は以下のようになっている（おそらくデフォルト）
haproxy.log　　←リアルタイムのログ
aproxy.log.1　←リアルタイムのバックアップログ
haproxy.log.2.gz　←１つ前のバックアップログ（...]]></summary>
        <author>
            <name>yslius</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[diffusers で Attention の処理をカスタマイズする方法 | AttnProcessor]]></title>
        <id>https://zenn.dev/prgckwb/articles/4510b3a06b8163</id>
        <link href="https://zenn.dev/prgckwb/articles/4510b3a06b8163"/>
        <updated>2024-02-23T07:11:14.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Stable Diffusion に用いられている U-Net では、内部に複数の Attention モジュールが含まれており、画像生成時に Attention の処理を操作することで生成画像のピクセルの情報を確認したり、生成画像の領域とプロンプトとの対応関係を明示的にコントロールすることが出来るようになりますが、その forward 処理は高度にラップされていることが多く、コードの深掘りが必要なことがよくあります。
そこで、本記事では Huggingface の diffusers ライブラリにおいて、Attention Processor という仕組みを利用することで...]]></summary>
        <author>
            <name>ちくわぶ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pipenv-pipesでPipenvが作成した仮想環境の一覧を取得する]]></title>
        <id>https://zenn.dev/shotaro_tsuji/articles/bb9c288362d067</id>
        <link href="https://zenn.dev/shotaro_tsuji/articles/bb9c288362d067"/>
        <updated>2024-02-23T04:43:43.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Pipenvで管理されたPythonのプロジェクトを作成してからプロジェクトディレクトリだけを消してしまったり、たくさんのプロジェクトをホームディレクトリ以下のあちこちで作成していたりしていると、Pipenvが作成した仮想環境が残っているのか気になったり、どのディレクトリにプロジェクトがあるのかわからなくなってしまうことがあります。そんなときにはpipenv-pipesを使うことで、Pipenvが作成した仮想環境を一覧することができます。
https://pipenv-pipes.readthedocs.io/en/latest/readme.html

 インストール
公...]]></summary>
        <author>
            <name>Shotaro Tsuji</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ヒストグラム内の最大長方形を求めるアルゴリズム]]></title>
        <id>https://zenn.dev/k41531/articles/22df24117c1a15</id>
        <link href="https://zenn.dev/k41531/articles/22df24117c1a15"/>
        <updated>2024-02-23T01:13:54.000Z</updated>
        <summary type="html"><![CDATA[ヒストグラム内の最大長方形を求めるアルゴリズム
プログラム内では、ヒストグラムを整数のリストで表します。
[8, 10, 4, 6, 8, 6, 2, 2]


 素直な求め方
それぞれのビンにおいて、そのビン高さを基準に左右に高さを調べていきます。
基準以上の高さを持つビンが左右に何個あるかで横幅を導き、面積を求めます。

def largestRectangleArea(hist):
    max_area = 0
    for index, height in enumerate(hist):
        left, right = index, index
       ...]]></summary>
        <author>
            <name>kaisei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[エンジニアリング・マネージャーの仕事を経験してモノの見え方が変わった話]]></title>
        <id>https://zenn.dev/spiralai/articles/0bcf12d88b4ec1</id>
        <link href="https://zenn.dev/spiralai/articles/0bcf12d88b4ec1"/>
        <updated>2024-02-22T09:06:45.000Z</updated>
        <summary type="html"><![CDATA[こんにちは。わいけいです。
最近エンジニアとしてマネージング寄りの業務をすることが増えてきました。
今回の記事では、その中で自分の考え方がどう変わってきたかをメモしておきます。
私の場合は、まずフリーランスエンジニアとしてこの業界に入ってきました。
それもあって、今までは基本的にあくまで「良いコードを書く」ことが仕事であり目標でした。
以前からいわゆる上流工程にも全く興味関心がなかった訳ではありません。
しかし、これまで私が経験したのは

システムの要件定義（ビジネス的な視点も含む）は社員が行う
フリーランスは（やったとしても）技術的な設計のみ担当する

という切り分けの現場が多かったん...]]></summary>
        <author>
            <name>わいけい</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[競技プログラム用のローカル実行環境を作ってみた]]></title>
        <id>https://zenn.dev/gotoooo/articles/77eb7d96a512e5</id>
        <link href="https://zenn.dev/gotoooo/articles/77eb7d96a512e5"/>
        <updated>2024-02-21T23:49:43.000Z</updated>
        <summary type="html"><![CDATA[はじめに
もともと筆者はプログラミング初心者でしたがpaizaで数年の時間をかけてスキルチェックを進める中で段々とランクの高い問題に正答できるようになりました。目下のところAランク、Sランクを安定して正答できるようになるところが目標です。
paizaのWebサイト上でのコーディングだと部分的なデバッグがやりずらいなど諸々コーディング効率が下がるのを感じたため、使い慣れた環境でコーディング＆実行確認する環境を作ってみました。paizaの問題のみならずAtCoderなど「ソースコードを提出してWebサイト上で実行結果の成否を評価する」枠組みのサイトであれば汎用的に活用できると思います。
...]]></summary>
        <author>
            <name>gotoooo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Seleniumを使ったWebアプリケーションテストの自動化]]></title>
        <id>https://zenn.dev/kou_kawa/articles/28-selenium-python</id>
        <link href="https://zenn.dev/kou_kawa/articles/28-selenium-python"/>
        <updated>2024-02-21T13:43:14.000Z</updated>
        <summary type="html"><![CDATA[はじめに
WebアプリケーションテストでSeleniumを学ぶ機会がありました。
手動な画面操作を自動化し、テストの自動化へと活かせるので記録に残します。

 Seleniumとは
Seleniumは、Webアプリケーションのテストを自動化するためのオープンソースツールセットです。
主要なコンポーネントは以下の通りです。


Selenium WebDriver: ブラウザをプログラムから直接制御し、ウェブページ上の要素を操作します。

Selenium IDE: テストケースの記録と再生を行うブラウザ拡張機能です。

Selenium Grid: テストスクリプトを複数のブラウザや...]]></summary>
        <author>
            <name>Kou</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで財務分析3 ~ROAツリーをPlotly Dashで可視化~]]></title>
        <id>https://zenn.dev/gotoooo/articles/d8f1e26976d9ec</id>
        <link href="https://zenn.dev/gotoooo/articles/d8f1e26976d9ec"/>
        <updated>2024-02-21T13:30:28.000Z</updated>
        <summary type="html"><![CDATA[はじめに
前回はEDINET APIで取得したデータからROAツリー作成に必要なデータを抽出するところまでできました。
https://zenn.dev/gotoooo/articles/7ce9b8f7c43c5a
今回はROAツリーの可視化の部分を紹介します。

 やりたいこと
こんな感じのツリー構造のグラフを表示させたい。
ROA
|--総資産回転率
|　　|--固定資産回転率
|　　　　|--有形固定資産回転率
|　　　　|--無形固定資産回転率
|　　|--運転資金回転日数
|　　　　|--売掛債権回転日数
|　　　　|--買掛債権回転日数
|　　　　|--在庫回転日数
|...]]></summary>
        <author>
            <name>gotoooo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[一日一処: 瞬間的にJavaScriptとPythonを空目する文字列を取り扱うコード]]></title>
        <id>https://zenn.dev/jinkutoriu/articles/a6cc88b5052c01</id>
        <link href="https://zenn.dev/jinkutoriu/articles/a6cc88b5052c01"/>
        <updated>2024-02-21T13:06:23.000Z</updated>
        <summary type="html"><![CDATA[スクリプト言語
JavaScriptやPythonはいわゆるスクリプト言語と呼ばれる種類のもので、他にはRubyなども記法の雰囲気がなんとなく似ているものがある。
複数のプログラム言語を触れたことある人は、パッとあるソースコードを見たときに、ふむふむ、この言語だなと察することもできる。特にドラマやCMなどのソースコードが映るシーンで一時停止した事がある人も少なくないだろう。

 空目するコードを作る
name = 'bob'
print(f'Hello {name}')
さて、このコードをみて、一体なんの言語だと思うだろうか。瞬間的に目が行くのは、変数宣言だろう。変数宣言で、宣言子が...]]></summary>
        <author>
            <name>鳥生 甚句</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで財務分析2 ~有価証券報告書からのデータ抽出~]]></title>
        <id>https://zenn.dev/gotoooo/articles/7ce9b8f7c43c5a</id>
        <link href="https://zenn.dev/gotoooo/articles/7ce9b8f7c43c5a"/>
        <updated>2024-02-21T13:02:41.000Z</updated>
        <summary type="html"><![CDATA[はじめに
前回はEDINET APIを介して調べたい企業の10年分の有価証券報告書に基づくデータを取得するところまでできました。
https://zenn.dev/gotoooo/articles/c71169e4b16f3e
本記事では取得したデータからROAツリー作成に必要なデータを抽出する部分を紹介します。

 やりたいこと
こんな感じで財務指標をツリー構造にしてグラフ表示させたい。
ROA
|--総資産回転率
|　　|--固定資産回転率
|　　　　|--有形固定資産回転率
|　　　　|--無形固定資産回転率
|　　|--運転資金回転日数
|　　　　|--売掛債権回転日数
|　...]]></summary>
        <author>
            <name>gotoooo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【LangChain】テキストをDocumentオブジェクトに変換する]]></title>
        <id>https://zenn.dev/buenotheebiten/articles/00120430d9182c</id>
        <link href="https://zenn.dev/buenotheebiten/articles/00120430d9182c"/>
        <updated>2024-02-21T12:02:00.000Z</updated>
        <summary type="html"><![CDATA[LangChainを使っていると、Documentオブジェクトを使う場面が多くあります。
今回は、テキストをDocumentオブジェクトに変換する方法のメモです。

 テキストをDocumentオブジェクトに変換するコード
とても簡単でした。
from langchain_core.documents import Document

text = "ジェシーは赤が好きだけど黄色は好きではない"
document = Document(page_content=text)
document

# Document(page_content='ジェシーは赤が好きだけど黄色は好きではない')...]]></summary>
        <author>
            <name>えびてん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python GUIソフトのexeファイル作成]]></title>
        <id>https://zenn.dev/kitagawadisk/articles/aead46336ce3b7</id>
        <link href="https://zenn.dev/kitagawadisk/articles/aead46336ce3b7"/>
        <updated>2024-02-21T03:48:36.000Z</updated>
        <summary type="html"><![CDATA[目標
Pythonで作成したGUIソフトをexeファイルにし、配布可能なGUIソフトを作成する。

 Python環境の設定
最終的にexeファイルを作成する時、Pythonの場合は現在のPython環境にインストールしたライブラリが全てコンパイルされてしまう。その場合、作成されたソフトの動作が遅くなったり、不必要にソフトのファイル容量が重くなる。
Pythonでコンパイルを行う場合は、先に特別環境を作成することが望ましい。
pyenv, pyenv-virtualenv, venv, Anaconda, Pipenv場合によってはDockerなど選択枝はあるが、今回はPipenvを...]]></summary>
        <author>
            <name>kitagawadisk</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FastAPI CRUD操作]]></title>
        <id>https://zenn.dev/kumaaa1212/articles/ed737c388b177d</id>
        <link href="https://zenn.dev/kumaaa1212/articles/ed737c388b177d"/>
        <updated>2024-02-21T02:38:05.000Z</updated>
        <summary type="html"><![CDATA[FastAPI CRUD操作
FastAPI CRUD操作について紹介していきます。CRUD操作ができるようになればその言語に対する基礎的な操作は行えるようになります。

 CRUD操作とは



英語
意味




C
Create(作成)　post


R
Read(読む）    get


U
Update(更新)　put


D
Delete(削除)　delete



エンジニアとして必要となる基本的な操作をCRUD操作と言います。作成・読む・更新・削除の４つです。

 Create(作成)　post
from fastapi import APIRouter, Path,...]]></summary>
        <author>
            <name>kuma</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Automating GIS Processes 2023 を読む その４]]></title>
        <id>https://zenn.dev/mopinfish/articles/automating-gis-04</id>
        <link href="https://zenn.dev/mopinfish/articles/automating-gis-04"/>
        <updated>2024-02-20T23:07:04.000Z</updated>
        <summary type="html"><![CDATA[概要
ヘルシンキ大学地球科学・地理学科の GIS コースの教材であるAutomating GIS Processes 203を読んでいきます。

 Lesson4

 講義動画
https://www.youtube.com/watch?v=xpetCZXp9Y4

 Overray Analysis

オーバーレイ解析は、2 つ以上のベクトル レイヤーを組み合わせて新しいジオメトリを作成する GIS 操作です。典型的なオーバーレイ操作には、2 つのレイヤーの結合結果にちなんで名付けられた和、交、差があります。


 Aggregating data

データ集計とは、データをグルー...]]></summary>
        <author>
            <name>Otsuka Noboru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FastAPI×MongoDBを用いたAPI開発の手ほどき① 〜環境構築〜]]></title>
        <id>https://zenn.dev/ryota_tamura_jp/articles/c1e72f47e5adce</id>
        <link href="https://zenn.dev/ryota_tamura_jp/articles/c1e72f47e5adce"/>
        <updated>2024-02-20T14:14:23.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは。LIRIS株式会社で取締役兼エンジニアをしています田村です。
4年ほどFastAPIを使ったAPI開発をしています。
昔はFlaskを扱っていましたが、FastAPIは軽量でAPIドキュメントを自動生成してくれるらしいということで乗り換えました。記法もFlaskに似ているため、Flask経験者はとっつきやすいと思います。
また、DBはPostgreSQLを使っていましたが、複雑な構造のデータ処理をすることが増え、パフォーマンス重視になってきたことからNoSQLのMongoDBを使うことにしました。
FastAPI×MongoDBで開発するようになり、パフォーマン...]]></summary>
        <author>
            <name>Ryota Tamura (LIRIS Co., Ltd.)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【フルマネージドRedisクラウド】Google Memory Storeってなんだ？？]]></title>
        <id>https://zenn.dev/ryuji_cre8ive/articles/8877103f7b9409</id>
        <link href="https://zenn.dev/ryuji_cre8ive/articles/8877103f7b9409"/>
        <updated>2024-02-20T13:06:53.000Z</updated>
        <summary type="html"><![CDATA[そもそもRedisって？


無料で使えるデータベース管理システムの一つ
高速にデータを処理することができる、という特徴がある
データベースの種類としては"NO SQL"というものに分類される


一言で言うと高速にデータを処理することができるNoSQLです。
高速な理由としてはオンメモリでデータを保存している揮発性のあるメモリだからです。
詳しくは以下の参考記事を参照してみてください。

 Memory Storeを使う
MemoryStoreとはGoogleが提供するフルマネージドなRedisクラウドです。

 自分の環境

Google Cloud Run (v1)
Redis...]]></summary>
        <author>
            <name>ryuji_cre8ive</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで財務分析1 ~EDINETからのデータ取得~]]></title>
        <id>https://zenn.dev/gotoooo/articles/c71169e4b16f3e</id>
        <link href="https://zenn.dev/gotoooo/articles/c71169e4b16f3e"/>
        <updated>2024-02-20T06:29:28.000Z</updated>
        <summary type="html"><![CDATA[はじめに
昨年末から新NISAをきっかけに株式投資を始め、諸々勉強中の者です。
Udemyでこちらの講座に感化され、Pythonでデータ収集から可視化まで自動化できるのではと思い立ったのがことの発端です。
「はじめての財務分析（中級）～財務分析から戦略へ！解説3.5時間超の演習中心コース、多くの実例から自分の事業観を深めよう！」
ネットを探ると先人の方々の記事がたくさん見つかり、大いに参考にさせていただきました。

 当面の目標
調べたい企業のROAツリーを作成して表示する

 当初の目論見
大まかな流れとしては

EDINETからデータを取得する
ROAツリーの作成に必要なデータを...]]></summary>
        <author>
            <name>gotoooo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pandasのメソッド以外でグループごとのdataframe操作がしたい]]></title>
        <id>https://zenn.dev/shakesalmon/articles/87f3a6702fad62</id>
        <link href="https://zenn.dev/shakesalmon/articles/87f3a6702fad62"/>
        <updated>2024-02-20T05:00:00.000Z</updated>
        <summary type="html"><![CDATA[初めに
pythonでテーブル構造のデータを扱う際に、pandasでグループごとに分けて操作をしたいときがあると思います。そんな時にdf.groupby()によるグループ操作を必ず行うのですが、いろんな記事を見てもgroupyした後に集計とか平均値とか取るだけの記事ばかりだったので、groupe分けしてそのあとにdataframeに対して操作したいんや～～ってなったんで、その時に使った便利なコードをまとめました。

 既存のメソッド
pandasのgroupebyオブジェクトには既に便利なメソッドが豊富にあります。
例えば、以下のようなdataframeがあるとします。



id
...]]></summary>
        <author>
            <name>shakesalmon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TiDB Cloudにローカルから接続してみる...GUIツールとPythonの2パターン]]></title>
        <id>https://zenn.dev/icck/articles/c4344f75460b53</id>
        <link href="https://zenn.dev/icck/articles/c4344f75460b53"/>
        <updated>2024-02-19T15:16:30.000Z</updated>
        <summary type="html"><![CDATA[はじめに
TiDB Cloudを動かしながら学ぶ、アカウント作成〜DB基本操作までの記事にてTiDB Cloud上でSQLを実行することができるようになりました。
今回は、「TiDB Cloud上以外では、どうやってDB接続するんだろう？」を実践していこうと思います。
言語やツール、プログラムを一度に全部試せないので対象を絞らせて頂きましたが下記条件で試します。



#
シーン
利用手段




1
開発・本番運用とリリース後考えてローカルからツールによるDB接続
DBeaver


2
AWS上で稼働を目指したローカル開発でのテスト接続
Python(SQLAlchemy）

...]]></summary>
        <author>
            <name>icck</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[llama-cpp-pythonをMacで動かしているときにやたら遅いと思ったら]]></title>
        <id>https://zenn.dev/optimisuke/articles/da30187e9895b8</id>
        <link href="https://zenn.dev/optimisuke/articles/da30187e9895b8"/>
        <updated>2024-02-19T14:07:19.000Z</updated>
        <summary type="html"><![CDATA[llama-cpp-python 使ってる？
https://github.com/abetlen/llama-cpp-python
macOS (Metal) で動く。すごい。
https://llama-cpp-python.readthedocs.io/en/latest/install/macos/
ただ、環境変えたら何故か動かなくなった。。。
調べたら、どうもバグっぽい。バージョンを低くしたら動いた。Activity Monitor 見たら 期待通り GPU も使ってくれてそう。
pip uninstall llama-cpp-python
CMAKE_ARGS="-DLLAM...]]></summary>
        <author>
            <name>Naosuke</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[設定管理ツール Hydra で内部構造ごと書き換える。]]></title>
        <id>https://zenn.dev/gesonanko/articles/417d43669cf2af</id>
        <link href="https://zenn.dev/gesonanko/articles/417d43669cf2af"/>
        <updated>2024-02-19T12:36:08.000Z</updated>
        <summary type="html"><![CDATA[はじめに
本記事は 機械学習の領域で主にハイパーパラメータの管理に用いられるツールである、Hydraについて解説する。Hydraは単にハイパーパラメータを階層的に記述できるというだけでなく、より複雑に、クラス・処理構造そのものを、ソースファイルを新たに追加することなく変更したい、という要望に応える。
本記事の対象読者はある程度Pythonやシステム設計に精通した者とする。モジュールシステム、クラス、デコレータなどの概念を理解していることが前提である。
さらに本記事は 機械学習のハイパーパラメータの管理だけでなく、システムそのものを コンフィギュレーション することに興味がある読者も対...]]></summary>
        <author>
            <name>GesonAnko</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonの非同期処理の基礎とOpenAI APIへ並列リクエストする実践例]]></title>
        <id>https://zenn.dev/commmune/articles/19296b87231ea8</id>
        <link href="https://zenn.dev/commmune/articles/19296b87231ea8"/>
        <updated>2024-02-19T09:20:05.000Z</updated>
        <summary type="html"><![CDATA[こんにちは、commmuneでデータサイエンティストをしているひぐです。
人間が苦手なマルチタスクをLLMに任せたら、効果的に処理してくれるのではないか?というモチベーションのもと、Pythonの非同期処理を使って並列かつストリーミングでChatGPTの回答を出力するアプリを作りました🤖
例えば下記は、ある課題を入力すると、深さ・広さ・構造・時間軸という異なる観点で解像度を上げてくれるアプリケーションです。

アプリに関する登壇資料↓
https://speakerdeck.com/zerebom/async-call-llm
このアプリ作成にあたってPythonの非同期処理を勉強したと...]]></summary>
        <author>
            <name>zerebom</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kotomamba: mamba-2.8B 学習知見]]></title>
        <id>https://zenn.dev/kotoba_tech/articles/f15b2495d44c4f</id>
        <link href="https://zenn.dev/kotoba_tech/articles/f15b2495d44c4f"/>
        <updated>2024-02-19T03:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Kotoba Technologiesでインターンをしている東京工業大学 B4 横田研究室の藤井(@okoge_kaz)です。
Kotoba TechnologiesはNLPと分散並列学習に関する技術を用いて、日本及び非英語圏におけるLLMやマルチモーダルモデルの実運用に向けた研究開発を行っています。
本日(2024/2/19) 2つのmambaモデルをリリースさせて頂きました。
1つは、from scratchから日本語と英語のコーパスにて学習を行ったkotomamba-2.8B-v1.0、もう１つはstate-spaces/mamba-2.8b-slimpjから日本語と...]]></summary>
        <author>
            <name>Kazuki Fujii</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Powertools for AWS (Python) を用いた DynamoDB Streams Trigger のカスタマイズ方法]]></title>
        <id>https://zenn.dev/todoker_blog/articles/217da602e2cff3</id>
        <link href="https://zenn.dev/todoker_blog/articles/217da602e2cff3"/>
        <updated>2024-02-19T02:53:00.000Z</updated>
        <summary type="html"><![CDATA[こんにちは。hayata-yamamoto です。
今回は、Powertools for AWS (Python) を用いて、DynamoDB Streams で動く Lambda 関数を実装する方法を共有します。直近、ゼロETL統合が発表されたばかりの部分ですが、自前でハンドラを書きたいケースはおそらくまだまだ多いはずです。まずは、ゼロ統合ETLでシンプルに解決できるかを考えた後に、もしそれでも実装が必要なら本記事を参考にしてみてくださいませ！
https://aws.amazon.com/jp/blogs/news/amazon-dynamodb-zero-etl-integrati...]]></summary>
        <author>
            <name>山本隼汰 | Hayata Yamamoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで高速なグラフネットワーク計算: グラフライブラリの比較実験とrustworkxの紹介]]></title>
        <id>https://zenn.dev/zenkigen_tech/articles/e1f8c90b7a7a8b</id>
        <link href="https://zenn.dev/zenkigen_tech/articles/e1f8c90b7a7a8b"/>
        <updated>2024-02-19T01:30:00.000Z</updated>
        <summary type="html"><![CDATA[TL;DR

NetworkXはよく知られたPythonのネットワーク分析ライブラリだが、遅い

実験の結果、Rustで実装されたrustworkxが速く、さらにNetworkXからの置き換えやすさの観点で優れている
NetworkXからrustworkxに置き換えたい人はここから読んでください

rustworkxの公式ドキュメントは以下です。
https://www.rustworkx.org/#

 はじめに
こんにちは。ZENKIGENデータサイエンスチーム所属の廣田です。原籍はオムロンソーシアルソリューションズ株式会社 技術創造センタですが、社外出向でZENKIGENに所属...]]></summary>
        <author>
            <name>redtea</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GitLabでTODO登録を自動化してみた]]></title>
        <id>https://zenn.dev/secondselection/articles/gitlab_todos</id>
        <link href="https://zenn.dev/secondselection/articles/gitlab_todos"/>
        <updated>2024-02-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
皆さんは、TODO管理を"Google Keep"などのツールで実施されているのではないでしょうか。
また、実施すべきタスク（月次処理など）をチームメンバー全員に登録するのは大変です。
今回は普段使っているGitLabを使ったチームや部署のTODO管理を実施する方法を記事にしました。
ポイントとしては、以下の2つになります。

「定義用のIssue」を1つ立てることでメンバー全員にTODOを登録するところを自動化
毎朝、リマインダーをチャット（Google Chat）に投稿する


 下準備

 Issueのテンプレートを用意する
「タスク定義用」のissueテンプレートは...]]></summary>
        <author>
            <name>u_hijiri</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[数理最適化で看護師のシフト（勤務表）を自動生成してみた]]></title>
        <id>https://zenn.dev/gorori/articles/shift-auto-generate</id>
        <link href="https://zenn.dev/gorori/articles/shift-auto-generate"/>
        <updated>2024-02-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[最近、看護師のシフト（勤務表）の自動生成について調査したので、その内容を少しご紹介しようと思います。
Colab で実装したので、リンク貼っておきます。
https://colab.research.google.com/drive/1W04EwTSQqtMtJKlK7GTXNadsLZulwcTI?usp=sharing

 シフト作成って思っているより難しい
シフトの作成は職員のシフト希望やスキル、労務規定など考慮しないといけないことが多く、実はかなり複雑です。
看護師のシフト（勤務表）作成をピックしたナーススケジューリング問題というテーマが存在するぐらいです。
参考
https:/...]]></summary>
        <author>
            <name>Maron</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ローカルでSentencepieceを使ってトークナイザーを作成し、BERTを事前学習させ、JGLUEで性能評価するまで]]></title>
        <id>https://zenn.dev/y_u_k_i/books/6dc2cefe59ddde</id>
        <link href="https://zenn.dev/y_u_k_i/books/6dc2cefe59ddde"/>
        <updated>2024-02-18T22:13:38.000Z</updated>
        <summary type="html"><![CDATA[日本語のBERTを作ろうと思ったとき、文献が微妙に古かったり、Google Colaboratory環境上での解説だったりと、学部生やつよつよPC所持AI入門者にはやや辛い環境だと思います。そこで、4年生の1年間で得た知識を本にしました。これだけでスタートラインはだいぶ変わります。環境構築をなるべく細かく記載するので、ぜひ読んでください。]]></summary>
        <author>
            <name>ゆうき</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【FDUA】第2回 金融データ活用チャレンジ参加記（15th solution）]]></title>
        <id>https://zenn.dev/ttaichicchi/articles/54727aeb9b401b</id>
        <link href="https://zenn.dev/ttaichicchi/articles/54727aeb9b401b"/>
        <updated>2024-02-18T14:08:18.000Z</updated>
        <summary type="html"><![CDATA[はじめに
https://signate.jp/competitions/1325
開催期間：2024/1/18 18:00 ～ 2024/2/15 23:59
第2回 金融データ活用チャレンジに参加し、最終結果15位になりました。
解法とコンペ開催中の流れを振り返りながら感じたことをまとめていきます。


 15th解法
CV: 0.687
Public: 0.6889767
Private: 0.6869111

 サマリ


 1. 特徴量エンジニアリング + 線形モデル/GBDT/NN

 特徴量エンジニアリング
最終的に各モデルに入力した特徴量は以下のものです。


カテゴ...]]></summary>
        <author>
            <name>たいちっち</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTMLファイル内にPythonのコードを記述するツール「PyScript」を使ってみた]]></title>
        <id>https://zenn.dev/torakm/articles/92fd244974efd6</id>
        <link href="https://zenn.dev/torakm/articles/92fd244974efd6"/>
        <updated>2024-02-18T13:11:18.000Z</updated>
        <summary type="html"><![CDATA[PyScript とは
PyScriptは、Pythonのコードをhtmlファイル内に記述することで、Pythonのコードを実行できるようにするツールである。

 PyScript を使ってみた
下記のようにhtmlファイル内にPythonのコードを記載することで、Pythonのコードを実行できる。
作成したhtmlファイルをブラウザを開くことで、実行結果を確認できる。
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <link
      rel=...]]></summary>
        <author>
            <name>torakm</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VSCodeでpython仮想環境内の外部ライブラリへコードジャンプできるようにする]]></title>
        <id>https://zenn.dev/chocomochi/articles/701177d12d2f1a</id>
        <link href="https://zenn.dev/chocomochi/articles/701177d12d2f1a"/>
        <updated>2024-02-18T11:03:34.000Z</updated>
        <summary type="html"><![CDATA[はじめに
WSL環境でpython、venv環境を使っているのですが、VSCodeで実装する際に外部ライブラリへのコードジャンプできるようにする方法をメモ書き程度で記載しようと思います。

 必要なこと

VSCodeでWSL接続を行う
インタプリタの設定で、venv環境内のpythonを選択する

以上を行えば、venv環境にインストールした外部ライブラリへのコードジャンプや自動補完ができるようになります。
wslへのpythonのインストールがまだの方はこちら
https://zenn.dev/chocomochi/articles/53dd04c091f381
pythonのV...]]></summary>
        <author>
            <name>ちょこおもち</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jupyter Notebookのシェルコマンド!とマジックコマンド%]]></title>
        <id>https://zenn.dev/optimisuke/articles/67aa4695a1a01a</id>
        <link href="https://zenn.dev/optimisuke/articles/67aa4695a1a01a"/>
        <updated>2024-02-18T10:51:57.000Z</updated>
        <summary type="html"><![CDATA[シェルコマンド!とマジックコマンド%

!（シェルコマンド）は、ファイルシステムの操作や外部プログラムの実行など、シェル経由で行いたい操作に使用します。
%（マジックコマンド）は、Jupyter Notebook 自体の機能や環境を制御するためのコマンドに使用します。これにはディレクトリの変更、環境変数の設定、ノートブックの表示設定の調整などが含まれます。

 !cd sample_dataと%cd sample_dataの違い

 !cd sample_data

!cd sample_dataをしてもディレクトリの移動は反映されません。! で実行されるシェルコマンドが一時的なサブ...]]></summary>
        <author>
            <name>Naosuke</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pyenvでpython3.12をインストール(WSL)]]></title>
        <id>https://zenn.dev/chocomochi/articles/53dd04c091f381</id>
        <link href="https://zenn.dev/chocomochi/articles/53dd04c091f381"/>
        <updated>2024-02-18T10:10:05.000Z</updated>
        <summary type="html"><![CDATA[はじめに
WSLでpython3.12をpyenvでインストールしていきます。
pyenvを使うとグローバルのpythonバージョンの切り替えやプロジェクトごとのpythonバージョンの使い分けができるので、便利です😊

 手順

pyenvはインストール用のshellを用意してくれているのでそちらの手順で進めます。
https://github.com/pyenv/pyenv-installer

シェルをインストール&実行curl https://pyenv.run | bash


以下のコマンドをそれぞれ実行してパスを通すecho 'export PYENV_ROOT...]]></summary>
        <author>
            <name>ちょこおもち</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[アニメで分かるgRPC]]></title>
        <id>https://zenn.dev/hitoe_kami/articles/0070-articles-anime-radio-grpc</id>
        <link href="https://zenn.dev/hitoe_kami/articles/0070-articles-anime-radio-grpc"/>
        <updated>2024-02-18T09:00:00.000Z</updated>
        <summary type="html"><![CDATA[TL;DR

gRPCを使ってアニメラジオの新着情報をSlackに通知します
gRPC ClientをGoで構築します
gRPC ServerをPythonで構築します


 はじめに
どうも、アニメマスターです！
ところで皆さん、アニメラジオっていつ更新されてるか分からなくないですか？
わたしは分かりません！
ということで、今回はアニメラジオが更新されたらSlackに通知するシステムを、わざわざgRPCを使って世界一無駄に構築していきたいと思います！！

 概観

GoでYouTube Data APIからアニメラジオの情報を取得し、クライアントからストリーミングでPythonサー...]]></summary>
        <author>
            <name>MiyukiP</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[さくらVPSでコンパイル中にKillされる。]]></title>
        <id>https://zenn.dev/nekomimimi/articles/6f26e465d6253b</id>
        <link href="https://zenn.dev/nekomimimi/articles/6f26e465d6253b"/>
        <updated>2024-02-18T07:18:01.000Z</updated>
        <summary type="html"><![CDATA[事象
さくらVPSで1GByteのUbuntuでPythonのTA-Libをpip3でインストールするのを横で見ていた時に、
(省略...)
      x86_64-linux-gnu-gcc: fatal error: Killed signal terminated program cc1
      compilation terminated.
      error: command '/usr/bin/x86_64-linux-gnu-gcc' failed with exit code 1
      [end of output]

  note: This err...]]></summary>
        <author>
            <name>nekomimimi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac への Python インストール作業の覚書(2024年2月)]]></title>
        <id>https://zenn.dev/konru/articles/python_install_mac_202402</id>
        <link href="https://zenn.dev/konru/articles/python_install_mac_202402"/>
        <updated>2024-02-18T06:53:40.000Z</updated>
        <summary type="html"><![CDATA[この記事について

 内容
MacBook Pro に Python をインストールした作業の覚書

 作業時期と環境

作業時期: 2024年2月18日
ハードウェア: MacBook Pro (Apple M3 Pro)
システムのバージョン: macOS 14.3.1（23D60）
Homebrew (Homebrew 4.2.8)


 参考にした記事など
Python開発環境をMacにインストールする（2023年1月）

 この記事に含まれないこと

Homebrew の導入


 大まかな作業の流れ

Homebrew を使用して pyenv をインストール
.zshrc...]]></summary>
        <author>
            <name>roka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2/11~2/17で技術的にやったこと]]></title>
        <id>https://zenn.dev/zi_matsu/articles/2f3f023933cdd8</id>
        <link href="https://zenn.dev/zi_matsu/articles/2f3f023933cdd8"/>
        <updated>2024-02-18T06:42:58.000Z</updated>
        <summary type="html"><![CDATA[mysqlの1205 HY000: Lock wait timeout exceededの話
システムの仕様的にcommitのタイミングは決まっていて、フラッシュしてdbの値を取得しないといけない時があった。この時に、フラッシュしてdbから発行された値を取得してそれを挿入するデータに当てはめてsession.addしようとすると上記のエラーが出た

 原因
!
flushしたらテーブルがロックされる


 解決法
!
commitしてあげる
自分の場合は、処理としてはsessionに追加するのを後続の処理に混ぜても問題なかったので、後続の処理に混ぜて解決した。
flushしたらテーブ...]]></summary>
        <author>
            <name>Matsuzaki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FastAPIとPostgreSQLで実践的な開発：複数モデルの管理とデータベース操作の実装]]></title>
        <id>https://zenn.dev/azuki9140/articles/57b09f00e586d7</id>
        <link href="https://zenn.dev/azuki9140/articles/57b09f00e586d7"/>
        <updated>2024-02-18T05:33:16.000Z</updated>
        <summary type="html"><![CDATA[初めに
前回の記事では、FastAPI と SQLAlchemy を使用して基本的なデータベース操作を行う方法を探りました。また、Alembic を通じて、データベースマイグレーションの設定方法についても詳細に解説しました。これらの基礎知識については、前回の記事で詳しく説明していますので、まだご覧になっていない方は是非一度ご覧ください。
https://zenn.dev/azuki9140/articles/6385e39ed05cde
この記事では、更に一歩進み、FastAPI と SQLAlchemy を使用してよりより実践的なデータベース操作を実行するテクニックに焦点を当てます...]]></summary>
        <author>
            <name>AzuKi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[マケデコ新NISA x データ分析イベント(2024/2/15)まとめ]]></title>
        <id>https://zenn.dev/gamella/articles/4223b239ccf2d9</id>
        <link href="https://zenn.dev/gamella/articles/4223b239ccf2d9"/>
        <updated>2024-02-18T05:32:17.000Z</updated>
        <summary type="html"><![CDATA[マケデコという主に株式関連のマーケットAPIを活用し、分析や予測モデルを構築しているbotterのDiscordコミュニティをJPX総研様と運営しています。
いままで18回ほどマケデコでイベントを主催して来ましたが、イベントのまとめをしていなかったので、過去のイベントの情報がロストするので、ちょっとイベントが終わった後にきちんと情報をまとめようということで、ブログに今後はまとめようと思います。

 セミナー動画(Youtube)

マケデコチャンネル
該当の動画


 UKIさん: 新NISAでの個別株売買の勘所

資料 新NISAでの個別株売買の勘所



 個人的なメモ

実際にデー...]]></summary>
        <author>
            <name>tomo@Alpaca</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Signate 第2回 金融データ活用チャレンジ 精度を上げるためのTips]]></title>
        <id>https://zenn.dev/nishimoto/articles/88e6c191401d5a</id>
        <link href="https://zenn.dev/nishimoto/articles/88e6c191401d5a"/>
        <updated>2024-02-18T04:32:56.000Z</updated>
        <summary type="html"><![CDATA[はじめに
第2回 金融データ活用チャレンジのベースライン記事の続き記事です。コンペの概要などは過去記事をご参照ください。
この記事では自分が精度を上げたTipsをいくつか書いています。
コードのGoogle colabはこちら。

 Tips

 1. カテゴリカル変数が多いデータにはCatboost
カテゴリカル変数が多いデータであったため、Catboostにカテゴリカル変数として突っ込むのが有効であった。自分の戦略の肝はこれだけ。
下記のページに記載があるが、分類問題においてはTarget Encoding的な変換がなされるようです。
https://catboost.ai/en...]]></summary>
        <author>
            <name>nishimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[手続き型から関数型への書き換え 言語別ガイド]]></title>
        <id>https://zenn.dev/tonbi_attack/articles/04357431458aa3</id>
        <link href="https://zenn.dev/tonbi_attack/articles/04357431458aa3"/>
        <updated>2024-02-18T02:23:12.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事では、手続き型プログラミングと関数型プログラミングの違いを明らかにし、複数の言語を通じて、同じ問題を解決するための両アプローチを示します。

 手続き型と関数型の基本的な違い
手続き型プログラミングと関数型プログラミングは、コードの書き方とプログラムの設計において根本的に異なるアプローチを取ります。これら二つのスタイルの基本的な違いを理解することは、プログラミングの柔軟性を高め、より効果的なコードを書く上で重要です。

 手続き型プログラミング
手続き型プログラミングは、命令の列としてプログラムを考えます。このアプローチでは、データ構造を操作するために一連の手続き（...]]></summary>
        <author>
            <name>tonbiattack</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ありそうでなかった(?)エントリーシート用メモアプリ]]></title>
        <id>https://zenn.dev/hato_72/articles/1d542cdc4be996</id>
        <link href="https://zenn.dev/hato_72/articles/1d542cdc4be996"/>
        <updated>2024-02-17T15:31:29.000Z</updated>
        <summary type="html"><![CDATA[作成したきっかけ
私は普段、就職活動でエントリーシートを書く際に、設問をPCのメモ帳にコピーしてその下に私の回答を記述していました。
ただ、メモ帳だと文字数を数えるのがめんどくさいので、一度Wordに場所を移して文字数を計測してまたメモ帳に貼るという行為を繰り返していました。
しかし、この作業の中でも少し問題がありました。
それは、以下の画像のように、wordの画面の左下に表示される文字数は半角で計算される数(「python」で1文字と計算される)のため、英単語などを含む場合はいちいち左下をクリックして本来の文字数を確認する必要があったのです。

私はこれに少しずつストレスがたまって...]]></summary>
        <author>
            <name>hato</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[jupyter notebookのpdbメモ]]></title>
        <id>https://zenn.dev/hijikix/articles/38b34114241743</id>
        <link href="https://zenn.dev/hijikix/articles/38b34114241743"/>
        <updated>2024-02-17T13:09:26.000Z</updated>
        <summary type="html"><![CDATA[概要
jupyter notebookでpdbを使ってデバッグするときのtips

 例外が発生したあとにデバッグ開始
%debug

 例外が発生したときに自動でデバッグ開始
%pdb on

 指定のコードに到達したときにデバッグ開始
import pdb;pdb.set_trace()

 cheat sheet
https://kapeli.com/cheat_sheets/Python_Debugger.docset/Contents/Resources/Documents/index

 ライブラリ内の特定の行にブレイクポイントを貼る
transformersのLlama...]]></summary>
        <author>
            <name>Daisuke Hashimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Blender Pythonでテクスチャを頂点カラーにベイクする]]></title>
        <id>https://zenn.dev/dimebag29/articles/6bb9d378cdb4c9</id>
        <link href="https://zenn.dev/dimebag29/articles/6bb9d378cdb4c9"/>
        <updated>2024-02-17T10:43:55.000Z</updated>
        <summary type="html"><![CDATA[概要
Blender内のPythonを利用して、メッシュの各頂点のUV座標からテクスチャの色を取得し、頂点カラーにベイクする方法を紹介します
Unity(VRChat)でメッシュを利用する場合、頂点カラーにはsRGB色空間ではなくLinear色空間の色をベイクする必要があることに注意してください

 環境

Blender 3.3


 Pythonスクリプト
import bpy


# UV座標からテクスチャの色を返す関数
def tex2D(TexBufferList, UvPos):
    # 参考 https://blender.stackexchange.com/que...]]></summary>
        <author>
            <name>dimebag29</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】VSCode拡張機能で自信をもってコーディングする方法！]]></title>
        <id>https://zenn.dev/safubuki/articles/turtle-20240215-pymind</id>
        <link href="https://zenn.dev/safubuki/articles/turtle-20240215-pymind"/>
        <updated>2024-02-17T10:03:33.000Z</updated>
        <summary type="html"><![CDATA[プログラミングで、自分の書いたコードに自信が持てないことってありませんか？
他人にコードを見せることが恥ずかしくて嫌だという経験、あるのではないでしょうか。
私も以前はそうでした。
コードが汚いと思われたり、能力が低いと思われたりするのではないかと不安になり、また自らの内面をさらけ出すようで何とも恥ずかしいものでした。
しかし、プログラミング能力向上にとって、コードを他人に見せてフィードバックを受けることは大切です。
そこで試していただきたいのが、VSCodeエディタと拡張機能を使う方法です。コードのエラーチェック、整形、補完などを拡張機能によって自動でできるので、読みやすさや品質を高め...]]></summary>
        <author>
            <name>タートルヴィレッジ・ゆう</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[標準ライブラリのxmlrpc.serverを使ってみる]]></title>
        <id>https://zenn.dev/coffee_break/articles/047a35d5161919</id>
        <link href="https://zenn.dev/coffee_break/articles/047a35d5161919"/>
        <updated>2024-02-17T09:26:30.000Z</updated>
        <summary type="html"><![CDATA[https://docs.python.org/ja/3/library/xmlrpc.server.html

 サーバを立てるコード
import logging
from xmlrpc.server import SimpleXMLRPCServer
from xmlrpc.server import SimpleXMLRPCRequestHandler

logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)
...]]></summary>
        <author>
            <name>t</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AI の力でファイル形式を判定する Google 製の「Magika」を試してみる]]></title>
        <id>https://zenn.dev/kou_pg_0131/articles/magika-introduction</id>
        <link href="https://zenn.dev/kou_pg_0131/articles/magika-introduction"/>
        <updated>2024-02-17T09:00:00.000Z</updated>
        <summary type="html"><![CDATA[面白そうだったので試しに使ってみました。
https://github.com/google/magika
https://gigazine.net/news/20240216-google-magika-ai-file-type-identification/

検証したバージョン

Magika の使い方

インストール
CLI として使う
Python ライブラリとして使う
JavaScript ライブラリとして使う
Magika がサポートしているファイル形式


まとめ


 検証したバージョン

Magika v0.5.0


 Magika の使い方

 インストール
pi...]]></summary>
        <author>
            <name>koki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AtCoder Eco Manager : 提出データ管理をより緑に]]></title>
        <id>https://zenn.dev/mkazu2023/articles/c1dafbaa370759</id>
        <link href="https://zenn.dev/mkazu2023/articles/c1dafbaa370759"/>
        <updated>2024-02-17T07:05:40.000Z</updated>
        <summary type="html"><![CDATA[AtCoder Eco Manager : 提出データ管理をより緑に

 背景
AtCoderは世界中のエンジニアが技術を競い合い、スキルを磨くための競技プログラミングプラットフォームです。
多くの参加者が問題を解くためにコードを提出していますが、提出コードを効率的に管理することは参加者にとって一つの課題となっています。
サーバへの頻繁なアクセスはサーバーへの不必要な負荷とデータ転送量の増加に繋がる可能性があります。

 目的
AtCoder Eco Managerはサーバへの頻繁なアクセスを減らし、提出データの効率的な管理を実現します。

 機能概要

最新のAC（Accept）提...]]></summary>
        <author>
            <name>shortcut</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのzip関数の罠を回避する]]></title>
        <id>https://zenn.dev/nakurei/articles/avoiding-python-zip-function-trap</id>
        <link href="https://zenn.dev/nakurei/articles/avoiding-python-zip-function-trap"/>
        <updated>2024-02-17T02:40:48.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Pythonのzip関数は、複数のイテラブルを並列に反復処理するための強力なツールである。たとえば、複数のリストを同時にループさせる処理を、簡潔で読みやすく書ける。
a = [1, 2, 3]
b = ["a", "b", "c"]
for x, y in zip(a, b):
    print(x, y)
このコードは、次を出力する。
1 a
2 b
3 c
しかし、異なる長さのイテラブルに対するzip関数の処理は、サイレントエラーにつながる可能性がある。zip関数は、警告なしにもっとも短いイテラブルに対して処理を終了してしまう。そのため、ソフトウェア開発においてバグを...]]></summary>
        <author>
            <name>NakuRei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CodeBuildのローカルビルド環境変数展開: eval不使用版]]></title>
        <id>https://zenn.dev/nondescript/articles/7db2e3ff673acc</id>
        <link href="https://zenn.dev/nondescript/articles/7db2e3ff673acc"/>
        <updated>2024-02-16T13:11:20.000Z</updated>
        <summary type="html"><![CDATA[下記記事の続き: eval不使用版


 TL;DR

環境変数ファイルをマウント&読み込みさせたコンテナを起動し、キーと値のペアをbase64エンコード
local_build.shでbase64デコードした環境変数をファイルに書き出してcustomer-specific.ymlへ追記する


 イメージ図


 事前準備


環境変数エンコード環境作成

エンコードスクリプト


parse_envs.py
import os
from base64 import b64encode
from pathlib import Path

envs: dict[str, str]...]]></summary>
        <author>
            <name>素人の戯言</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Azure SQL Databaseへのアクセスが稀に500エラーとなるので原因調査]]></title>
        <id>https://zenn.dev/headwaters/articles/698404424f3b16</id>
        <link href="https://zenn.dev/headwaters/articles/698404424f3b16"/>
        <updated>2024-02-16T08:30:55.000Z</updated>
        <summary type="html"><![CDATA[環境
・App Service（FastAPI製のアプリケーション）
・SQL Database

 通信・認証方法
通信...プライベートエンドポイントとVPN接続からのみのアクセス
認証...ODBCドライバーを使ったAAD認証

 発生したエラー
以下のエラーが稀に発生します。
タイミングとしては、最後にAPIリクエストをしてからだいぶ時間が経った後にAPIリクエストをすると発生するようです。

(pyodbc.OperationalError) ('08S01', '[08S01] [Microsoft][ODBC Driver 18 for SQL Server]TCP P...]]></summary>
        <author>
            <name>ikebowsan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[LangChainでいろんなLLMを試す（GPT・Claude・Gemini・Mistral）]]></title>
        <id>https://zenn.dev/buenotheebiten/articles/573c64d9019359</id>
        <link href="https://zenn.dev/buenotheebiten/articles/573c64d9019359"/>
        <updated>2024-02-16T04:37:22.000Z</updated>
        <summary type="html"><![CDATA[LangChainでは様々なLLMがサポートされています。
それぞれ呼び出すための最低限のコードをまとめてみました。

 モデル別の料金比較（早見表）



Model
Input(1K tokens)
Output(1K tokens)
Context window
比較




gpt-4-0125-preview
1.5円
4.5円
128,000 tokens
100


gpt-3.5-turbo-0125
0.075円
0.225円
16,000 tokens
5


claude-2.1
1.2円
3.6円
200,000 tokens
80


claude-2.0
1....]]></summary>
        <author>
            <name>えびてん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【検証】GPTで長文の要約をするなら？（MapReduce・MapRerank・Refine）]]></title>
        <id>https://zenn.dev/buenotheebiten/articles/028bf065b05b40</id>
        <link href="https://zenn.dev/buenotheebiten/articles/028bf065b05b40"/>
        <updated>2024-02-16T00:53:06.000Z</updated>
        <summary type="html"><![CDATA[今回は、長文をGPTで要約する方法として「MapReduce」「MapRerank」「Refine」の3つを見かけたので、それぞれの「精度」や「費用」、「応答スピード」を簡単に検証して調べてみたメモです。
（注: 今回の評価はChatGPTでしているので主観的な評価は含まれていません。また各プロンプトが細かく作れていなかったり、全体的にざっくりとした検証です。）

 📝 検証内容

「URLから要約を作成する手法」でどれが優れているのかを検証します。
特に今回は、長文テキストを分割した後の要約&結合処理(Combine)部分の違いが気になったので、そこを中心に行います。

 ① ...]]></summary>
        <author>
            <name>えびてん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Blender Pythonでメッシュの各ポリゴンの各頂点の頂点座標値、Shapekeyごとの頂点座標値、UV座標値、頂点カラーを取得する]]></title>
        <id>https://zenn.dev/dimebag29/articles/61811779c3a13b</id>
        <link href="https://zenn.dev/dimebag29/articles/61811779c3a13b"/>
        <updated>2024-02-15T13:56:12.000Z</updated>
        <summary type="html"><![CDATA[概要
メッシュの各ポリゴンの各頂点の
　・頂点座標値
　・各Shapekeyに登録されている頂点座標値
　・UV座標値
　・頂点カラー
を取得する方法を紹介します
今回は例としてデフォルトキューブを使って情報を取得してみます

 環境

Blender 3.3


 Pythonスクリプトと実行方法

Blenderを開き、デフォルトキューブを消さずに「ウィンドウ」タブの「システムコンソール切り替え」をクリックし、スクリプトの実行結果やエラーが見えるようにする
「Sclipting」タブの「＋新規」ボタンをクリックして以下のPythonスクリプトを貼り付け、「▶」ボタンをクリックし、...]]></summary>
        <author>
            <name>dimebag29</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django ORM クエリセット]]></title>
        <id>https://zenn.dev/satumahayato010/articles/0f3cf817b85115</id>
        <link href="https://zenn.dev/satumahayato010/articles/0f3cf817b85115"/>
        <updated>2024-02-15T12:48:12.000Z</updated>
        <summary type="html"><![CDATA[SELECT
テーブル名: products
カラム: id, name, price, created_at
-- 全ての商品を取得する
SELECT * FROM products;

-- 商品の名前と価格だけを取得する
SELECT name, price FROM products;
# 全ての商品を取得する
Product.objects.all()

# 商品の名前と価格だけを取得する 
products = Product.objects.only('name', 'price')

 SELECTを使用するときの注意点

インデックスを適切に設定していない場合、大量...]]></summary>
        <author>
            <name>satumahayato010</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[アドベントカレンダーや会社ブログの進捗管理を自動化]]></title>
        <id>https://zenn.dev/ivry/articles/e0e2049cc484c6</id>
        <link href="https://zenn.dev/ivry/articles/e0e2049cc484c6"/>
        <updated>2024-02-15T06:47:12.000Z</updated>
        <summary type="html"><![CDATA[はじめに
電話自動応答サービスIVRyでエンジニアをしている小瀬です。
https://ivry.jp/
普段はバックエンドの開発がメインですが、今回はプロダクト開発ではなく、社内業務で利用する便利なリマインダーを作成した経験についてブログに書きたいと思います。

 2023年のアドカレは50ブログ
2023年のIVRyのアドカレは、紅組と白組に分かれてPV数で競う紅白戦を実施しました。
そのため、IVRy全体で25 x 2 = 50件のブログを投稿しました。
https://x.com/IVRy_jp/status/1730521537294520802?s=20
この進捗管理を人...]]></summary>
        <author>
            <name>kose_atsuya</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[行列積状態について考える (10) — 50 量子ビットの期待値計算]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-matrix-product10</id>
        <link href="https://zenn.dev/derwind/articles/dwd-matrix-product10"/>
        <updated>2024-02-14T18:08:43.000Z</updated>
        <summary type="html"><![CDATA[目的
行列積状態について考える (9) — 100 量子ビットのもつれ状態 で大量の量子ビットの行列積状態 (MPS) のもつれ状態を見た。
テンソルネットワーク計算で量子状態を求める場合、係数である波動関数ごとに計算する必要があり、すべての波動関数を計算しようとすると (量子ビット数について) 指数関数的な計算量になる。
ところがハミルトニアンの期待値計算の場合、実はたった 1 つの波動関数を求めれば良いので MPS の恩恵を得ることができる。今回はこれを見たい。

Qiskit Aer
cuTensorNet
自前実装

の 3 パターン実装して確認してみたい。

 期待値計算
...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[StreamlitでPyGWalkerを試してみる]]></title>
        <id>https://zenn.dev/0msys/articles/34a380d0af1269</id>
        <link href="https://zenn.dev/0msys/articles/34a380d0af1269"/>
        <updated>2024-02-14T15:45:34.000Z</updated>
        <summary type="html"><![CDATA[はじめに
前から存在は知っていたものの、なんか難しそうなので手を出してなかったPyGWalkerを試してみました。
ここにPyGWalkerの紹介と、デモコードがあるので、これを動かしてみます。
https://docs.kanaries.net/ja/pygwalker/use-pygwalker-with-streamlit
例によって、以前作ったStreamlitのテンプレートを使用します。

 依存関係のインストール
pandas, streamlit, pygwalkerをインストールするように書かれていますが、pandasはstreamlitに含まれているので、pygwa...]]></summary>
        <author>
            <name>0msys</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Azure OpenAI Service の Assistant API を理解する]]></title>
        <id>https://zenn.dev/microsoft/articles/533488db14e442</id>
        <link href="https://zenn.dev/microsoft/articles/533488db14e442"/>
        <updated>2024-02-14T08:03:10.000Z</updated>
        <summary type="html"><![CDATA[はじめに
OpenAI DevDay にて本家 OpenAI の β 版機能として発表された Assistant API が Azure OpenAI Service (AOAI) でも Assistant API (プレビュー) として利用可能になりました。そこで、自分自身の理解や言語化も兼ねて情報をまとめました。
なお、本記事は AOAI の基本的な部分をある程度理解できている開発者を想定して書かれています。

 Assistant API

 Assistant API とは何か
Assistant API は 開発者による独自のアシスタント (Microsoft 的な表現をす...]]></summary>
        <author>
            <name>ryohtaka</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ローカルLLMを翻訳apiを通して日本語化]]></title>
        <id>https://zenn.dev/emoclew/articles/1671555576f77f</id>
        <link href="https://zenn.dev/emoclew/articles/1671555576f77f"/>
        <updated>2024-02-14T07:32:47.000Z</updated>
        <summary type="html"><![CDATA[前回ローカルLLM APIサーバーを建てました
https://zenn.dev/emoclew/articles/9dfa7fdん948a18b
性能的にはphi-2が良さそうなのですが、日本語の入出力に対応していませんでした
そこで、前に立てた翻訳APIサーバーを間に噛ませることで、日本語対応を目指します
(そもそも、翻訳はかなり難しいタスクらしく、LLMのみの翻訳でGoogle翻訳やDeepLを超えることは、現状では無理みたいです。
ですから、日本語対応しているLLMであっても、英語で入出力をして、間に翻訳機を噛ませたほうが、性能は上がると思います)

 プログラム
前回建てたLL...]]></summary>
        <author>
            <name>emoclew</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CPUのみのローカルLLMサーバー構築(llama.cpp)]]></title>
        <id>https://zenn.dev/emoclew/articles/9dfa7fd948a18b</id>
        <link href="https://zenn.dev/emoclew/articles/9dfa7fd948a18b"/>
        <updated>2024-02-14T04:03:40.000Z</updated>
        <summary type="html"><![CDATA[LLM(大規模言語モデル)を使って作業がしたい
でも、Chat GPTやGeminiはお金がかかるから使いたくない
そうだ、ローカルにLLMを建てよう
という考えから、LLMのローカルAPIサーバー構築を始めます。
ただ、実際に計画してみると、自分の使っているサーバーのスペック不足が否めません
現在使っているマシンのスペックは

CPU : i7-5950X
Memory : 48GB

と、時代遅れの遺物です。性能的にはi5-10400とかryzen 5 3500などの数世代前のミドルレンジと同程度です。しかし、予算など存在しないので、なんとかこのマシンで動くLLMサーバーを作ります
...]]></summary>
        <author>
            <name>emoclew</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GPT等のトークン制限内で長文テキストを処理する方法]]></title>
        <id>https://zenn.dev/buenotheebiten/articles/4ba927d896b9e1</id>
        <link href="https://zenn.dev/buenotheebiten/articles/4ba927d896b9e1"/>
        <updated>2024-02-14T02:39:46.000Z</updated>
        <summary type="html"><![CDATA[GPTのAPIなどで要約をしたりQ&Aに対応したりする時で、例えば論文などを参照したい場合にトークン上限に達してしまって処理できないことがあります。
そんな時の対処法として調べているといくつかの方法があったのでメモ。

 1） RAG: 長文データから関連性の高いデータを取得して参照&生成する


長文データをベクトル化し、ベクトルデータベースに保存する
タスク（質問）の内容でベクトル検索し、データベースから類似情報を取得
「取得した情報（コンテキスト）+入力タスク」でLLMのテキスト生成を行う


 2） 長文データを要約して参照&生成する
RAGとは異なり、長...]]></summary>
        <author>
            <name>えびてん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【LangChain】HTMLHeaderTextSplitterのLimitations（制限）のメモ]]></title>
        <id>https://zenn.dev/buenotheebiten/articles/f2cf21b6ff6080</id>
        <link href="https://zenn.dev/buenotheebiten/articles/f2cf21b6ff6080"/>
        <updated>2024-02-14T02:33:18.000Z</updated>
        <summary type="html"><![CDATA[HTMLデータの加工でHTMLHeaderTextSplitterを使っている際に、ドキュメントにLimitationsが書かれていたので、その読解メモです。
（この記事はChatGPTとの会話を編集して記載しています。）


 Limitations
There can be quite a bit of structural variation from one HTML document to another, and while HTMLHeaderTextSplitter will attempt to attach all “relevant” headers to any ...]]></summary>
        <author>
            <name>えびてん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【中級者向け】Pythonで学ぶ偏微分方程式の数値シミュレーション]]></title>
        <id>https://zenn.dev/labcode/books/1acc4991f8f8b8</id>
        <link href="https://zenn.dev/labcode/books/1acc4991f8f8b8"/>
        <updated>2024-02-13T16:17:32.000Z</updated>
        <summary type="html"><![CDATA[📰 概要
本書は、Pythonを用いた偏微分方程式の数値シミュレーションを学べる技術書です。

偏微分方程式の理論を解説する書籍は数多く存在しますが、実際の実装にフォーカスした書籍はそれほど多くありません。
本書では、偏微分方程式の数値計算理論を始点とし、実装方法に至るまでを具体的に解説していきます。

実装に関しては、計算に関してだけではなく、グラフやアニメーションの作成方法、計算ログの取り方についても、コード例を交えて詳細に説明しています。

理論から実装までの全過程を一貫して学びたい方に最適な一冊です。

まえがきと第1章は無料で公開しておりますので、ぜひご一読ください。

👍 本書でできるようになること
主に以下の四つのことができるようになります。

・ 偏微分方程式から差分方程式を導けるようになる
・ 差分方程式をプログラムに落とし込み、計算できるようになる
・ 計算結果をグラフやアニメーションを使って可視化できるようになる
・ 計算結果をログとして出力できるようになる

💰 販売価格
期間限定で ¥2,500→¥1,000 (60% OFF!!)で販売しております！

📰 アップデート情報
2024/02/14：技術書初版がリリースされました。

本技術書は随時アップデートされていきます。
一度購入された方はアップデートされたとしても追加料金は発生しませんのでご安心ください。]]></summary>
        <author>
            <name>LabCode（ラボコード）</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kotomamba: Mamba State Space Model 分散学習ライブラリ]]></title>
        <id>https://zenn.dev/kotoba_tech/articles/3eb0984d8fdfb8</id>
        <link href="https://zenn.dev/kotoba_tech/articles/3eb0984d8fdfb8"/>
        <updated>2024-02-13T08:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Kotoba Technologiesでインターンをしている東京工業大学 B4 横田研究室の藤井(@okoge_kaz)です。
Kotoba TechnologiesはNLPと分散並列学習に関する技術を用いて、日本及び非英語圏におけるLLMやマルチモーダルモデルの実運用に向けた研究開発を行っています。
今回は、Transformerに代わるアーキテクチャとして注目を集めているMamba(State Space Model: 状態空間モデル)を分散学習するためのライブラリであるkotomambaを開発、公開しました。
本記事は、このライブラリの使用方法と、Mambaについて簡...]]></summary>
        <author>
            <name>Kazuki Fujii</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ユニークな文字列(キー)を生成したい]]></title>
        <id>https://zenn.dev/hir0_728/articles/78b87e79b1053b</id>
        <link href="https://zenn.dev/hir0_728/articles/78b87e79b1053b"/>
        <updated>2024-02-13T03:41:58.000Z</updated>
        <summary type="html"><![CDATA[はじめに
開発を行っていく中で、ユニークな文字列を必要なタイミングがあった。
本記事では、Pythonを利用した環境において、生成する文字列がユニークであることを目標とし、
その手法にどんなものがあるかをまとめる。

 前提条件

生成する文字列は衝突する確率が低いこと
実装はPythonで行う


 考えられる手段

ランダムモジュールを利用する
タイムスタンプを利用する
UUIDを利用する
ハッシュ関数を利用する
ユニークキー生成ライブラリを利用する


 1. ランダムモジュールを利用する
まずは単純にランダムな数字や文字を組み合わせてユニークな文字列を生成してみる。
だがしか...]]></summary>
        <author>
            <name>HIR0</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SQLAlchemy+aiomysql+pytest-asyncioを使ったデータベースのテストの書き方]]></title>
        <id>https://zenn.dev/nazo/articles/9230a54acb41e4</id>
        <link href="https://zenn.dev/nazo/articles/9230a54acb41e4"/>
        <updated>2024-02-13T02:30:00.000Z</updated>
        <summary type="html"><![CDATA[pytest-asyncio も SQLAlchemy も優秀なのでそんなに困ることはないのですが、いくつかはまりどころがあったのでメモしておきます。

 aiomysql では sync_engine が使えない
aiomysql は asyncio でしか使えないようになっているので、sync_engine が利用できません。あまり困ることはないですが、 click などを使う時でも async を強制されるので少し面倒です。 asyncio.run() で囲みましょう。
データベース全体の操作は SQLAlchemy の少し外側に出ることが多いので、 async を対応させるのはひ...]]></summary>
        <author>
            <name>nazo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【LangChain】HTMLHeaderTextSplitterで出たエラー]]></title>
        <id>https://zenn.dev/buenotheebiten/articles/396e06533e7e9a</id>
        <link href="https://zenn.dev/buenotheebiten/articles/396e06533e7e9a"/>
        <updated>2024-02-13T01:58:31.000Z</updated>
        <summary type="html"><![CDATA[LangChainでHTMLテキストを分割して処理をするためにHTMLHeaderTextSplitterを使用した時に、下記エラーが出てしまいました。
ValueError: Input object has no document: lxml.etree._ElementTree

 解決方法「lxmlライブラリのバージョン変更」
原因としては、lxmlのバージョンが低かったことで起きたエラーのようです。
pip install lxml==4.9.4

 まとめ
エラー部分に関係するライブラリのバージョン確認が大事だと改めて認識しました。
Google Colaboratoryでは...]]></summary>
        <author>
            <name>えびてん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[MattermostのスマホPush通知をWebhook+ntfy(Basic認証付き)で代用する]]></title>
        <id>https://zenn.dev/nondescript/articles/60cd1d84ee1e79</id>
        <link href="https://zenn.dev/nondescript/articles/60cd1d84ee1e79"/>
        <updated>2024-02-12T17:19:24.000Z</updated>
        <summary type="html"><![CDATA[TL;DR

server.ymlでauth-default-access: deny-all


ntfy user add posterとntfy access poster \"*\" wo && ntfy token add posterで投稿用トークン取得

ntfy user add ユーザー名とntfy access ユーザー名 "*" roで購読権限付与
Webhookサーバーを建て、Mattermostからのメッセージをカスタマイズしてトークン認証でntfyサーバーにPOST


 背景
自前の通知サーバーを用いたMattermost公式のAndro...]]></summary>
        <author>
            <name>素人の戯言</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python FastAPIを使用して画像のアップロードと表示を行う方法]]></title>
        <id>https://zenn.dev/nyaru_tech/articles/987f6038e059eb</id>
        <link href="https://zenn.dev/nyaru_tech/articles/987f6038e059eb"/>
        <updated>2024-02-12T17:04:25.000Z</updated>
        <summary type="html"><![CDATA[記事概要:
PythonのWebフレームワークであるFastAPIを使用して、画像のアップロードと表示を行う方法について解説します。このガイドでは、FastAPIを使用して画像をバイナリデータとして保存し、それらの画像を表示する方法を示します。

 画像のアップロード
FastAPIを使用して画像をアップロードするためには、POSTリクエストを受け付け、UploadFileを使用して画像ファイルを受け取ります。以下の例では、/Contents/Createエンドポイントが画像のアップロードを処理しています。

python
@app.post("/Contents/Create")
...]]></summary>
        <author>
            <name>にゃる～技術があれば覆水すら盆に返る～</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GoCVを使って自動でナンプレを解いてみた]]></title>
        <id>https://zenn.dev/hamao/articles/97968d347e4696</id>
        <link href="https://zenn.dev/hamao/articles/97968d347e4696"/>
        <updated>2024-02-12T16:02:59.000Z</updated>
        <summary type="html"><![CDATA[したこと
タイトルの通り、GoCVを使って、ナンプレの自動読み取りをしてみました。
n+1番煎じですが、昔からの夢だったので作ってみることにしました。Pythonの記事はいくつかあったのですが、そのまま写すだけだと少しつまらないので、せっかくなのでGoで書くことにしました。

 完成品


 環境
M1 Mac
OS: macOS Sonoma version 14.2.1
$ brew --version                    
Homebrew 4.2.7-140-g352f57d
Homebrew/homebrew-core (git revision 2615...]]></summary>
        <author>
            <name>hamao</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Kaggle】Kaggleで学習する機械学習]]></title>
        <id>https://zenn.dev/team_delta/articles/kaggle_article_1</id>
        <link href="https://zenn.dev/team_delta/articles/kaggle_article_1"/>
        <updated>2024-02-12T16:00:14.000Z</updated>
        <summary type="html"><![CDATA[はじめに
どうも、都内の大学で情報系の学科を専攻している千代丸と申します。
この記事はKaggleに参加して機械学習を勉強しよう！というものの超入門記事になっています。
私は普段から機械学習や生成AIなどの文献を読み漁っており、ハンズオン形式でもっと深く理解したいという思いから最近Kaggleに参加しました。

 この記事を読んで欲しい人

「Kaggle」もしくは「機械学習」という言葉を聞いたことがある人・興味がある人
AI系、データサイエンスに興味がある人
機械学習、データサイエンスなどを始めたいが何から始めればいいかわからない人


 Kaggleって何？
Kaggle（呼び方...]]></summary>
        <author>
            <name>reochiyo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Kaggle】Kaggleで学習する機械学習]]></title>
        <id>https://zenn.dev/reochiyo/articles/kaggle_article_1</id>
        <link href="https://zenn.dev/reochiyo/articles/kaggle_article_1"/>
        <updated>2024-02-12T16:00:14.000Z</updated>
        <summary type="html"><![CDATA[はじめに
どうも、都内の大学で情報系の学科を専攻している千代丸と申します。
この記事はKaggleに参加して機械学習を勉強しよう！というものの超入門記事になっています。
私は普段から機械学習や生成AIなどの文献を読み漁っており、ハンズオン形式でもっと深く理解したいという思いから最近Kaggleに参加しました。

 この記事を読んで欲しい人

「Kaggle」もしくは「機械学習」という言葉を聞いたことがある人・興味がある人
AI系、データサイエンスに興味がある人
機械学習、データサイエンスなどを始めたいが何から始めればいいかわからない人


 Kaggleって何？
Kaggle（呼び方...]]></summary>
        <author>
            <name>reochiyo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GIS × Python Tutorial Session5 ~ geopandas 実践編 ~]]></title>
        <id>https://zenn.dev/daidai_daitai/articles/be62e3e9882441</id>
        <link href="https://zenn.dev/daidai_daitai/articles/be62e3e9882441"/>
        <updated>2024-02-12T12:41:29.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事は「GIS × Python Tutorial」の関連記事です。
前回はgeopandasの基本的な使い方を解説したので、今回はgeodatasetsのAPIを使用して、シカゴ周辺のデータを取得し、データをこねくり回してみましょう。
実際にデータを分析する際には、いくつかのデータを組み合わせる場合が多いので、この中から今回は以下のデータを取得し組み合わせて見ましょう。全てシカゴのデータです

2000年と2010年の地域別にみる人口の変化（Polygon）
2011年の放置車両（Point）

geodatasets
https://geodatasets.read...]]></summary>
        <author>
            <name>橙。</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Azure Pipelines で Python の自作パッケージのテスト＆ビルド自動化]]></title>
        <id>https://zenn.dev/takanari_dev/articles/2024-02-12-azure-devops-python-package-pipeline</id>
        <link href="https://zenn.dev/takanari_dev/articles/2024-02-12-azure-devops-python-package-pipeline"/>
        <updated>2024-02-12T12:40:11.000Z</updated>
        <summary type="html"><![CDATA[はじめに
これは以下の記事の続きである。本記事は以下の記事のcatlibという自作パッケージについて、テストやビルドを自動化するものである。
https://zenn.dev/takanari_dev/articles/2024-02-06-azure-devops-python-package

 やりたいこと


mainブランチへのマージ時に自作 Python パッケージのテストを自動的に行う
タグを切ったときに Azure Artifacts へのデプロイを自動的に行う


 テスト自動化

 パイプラインの準備
ローカル環境のリポジトリ直下から.azure-pipeline...]]></summary>
        <author>
            <name>takanari</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python のパッケージを Poetry で自作して Azure Artifacts に置いてみる]]></title>
        <id>https://zenn.dev/takanari_dev/articles/2024-02-06-azure-devops-python-package</id>
        <link href="https://zenn.dev/takanari_dev/articles/2024-02-06-azure-devops-python-package"/>
        <updated>2024-02-12T12:40:11.000Z</updated>
        <summary type="html"><![CDATA[はじめに
仕事で Azure DevOps を使おうとしているが、いかんせん情報が少ない。（ただし、公式ドキュメントは充実している。）GitHub よりもケーススタディ的な記事が少なく自分が苦労したので、備忘録として記事を書きたくなった。今回は Azure Artifacts に Python の独自ライブラリを（手動で）置いてみることを試したので、それを書く。
また、前半はほとんど Python のパッケージ作成の話である。Python の自作パッケージ / ライブラリの配布等の記事も探しにくかったので、そちらのほうでも参考になれば幸いである。
そもそも Azure DevOps ...]]></summary>
        <author>
            <name>takanari</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【LangChain】GitHubリポジトリ内のプロンプトをみる]]></title>
        <id>https://zenn.dev/buenotheebiten/articles/244a8716f00858</id>
        <link href="https://zenn.dev/buenotheebiten/articles/244a8716f00858"/>
        <updated>2024-02-12T12:12:26.000Z</updated>
        <summary type="html"><![CDATA[LangChainのGitHubを見ていたら、いくつかChatGPTなどでも利用できそうなプロンプトを見かけたので、まとめのメモです。
https://github.com/langchain-ai/langchain/tree/master

 1. LLMの要約チェック
「事実確認」や「テキストに対して事実をもとに修正を行う」などのプロンプトがありました。
全体的に下記のプロンプトに加えて、外部データとして事実データを参照した方が精度が上がりそうなイメージがしました。

 1-1. テキスト全てが正しいかどうか判定
複数のテキストの内容が全て正しいかどうか、を判定するプロンプトです。...]]></summary>
        <author>
            <name>えびてん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GCP Cloud Functionsでシークレット付きのPythonスクリプトを定期実行する手順]]></title>
        <id>https://zenn.dev/tanny/articles/9c651bf26d33ea</id>
        <link href="https://zenn.dev/tanny/articles/9c651bf26d33ea"/>
        <updated>2024-02-12T11:19:04.000Z</updated>
        <summary type="html"><![CDATA[この記事は、Zennの記事投稿キャンペーン（テーマ：Google Cloud）の応募記事です。以前に自作したPythonスクリプトをGCP上で定期実行する手順を紹介します。
https://info.zenn.dev/2024-02-01-campaign-gc24

 はじめに
2023年の1月に、「降水確率に応じてSwitchBotのスマートライトの色を変える」というPythonスクリプトを自作し、大変多くの反響をいただきました。
https://zenn.dev/tanny/articles/808487545eb30f
このPythonスクリプトはGitHub Actionsを利...]]></summary>
        <author>
            <name>Tanny</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【LangChain】複数処理をつなげる「Chains」読解メモ]]></title>
        <id>https://zenn.dev/buenotheebiten/articles/8dbf5cfef5f3eb</id>
        <link href="https://zenn.dev/buenotheebiten/articles/8dbf5cfef5f3eb"/>
        <updated>2024-02-12T07:53:53.000Z</updated>
        <summary type="html"><![CDATA[LangChainでLLMやツール使用、データの前処理など、さまざまな処理をラクにつなげることができる「Chains」のドキュメントを読み解いたメモです。
https://python.langchain.com/docs/modules/chains
https://api.python.langchain.com/en/stable/langchain_api_reference.html#module-langchain.chains
pip install -U openai langchain langchain-openai

 「Chains」とは
LLM、ツール、データ前...]]></summary>
        <author>
            <name>えびてん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【深く】DjangoのMigrationを理解する]]></title>
        <id>https://zenn.dev/kazu1/articles/4e70817baa7dfb</id>
        <link href="https://zenn.dev/kazu1/articles/4e70817baa7dfb"/>
        <updated>2024-02-12T06:47:59.000Z</updated>
        <summary type="html"><![CDATA[!
この記事は、Djangoのマイグレーションについてより理解したいと考えている方々に向けたものです。
Djangoがマイグレーションをどのように追跡し、適用するか、そして開発者が新しいマイグレーションを作成する際にDjangoがどのようにモデルの変更を検出するかについて解説しています。


 Djangoがどのようにマイグレーションを追跡するか
既にマイグレーションを適用している状態で再度、migrateコマンドを実行すると以下のようになりますね。
python manage.py migrate
Operations to perform:
  Apply all migration...]]></summary>
        <author>
            <name>Kazu1</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【OpenAI API】Function calling による振り分けを試してみた]]></title>
        <id>https://zenn.dev/ryota_09/articles/1b44973515dc4c</id>
        <link href="https://zenn.dev/ryota_09/articles/1b44973515dc4c"/>
        <updated>2024-02-12T06:10:44.000Z</updated>
        <summary type="html"><![CDATA[こんにちは！@Ryo54388667です!☺️
普段は都内でフロントエンドエンジニアとして業務をしてます！
主にTypeScriptやNext.jsといった技術を触っています。
今回はOpenAIのAPI、Function callingという機能を試してみたいと思います。

 📌 Function calling とは

In an API call, you can describe functions and have the model intelligently choose to output a JSON object containing arguments to cal...]]></summary>
        <author>
            <name>りょた</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pyenvの導入]]></title>
        <id>https://zenn.dev/tsaeki/articles/bc868a8d8fd6ae</id>
        <link href="https://zenn.dev/tsaeki/articles/bc868a8d8fd6ae"/>
        <updated>2024-02-12T04:35:05.000Z</updated>
        <summary type="html"><![CDATA[https://github.com/pyenv/pyenv の導入してみます。

 環境
ubuntu with WSL2でzsh使ってます。

 事前にパッケージをインストール
事前に必要なパッケージをインストールしておきます。
https://github.com/pyenv/pyenv/wiki#suggested-build-environment
sudo apt update; sudo apt install build-essential libssl-dev zlib1g-dev \
libbz2-dev libreadline-dev libsqlite3-dev ...]]></summary>
        <author>
            <name>tsaeki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[中学2年生のPython勉強①]]></title>
        <id>https://zenn.dev/program_ke/articles/b2505f918ace8e</id>
        <link href="https://zenn.dev/program_ke/articles/b2505f918ace8e"/>
        <updated>2024-02-12T00:04:41.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Pythonで利用できるpyinstallerの忘備録です。
(webサイトを公開する際、htmlなどのファイルもexeにまとめたい場合）
zenn自体初めて触るのでご指摘ください(o*。_。)oペコッ

 pythonで複数ファイルをexe化する
①pip install pyinstaller
②pyinstaller file.py -onefile --noconsole
実行すると下記のような.specファイルが生成されると思う

specファイル
a = Analysis(
    ['filename.py'],
    pathex=[],
    bina...]]></summary>
        <author>
            <name>Ke</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[デザインで使えそうなスクリプトをPythonで書いてみる]]></title>
        <id>https://zenn.dev/calloc134/articles/9aa88e42b95345</id>
        <link href="https://zenn.dev/calloc134/articles/9aa88e42b95345"/>
        <updated>2024-02-11T14:14:34.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは。かろっくです。
今回はゆるい記事です。
デザインで使えそうなスクリプトを三つほど Python で書いてみました。
ChatGPT にかなり頼ったので、自分でもあまりコードを理解できてない部分がありますがご了承ください・・・。
Python での画像処理もほぼ初めて書いたので、許してください

 文字パーツ分割

このような透明な画像に対して、文字のパーツを分割するスクリプトです。

それぞれ画像として分割されるので、位置を調整して使うことができます。
イメージ(Aviutl において、震えるアニメーションを適用してあります)

https://twitter....]]></summary>
        <author>
            <name>calloc134</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Alembicでマイグレーション（FastAPI+SQLModel）]]></title>
        <id>https://zenn.dev/keita_f/articles/6e1323fe023fa1</id>
        <link href="https://zenn.dev/keita_f/articles/6e1323fe023fa1"/>
        <updated>2024-02-11T12:54:06.000Z</updated>
        <summary type="html"><![CDATA[前回、FastAPIとSQLmoelを使用して、webアプリケーションを作成しました。
https://zenn.dev/keita_f/articles/4493e3cfd76aec
このアプリケーションに、別のモデルを追加して、さらに、二つのデータベースに関連性を持たせます。

 BaseUserModelの設定変更
前回作成したBaseUserModelを少し変更します。

backend/v1/model/user_model.py
 class BaseUserModel(BaseUser, table = True):
   id: Optional[int] = Field...]]></summary>
        <author>
            <name>KITFJN</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Cloud Functions から別プロジェクトの Artifact Registry にあるpythonパッケージを使用する]]></title>
        <id>https://zenn.dev/abaoaqu/articles/61634dcd4fd378</id>
        <link href="https://zenn.dev/abaoaqu/articles/61634dcd4fd378"/>
        <updated>2024-02-11T12:09:16.000Z</updated>
        <summary type="html"><![CDATA[概要
Cloud Functions(python) から別プロジェクトの Artifact Registry に格納されている python パッケージをインストールする手順を記載します。

 対象読者

Google Cloud のサービスをコンソールまたはCLIで構築した経験のある方
Python の開発環境を構築した経験のある方


 環境

 ローカル端末

OS: macOS Sonoma 14.1
チップ: Apple M3 Max
Google Cloud SDK: 463.0.0
Pythonパッケージ

pip: 24.0
setuptools: 69.0.3
w...]]></summary>
        <author>
            <name>abaoaqu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[３分でわかるpipreqsでrequirements.txtを自動的に生成する方法]]></title>
        <id>https://zenn.dev/nyaru_tech/articles/4f51343b263cf2</id>
        <link href="https://zenn.dev/nyaru_tech/articles/4f51343b263cf2"/>
        <updated>2024-02-11T10:25:15.000Z</updated>
        <summary type="html"><![CDATA[概要
Pythonのプロジェクトを管理する際に、必要なライブラリや依存関係を管理するのは重要です。pipreqsは、Pythonプロジェクトの依存関係を自動的に検出し、requirements.txtファイルを生成するツールです。この記事では、pipreqsの使い方を紹介します。

 本文
最初に、pipreqsをインストールする必要があります。ターミナルまたはコマンドプロンプトを開き、次のコマンドを実行します。

bash
pip install pipreqs

pipreqsを使用して、Pythonプロジェクトのディレクトリ内のファイルから依存関係を検出し、requiremen...]]></summary>
        <author>
            <name>にゃる～技術があれば覆水すら盆に返る～</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TouchDesignerでLINEに通知を送る方法]]></title>
        <id>https://zenn.dev/svertkatter/articles/d7941f95b52385</id>
        <link href="https://zenn.dev/svertkatter/articles/d7941f95b52385"/>
        <updated>2024-02-11T08:19:01.000Z</updated>
        <summary type="html"><![CDATA[こんにちは。TouchDesignerでLINEに通知を送りたいですよね。
特にWebSocketを使用してネットワークが切れていないかなと不安になっている中、通知してくれたほうが助かります。
調べていく中で、Slackを利用した通知方法などはありますが、LINEでしている人はいなかったと思うので、この記事でそのやり方を説明しようと思います。

 前提条件
まず前提をお話します。この記事を書いてる人間、つまり私はド素人です。プログラミングを生業にしている訳ではありません。ご了承ください。


TouchDesigner

バージョン：2022.35320



Python

3.9.5...]]></summary>
        <author>
            <name>svertkatter</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[@propertyとは]]></title>
        <id>https://zenn.dev/yuto_mo/articles/29682f6b0c402c</id>
        <link href="https://zenn.dev/yuto_mo/articles/29682f6b0c402c"/>
        <updated>2024-02-11T06:48:26.000Z</updated>
        <summary type="html"><![CDATA[今回はpythonの@propertyについて軽く解説します。

 ＠propertyとは
@propertyは、クラスのインスタンス変数を簡潔に呼び出せるようにする組み込みのデコレータです。
デコレータは、装飾される関数を引数として取り、新しい関数を返す高階関数ですが、@propertyはその関数における特殊メソッドをオーバーライドし、関数の呼び出し方によって返す関数を変更します。
言葉で表すと非常に難解なので、例を見ていきましょう。

 例
class Person:
    def __init__(self, name):
        self._name = name

 ...]]></summary>
        <author>
            <name>yuu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで引数にキーワードを強制する方法]]></title>
        <id>https://zenn.dev/nakurei/articles/forcing-keywords-as-arguments-in-python</id>
        <link href="https://zenn.dev/nakurei/articles/forcing-keywords-as-arguments-in-python"/>
        <updated>2024-02-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[これはなに
Pythonの関数で、利用時にキーワードによる指定を強制できると知ったのでまとめたメモ。

 この記事が役立つ人

すでにPythonの基本的な知識を持っている人で

関数呼び出し時にキーワード指定を強制したい人
コードの可読性や保守性を向上させたい人




 本記事の要約
Python関数の引数の定義で、*の後に引数を定義すると、利用者にキーワードによる指定を強制できる。この引数はキーワード専用引数（Keyword-Only Arguments）と呼ばれる。下記の例では、is_upperをキーワード専用引数として定義している。

関数定義
# `*`の後に定義した引数...]]></summary>
        <author>
            <name>NakuRei</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[悪ノリで Lisp トランスパイラを実装した with Python。]]></title>
        <id>https://zenn.dev/wsuzume/articles/d00e803c5b8743</id>
        <link href="https://zenn.dev/wsuzume/articles/d00e803c5b8743"/>
        <updated>2024-02-10T12:05:57.000Z</updated>
        <summary type="html"><![CDATA[はじめに
友達がこんなことを呟いていた。
https://x.com/xeki00/status/1753426382410183054?s=20
気持ちは分かるよ。私も Python には滅んでほしいと思っている。そしてプログラミング界隈にはこんなジョークがあるんだ。
https://x.com/wsuzume/status/1753427254645051723?s=20
パンがないならケーキを焼いて食べればいいのに。対する友の返答はこうだった。
https://x.com/xeki00/status/1753427989805891862?s=20

 え、マジ？ 作るけど？
...]]></summary>
        <author>
            <name>Josh Nobus</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Union-Findアルゴリズムと計算科学の話]]></title>
        <id>https://zenn.dev/kaityo256/articles/union_find_physics</id>
        <link href="https://zenn.dev/kaityo256/articles/union_find_physics"/>
        <updated>2024-02-10T11:27:35.000Z</updated>
        <summary type="html"><![CDATA[概要
Union-Findアルゴリズムは、グラフ系でよく使われるアルゴリズムですが、物性物理においても重要な役割を果たします。その実装と使われ方について少しメモしておきます。

 Union-Findアルゴリズム
何か2つの物が与えられたとき、それらがある意味において「同じグループに所属するかどうか」が判定できるとき、その関係を同値関係と呼びます。例えば相似などが典型例で、図形Aと図形Bが相似、図形Bと図形Cが相似ならば、図形Aと図形Cも相似です。このように「友達の友達は友達」みたいな関係が同値関係です。とりあえず同値関係を\simで表現することにしましょう。ある集合の要素a,b,c...]]></summary>
        <author>
            <name>ロボ太</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのdataclassについての備忘録]]></title>
        <id>https://zenn.dev/tonokokko/articles/77d3f3f6f9c143</id>
        <link href="https://zenn.dev/tonokokko/articles/77d3f3f6f9c143"/>
        <updated>2024-02-10T03:06:19.000Z</updated>
        <summary type="html"><![CDATA[Pythonのdataclassについてまとめています。
「self.var = var」みたいに連打しなくてよくなるのは便利ですね！
初見だと意味不明でしたが...
試験的に、生成AIとのやりとりして調べた結果を記事の形にまとめてもらっています。

 @dataclassデコレータについて

Python 3.7以降で利用可能な@dataclassデコレータを使用すると、クラスの定義を簡潔に書くことができます。

@dataclassは、インスタンス変数のための__init__メソッドなどを自動的に生成します。


 独自の__init__メソッドを定義する場合


@dataclas...]]></summary>
        <author>
            <name>とのこっこ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Zennで「いいねした投稿」と「読んでいる本」をNotionで管理する]]></title>
        <id>https://zenn.dev/xcter/articles/05db4018cfdc71</id>
        <link href="https://zenn.dev/xcter/articles/05db4018cfdc71"/>
        <updated>2024-02-10T02:37:10.000Z</updated>
        <summary type="html"><![CDATA[何を作ったか
Zennで自分が「いいねした投稿」と「読んでいる本」をNotionのデータベースに保存するスクリプトを作りました。Notionのアカウントとpythonの実行環境があれば誰でも使えるようになっています。
すぐに試したい方は、こちらのREADMEを読んで試してみてください
こんなもの↓ができます！（これは私がいいねした投稿の一覧です）
https://zealous-rosehip-7a8.notion.site/a3c1dd8fa96a42fbb6e162e91354a68d?v=324c9e7e593746838d64ee2123d175e6&pvs=4

 ...]]></summary>
        <author>
            <name>XCTER</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GPT連携アプリ開発時の必須知識、RAGをゼロから解説する。概要＆Pythonコード例]]></title>
        <id>https://zenn.dev/spiralai/articles/8af7cbf526c2e1</id>
        <link href="https://zenn.dev/spiralai/articles/8af7cbf526c2e1"/>
        <updated>2024-02-10T01:50:02.000Z</updated>
        <summary type="html"><![CDATA[こんにちは。わいけいです。
今回の記事では、生成AI界隈ではかなり浸透している RAG について改めて解説していきます。
「低予算で言語モデルを使ったアプリを開発したい」というときに真っ先に選択肢に上がるRAGですが、私自身もRAGを使ったアプリケーションの実装を業務の中で何度も行ってきました。
今回はその知見をシェア出来れば幸いです。

 RAG（Retrieval-Augmented Generation)とは
まず、 そもそもRAGとは何ぞや？ というところから見ていきましょう。
RAG（Retrieval-Augmented Generation) は自然言語処理（NLP）と特に...]]></summary>
        <author>
            <name>わいけい</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[1次ソース公式ドキュメントBlender 4.0 Python API Documentation を日本語で嚙み砕く]]></title>
        <id>https://zenn.dev/jim_soros/articles/8429c4b2a91b76</id>
        <link href="https://zenn.dev/jim_soros/articles/8429c4b2a91b76"/>
        <updated>2024-02-10T01:28:19.000Z</updated>
        <summary type="html"><![CDATA[Blender 4.0 Python API Documentation を日本語で嚙み砕く
https://docs.blender.org/api/current/index.html

 【Quickstart】
https://docs.blender.org/api/current/info_quickstart.html

先ずはEnable Developer Extra and Python Tooltips.を表示できるようにチェック --> 上部Edit-Prefarence-interface-PythonTooltips と DeveloperExtra...]]></summary>
        <author>
            <name>ねこまいたけだよ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ポケモン界における最強タイプを遺伝的アルゴリズムで求めてみた]]></title>
        <id>https://zenn.dev/nope/articles/2278e0a922b5b9</id>
        <link href="https://zenn.dev/nope/articles/2278e0a922b5b9"/>
        <updated>2024-02-09T16:48:15.000Z</updated>
        <summary type="html"><![CDATA[はじめに
みなさんポケモンは好きでしょうか。
ポケモンには、現在18種類のタイプが存在しますが、中には弱点が多くて不利なタイプがありますよね。例えば、草タイプや氷タイプは弱点が多く、一方で鋼タイプや電気タイプは耐性が多くて有利に見えます。
そこで、もし実際にこれらのタイプのポケモンが同じ環境で共生していたら、何百世代か後には、弱点が多いタイプは自然淘汰され、耐性が多いタイプが優勢になるのでは？？という疑問が湧きました。

今回は遺伝的アルゴリズムを用いて、異なるタイプのポケモンが共存する環境をシミュレーションします。能力が全く同じであると仮定した場合、どのタイプのポケモンが生き残るの...]]></summary>
        <author>
            <name>nope</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[高速・高精度な音声文字起こしが出来るという噂の「Deepgram」を試してみた (導入編)]]></title>
        <id>https://zenn.dev/smartcamp/articles/8b24739ab8cba3</id>
        <link href="https://zenn.dev/smartcamp/articles/8b24739ab8cba3"/>
        <updated>2024-02-09T14:52:21.000Z</updated>
        <summary type="html"><![CDATA[高速・高精度なASR(自動音声認識)サービスを提供するDeepgramというサービスがあると噂を聞いたので試してみました。

 Deepgramとは
Deepgramは2015年に設立されたアメリカのスタートアップ企業です。
AIを用いた企業向けの音声認識に特化しており、スタートアップからSpotifyやNASAのような大企業まで多数のクライアントにサービスを提供しています。
https://deepgram.com/
公式サイトによると主な競合他社に比べて速度・精度・コストのいずれも優れており、更に日本語を含む30カ国以上の言語に対応しているとのことです。
主なプロダクトは以下の3つで...]]></summary>
        <author>
            <name>信玄餅</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WSL2でPython,pip,venvをインストールして仮想環境を作成]]></title>
        <id>https://zenn.dev/ak_yoshimatsu/articles/69457d3f44fe55</id>
        <link href="https://zenn.dev/ak_yoshimatsu/articles/69457d3f44fe55"/>
        <updated>2024-02-09T14:35:45.000Z</updated>
        <summary type="html"><![CDATA[wsl2でPythonの開発環境を整えた際の備忘録。

 参考サイト
Windows で Web 開発に Python を使用する | Microsoft Lean

 Python,pip,venvをインストール

 1. Linuxディストリビューションの更新（wsl2）
最新バージョンを使用するために、以下のコマンドでwsl2を最新に更新。
sudo apt update & sudo apt upgrade

 2. Pythonの更新
Python3がすでにインストールされていることを確認。
python3 --version
>> Pyhon 3.10.1...]]></summary>
        <author>
            <name>よしまつ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【LangChain】長文テキスト処理する機能「Text Splitters」読解メモ]]></title>
        <id>https://zenn.dev/buenotheebiten/articles/af5cfba98b1b8f</id>
        <link href="https://zenn.dev/buenotheebiten/articles/af5cfba98b1b8f"/>
        <updated>2024-02-09T11:24:29.000Z</updated>
        <summary type="html"><![CDATA[「LangChain」のLLMで長文参照する時のテキスト処理をしてくれる「Text Splitters」機能のメモです。
https://python.langchain.com/docs/modules/data_connection/document_transformers/

 Text Splittersの種類
具体的には下記8つの方法がありました。



名前
説明




Split by character

指定文字で分割してまとめる最もシンプルな方法。（default: ""）


Recursively split by character

指定文字リストに従って...]]></summary>
        <author>
            <name>えびてん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Saasの契約更新月が近づいてきたら通知する仕組みをつくりました]]></title>
        <id>https://zenn.dev/ryutag/articles/1af81e56f20650</id>
        <link href="https://zenn.dev/ryutag/articles/1af81e56f20650"/>
        <updated>2024-02-09T10:58:31.000Z</updated>
        <summary type="html"><![CDATA[導入と概要
こんにちは、delyの後藤です。
弊社では、Saas管理ツールとしてdxeco を導入しています。
ツール内のインサイトとして契約更新前のnヶ月前になったらUI上にお知らせを出してくれる機能があり、それをSlackに通知する仕組みを作ったところ、意外にもウケが良かったのでzennに記事を作ることにしました。
(ちなみに導入時の私のインタビュー記事は こちら ですw)

 設計
APIを叩いて、流し込むだけの難しいことは何もしていない形で作成しました。

 データ登録と設定
データの登録と、いつお知らせを受け取りたいか、という設定はdxecoのUI上で手登録を行います。
こ...]]></summary>
        <author>
            <name>ryuta goto【dely株式会社】</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonのSentenceTransformerを用いた文章類似度比較]]></title>
        <id>https://zenn.dev/welmo/articles/a79b8b45573383</id>
        <link href="https://zenn.dev/welmo/articles/a79b8b45573383"/>
        <updated>2024-02-09T02:18:49.000Z</updated>
        <summary type="html"><![CDATA[ご挨拶
株式会社Welmoでエンジニアとして働いている進藤です。Welmoは介護業界の様々な社会課題（介護負担の増大・労働者不足など）を、ICTと先端技術の力で解決するために日々努めています。

 はじめに
文章の類似度を計算することは、テキストデータを扱う多くのプロジェクトで重要です。このため、Pythonの SentenceTransformer ライブラリは非常に役立つツールです。この記事では、SentenceTransformer ライブラリを使用して、文章の類似度を計算する基本的な手法について解説します。

 SentenceTransformerとは？
SentenceT...]]></summary>
        <author>
            <name>進藤　翔太</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】LangChainでGPT-4を使ってみる]]></title>
        <id>https://zenn.dev/buenotheebiten/articles/15546ada9106a0</id>
        <link href="https://zenn.dev/buenotheebiten/articles/15546ada9106a0"/>
        <updated>2024-02-09T01:48:39.000Z</updated>
        <summary type="html"><![CDATA[LangChainでGPT-4を利用するには「Chat Models」を利用します。

Chat Models | 🦜️🔗 Langchain


 セットアップ

インストール

pip install langchain-openai

APIキーのセット

方法1) 環境変数OPENAI_API_KEYにセットする
方法2) ChatOpenAI(openai_api_key="YOUR_API_KEY")でセットする




 1. 簡単なコード
from langchain_openai import ChatOpenAI

# --- APIキー ---
OPENAI_API...]]></summary>
        <author>
            <name>えびてん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[機械翻訳APIコンテナの実装]]></title>
        <id>https://zenn.dev/emoclew/articles/bdc0cb017a0ccf</id>
        <link href="https://zenn.dev/emoclew/articles/bdc0cb017a0ccf"/>
        <updated>2024-02-08T23:51:42.000Z</updated>
        <summary type="html"><![CDATA[動機
ローカルで動くLLMがほしいなと思って、いろいろと調べていました。
しかし、軽量のLLMは日本語が怪しくなるという話をよく聞きます
そこで、一度機械翻訳を間に入れて、
日本語指示 → 機械翻訳 → 英語指示 → LLM→英語結果 → 機械翻訳 → 日本語結果
としたいと思います。
（実際に、機械翻訳を入れたときの性能がどうなるかは要検証です）
機械翻訳について調べてみると、気軽に使えるAPIでは、DeepLもしくはGoogle Translateが最も性能が良いようです。時点で、MicrosoftのTranslate。
また、LLMを使った機械翻訳も研究されているようですが、D...]]></summary>
        <author>
            <name>emoclew</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで無料でTwitterのBotを作る方法]]></title>
        <id>https://zenn.dev/d60/articles/1e0419b3a4d0c7</id>
        <link href="https://zenn.dev/d60/articles/1e0419b3a4d0c7"/>
        <updated>2024-02-08T06:11:17.000Z</updated>
        <summary type="html"><![CDATA[Pythonで無料でTwitterのBotを作る方法！！


 この記事の概要
無料で、APIキーなしでツイッターAPIを利用できるPythonのライブラリ「Twikit」を紹介します。

 Twikitとは
Twikitは、スクレイピングを利用して、ツイートの投稿、ツイートの検索、ユーザーのツイートの取得、トレンドの取得などができるPythonのライブラリです。
これを使えば、一定時間毎にツイートを投稿するボットを作ったりすることができます。
https://github.com/d60/twikit

 このライブラリの特徴
このライブラリの最大の特徴は、APIキー不要かつ無料で...]]></summary>
        <author>
            <name>d88</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[deptryでpyprojectをお掃除する]]></title>
        <id>https://zenn.dev/saorio/articles/330892959959cf</id>
        <link href="https://zenn.dev/saorio/articles/330892959959cf"/>
        <updated>2024-02-08T05:00:47.000Z</updated>
        <summary type="html"><![CDATA[pyprojectのいらないライブラリを簡単に見つけられる deptryが便利。
pyproject.tomlがあるディレクトリでdeptry .を実行すると不要なライブラリや設定ミスを確認できる。CIに入れて定期的に確認するのが良さそう。]]></summary>
        <author>
            <name>saorio</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ARマーカーで動画内の特定の画面を切り出す]]></title>
        <id>https://zenn.dev/hartree_fock/articles/8cc22fe15cc995</id>
        <link href="https://zenn.dev/hartree_fock/articles/8cc22fe15cc995"/>
        <updated>2024-02-07T15:58:14.000Z</updated>
        <summary type="html"><![CDATA[はじめに
https://qiita.com/mo256man/items/3a8a1f304ecdfaef6e15]]></summary>
        <author>
            <name>hartree_fock</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python標準GUI「Tkinter」を使ってみる。]]></title>
        <id>https://zenn.dev/hartree_fock/articles/3365a05a82a1fa</id>
        <link href="https://zenn.dev/hartree_fock/articles/3365a05a82a1fa"/>
        <updated>2024-02-07T15:46:02.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Python標準GUI「Tkinter」を使ってみます。

 参考サイト
https://techplay.jp/column/552
https://ossa2019.stars.ne.jp/Remember/tkinter/tk3.html
https://pg-chain.com/python-radiobutton

 やりたいこと
やりたいことの流れは以下の通り。
① 起動するとGUIが表示
- GUIにはA,B,Cの3つのボタンが表示されている
- GUIには「OK」ボタンがある。
② A,B,Cのいずれかのボタンを押すと、そのボタンがハイライトされる
③ ボタ...]]></summary>
        <author>
            <name>hartree_fock</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonだけで帳票の手書き文字をOCRで読みとる]]></title>
        <id>https://zenn.dev/torachi0401/articles/reportscan_python_1</id>
        <link href="https://zenn.dev/torachi0401/articles/reportscan_python_1"/>
        <updated>2024-02-07T14:43:18.000Z</updated>
        <summary type="html"><![CDATA[はじめに
手書き帳票の数字を、別のシステムに入力するために転記することはありませんか？
めちゃくちゃめんどくさいし、すごい工数がかかる作業ですよね～
そこで、Pythonを使って、手書きの帳票をスキャナで読みとり、該当箇所の数字を読み取る
プログラムを作成してみたので紹介します。
さっさとプログラムを見たい方は以下より↓

 コード全文
GitHubに公開してます。
該当業務の要件としては以下になります。

 現状の業務の要件

手書きの帳票が集まってくる
その帳票をスキャナでPDFとして読み取る
手書きの数字（8桁）＋YYYYMMDDをPDFのファイル名にリネームする
さらに手書き...]]></summary>
        <author>
            <name>Torachi0401</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[実務でPandasとMatplotlibを使う時がやっと来た]]></title>
        <id>https://zenn.dev/kyonaka/articles/d6b66d8f9ae934</id>
        <link href="https://zenn.dev/kyonaka/articles/d6b66d8f9ae934"/>
        <updated>2024-02-07T05:58:28.000Z</updated>
        <summary type="html"><![CDATA[はじめに
AWS エンジニアになる前は Python を独学で学び、Pandas や Matplotlib などデータ分析に関わるライブラリを触ってきました。
実務で使うことはあるのかと思っていましたが、ようやく学んだことを活かせる時が来たので記事にしようと思います。

 どんな業務で扱うことになったのか？
AWS エンジニア(インフラ担当)として、『AWS リソースの使用状況を月次で報告する』 という月一の定例業務が発生することになりました。
EC2 インスタンスの 1 ヶ月の CPU やメモリの使用率などの推移を見て、今後のキャパシティプランニングに役立てる目的のためです。
私が...]]></summary>
        <author>
            <name>Kyonaka@AWSエンジニア</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Segmentation Models Pytorch の BackBone をカスタムする方法]]></title>
        <id>https://zenn.dev/syu_tan/articles/c56919106e3682</id>
        <link href="https://zenn.dev/syu_tan/articles/c56919106e3682"/>
        <updated>2024-02-07T05:27:56.000Z</updated>
        <summary type="html"><![CDATA[Segmentation Models Pytorch の バックボーン(Backbone) を設定したいように変更する時の方法と注意点

 はじめに
https://pytorch.org/
ディープラーニングのための自動微分をしてくれる PyTroch において、セグメンテーションのタスクのモデルを簡単に提供してくれるのが Segmentation Models Pytorchです。

モデル作成の初学者から Kaggle などのコンペ、業務でも仕様できるくらい便利なライブラリーです。
https://smp.readthedocs.io/en/latest/
もう既にバックボーンと...]]></summary>
        <author>
            <name>emmyeil</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[List操作のデバッグを効率化するラッパークラス活用法]]></title>
        <id>https://zenn.dev/tonbi_attack/articles/a1f581d8becd1b</id>
        <link href="https://zenn.dev/tonbi_attack/articles/a1f581d8becd1b"/>
        <updated>2024-02-06T15:33:23.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Java や Python など、多くのプログラミング言語で List やその他のコレクション型のデータ構造は頻繁に使用されます。これらのコレクションにオブジェクトを追加する際、特に複雑なアプリケーションや可読性の非常に低いコードでは、デバッグが難しくなることがあります。特に、List のオブジェクトクラスなどが多用されている場合、問題の追跡と解決はより複雑になります。このような状況を解決するための有効なデバッグ方法の一つが、List の Add メソッドなどのメソッドをラップしてブレークポイントで捕まえるテクニックです。

 方法の概要
この方法では、既存の List に...]]></summary>
        <author>
            <name>tonbiattack</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ローカルLLMの推論速度を高速化する5つの手法と比較評価]]></title>
        <id>https://zenn.dev/kaeru39/articles/1ea73bfa40c7df</id>
        <link href="https://zenn.dev/kaeru39/articles/1ea73bfa40c7df"/>
        <updated>2024-02-06T14:35:32.000Z</updated>
        <summary type="html"><![CDATA[目的
ローカルLLMの推論速度を改善する手法がいくつか報告されています。
今回は実際に報告されている5つの手法を実装して推論速度がどの程度改善するか確認します。

 推論処理の高速化手法

 1. torch.compile

計算グラフを構築
各演算をCPUやGPUのデバイスに特化した細かい命令に分解
与えられた入力に対して上記の命令を呼び出して演算を効率化

https://pytorch.org/get-started/pytorch-2.0/#technology-overview

 実装
モデルを読み込んだ直後にtorch.compileを追加
model = AutoM...]]></summary>
        <author>
            <name>kaeru39</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SPCS(Snowpark Container Services)でコンテナをお試し移管してみた]]></title>
        <id>https://zenn.dev/deask/articles/97d71c0c86d312</id>
        <link href="https://zenn.dev/deask/articles/97d71c0c86d312"/>
        <updated>2024-02-06T09:49:01.000Z</updated>
        <summary type="html"><![CDATA[はじめに
SPCSが遂に東京リージョンでもPuPrされましたね。
Available regions
これをきっかけに、SPCSのチュートリアルを行ったり自前のコンテナをSPCSに移管したりしてみました。
今回は、SPCSや移管をどう行ったかについて書いていきます。

 想定読者
SPCSについてまだよくわからない人
SPCSにコンテナを移管する例が知りたい人

 SPCSについて

 SPCSとは
SPCS(Snowpark Container Services)とは、Snowflakeが提供するフルマネージドコンテナサービスです。
SPCSはSnowflakeと統合されており、以...]]></summary>
        <author>
            <name>deask</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VscodeにおけるFlaskのデバッガ設定【備忘録】]]></title>
        <id>https://zenn.dev/straydog/articles/4783ed8b29573b</id>
        <link href="https://zenn.dev/straydog/articles/4783ed8b29573b"/>
        <updated>2024-02-06T01:30:14.000Z</updated>
        <summary type="html"><![CDATA[はじめに
ほったらかしてた備忘録。F5 押した際にデバッグが走るようにする設定する。

 内容
「.vscode」フォルダ直下の「launch.json」ファイルに以下のような内容を設定する。
なければ作成してください。

launch.json
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Python: flask", // 任意の名前
      "type": "python",
      "request": "launch",
      "module": "flask",
   ...]]></summary>
        <author>
            <name>stray dog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Prefectでプロダクトデータ処理基盤のDXを向上させようとしているはなし | Offers Tech Blog]]></title>
        <id>https://zenn.dev/overflow_offers/articles/prefect-is-perfect</id>
        <link href="https://zenn.dev/overflow_offers/articles/prefect-is-perfect"/>
        <updated>2024-02-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
おはこんばんちは。
Offers と、Offers MGR を運営している株式会社 overflow のバックエンドエンジニアばばです。
Web サービスを開発している皆様であれば、高度なデータ処理の大変さ・つらさを味わったことはあるかと思います。
たとえば

グラフ用データを作成するには、API からデータ取得が終わった後に、DWH で集計して、その後バッチ処理かけてごにょごにょ
想定してたよりデータ量が多くて、許容時間内に処理が終わらないー
あの API 、 Rate Limit 厳しいからから並列数制御しないといつまでたっても取得がおわらない・・・

など、悩みはつき...]]></summary>
        <author>
            <name>bibio</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[技術メモPDFから学習させるGPTの作り方]]></title>
        <id>https://zenn.dev/tasiten/articles/80cd7994087011</id>
        <link href="https://zenn.dev/tasiten/articles/80cd7994087011"/>
        <updated>2024-02-05T18:51:23.000Z</updated>
        <summary type="html"><![CDATA[目的
去年の11月頃にOpenAIからカスタマイズ可能なChatGPTである，「GPTs」が発表された．特定の処理だけをさせるものを作ることができる．これはChatGPT Plusユーザーなら無料で作成・使用が出来る．
また何か開発する際などには技術的メモを残すものだが，それを時間が経って見返すときになかなか見つからないときがある．
そこで今回は今までWeb上にメモしたドキュメントをPDF化してそれをGPTに学習させることで，対話形式で技術的メモを引き出せるようにする．
ちなみにデータサイズが小さいという理由で，一度htmlファイルを学習させたがhtmlのコードが多く学習されたため，...]]></summary>
        <author>
            <name>tasiten</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nextcloud Talkのチャットボットを仕様通りに構築する]]></title>
        <id>https://zenn.dev/nondescript/articles/abbfd1f6a7ac93</id>
        <link href="https://zenn.dev/nondescript/articles/abbfd1f6a7ac93"/>
        <updated>2024-02-05T15:32:12.000Z</updated>
        <summary type="html"><![CDATA[TL;DR

Nextcloudサーバー上でコマンドocc talk:bot:installで作成する
Webhook→トークへのレスポンス

レスポンス先

NextCloudのURL/ocs/v2.php/apps/spreed/api/v1/bot/{トークID}/message


ヘッダ


X-Nextcloud-Talk-Bot-Random：任意の64桁16進文字列

X-Nextcloud-Talk-Bot-Signature：X-Nextcloud-Talk-Bot-Randomと返信メッセージのバイト列をBot作成時のシークレットを用いてHMACで暗号化した16...]]></summary>
        <author>
            <name>素人の戯言</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TransformerモデルをSentenceTransformersで使えるようにするには]]></title>
        <id>https://zenn.dev/nishimoto/articles/9b29f8257b436a</id>
        <link href="https://zenn.dev/nishimoto/articles/9b29f8257b436a"/>
        <updated>2024-02-05T11:14:19.000Z</updated>
        <summary type="html"><![CDATA[SentenceTransformer上でContrieverを使えるようにしたよ！
Facebookの作成したContrieverをSentenceTransformerで使えるようにしました！リポジトリは以下です。
https://huggingface.co/nishimoto/contriever-sentencetransformer
READMEに記載がありますが、以下のようにSentenceTransformerライブラリ上でContrieverを使用することができます。
# !pip install -U sentence-transformers

from sen...]]></summary>
        <author>
            <name>nishimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[cx＿freezeでハマったところ]]></title>
        <id>https://zenn.dev/takeyan/articles/ae1c6f81be6559</id>
        <link href="https://zenn.dev/takeyan/articles/ae1c6f81be6559"/>
        <updated>2024-02-05T08:15:37.000Z</updated>
        <summary type="html"><![CDATA[pyside6＋αを使ったpythonスクリプトをexeファイルにする際にcx＿freezeを使ったが幾つかハマった所があったので忘備録として残します。
pip install cx_Freeze
を実行してcx＿freezeをインストールしsetup.pyを作る。
from cx_Freeze import setup, Executable
import sys

# Dependencies are automatically detected, but some might need fine-tuning
build_exe_options = {"packages": ["o...]]></summary>
        <author>
            <name>takerin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windowsでのpython開発環境構築 with Docker, WSL2, Git and VS Code]]></title>
        <id>https://zenn.dev/emoclew/books/3087b7cff69946</id>
        <link href="https://zenn.dev/emoclew/books/3087b7cff69946"/>
        <updated>2024-02-05T07:33:15.000Z</updated>
        <summary type="html"><![CDATA[WindowsでDocker、WSL2、Git、VS Codeをインストールしてpythonの開発環境を整えるための手順をまとめた本]]></summary>
        <author>
            <name>emoclew</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VertexAIとLangChain サンプルコード集]]></title>
        <id>https://zenn.dev/ymd65536/articles/vertexai_gemini_llm</id>
        <link href="https://zenn.dev/ymd65536/articles/vertexai_gemini_llm"/>
        <updated>2024-02-05T02:14:11.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事ではVertexAIとLangChainを使ってLLMから応答を得る方法を探ってみました。
参考資料

google_vertex_ai_palm
Retrieval indexing
langchain.indexes.vectorstore.VectorstoreIndexCreator
Vertex AI PaLM APIとLangChainで容易になった生成AIアプリケーションの構築
question_answering_documents_langchain_matching_engine.ipynb
VectorStoreIndexWrapper
rec...]]></summary>
        <author>
            <name>Kento.Yamada</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenAI Streaming + Function callingの並列実行に対応する]]></title>
        <id>https://zenn.dev/keitakn/articles/tools-with-function-calling</id>
        <link href="https://zenn.dev/keitakn/articles/tools-with-function-calling"/>
        <updated>2024-02-05T02:06:04.000Z</updated>
        <summary type="html"><![CDATA[概要
OpenAI Python library を使ってFunction callingの並列実行に対応した実装を紹介する記事です。
ユーザーへの返答はStreamingで返答します。
私は最近LLMを使ったアプリケーション開発案件に関わっていますが、BtoB・BtoCに関わらずユーザー体験の観点からStreaming対応が必要になることが多いです。
その為、この記事のサンプルコードは実際のプロダクトにも応用できると思います。

 対象読者
OpenAIを使ったアプリケーション開発の概要を理解している方が対象となります。

 筆者のバックグラウンド
普段はTypeScript（Ne...]]></summary>
        <author>
            <name>keitakn</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows PCとWindows上のIoT Edgeモジュール間でファイル共有を行う]]></title>
        <id>https://zenn.dev/headwaters/articles/f3540383b4bf24</id>
        <link href="https://zenn.dev/headwaters/articles/f3540383b4bf24"/>
        <updated>2024-02-05T00:01:08.000Z</updated>
        <summary type="html"><![CDATA[ゴール：Windows PCに配置したファイルをWindows上のIoT Edgeモジュールから閲覧および編集ができる
Raspberry Piに入れた自作IoT Edgeモジュールを用いて、Raspberry Piに配置したファイルをIoT Edgeモジュールから閲覧や編集ができるようにしました。
そのモジュールをWindows PCに入れて実行することになり、ファイル共有処理も使用する必要が出ました。
本記事はその共有の方法についてまとめています。

 説明すること

ゴールを達成するためのIoT Edgeモジュールのデプロイ設定
Windowsの共有フォルダおよびその中に入れる...]]></summary>
        <author>
            <name>Shuichiro Sakata</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Snowflake]UDFでユーザー管理のキャッシュ領域がほしい]]></title>
        <id>https://zenn.dev/dataheroes/articles/d9671363c6d257</id>
        <link href="https://zenn.dev/dataheroes/articles/d9671363c6d257"/>
        <updated>2024-02-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[/tmpと /dev/shmが使えた。
Snowpark Optimized Warehouseに新たなユースケースを見出したかもしれない。

 なぜほしいか？
ファイルパスで非構造化ファイルを受け取るライブラリはよくある。
例えば、画像処理ライブラリのPillowはImage.open(image_path)のようにファイルパスを受け取る。他にも、MLモデルや動画ファイルをファイルパスとして渡すことはよくあると思う。
ただ、UDFからほとんどの領域は書き込み権限がない。
PermissionError: [Errno 1] Operation not permitted

 結論
冒頭...]]></summary>
        <author>
            <name>Kentaro Maeda</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Snowflake]UDFでユーザー管理のキャッシュ領域がほしい]]></title>
        <id>https://zenn.dev/efx/articles/d9671363c6d257</id>
        <link href="https://zenn.dev/efx/articles/d9671363c6d257"/>
        <updated>2024-02-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[/tmpと /dev/shmが使えた。
Snowpark Optimized Warehouseに新たなユースケースを見出したかもしれない。

 なぜほしいか？
ファイルパスで非構造化ファイルを受け取るライブラリはよくある。
例えば、画像処理ライブラリのPillowはImage.open(image_path)のようにファイルパスを受け取る。他にも、MLモデルや動画ファイルをファイルパスとして渡すことはよくあると思う。
ただ、UDFからほとんどの領域は書き込み権限がない。
PermissionError: [Errno 1] Operation not permitted

 結論
冒頭...]]></summary>
        <author>
            <name>Kentaro Maeda</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[workerdのpyodide統合を試す]]></title>
        <id>https://zenn.dev/laiso/articles/cfc7277d92b7f3</id>
        <link href="https://zenn.dev/laiso/articles/cfc7277d92b7f3"/>
        <updated>2024-02-04T13:16:51.000Z</updated>
        <summary type="html"><![CDATA[昨年末ぐらいからworkerdのPyodide統合の開発が活発になっている
search results: repo:cloudflare/workerd  pyodide
PyodideはWasmを使ってPythonインタプリターをブラウザ上で実行する環境で、これがリリースされるとRustサポートのようにCloudflare WorkersにPythonで書いたコードを直接デプロイできるようになると思われる
https://developers.cloudflare.com/workers/runtime-apis/webassembly/rust/
cloudflare/python...]]></summary>
        <author>
            <name>laiso</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[scrapyでプレスのPDFファイルを収集してLLMで要約する]]></title>
        <id>https://zenn.dev/khisa/articles/397b1d9e289352</id>
        <link href="https://zenn.dev/khisa/articles/397b1d9e289352"/>
        <updated>2024-02-04T13:15:16.000Z</updated>
        <summary type="html"><![CDATA[PythonのスクレイピングフレームワークScrapyを利用して、プレスなどのPDFファイルを収集、LLM（OpenAI API）でサマリを作成し、結果をデータベースに格納するという一連の流れを実現してみました。Scrapy、OpenAI APIともごく基本的な使い方しかしていませんが、あっという間に自動収集するプログラムが作成できましたので紹介します。

 Scrapyで収集したPDFファイルの内容をLLMに読み込ませてサマリーを作成
今回やりたいことは以下のとおりです。

Scrapyで特定のWebサイトの最新情報（今回はプレスリリースのタイトル、日付、PDFファイルなど）を取得する...]]></summary>
        <author>
            <name>ひさ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Python] APIで返した日本語が文字化けしたときの対処法]]></title>
        <id>https://zenn.dev/kotopasi/articles/ee03e9f3343ad6</id>
        <link href="https://zenn.dev/kotopasi/articles/ee03e9f3343ad6"/>
        <updated>2024-02-04T09:56:55.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Pythonで実装した関数をFlaskのAPIで返したら日本語だけ文字化けしたときの対処法を載せます

 動作環境

mac macOS 14.2.1
Python 3.9


 手順
以下のコードを追加します
from flask import Flask

app=Flask(__name__)
+ app.json.ensure_ascii = False
flaskライブラリのjsonifyで解決できるという記事が多かったのですが、Flaskのバージョンが2.3.2 以上の場合､Flaskの設定ファイルから文字コードの設定を変更する必要があるみたいです。

 おわり...]]></summary>
        <author>
            <name>あまたつ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Python] バックエンド側でCORSを許可する設定]]></title>
        <id>https://zenn.dev/kotopasi/articles/10b9d575b563c7</id>
        <link href="https://zenn.dev/kotopasi/articles/10b9d575b563c7"/>
        <updated>2024-02-04T09:54:34.000Z</updated>
        <summary type="html"><![CDATA[はじめに
技育CAMPキャラバン@東京ハッカソンでフロントバック間のAPIの繋ぎ込みに苦戦しましたが、バックエンド側でCORSを許可することで解決しました

 動作環境

mac macOS 14.2.1
Python 3.9


 手順
CORSライブラリをimportして設定するだけです
from flask import Flask
+ from flask_cors import CORS

app=Flask(__name__)
+ CORS(app)

 おわりに
CORSの理解浅いので勉強しなきゃ...

 参考]]></summary>
        <author>
            <name>あまたつ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FastAPIのGetメソッドパラメータをBaseModelで受け取れるようにしてみる]]></title>
        <id>https://zenn.dev/takuty/articles/5a94628bd87179</id>
        <link href="https://zenn.dev/takuty/articles/5a94628bd87179"/>
        <updated>2024-02-04T08:36:12.000Z</updated>
        <summary type="html"><![CDATA[はじめに
FastAPI で API 開発をしていて Get メソッドを叩く時にhttp://lcalhost:8080/items?name=Aのようにクエリパラメータに対応した Get メソッドはよく出でくると思います
ただ、検索ページの API のようにクエリパラメータが５個 10 個と必要になった時にどうしていますか
メソッドの引数に５個 10 個と指定するのはあまりに不自然だと思いましたので現状これが良さそうだなというのをこちらに記載していきたい思います

 前提
商品のリストを Get メソッドで検索する、という想定です
検索項目としては

商品の ID
商品名
商品値段...]]></summary>
        <author>
            <name>Takuty</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[prefect の deployment について理解する]]></title>
        <id>https://zenn.dev/massu_devix/articles/8184386de66394</id>
        <link href="https://zenn.dev/massu_devix/articles/8184386de66394"/>
        <updated>2024-02-04T07:58:50.000Z</updated>
        <summary type="html"><![CDATA[はじめに
prefect の構成要素のうち、 deployment について理解します。
また説明の中で、関連要素である flow や task についても触れます。
前回は prefect の基本要素について触れました。
https://zenn.dev/massu_devix/articles/a016774865d647

 deployment とは
deployment とは、 prefect に登録した flow を リモートで実行可能なエンティティ に昇華させるオブジェクトです。
flow とは prefect におけるワークフローとしての起動単位です。 flow を起...]]></summary>
        <author>
            <name>mas_dx</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[numpyで特異値分解]]></title>
        <id>https://zenn.dev/sawarae/articles/27d848a17fe7fc</id>
        <link href="https://zenn.dev/sawarae/articles/27d848a17fe7fc"/>
        <updated>2024-02-04T07:00:16.000Z</updated>
        <summary type="html"><![CDATA[「Pythonによる数値計算入門」で最小二乗法の例をnumpy.linalg.solveで解く例があったので、それのsvd版を書いておきます。
import numpy as np

# y = 2x + 3に誤差を加えたデータ
# 数値はPythonによる数値計算入門より

N = 5
X = np.zeros(N)
Y = np.zeros(N)
Z = np.zeros(N)

X[0] = 0.0; Y[0] = 3.00
X[1] = 1.0; Y[1] = 4.51
X[2] = 2.0; Y[2] = 7.54
X[3] = 3.0; Y[3] = 8.43
X[4] = ...]]></summary>
        <author>
            <name>sawara</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[どうしてもneovimでjupyterlabしたいんや]]></title>
        <id>https://zenn.dev/afk2777/articles/zenn-nvim-jupyter</id>
        <link href="https://zenn.dev/afk2777/articles/zenn-nvim-jupyter"/>
        <updated>2024-02-04T06:39:07.000Z</updated>
        <summary type="html"><![CDATA[はじめに
はじめまして、makioです。
仮想通貨自動売買プログラムの開発をしています。
データ分析の勉強がてらkaggleに入門しようとブラウザやらvscodeでjupyterを操作していましたが、「vimでやりてぇー」という気持ちが抑えきれずneovim上でjuypterをやる方法を模索しました。
調べた結果、nevim上で以下のようなことができるようになりました。

juypter notebook(*.ipynb)を開くと自動でpythonファイルとして開く。
保存時にipynbに編集内容を反映する。
「#%%」で囲われた箇所を一つのセルとしてコードを実行できる。
nvimの...]]></summary>
        <author>
            <name>makio</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】Lambdaで外部APIを使う]]></title>
        <id>https://zenn.dev/sekochan/articles/721fb53c99f753</id>
        <link href="https://zenn.dev/sekochan/articles/721fb53c99f753"/>
        <updated>2024-02-04T02:41:52.000Z</updated>
        <summary type="html"><![CDATA[requestsは別途installしてimportする必要があるのでurllib3を使う
例
import json
import urllib3
from urllib3 import PoolManager

def req():

    url = f"https://sample.com"
    
    http = urllib3.PoolManager()
    response = http.request('GET', url)
    decoded_data = response.data.decode('utf-8')
    json_data = js...]]></summary>
        <author>
            <name>sekochan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Flask] 引数を取って動的なAPIを作成する]]></title>
        <id>https://zenn.dev/kotopasi/articles/cab921a085775e</id>
        <link href="https://zenn.dev/kotopasi/articles/cab921a085775e"/>
        <updated>2024-02-04T02:01:39.000Z</updated>
        <summary type="html"><![CDATA[はじめに
技育CAMPキャラバンハッカソンで音楽マッチングアプリを作成したときにFlaskでAPIを作成したときの備忘録です

 動作環境

macOS 14.2.1


 手順

 ルーティングURLに引数をとる
From flask import Flask

app=Flask(__name__)
@app.route('/hello/<string:name>')
def hello(name):
    return {"hello":name}
これで/hello/以降に入れた文字列がnameに代入されて返ってくる
http://localhost:5000/...]]></summary>
        <author>
            <name>あまたつ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Python]Spotify APIで楽曲の情報を取得する]]></title>
        <id>https://zenn.dev/kotopasi/articles/7dc6a1478a5060</id>
        <link href="https://zenn.dev/kotopasi/articles/7dc6a1478a5060"/>
        <updated>2024-02-04T01:43:21.000Z</updated>
        <summary type="html"><![CDATA[はじめに
技育CAMPキャラバンハッカソンで音楽マッチングアプリを作成したときにSpotifyAPIで遊んでみた備忘録です

 動作環境

macOS 14.2.1


 目標

SpotifyAPIを利用できるようにする
曲情報を取得する


 手順

 SpotifyAPIを利用できるようにする
APIダッシュボードからログインしたあと以下を入力することでclientIDとsecretKeyを取得する


 曲情報を取得する
PythonでSpotify APIを使うために、spotipyライブラリを使う
import spotipy
from spotipy.oauth2 im...]]></summary>
        <author>
            <name>あまたつ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonにおけるSemanticKernelのPlannerの種類を整理する]]></title>
        <id>https://zenn.dev/nomhiro/articles/sk-plan-type</id>
        <link href="https://zenn.dev/nomhiro/articles/sk-plan-type"/>
        <updated>2024-02-03T13:18:09.000Z</updated>
        <summary type="html"><![CDATA[はじめに
SemanticKernelをまだまだ使いこなせてませんが、AOAIのドーナツ本を読む中で、Plannerの種類がいくつかあることを知りました。そのため、Plannerの種類を整理してみます。
ここではPythonで使えるPlannerを試します。
C#版ではいくつかPlannerに変更があったようなので、そちらについては別途調査します。Migrating from the Sequential and Stepwise planners to the new Handlebars and Stepwise planner

 そもそもSemanticKernelとは
Se...]]></summary>
        <author>
            <name>しろくま</name>
        </author>
    </entry>
</feed>