<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://s-i27.github.io/Rssfeed/index.html</id>
    <title>osmos::feed</title>
    <updated>2022-09-27T02:31:03.513Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="https://s-i27.github.io/Rssfeed/index.html"/>
    <link rel="self" href="https://s-i27.github.io/Rssfeed/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[共有メモリにNumpy配列を載せてProcessPoolExecutorに渡す]]></title>
        <id>https://zenn.dev/kzm4269/articles/80df87e6e9001f</id>
        <link href="https://zenn.dev/kzm4269/articles/80df87e6e9001f"/>
        <updated>2022-09-27T00:25:54.000Z</updated>
        <summary type="html"><![CDATA[TL;DR
import concurrent.futures
import multiprocessing as mp

import numpy as np


def ndarray_to_shared_memory(data):
    """NumPy配列を共有メモリに載せる.
    
    Paramerters
    -----------
    data: numpy.ndarray
    
    Returns
    -------
    (multiprocessing.RawValue, numpy.dtype)
        共有メモリ上のデ...]]></summary>
        <author>
            <name>kzm4269</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[StableDiffusionやMidjourneyでよく出てくる用語まとめ]]></title>
        <id>https://zenn.dev/michy/articles/f5a9f073709e0e</id>
        <link href="https://zenn.dev/michy/articles/f5a9f073709e0e"/>
        <updated>2022-09-26T16:11:20.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事ではStableDiffusionを利用する際によく出てくる用語をまとめました。
それぞれの用語には見出しをつけてあるので、気になる用語には目次からジャンプできます。

 基本用語

 prompt(呪文)
StableDiffusionに書いてほしいイラストをインプットする為のテキスト。
主にイラストの構図、シチュエーション、画風を決めるために使用する。

 Negative Prompt
StableDiffusionに書いてほしくない画像をインプットする為のテキスト。

 seed
画像作成時に使用するパラメータ。同じseed値を使うと同じ画像が作成される。
...]]></summary>
        <author>
            <name>zaiwa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【編集中】競プロでよく使うコードまとめ(Python3)]]></title>
        <id>https://zenn.dev/pienthon/articles/5289bed34a8bd6</id>
        <link href="https://zenn.dev/pienthon/articles/5289bed34a8bd6"/>
        <updated>2022-09-25T18:41:56.000Z</updated>
        <summary type="html"><![CDATA[入力値を受け取る

 1. N行で入力されるスペースで区切られていない文字列をリストに格納
経路が何通りあるか計算する時のマスの情報を格納するのに使ったりします。
3
...
...
#..
と入力された場合、
[['.', '.', '.'],
['.', '.', '.'],
['#', '.', '.']]
というリストにします。
N = int(input())
S = [["."] * N for _ in range(N)]
for i in range(N):
    S[i] = list(input())


 2. N行で入力されるスペースで区切られた数値をリスト...]]></summary>
        <author>
            <name>にゃーん(Pienthon)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenAI Whisperに音声データを全文書き起こしさせる【Google Colaboratory】]]></title>
        <id>https://zenn.dev/ik/articles/f891d628e829ea</id>
        <link href="https://zenn.dev/ik/articles/f891d628e829ea"/>
        <updated>2022-09-25T16:29:08.000Z</updated>
        <summary type="html"><![CDATA[OpenAIの「Whisper」を試してみていたのですが、Pythonで音声データを全文書き起こしする方法があまり情報がなかったため、備忘録です。
（手軽に試せるデモだと30秒程度までしか認識してくれません）

 Whisper
「Whisper」は、OpenAIが開発した、会話音声をテキストに変換する深層学習モデルです。
多様な音声の大規模データセットで学習され、音声翻訳や言語識別だけでなく、多言語音声認識を行うことができるマルチタスクモデルでもあります。
（細かくは調べていないですが、音声を元にしてTransformerなどの自然言語処理技術で文章を生成する、という認識の方が近いかも...]]></summary>
        <author>
            <name>inakam</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[価格帯別出来高を扱う]]></title>
        <id>https://zenn.dev/ymd/articles/9110790208f803</id>
        <link href="https://zenn.dev/ymd/articles/9110790208f803"/>
        <updated>2022-09-25T14:05:02.000Z</updated>
        <summary type="html"><![CDATA[価格帯別出来高(VPR:volume price range)とは
以下のような価格帯ごとの出来高で横バー

上記の図の引用元と詳しい説明はここを参照

 plotの方法
以下をjupyter notebookで実行する
import numpy as np
import pandas as pd
import holoviews as hv
import hvplot.pandas
from holoviews import opts
hv.extension('bokeh')

opts.defaults(opts.Curve(tools=['hover']), opts.Ove...]]></summary>
        <author>
            <name>ymd</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python - SQlite エラー】ValueError: parameters are of unsupported type]]></title>
        <id>https://zenn.dev/osawa_koki/articles/348e3af043bcf0</id>
        <link href="https://zenn.dev/osawa_koki/articles/348e3af043bcf0"/>
        <updated>2022-09-25T12:08:13.000Z</updated>
        <summary type="html"><![CDATA[タプル型??? 優先度変更用の括弧???
PythonでSQLiteを操作している際に発生したエラー、、、
以下のテーブル(pokemon)から図鑑番号が「25」の行を削除しようとしたときにお話ですね、、、



number
name
type1
type2




25
ピカチュウ
でんき



152
チコリータ
くさ



875
コオリッポ
こおり



884
ジュラルドン
はがね
ドラゴン



cursor.execute("DELETE FROM pokemon WHERE number = ?", (25))
上のコードを実行すると以下のエラーが、、、
Value...]]></summary>
        <author>
            <name>osawa-koki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[cookiecutterとcruftとcopier]]></title>
        <id>https://zenn.dev/nishikoh/articles/8939b2c00bf916</id>
        <link href="https://zenn.dev/nishikoh/articles/8939b2c00bf916"/>
        <updated>2022-09-25T10:09:38.000Z</updated>
        <summary type="html"><![CDATA[cookiecutterとcruftとcopier
cruftとcopierについて調べてみた。理解するのに公式のドキュメントを読むのが一番良さそうだが備忘録として書いておく。

 導入
プロジェクトを始める時にお決まりのディレクトリ構成、ライブラリ、ツール、CI設定、その他を使いまわすためにプロジェクトテンプレートを用意することがある。テンプレートが更新された際、既に作成済みのプロジェクトにコピペで更新を反映したり、更新が面倒で放置されるプロジェクトもある。そこで継続的にテンプレートの更新をプロジェクトに反映するツールを調べてみた。

 cruft
cruftはcookiecutt...]]></summary>
        <author>
            <name>nishikoh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[とりあえず突っ込んで見るデータ概要]]></title>
        <id>https://zenn.dev/mimitako/articles/analyzer_of_basic</id>
        <link href="https://zenn.dev/mimitako/articles/analyzer_of_basic"/>
        <updated>2022-09-25T07:57:15.000Z</updated>
        <summary type="html"><![CDATA[どんなデータなのか一括で見たい
Kaggle しかり、他のデータ分析しかり、前処理は面倒だし同じ作業の繰り返しというのもつまらない。
サクッと見たいときに Jupiter Notebook をカタカタするのも面倒…
こんな気持なのはきっと私だけじゃないですよね？ということで、今のところ csv ファイルだけですが、全体を俯瞰するような Python コードを作成したので公開します。
公開先はここです。クローンしてご利用ください。
https://github.com/miris-mimitako/basic_analyzer

 どんな入出力にしたか？
現在（2022/09/25）は...]]></summary>
        <author>
            <name>mimitako</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ctypes.windll.user32.SetProcessDPIAware()]]></title>
        <id>https://zenn.dev/as/articles/c142780724f1b4</id>
        <link href="https://zenn.dev/as/articles/c142780724f1b4"/>
        <updated>2022-09-25T07:41:19.000Z</updated>
        <summary type="html"><![CDATA[try:
   ctypes.windll.user32.SetProcessDPIAware()
except AttributeError:
    pass]]></summary>
        <author>
            <name>ForestSeo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[理解して覚えるpython ~デコレータ編~]]></title>
        <id>https://zenn.dev/ama_c/articles/c5523044aa0868</id>
        <link href="https://zenn.dev/ama_c/articles/c5523044aa0868"/>
        <updated>2022-09-25T03:56:07.000Z</updated>
        <summary type="html"><![CDATA[はじめに
初学者がデコレータだけ学習しようとすると苦戦します．書き方を覚えたつもりでも理解をしていないのでは，毎日書かない限りほんの数日で忘れてしまいます（過去の僕がそうです）．
本記事では，デコレータを理解するのに必要な最低限の知識と，そのユースケースを見ていくことで理解して覚えることを目的としています．

 前提知識
まず，関数内関数とクロージャから学びます．

 関数内関数
簡単に言うと，関数のネストです．ユースケースとしては，クラスを書くほどじゃないけど，少し読みにくい処理等を書きたいとき程度に考えています．関数の外に書けばいいじゃないかと思うかもしれませんが，外側に書くと，...]]></summary>
        <author>
            <name>ama-c</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[『リーダブルコード』の要点＆活用方法]]></title>
        <id>https://zenn.dev/nameless_sn/articles/readable_code_handbook</id>
        <link href="https://zenn.dev/nameless_sn/articles/readable_code_handbook"/>
        <updated>2022-09-25T02:44:41.000Z</updated>
        <summary type="html"><![CDATA[はじめに

今回の記事では『リーダブルコード』の要点と、実務で活用する方法を徹底解説する。この記事を読むことで、『リーダブルコード』の重要な部分と実務での活用方法を学べるだろう。
本記事で使うプログラムの言語はPythonを採用した。Pythonは文法がシンプルなので初心者でも学習コストが低く、プログラミングの入門としては最も相応しいからである。今回の記事の内容は良いプログラムを格上での重要な基本事項なので、どの言語でも役立つだろう。

 1部：表面上の改善

 名前に情報を詰め込む
プログラムに使われる名前は、主に次の5つの鉄則を守る必要がある。

明確な単語を選ぶ

例えば、ge...]]></summary>
        <author>
            <name>Shota Nukumizu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TodoListを作りました！]]></title>
        <id>https://zenn.dev/fan_tech/articles/8e2379a2b2152a</id>
        <link href="https://zenn.dev/fan_tech/articles/8e2379a2b2152a"/>
        <updated>2022-09-24T20:03:16.000Z</updated>
        <summary type="html"><![CDATA[TODO
GitHub - fan-tech/todo: TodoListです。

 はじめに
ベースは以下のサイトを参考にしています。
Django入門 | 初心者でも1時間でWebアプリ(Todoアプリ)を作成するコース | テックダイアリー
実はこのままではなくて、
DBの部分をMYSQL、色んな人のローカルで少しでも動きやすいようにDockerで環境構築できるようにしてあります。


 動かし方　お手元での動かし方

 まずは、少し書き換えが必要です。
以下の部分を削除してください。
★config/settings.py
import os
import environ

...]]></summary>
        <author>
            <name>ふぁん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Raspberry Pi+OpenCVで動体検出してLINE通知]]></title>
        <id>https://zenn.dev/technicarium/articles/82e17c1f5b2ef1</id>
        <link href="https://zenn.dev/technicarium/articles/82e17c1f5b2ef1"/>
        <updated>2022-09-24T14:12:10.000Z</updated>
        <summary type="html"><![CDATA[カメラモジュールも無事使用できるようになったのでとりあえず目標であった動体検出してLINE通知をしてみました。
https://zenn.dev/technicarium/articles/449294af295d5c

 OSバージョン
$ cat /etc/os-release 
PRETTY_NAME="Debian GNU/Linux 11 (bullseye)"
NAME="Debian GNU/Linux"
VERSION_ID="11"
VERSION="11 (bullseye)"
VERSION_CODENAME=bullseye
ID=debian
HOME_URL=...]]></summary>
        <author>
            <name>テク二カリウム</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[checkmake] Makefile向けのLinterを実行するGitHub Actionを作ってみた]]></title>
        <id>https://zenn.dev/u_not/articles/6973eeb8028810</id>
        <link href="https://zenn.dev/u_not/articles/6973eeb8028810"/>
        <updated>2022-09-24T11:23:50.000Z</updated>
        <summary type="html"><![CDATA[エレベータ―ピッチ

checkmakeによって、Makefileのフォーマットをチェック。
GitHub  Actionとして、GitHub Marketplaceに公開し、容易に導入可能。

軽量なコンテナを使い1分以内に実行が可能
OSS+GitHub Actionsなのでプライベートリポジトリなどでも無課金で使用可能



 概要
一般的にチーム開発においてLinterはコードに統一感を与え、潜在的なバグの解消に役立ちます。またDocker向けのHadolintはより軽量なイメージを作成するためのtipsを教えてくれたりと、Linterは様々な側面から開発をサポートしてくれま...]]></summary>
        <author>
            <name>U-NOT</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[母比率の区間推定で機械学習モデルを評価する 〜機械学習の仕事に統計を使ってみる〜]]></title>
        <id>https://zenn.dev/yagiyuki/articles/ml_test_statistics</id>
        <link href="https://zenn.dev/yagiyuki/articles/ml_test_statistics"/>
        <updated>2022-09-24T08:17:53.000Z</updated>
        <summary type="html"><![CDATA[この記事では、母比率の区間推定を用いた機械学習モデルを評価する方法を書きます。
統計学を使うことで機械学習モデルの評価をより精密に実施することを目指します。
!
本記事で記載した内容は、私的なアイディアをまとめたものになります。
機械学習モデルの評価方法として確立したものではない点をご認識ください。


 正解率90%はどんなデータに対しても90%なのか?
機械学習モデルの学習/評価方法の以下のフローを考えてみます。

全3000万のデータから訓練データとテストデータを合わせて数千件ほど抽出する
訓練データとテストデータに対してラベル付けを実施する
訓練データでモデル学習
テストデータで...]]></summary>
        <author>
            <name>yagiyuki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[競馬で覚えるPython初心者のための覚書①]]></title>
        <id>https://zenn.dev/motokoike/articles/b3b495f9397873</id>
        <link href="https://zenn.dev/motokoike/articles/b3b495f9397873"/>
        <updated>2022-09-24T08:16:34.000Z</updated>
        <summary type="html"><![CDATA[Pythonプログラミングの基礎についての記事となります。
今回は、以下について競馬要素を交えて、纏めていきます。



章
データ型
備考




1
リスト型
複数の要素を格納できるデータ型（変更可能）


2
タプル
複数の要素を格納できるデータ型（変更不可）


3
辞書型
キー（key）と値（value）の組で表されるデータ型




 1.リスト型
リスト型とは、複数の要素を格納できるデータ型の1つです。他のプログラミング言語における「配列」に相当する。
[] で記述します。

 1.1.リスト型のデータ定義
角カッコ[] の中にそのリストに含めるデータをカンマで区切って並べ...]]></summary>
        <author>
            <name>元小池</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WSL2にGoogle Cloud SDKをインストールしようとしたらハマったのでメモ]]></title>
        <id>https://zenn.dev/noriko3/articles/d365ae94188910</id>
        <link href="https://zenn.dev/noriko3/articles/d365ae94188910"/>
        <updated>2022-09-24T08:00:38.000Z</updated>
        <summary type="html"><![CDATA[現在使ってるバージョンはこんな感じです。
$ cat /etc/os-release
PRETTY_NAME="Ubuntu 22.04 LTS"
NAME="Ubuntu"
VERSION_ID="22.04"
VERSION="22.04 LTS (Jammy Jellyfish)"
VERSION_CODENAME=jammy
ID=ubuntu
ID_LIKE=debian
HOME_URL="https://www.ubuntu.com/"
SUPPORT_URL="https://help.ubuntu.com/"
BUG_REPORT_URL="https://bugs.l...]]></summary>
        <author>
            <name>noriko3</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DuckDB入門]]></title>
        <id>https://zenn.dev/notrogue/articles/1193d0ab8d8eda</id>
        <link href="https://zenn.dev/notrogue/articles/1193d0ab8d8eda"/>
        <updated>2022-09-24T02:40:31.000Z</updated>
        <summary type="html"><![CDATA[背景

 ポジション
一言で言うとSQLiteのOLAP版です。位置づけとしては、論文(DuckDB: an Embeddable Analytical Database (SIGMOD 2019 Demo))記載のSystem Landscapeがわかりやすいです。

このLandscapeでは、データベースを

Standalone（クライアント・サーバモデル）か、組み込み（シングルマシン）か
OLTPかOLAPか

の二軸に分割しています。その上で、

クライアント・サーバモデルのOLTPにはPostgreSQL等
クライアント・サーバモデルのOLAPにはTeradata等
組...]]></summary>
        <author>
            <name>notrogue</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【自然言語処理】【Python】BERTでネガポジ判定を実装した]]></title>
        <id>https://zenn.dev/robes/articles/5c1599615290ed</id>
        <link href="https://zenn.dev/robes/articles/5c1599615290ed"/>
        <updated>2022-09-24T02:13:38.000Z</updated>
        <summary type="html"><![CDATA[0.はじめに
Python初心者のわたくしですが、このたび、BERTによる自然言語処理入門を読み込んで、BERTによるネガポジ判定を実装することができました。
本の内容から、初心者のわたくしなりに、こうした方が分かりやすいのではないかと、いくつかの工夫をしています。きっと、あまたの初心者の方にとっても、ネガポジ判定の入門としては、こちらの方が分かりやすいのではないかと自負しています。
 
https://www.ohmsha.co.jp/book/9784274227264/
 
!
ここで言うネガポジ判定の対象は、一般的な文書ではなく、いわゆるビジネス文書になります。
したがって、...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【自然言語処理】【感情分析】chABSA-datasetを扱いやすいように整形する]]></title>
        <id>https://zenn.dev/robes/articles/a7ba6e172f3a14</id>
        <link href="https://zenn.dev/robes/articles/a7ba6e172f3a14"/>
        <updated>2022-09-24T02:12:30.000Z</updated>
        <summary type="html"><![CDATA[chABSA-datasetとは
chABSA-datasetとは、機械学習で感情分析を行うためのデータセットで、TIS株式会社が無償公開しているものです。
上場企業の有価証券報告書（2016年度）をベースに作成されており、各文章の中で、「何が」ネガティブで、ポジティブなのかという観点を表す情報が含まれています。
一方、データ構造が少々複雑なので、そのまま扱うことができません。タスクにあわせて扱いやすいように、データを整形してやる必要があります。
ここでは、BERTで感情分析を行うことを前提に、chABSA-datasetを整形する方法についてご紹介していきます。
以下のサイトも参考...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Remote Containers + Poetryの俺最強テンプレート]]></title>
        <id>https://zenn.dev/utt3519/articles/615b3f73640a46</id>
        <link href="https://zenn.dev/utt3519/articles/615b3f73640a46"/>
        <updated>2022-09-23T16:45:03.000Z</updated>
        <summary type="html"><![CDATA[tl;dr
Remote Containers + Poetryの俺最強テンプレートを作りました。

 対象読者
以下の基本的な使い方がわかる人。

VS Code Remote Remote Container
Poetry
Dockerfile
Docker Compose

あるいはこれらの技術を理解したい人。（この記事を駆け抜けると、これらの知識が得られます）

 目指すこと

ローカルの開発環境を汚さない
Remote Containersを意識せずに、アプリを起動することができる
開発用のコンテナの起動をできるだけ早くする
moduleとしてpythonスクリプトを実行す...]]></summary>
        <author>
            <name>utt3519</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WhisperとGoogle Colaboratoryで音声の文字起こしをやってみた]]></title>
        <id>https://zenn.dev/kazuki_tam/articles/d59250ecf25628</id>
        <link href="https://zenn.dev/kazuki_tam/articles/d59250ecf25628"/>
        <updated>2022-09-23T15:09:48.000Z</updated>
        <summary type="html"><![CDATA[AI 業界の進化が著しい昨今、OpenAI から Whisper というとんでもない自動音声認識モデルの発表がありました。（2022/09/22）Whisper は 68 万時間かけてトレーニングされた自動音声認識モデルでなんとオープンソース化されています。
https://openai.com/blog/whisper/
https://github.com/openai/whisper
公開されているサンプルでは早口や K-POP、フランス語、アクセントのある会話などを問題なく処理できることが示されています。また日本語に関しても高い精度を保持していることがグラフから見て取れます。

...]]></summary>
        <author>
            <name>Kazuki Yonemoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[絶対に負けない三目並べを作る]]></title>
        <id>https://zenn.dev/plhr7/articles/80979f08481719</id>
        <link href="https://zenn.dev/plhr7/articles/80979f08481719"/>
        <updated>2022-09-23T12:46:07.000Z</updated>
        <summary type="html"><![CDATA[三目並べはきっと誰でも遊んだことのある他愛無い遊びですが、「じゃあプログラムで三目並べの AI を作ってください」と言われると意外と悩む人もいるのではないでしょうか。今回はそんな三目並べの絶対負けない AI を作る方法について、コードをいちから書いて実装したいと思います。
実装については三目並べが囲碁や将棋と異なり、比較的パターン数が少ないため全盤面の探索を行い、勝てる(負けない)パターンを見つけることで最良の手を打つようにします。つまり乱択アルゴリズムではなく、決定的であるということです。
さて、三目並べですが、ゲームに対する認識の齟齬がないように条件をあらかじめ整理したいと思います。...]]></summary>
        <author>
            <name>PlasticHeart</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】水素原子の解の描画：球面調和関数]]></title>
        <id>https://zenn.dev/shittoku_xxx/articles/061ad99166afcc</id>
        <link href="https://zenn.dev/shittoku_xxx/articles/061ad99166afcc"/>
        <updated>2022-09-23T09:30:00.000Z</updated>
        <summary type="html"><![CDATA[球面調和関数
!
この記事は消化不良の箇所を一部含みますが、他の方の役に立つ部分もあると思うので公開します。分からなかったところは分からなかったと記載しています。私の理解が進んだら記事を改定するかもしれません。間違いなどを見つけた方はコメント欄やTwitterなどでご連絡頂けますと幸いです。


 0. 概要
この記事では、シュレディンガー方程式に従う水素原子の解を描画する、という立場に立ち、球面調和関数(Spherical harmonics function)に関する情報を整理・解説する。水素原子の解のうち、動径方向に関する部分は以前の記事を参考にされたい。なお、水素原子の解の計算...]]></summary>
        <author>
            <name>しっとく</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[macOSにLightGBMにインストールする（legacy-install-failureも解決）]]></title>
        <id>https://zenn.dev/higan96/articles/4d6220e2251f5b</id>
        <link href="https://zenn.dev/higan96/articles/4d6220e2251f5b"/>
        <updated>2022-09-23T08:19:18.000Z</updated>
        <summary type="html"><![CDATA[以下の環境でLightGBMのpython packageをインストールします。
macOS Monterey 12.6
チップ Apple M1
Python 3.10.7 (pyenvでインストール)
pip 22.2.2
GithubのREADMEにYou may need to install wheel via pip install wheel first.とあるのでまずwheelのインストールをします。
pip install wheel
この状態でpip install lightgbmでLightGBMをインストールしようとすると以下のようなエラーが出ます。
Faile...]]></summary>
        <author>
            <name>Norihiko Oba</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pipenv を導入して requirements.txt を利用したパッケージ管理をやめる]]></title>
        <id>https://zenn.dev/k0kishima/articles/8490a552f2fac0</id>
        <link href="https://zenn.dev/k0kishima/articles/8490a552f2fac0"/>
        <updated>2022-09-23T04:18:16.000Z</updated>
        <summary type="html"><![CDATA[前提

作業環境は Mac (macOS Monterey 12.6 Apple M2)

Homebrew が既に使えるようになっていること


pyenvは既にインストールされていること


 requirements.txt を利用する方式の問題点


pip install した後に反映し忘れる
前項の反映に関して、 pip freeze > requirements.txt ってしたら dev dependencies的なパッケージ(フォーマッターやテスティングフレームワークなど開発やテスト関係のパッケージで、本体の実行に必須ではないもの)も全部吐き出される

この兼...]]></summary>
        <author>
            <name>k0kishima</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenAIのWhisperをWindows環境で試す(CUDA環境有り)]]></title>
        <id>https://zenn.dev/en129/articles/ddfb3da6d0fd31</id>
        <link href="https://zenn.dev/en129/articles/ddfb3da6d0fd31"/>
        <updated>2022-09-23T03:03:50.000Z</updated>
        <summary type="html"><![CDATA[試した環境
Python 3.10.5
Windows10 Pro 21H2 (19044.2006)
CPU:Core i9-11900KF
Mem:32GB
GPU:RTX3060 12GB

 CPUで動かす
winget install Git.git
winget install ffmpeg
#パス読み込みのためログアウトor再起動
python -m pip install git+https://github.com/openai/whisper.git
python -m  whisper --help
これで動作すればOK
認識テストに使う英語の音声ファイルをこち...]]></summary>
        <author>
            <name>en129</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tensorflow x Kerasを使ってみた]]></title>
        <id>https://zenn.dev/mimitako/articles/tfxkeras_begin</id>
        <link href="https://zenn.dev/mimitako/articles/tfxkeras_begin"/>
        <updated>2022-09-23T01:18:50.000Z</updated>
        <summary type="html"><![CDATA[Tensorflow x keras を使ってみる
こちらの記事では Tensorflow だけを利用して Iris の分類タスクを実行していました。しかし、Keras を利用する方が多く、また利用が容易であるというメリットがあります（参考）。
そこで、せっかく Tensorflow を学ぶのなら一緒に Keras も学んでみようと思い、使ってみることにしました。(ここでは Keras の Sequential を利用するという意味です。)

 Keras Sequential を利用する
こちらの記事にあるコードを Keras 仕様へ変更します。
https://zenn.dev/...]]></summary>
        <author>
            <name>mimitako</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[KaggleのTitanicをTensorflowで解いてみる]]></title>
        <id>https://zenn.dev/mimitako/articles/kaggle_first</id>
        <link href="https://zenn.dev/mimitako/articles/kaggle_first"/>
        <updated>2022-09-23T01:18:49.000Z</updated>
        <summary type="html"><![CDATA[Kaggle とは
Kaggle は Google が主催の機械学習コンペティションで、様々な課題に対してその精度を競いあうものです。
精度が高ければ、上位チームには懸賞金が出ます。
そんな Kaggle も初心者向けに常時公開してあるタスクがあり、そのひとつが Titanic の生死分類タスクです。
Titanic はあの映画にもなった大型客船のことです。ここに乗船していた人の状況（利用料金、性別、家族構成など）によって生死がどうなったかを予測していきます。

 Tensorflow で分類していく
Tensorflow はニューラルネットワークによるディープラーニングの機械学習ラ...]]></summary>
        <author>
            <name>mimitako</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Raspberry Pi OS(Bullseye)+カメラモジュールV1.3]]></title>
        <id>https://zenn.dev/technicarium/articles/449294af295d5c</id>
        <link href="https://zenn.dev/technicarium/articles/449294af295d5c"/>
        <updated>2022-09-23T00:53:38.000Z</updated>
        <summary type="html"><![CDATA[画質や高機能は不要だったため1000円以下で買えたカメラモジュールV1.3を使ってみました。
https://www.raspberrypi.com/documentation/accessories/camera.html
安易に使用できると思いきや苦戦・・・

 Legacy Cameraの有効化
sudo raspi-config

3を選択

1を選択

はいを選択

了解を選択

はいを選択して再起動

 接続状況確認
vcgencmd get_camera
supported=1 detected=1, libcamera interfaces=0
!
64bitの場合はsu...]]></summary>
        <author>
            <name>テク二カリウム</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[XMLファイルで文字列のみを抽出して処理する方法]]></title>
        <id>https://zenn.dev/nakamura196/articles/93f85e26a3dc42</id>
        <link href="https://zenn.dev/nakamura196/articles/93f85e26a3dc42"/>
        <updated>2022-09-22T11:32:23.000Z</updated>
        <summary type="html"><![CDATA[XMLファイルで文字列のみを抽出して処理する機会がありました。
このニーズに対して、以下のようなスクリプトにより、実現することができました。
soup = BeautifulSoup(open(path,'r'), "xml")
elements = soup.findChildren(text=True, recursive=True)
ポイントは、text=Trueを与えている点で、テキストノードのみを取得することができました。
参考になりましたら幸いです。]]></summary>
        <author>
            <name>nakamura196</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[量子最適化を使ったふるさと納税で得をするプログラム]]></title>
        <id>https://zenn.dev/deeprecommend/articles/46dab7ae9bfb0e</id>
        <link href="https://zenn.dev/deeprecommend/articles/46dab7ae9bfb0e"/>
        <updated>2022-09-22T01:47:23.000Z</updated>
        <summary type="html"><![CDATA[準備

Google Colaboratory（※Jupyter NotebookでもOK）
配布ソースコード（※一からやりたい方は不要）


 使用技術
Python
Qiskit

 やったこと
ふるさと納税上限シミュレーション × 楽天API連携 × 量子コンピューティング × 最適化問題
「ふるさと納税 訳あり」で
楽天APIからふるさと納税返礼品一覧を取得して
組合せ最適化問題のひとつナップサック問題を解く量子アルゴリズム
（QAOA:量子近似最適化アルゴリズム）で
シミュレーションで出した控除上限額までで
最も総重量が重くなるような返礼品の組み合わせを求めて
とにかくふる...]]></summary>
        <author>
            <name>DeepRecommend</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[nnabla]特定のレイヤーの勾配計算をさせない方法]]></title>
        <id>https://zenn.dev/nishikawajun/articles/dfefca48024cfd</id>
        <link href="https://zenn.dev/nishikawajun/articles/dfefca48024cfd"/>
        <updated>2022-09-22T01:31:04.000Z</updated>
        <summary type="html"><![CDATA[はじめに
nnablaにおいて、特定の計算からの勾配を伝搬させたくないという状況を実装した時の備忘録。
例えば、L=w(y)\times L_1(x)としたときに、xについてはすべての勾配を伝搬させたいが、yについて、Lの計算における勾配\frac{\partial L}{\partial w}は計算したくないという状況。

 環境
python==3.8.0
nnabla==1.30.0

 実装

 式
\displaystyle L = w(y) \times L_1(x)を次の形で実装してみる。

L_1 = x^2 \ ... \ (1) \\
w = 2y \ ... \...]]></summary>
        <author>
            <name>NishikawaJun</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google Colaboratoryでkmol]]></title>
        <id>https://zenn.dev/pluie/articles/20220921-kmol-getting-started</id>
        <link href="https://zenn.dev/pluie/articles/20220921-kmol-getting-started"/>
        <updated>2022-09-21T16:17:35.000Z</updated>
        <summary type="html"><![CDATA[本記事でわかること

Google Colaboratoryでkmolを実行する方法


 kmolとは
Drug discoveryおよびLife scienceのための機械学習ライブラリで、グラフベースの推論モデル、説明可能AI、差分プライバシーなどの特徴的な機能を有する。
https://github.com/elix-tech/kmol

 前提条件


conda環境を前提とする。公式ドキュメントではconda環境を前提としてインストール方法が記載されている、かつ_libcc_mutexがconda-forgeにしか見つからなかったのでcondaを用いる


 Google...]]></summary>
        <author>
            <name>pluie</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django-DRFでFileField(ImageField)のユニットテストどうするのか]]></title>
        <id>https://zenn.dev/yuya_morimoto/articles/a238e7861ce2ba</id>
        <link href="https://zenn.dev/yuya_morimoto/articles/a238e7861ce2ba"/>
        <updated>2022-09-20T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[始めに
Django、DjangoRestFrameworkを使用したAPI開発後、ファイルアップロード(POST, PUT)をどのように実装するのか、以外とハマったので備忘兼共有
※コードベースで行います
!
トークン認証想定です
djangoのself.clientではなくrest_framework.testのAPIClientの方だと動くことがあるので注意


 環境
django==3.2.x
djangorestframework==3.13.1

 ViewでParserを設定

file_upload_api_view.py

class FileUploadAPIV...]]></summary>
        <author>
            <name>yuya_morimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Intro2DL : NNにおける損失関数]]></title>
        <id>https://zenn.dev/yoshida0312/articles/3b757e81ee42ec</id>
        <link href="https://zenn.dev/yoshida0312/articles/3b757e81ee42ec"/>
        <updated>2022-09-20T12:40:26.000Z</updated>
        <summary type="html"><![CDATA[損失関数
ここでは、さまざまなタスクに使用される損失関数を見ていきます。
import os
import json
import math
import japanize_matplotlib
import numpy as np 
import time
import copy
import requests
from io import StringIO

import pandas as pd
import matplotlib.pyplot as plt
from matplotlib import cm
import seaborn as sns
sns.set()

f...]]></summary>
        <author>
            <name>よしだ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【機械学習・組み合わせ最適化】最適化問題について活用法を考慮して解説します]]></title>
        <id>https://zenn.dev/deeprecommend/articles/04d7f2c79f9afc</id>
        <link href="https://zenn.dev/deeprecommend/articles/04d7f2c79f9afc"/>
        <updated>2022-09-20T04:57:54.000Z</updated>
        <summary type="html"><![CDATA[最適化問題とは？
Wikipediaいわく、
!
最適化問題とは、特定の集合上で定義された実数値関数または整数値関数についてその値が最小（もしくは最大）となる状態を解析する問題である。こうした問題は総称して数理計画問題、数理計画とも呼ばれる。最適化問題は、自然科学、工学、社会科学などの多種多様な分野で発生する基本的な問題の一つであり、その歴史は18世紀の変分問題に遡る。1940年代に線型計画法が登場して以来、理論的な研究や数値解法の研究が非常に活発に行われ、その応用範囲はいろいろな分野に拡大されていった。実世界の現象の数理的な解析に関わる問題や抽象的な理論の多くをこの最適化問題という...]]></summary>
        <author>
            <name>DeepRecommend</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[wsl2でubuntu Cloud Imageを使う]]></title>
        <id>https://zenn.dev/backalley/articles/1b348e44f332f4</id>
        <link href="https://zenn.dev/backalley/articles/1b348e44f332f4"/>
        <updated>2022-09-20T04:40:45.000Z</updated>
        <summary type="html"><![CDATA[wslでubuntuを使用した際の備忘録
wsl2を利用できるようにしておく

 参考サイト
WSL2とVSCodeで欲しい環境を好きなだけ作る - いろいろ備忘録日記

 wsl2にubuntu Cloud Imageをいれる

 現在の一覧を表示
wsl -l -v

 Ubuntu Cloud Imageをダウンロードする
Ubuntu Cloud Images - the official Ubuntu images for public clouds, Openstack, KVM and LXD

 イメージをインポートする
wsl --import pyenv .\Docu...]]></summary>
        <author>
            <name>backalley</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Qdrant ベクトル検索エンジン - 前編]]></title>
        <id>https://zenn.dev/tfutada/articles/acf8adbb2ba5be</id>
        <link href="https://zenn.dev/tfutada/articles/acf8adbb2ba5be"/>
        <updated>2022-09-20T00:55:50.000Z</updated>
        <summary type="html"><![CDATA[この記事はオープンソースのベクトル検索エンジンQdrant(クワッドラント)の使い方と類似記事検索についての前編になります。

初心者向けにコンセプトの理解を優先し、難しい用語の使用はあえて避けています。

https://qdrant.tech/

 使用するもの


Qdrant オープンソースベクトル検索エンジン (Rust実装)

GiNZA spaCy ドキュメントのベクトル化

livedoorニュースコーパス ライブドアのニュース記事 (株式会社ロンウィット)
Python 3.10


 Qdrantとは？
オープンソースのRust製ベクトル検索エンジンです。クライアント...]]></summary>
        <author>
            <name>TF</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[異常検知技術を比較してみた（ルールベース, HLAC, PatchCore）]]></title>
        <id>https://zenn.dev/shinue/articles/40560352dcf70b</id>
        <link href="https://zenn.dev/shinue/articles/40560352dcf70b"/>
        <updated>2022-09-20T00:05:42.000Z</updated>
        <summary type="html"><![CDATA[はじめに
異常検知AIソフトウェア・クラウドサービスを提供しているアダコテックでエンジニアをしているshin-ueです！
今回は、弊社内で保有する電子部品を撮像した画像データに対して、異常検知を実施してみます。


 そもそも異常検知って？
異常検知における異常とは、みなさん何を思い浮かべますか？
例えば、毎日休まず周期的な信号を出力してくれるシステムが一家に一台あったとします。
機械とよくケンカする僕みたいな人間は「ほんとうに周期的な信号だしてるのか！？」と疑いをかけてモニタリングしてしまいます。

t=9~11の出力値がいつもと違う変化をしているぞ・・・不良品だコイツこのやろう！...]]></summary>
        <author>
            <name>shin-ue</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonでVSCodeをコーディングする際のおすすめの基本設定・拡張機能]]></title>
        <id>https://zenn.dev/motokoike/articles/2520a473887adc</id>
        <link href="https://zenn.dev/motokoike/articles/2520a473887adc"/>
        <updated>2022-09-19T16:08:52.000Z</updated>
        <summary type="html"><![CDATA[1.基本設定編
VSCode（Visual Studio Code）自体のおすすめの基本設定を紹介します。
!
デフォルトは、無効化されているため、機能を有効にする必要があります。


 1.1 Insert Final Newline
ファイル保存時にファイルの最終行は改行を必須にする。


 1.2 Trim Trailing Whitespace
ファイル保存時に行末の空白（半角スペース）を自動で削除する。


 2.拡張機能編
VSCode（Visual Studio Code）自体のおすすめの拡張機能を紹介します。

 2.1 Japanese Language Pack ...]]></summary>
        <author>
            <name>元小池</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PLATEAUのCityGMLに所在（建物の住所）を追加するスクリプトを作った。]]></title>
        <id>https://zenn.dev/soh92/articles/9863ae6a511f72</id>
        <link href="https://zenn.dev/soh92/articles/9863ae6a511f72"/>
        <updated>2022-09-19T08:45:36.000Z</updated>
        <summary type="html"><![CDATA[経緯度を逆ジオコーディング
GoogleMaps APIのreverse_geocodeを使って経緯度から所在を取得します。
  googleapikey = 'apikey'
  gmaps = googlemaps.Client(key=googleapikey)

  geocord = lat + ", " + lon

  results = gmaps.reverse_geocode((geocord), language='ja')
  add = [d.get('formatted_address') for d in results]
  list_add = a...]]></summary>
        <author>
            <name>ソウ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Poetryをwindows10にinstallしてみた]]></title>
        <id>https://zenn.dev/pejpo/articles/5080662546764c</id>
        <link href="https://zenn.dev/pejpo/articles/5080662546764c"/>
        <updated>2022-09-19T08:44:25.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Pythonで書いたプログラムをパッケージにする際、pyproject.tomlを使う方法が、今後取り入れられていくということを知りました。また、パッケージマネージャとしてPoetryを使い、pyproject.tomlを作成できるということも判りました。
そこでまず、Poetryをインストールしようとしたのですが、window10へのインストールで、引っかかったところがあったので、メモとして、やったことを残します。記事中、環境変数の設定に言及していますが、他への影響もあると思うので、ご自身の判断でお願いします。

 概要
英語ではありますが、公式サイトを見ながらインストー...]]></summary>
        <author>
            <name>Dr_O</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[transformersのtutorialを読んでみた - part3]]></title>
        <id>https://zenn.dev/python3654/articles/9693f6a56beeea</id>
        <link href="https://zenn.dev/python3654/articles/9693f6a56beeea"/>
        <updated>2022-09-19T06:39:19.000Z</updated>
        <summary type="html"><![CDATA[はじめに
https://huggingface.co/docs/transformers/training

 ファインチューニング
事前学習済みのモデルを使用することには大きな利点があります。 計算コストを削減し、最先端のモデルをゼロから学習することなく使用できます。Transformersを使うと、幅広いタスク向けの何千もの事前学習済みモデルにアクセスできます。事前学習済みのモデルを使用する場合、タスクに固有のデータセットでモデルを学習します。これはファインチューニングとして知られており非常に有用な手法です。

 データセットの準備
事前学習済みのモデルをファインチューニングす...]]></summary>
        <author>
            <name>とりごん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[都市伝説pythonのfor文とmap()の処理速度は全然違う説]]></title>
        <id>https://zenn.dev/jim_soros/articles/4d10ce4b617198</id>
        <link href="https://zenn.dev/jim_soros/articles/4d10ce4b617198"/>
        <updated>2022-09-19T05:54:38.000Z</updated>
        <summary type="html"><![CDATA[●結論
map()よりもfor文が全てにおいて僅かに早い。(python3.10)

・検証A、1万字の文字列をジェネレーターにした後、繋げて文字列を作る(abc...➡abc...)
・検証B、1万字の文字列をジェネレーターにした後、@文字を挟んで繋げて文字列を作る(abc...➡a@b@c@...)
それぞれに対して
・検証1、for文 {VS} map()
・検証2、for文のネスト(検証A/Bを10回繰り返す) {VS} map()のネスト(検証A/Bを10回繰り返す)
・検証3、for文の2重ネスト(検証A/Bを10回10回繰り返す) {VS} map()の2重ネスト(検証A/...]]></summary>
        <author>
            <name>jim_soros</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】これは驚いた！Gradioを使えば機械学習アプリを超爆速で実装できる！！]]></title>
        <id>https://zenn.dev/robes/articles/fcbda5d2dc1362</id>
        <link href="https://zenn.dev/robes/articles/fcbda5d2dc1362"/>
        <updated>2022-09-19T05:52:33.000Z</updated>
        <summary type="html"><![CDATA[はじめに
機械学習アプリを超爆速で作ることができるライブラリーのご紹介です。
Gradioというライブラリーになります。
 
https://gradio.app/
 
百聞は一見にしかずで、早速、実装してみましょう。
 

 <実装するアプリの内容>
名前（●●）を入力したら、Hello ●●！と返してくれるアプリの実装です。
 
!
GoogleColaboratoryで実装できます。

 

 gradioのインストール
!pip install gradio

 実装
たった、これだけです。
画像系などにも対応しています。詳細は冒頭のリンクをご覧ください。
imp...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【自然言語処理】【Python】トピックモデル（LDA）を実装し、PyLDAvisを使ってインタラクティブに可視化する]]></title>
        <id>https://zenn.dev/robes/articles/424cb97503d16e</id>
        <link href="https://zenn.dev/robes/articles/424cb97503d16e"/>
        <updated>2022-09-19T05:21:10.000Z</updated>
        <summary type="html"><![CDATA[はじめに
SNSでのツイートや、ECサイトでの購買ビューから、消費者の行動や嗜好を分析するの使われる手法として、トピックモデルがあります。
ここでは、トピックモデルのうち最も有名なLDA(潜在的ディリクレ配分法） について、簡単な概要とともにPythonを使ってどのように実装していくのかを紹介していきます。
また実装結果について、PyLDAvisやワードクラウドを使って可視化していきたいと思います。
 

 トピックモデル（LDA)とは
トピックモデルとは、文書が複数の潜在的なトピックから確率的に生成されると仮定したモデルです。トピックモデルでは、トピックごとに単語の出現頻度分布を想...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【個人開発】文学作品の冒頭を読んで作者を当てる Web サービスを開発しました]]></title>
        <id>https://zenn.dev/kangetsu_121/articles/d99e8306c0d895</id>
        <link href="https://zenn.dev/kangetsu_121/articles/d99e8306c0d895"/>
        <updated>2022-09-19T05:18:10.000Z</updated>
        <summary type="html"><![CDATA[文学作品の冒頭を読んで作者を当てる Web サービス、「文豪推理」を友人の @kokokocococo555 さんと開発しました。

文豪推理問題

Twitterシェア時の OGP 表示
ユーザー登録などはなくすぐ遊べるので、https://bungo-suiri.tailoor.dev からぜひ遊んでみてください！
2人とも本職 PG ではなく、試行錯誤しながら開発しました。
初めてのまともな個人開発で学びが多くあったので、サービス紹介と経験の還元を目的として本記事にまとめます。
!
開発本職の方から見ると改善点など多々あるかと思いますが、記事のコメント、コンタクトフォームなどからご...]]></summary>
        <author>
            <name>kangetsu_121</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Raspberry Piと人感センサーでLINE通知]]></title>
        <id>https://zenn.dev/technicarium/articles/d836fc075748af</id>
        <link href="https://zenn.dev/technicarium/articles/d836fc075748af"/>
        <updated>2022-09-19T04:56:13.000Z</updated>
        <summary type="html"><![CDATA[Lチカの動作確認もできたので次の目標であった人感センサー（焦電型赤外線センサー）で検知したらLine通知をさせてみました。
!
【注意】

GPIOとセンサーの間に保護抵抗を入れていません、本来は入れずべきかも。
検証プログラムのため単純な無限ループにしています。
プログラムは例外処理をしていません。
終了は強制終了させてしまうのでGPIOのcleanup()を呼び出していません。
requestパッケージとRPi.GPIOパッケージはインストール済



 Raspberry Piと焦電型赤外線センサーの接続

 ジャンパーワイヤー作成と接続

使用した焦電型赤外線センサーとの接続は3...]]></summary>
        <author>
            <name>テク二カリウム</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[機械学習の損失関数を見てみる]]></title>
        <id>https://zenn.dev/mimitako/articles/loss_function</id>
        <link href="https://zenn.dev/mimitako/articles/loss_function"/>
        <updated>2022-09-19T04:28:19.000Z</updated>
        <summary type="html"><![CDATA[機械学習と損失関数
機械学習における損失関数は精度と対を成す存在です。精度を上げるなら損失関数を小さくすることが求められます。
でも、経験が少ない私のような初心者はほんとかな？とひねくれて考えるものです。
じゃぁ、見てみようじゃないかということで下記の記事で出てきた結果を元に、傾向がちゃんとあるのかどうかを確認してみます。
https://zenn.dev/mimitako/articles/c4085419e963b5
https://zenn.dev/mimitako/articles/random_statement

 損失関数の結果を確認する。
random_stateを0...]]></summary>
        <author>
            <name>mimitako</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS ALBのアクセスログをPandasで集計する]]></title>
        <id>https://zenn.dev/nmemoto/articles/analyze-alb-access-log-with-pandas</id>
        <link href="https://zenn.dev/nmemoto/articles/analyze-alb-access-log-with-pandas"/>
        <updated>2022-09-19T00:16:46.000Z</updated>
        <summary type="html"><![CDATA[AWS ALBのアクセスログをPandasを使い、ALBが返したレスポンスのステータスコード別分間件数、ALBの背後にあるターゲットグループがALBに返したステータスコード別分間件数、ターゲットグループの処理時間の分間パーセンタイル値を集計するためのPythonスクリプトを作成しました。

 Pythonスクリプトの説明
この集計を行うために作成したスクリプトを分割して説明します。

 ログをデータフレームに変換
以下のスクリプトでログをデータフレームとしました。なお、集計したい複数のアクセスログは予めスクリプト内のdir_pathに格納している前提としています。
ALBのアクセスログの...]]></summary>
        <author>
            <name>nmemoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[random_statementを考えてみる]]></title>
        <id>https://zenn.dev/mimitako/articles/random_statement</id>
        <link href="https://zenn.dev/mimitako/articles/random_statement"/>
        <updated>2022-09-18T23:51:13.000Z</updated>
        <summary type="html"><![CDATA[random_statement とは
機械学習であるデータから訓練データとテストデータへ分割する際に sikit-learn の train_test_split を利用することが多いと思います。
ここでパラメータとして random_state というものが出てくるのですが、みんなどうやって決めているの？と疑問に思うことが多々あります。
random_state は乱数の発生機ですが、seed 値を与えると、毎回同じ乱数を発生させるため再現性が得られます。
ランダムですがカオスではないので、ある法則に従っていると思って良さそうです。
ここで考えられるのが、random_state...]]></summary>
        <author>
            <name>mimitako</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tensorflowを使ってみた]]></title>
        <id>https://zenn.dev/mimitako/articles/c4085419e963b5</id>
        <link href="https://zenn.dev/mimitako/articles/c4085419e963b5"/>
        <updated>2022-09-18T14:14:15.000Z</updated>
        <summary type="html"><![CDATA[Tensorflow を使ってみる
気になってはいたけど、使ったことがないんです。ということで、初めて Tensorflow を使ってみましたので記録も兼ねてここに記載します。

 使用したライブラリ
今回使用したライブラリは以下のとおりです。
pandas 1.2.3
numpy 1.20.2
tensorflow 2.10.0
scikit-learn 1.0.2
seaborn 0.11.2

 タスクを定義
今回は分類タスクである Iris ことあやめの分類を行います。この分類タスクは調べればすぐに出てきますので詳細は割愛します。まずは、基本的な流れを学ぶために、とりあえず走...]]></summary>
        <author>
            <name>mimitako</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Step FunctionsのMap Stateによる動的並列処理の簡単な実装]]></title>
        <id>https://zenn.dev/koya6565/articles/9f05924666fbd2</id>
        <link href="https://zenn.dev/koya6565/articles/9f05924666fbd2"/>
        <updated>2022-09-18T14:00:28.000Z</updated>
        <summary type="html"><![CDATA[（単なる偶然ですが）ちょうど3年前の9/18、dynamic parallelism in workflowsがStep Functionsでサポートされました。それ以前は、index参照したりChoiceやWaitでループ処理したり並列実行するためにもう一つワークフローを起動したり、Step Functions(以下、SFn)による動的な並列処理実装はまあまあ手間がかかりました。
https://aws.amazon.com/about-aws/whats-new/2019/09/aws-step-functions-adds-support-for-dynamic-paralleli...]]></summary>
        <author>
            <name>T.S</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[StableDiffusionのいろんなWebUIたちをColabで使えるようにしてみた]]></title>
        <id>https://zenn.dev/ddpn08/articles/stablediffusion-webui-colab</id>
        <link href="https://zenn.dev/ddpn08/articles/stablediffusion-webui-colab"/>
        <updated>2022-09-18T10:22:35.000Z</updated>
        <summary type="html"><![CDATA[こんにちは、だだっこぱんだです。
自分は普段、Colab上でwebuiを立ち上げてStableDiffusionで遊んでいます。
しかし、モデルが変えにくかったり引数をいちいち記入するのが面倒だったりしたので、使いやすいようにノートブックを作りました。この記事では、その使い方をざっくり紹介します。

 作ったもの
StableDiffusionのいろんなwebuiを好きなモデルで簡単に実行できるColab用のノートブックをつくりました。

 リポジトリ
👇こちらで公開しています
https://github.com/ddPn08/stable-diffusion-webui-colab
...]]></summary>
        <author>
            <name>だだっこぱんだ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[FastAPIでFeatureFlagを使ってみる]]></title>
        <id>https://zenn.dev/nishikoh/articles/f656f07bedf7eb</id>
        <link href="https://zenn.dev/nishikoh/articles/f656f07bedf7eb"/>
        <updated>2022-09-18T07:03:53.000Z</updated>
        <summary type="html"><![CDATA[はじめに
トランクベースの開発でCD(デリバリー/デプロイ)を良い感じにする方法がないか調べていたところFeatureFlagを試したくなりました。私が普段使っているWebAPIフレームワークのFastAPIでFeatureFlagを使ってみます。

 fastapi-featureflags
FastAPI用に開発されたfastapi-featureflagsを使っていきます。これを使うことでFastAPIのエンドポイントからFeatureFlagの切り替えが出来ます。FeatureFlagの数がN個ある場合、何の工夫もしなければ2のN乗個の環境を用意して検証しますが、管理用のエン...]]></summary>
        <author>
            <name>nishikoh</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[利用サービスの残ライセンスをAPIで確認する]]></title>
        <id>https://zenn.dev/cazziwork/articles/885e9f88ccf3fd</id>
        <link href="https://zenn.dev/cazziwork/articles/885e9f88ccf3fd"/>
        <updated>2022-09-17T20:42:15.000Z</updated>
        <summary type="html"><![CDATA[この記事はある日急に「やばい、ライセンスが足りない！」「今から発注しても間に合わない！」なんてことにならないよう、APIで様々なSaaSのライセンスをチェックする方法についてまとめたものです。
なお、コードサンプルはすべてPythonで、対象サービスは事前にライセンスを追加しないと利用できないサービスが中心となっています。

 GitHub Enterprise
GitHubはREST APIでは取得ができないため、GraphQL APIで取得する必要があります。GraphQL APIについては こちら を、ライセンス数取得用のAPIについては こちらをを参照。

 リクエストサンプル
...]]></summary>
        <author>
            <name>Takeshi Haraguchi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SageMaker Notebook 上で PyTorch の学習を回す]]></title>
        <id>https://zenn.dev/kasega0/articles/dd51b63071ebea</id>
        <link href="https://zenn.dev/kasega0/articles/dd51b63071ebea"/>
        <updated>2022-09-17T16:55:09.000Z</updated>
        <summary type="html"><![CDATA[いままでEC2でゴリゴリ学習させていたものをSageMaker Notebookに移植することになり、それなりに苦労したので自分用のテンプレート作成も兼ねてハマりどころをまとめます。

 今回作成した雛型
https://github.com/kasegao/sagemaker-sample

 概要
基本的にはこれまで学習用に作成していたプログラムの80-90%ぐらいはそのまま流用できます。綺麗に実装していれば既存プログラムにはほぼ手を入れずに移植できると思います。残りはSageMakerから既存スクリプトを呼び出すための玄関部分と、データ入出力用のS3とのやり取りスクリプトさえ用意し...]]></summary>
        <author>
            <name>かせがお</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Intro2DL : NNのOptimizerとその特徴]]></title>
        <id>https://zenn.dev/yoshida0312/articles/a5dc08bb594ac1</id>
        <link href="https://zenn.dev/yoshida0312/articles/a5dc08bb594ac1"/>
        <updated>2022-09-17T12:41:03.000Z</updated>
        <summary type="html"><![CDATA[最適化
今回はNNを最適化する手法を確認します。
NNが深くなるほど、ネットワークを通して安定的な勾配を伝播させることが重要になります。そうしないと、勾配が消滅したり爆発したりする可能性があるためです。そのため、今回は前回の重みの初期化に引き続き、最適化に関して見ていきます。
import os
import json
import math
import japanize_matplotlib
import numpy as np 
import time
import copy

import matplotlib.pyplot as plt
from matplotlib im...]]></summary>
        <author>
            <name>よしだ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mattermost用Bot作成(slackbot利用)]]></title>
        <id>https://zenn.dev/kiyasu7028/articles/af72096f4555cd</id>
        <link href="https://zenn.dev/kiyasu7028/articles/af72096f4555cd"/>
        <updated>2022-09-17T12:12:17.000Z</updated>
        <summary type="html"><![CDATA[Mattermostでもslackbotを使うと通知用Botを簡単に作れます。
というわけでいきなり実践編です。

 内向きのWebhookを作成する
Web画面から作るのはいろんなところで紹介されているので、今回はあえてコマンドで作ってみようと思います。
参考ページ：mmctl webhook create-incoming
必須オプションはchannel(defaultの投稿先) と user(defaultの名前) のようです。
bitnami@debian:~/python3$ mmctl webhook create-incoming
Error: required flag(...]]></summary>
        <author>
            <name>kiyasu7028</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Blender] Pythonスクリプトでカメラデバイスの固定台となる3Dモデルを作る]]></title>
        <id>https://zenn.dev/zgw426/articles/d3cde75282511c</id>
        <link href="https://zenn.dev/zgw426/articles/d3cde75282511c"/>
        <updated>2022-09-17T10:51:50.000Z</updated>
        <summary type="html"><![CDATA[カメラデバイス固定台の3Dモデルを作ります
3DCGソフトのBlenderで、Pythonスクリプトを使い3Dオブジェクトを作成します。
作成したオブジェクトは主に3Dプリンターで造形することを目的にしています。
以下の動画はBlenderで3Dオブジェクトを作成し3Dプリンターで造形するまでのながれです。
https://youtu.be/-drzycYZWME
3Dオブジェクトの作成/移動/加工/削除の全ての制作工程をPythonスクリプトにしているので、スクリプトの再実行で同じものを作れます。スクリプトをテキストデータで保存すればgitで管理できるのも利点です。

 スクリプト...]]></summary>
        <author>
            <name>suo-takefumi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【自然言語処理】【Python】TF-IDFを理解しよう]]></title>
        <id>https://zenn.dev/robes/articles/241f6c3fac1486</id>
        <link href="https://zenn.dev/robes/articles/241f6c3fac1486"/>
        <updated>2022-09-17T10:22:44.000Z</updated>
        <summary type="html"><![CDATA[はじめに
古くから、自然言語処理の世界では、単語をスコアリングする手法として、TF-IDFというのがあります。
古くからあるにもかかわらず、普通に暮らしていると馴染みのない概念だと思います。かく言う私も、Pythonで自然言語処理を学ぶまでは名前すら聞いたことがありませんでした。
ここでは、そんなTF-IDFについて、はじめて触れる方にも分かるように概念を丁寧に説明するとともに、Pythonを使った実装方法についてご紹介していきたいと思います。
 

 🐱TF-IDFとは
一言でいうと、ある文書の含まれる単語の重要度を示す指標です。文書の中で重要な単語をとらえることで、その文書の特徴...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSVをインメモリで生成しS3にアップロードするメモ]]></title>
        <id>https://zenn.dev/chari/articles/20220917_im-mem_csv_generation_and_upload</id>
        <link href="https://zenn.dev/chari/articles/20220917_im-mem_csv_generation_and_upload"/>
        <updated>2022-09-17T07:24:55.000Z</updated>
        <summary type="html"><![CDATA[CSVをインメモリで生成しS3にアップロードするメモ
import io 
import csv
import boto3

s3 = boto3.client('s3')
bucket = 'sample-bucket'
key = 'sample.csv'

buff = io.StringIO()
writer = csv.DictWriter(f, fieldnames=['A', 'B', 'C'])

# CSVに関連する処理
writer.writeheader()
writer.writerow({"A": "a", "B": "b", "C": "c"})

# S...]]></summary>
        <author>
            <name>wtkmn</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[djangoのdbにアクセスするような変数をpytest.mark.parametrizeでパラメータ化することはできない]]></title>
        <id>https://zenn.dev/yutake27/articles/d55926de49d0c8</id>
        <link href="https://zenn.dev/yutake27/articles/d55926de49d0c8"/>
        <updated>2022-09-17T06:01:30.000Z</updated>
        <summary type="html"><![CDATA[これはng
@pytest.mark.django_db
class TestUserViewSet:
    @pytest.mark.parametrize(
        "user",
        [
            UserAFactory(),
            UserBFactory(),
            UserCFactory(),
            UserDFactory(),
        ],
    )
    def test_user_can_do(self, user):
        user.do()
代わりに...]]></summary>
        <author>
            <name>yutake27</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Matplotlibで描画したグラフをOpenCVでARマーカーにマッピング]]></title>
        <id>https://zenn.dev/zgw426/articles/adf1cc41e953bd</id>
        <link href="https://zenn.dev/zgw426/articles/adf1cc41e953bd"/>
        <updated>2022-09-17T02:40:37.000Z</updated>
        <summary type="html"><![CDATA[MatplotlibのグラフでAR
Matplotlibで描画したグラフをOpenCVでARマーカーにマッピングすることができました。

 デモ
02_matplot2d_no-transparency.pyのデモ
Matplotlibの2DグラフをARマーカーにマッピングしています。
https://youtu.be/t4DyeLGA0gk

03_matplot3d_no-transparency.pyのデモ
Matplotlibの3DグラフをARマーカーにマッピングしています。マーカーの傾きに合わせて3Dグラフの視点を変更しています。
https://youtu.be/vzQA...]]></summary>
        <author>
            <name>suo-takefumi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで排他ロック可能な共有メモリライブラリを作った]]></title>
        <id>https://zenn.dev/quag_cactus/articles/6d09787323d1b1</id>
        <link href="https://zenn.dev/quag_cactus/articles/6d09787323d1b1"/>
        <updated>2022-09-17T02:26:26.000Z</updated>
        <summary type="html"><![CDATA[概要
複数の独立したPythonプロセス間の通信ができる高水準のモジュール IPMMAP を作成しました。
https://github.com/quag-cactus/ipmmap

IPMMAPでは、mmap（標準モジュール）を用いて共有メモリ領域を使ったプロセス間通信を提供します。
クラスベースのデータ構造を採用することで、可読性を高めています。
fastainerを使用してプロセス間排他ロックを実装することで、安全な共有メモリへのアクセスを実現しています。


 背景と要件
とあるプロジェクトで、複数のpythonプロセスを連携して動作させる必要が出てきました。連携いに際して...]]></summary>
        <author>
            <name>QuagCactus</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AI に絵を描かせる方法を誰よりも丁寧に説明するYoutube動画を投稿した【Stable  Diffusion】]]></title>
        <id>https://zenn.dev/yoshiishunichi/articles/2542500bb8f81d</id>
        <link href="https://zenn.dev/yoshiishunichi/articles/2542500bb8f81d"/>
        <updated>2022-09-16T14:59:30.000Z</updated>
        <summary type="html"><![CDATA[動画
こちらの動画の解説に使っている記事です。ぜひ見てください。
https://youtu.be/AlVLv4L-zeQ
動画媒体の方がコードとか触ったことない人もとっつきやすいと思ったので Youtube に投稿してみました。
頑張って喋ったので Zenn の読者さんも良かったら見てみてください。

 内容
最近流行りの Stable Diffusion で、誰でも簡単に AI に絵を描かせてみましょう。
プログラミングがわからない人でもできるように、頑張って説明してみます。

 Stable Diffusion って何？

Stable Diffusionは、オープンソースとし...]]></summary>
        <author>
            <name>yoshiishunichi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[PyTorch] Torchでもガウス過程回帰したい、専用ライブラリなしで、ついでにハイパーパラメータを最適化する]]></title>
        <id>https://zenn.dev/mory22k/articles/afff58b77e164a</id>
        <link href="https://zenn.dev/mory22k/articles/afff58b77e164a"/>
        <updated>2022-09-16T14:25:08.000Z</updated>
        <summary type="html"><![CDATA[前回: https://zenn.dev/mory22k/articles/e3222d02724251
簡単なガウス過程回帰モデルを PyTorch で実装します。
from matplotlib import pyplot as plt
import torch
import seaborn as sns

 ガウス過程回帰モデル
「回帰モデル」は、ある入出力データをもとに、欠落しているデータの補完 や、データがない領域の出力値の予測 などを行うモデル全般を指すものです。その中でもガウス過程回帰モデルは出力値を点推定ではなくベイズ推定の枠組みで柔軟に予測するモデルです。

 ガウス過...]]></summary>
        <author>
            <name>mory22k</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[JQuants APIを用いて日本最大の株式分析コンペで準優勝した決算評価モデルを動かす方法]]></title>
        <id>https://zenn.dev/gamella/articles/bdd980d4929a90</id>
        <link href="https://zenn.dev/gamella/articles/bdd980d4929a90"/>
        <updated>2022-09-16T04:46:33.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こちらは先日行われたマケデコ(discord: https://discord.com/invite/xg6P5RXwaa)のキックオフイベントで行ったセッションの内容を補足するブログです。こちらマケデコ内でセッションに参加できないが、資料を公開してほしいというリクエストを受け、北山の発表部分について記載しました(UKIさんのAsk me anythingセッションは残念ながら公開予定はないです)。
https://mkdeco.connpass.com/event/259046/
本セッションでは、 J-Quants API ベータ版を使用して、J-Quantsファンダメ...]]></summary>
        <author>
            <name>tomo@Alpaca</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenCVで画像内の「最頻色」を取得する]]></title>
        <id>https://zenn.dev/kazaki/articles/4bc99a27e33d24</id>
        <link href="https://zenn.dev/kazaki/articles/4bc99a27e33d24"/>
        <updated>2022-09-16T04:20:34.000Z</updated>
        <summary type="html"><![CDATA[画像内の「最も多くの面積を占める色」を取得したく、考案したのがRGB全ての最頻値を取るというやり方でした。
BGRを3byte分の文字列に結合してstatistics.mode()で最頻値を取得してRGBそれぞれに分解し直してます。
一見同じ色に見えても、webカメラからの画像ソースだったりするとRGB値全てがキレイに揃わないことも多いですが、
inRange()で範囲を指定するときその基準となる色には使えそうです。
そのへんの事情を考慮すると本当はこういうのはクラスタリングで取得するのが最適なんですかね？🤔
もっとうまい実装法を知りたいです。
import cv2
import num...]]></summary>
        <author>
            <name>菊谷　知真</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Intro2DL：NNにおける重みの初期化方法]]></title>
        <id>https://zenn.dev/yoshida0312/articles/c2d3f2af82eae8</id>
        <link href="https://zenn.dev/yoshida0312/articles/c2d3f2af82eae8"/>
        <updated>2022-09-15T14:29:32.000Z</updated>
        <summary type="html"><![CDATA[初期化
今回はNNを初期化する手法を確認します。
NNが深くなるほど、ネットワークを通して安定的な勾配を伝播させることが重要になります。そうしないと、勾配が消滅したり爆発したりする可能性があるためです。そのため、今回は重みの初期化に関して見ていきます。
import os
import json
import math
import japanize_matplotlib
import numpy as np 
import time

import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

from tqdm...]]></summary>
        <author>
            <name>よしだ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Gooble Colab】Stable DiffusionをFine Tuningして、あくたんを生成してみた!]]></title>
        <id>https://zenn.dev/kwashizzz/articles/ml-stable-diffusion-colab-fn</id>
        <link href="https://zenn.dev/kwashizzz/articles/ml-stable-diffusion-colab-fn"/>
        <updated>2022-09-15T14:00:55.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは、わっしーです。最近、画像生成のアプリやデモが流行って、めっちゃ試したくなりますよね。私も、実際に動かし、あくたんこと湊あくあさんの画像を用いてFineTuningしてみました。あくたんの、チャンネル登録よろしくお願いします。
以下、生成した画像ですが、どうでしょうか！めっちゃすごくて感動です。特にお気に入りは、真ん中左の、ちょっと生意気なあくたんの画像です。

画質がいいやつも置いときますね。

実際には、ランダムシードを変更しつつ、何百枚も生成して、よかったものを選択しています。
本記事では、自前で収集した画像群を用いてFineTuningする方法を紹介します...]]></summary>
        <author>
            <name>わっしー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[BlenderでUnity用にアニメーションのみExportするスクリプト]]></title>
        <id>https://zenn.dev/gansoishiyaki/articles/353d1e0daec2a9</id>
        <link href="https://zenn.dev/gansoishiyaki/articles/353d1e0daec2a9"/>
        <updated>2022-09-15T13:41:52.000Z</updated>
        <summary type="html"><![CDATA[ターミナルからBlenderを実行することによって、ログも出力させる
cd 保存したいディレクトリ
/Applications/Blender.app/Contents/MacOS/Blender
# bpyインポート
import bpy

FILE_NAME = "animation.fbx"

# FBXモデルをエクスポートする（メッシュオブジェクト指定）
def export_animation():
    """
    Export FBX file only animation for Unity.
    """

    # FBXインポート
    # bpy.op...]]></summary>
        <author>
            <name>ふぇ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pytest で requests の Retry・Timeout設定 のテストしたい]]></title>
        <id>https://zenn.dev/t_zomu/articles/770eea7f4848ca</id>
        <link href="https://zenn.dev/t_zomu/articles/770eea7f4848ca"/>
        <updated>2022-09-15T12:21:31.000Z</updated>
        <summary type="html"><![CDATA[はじめに
HTTPクライアントとしてよく利用される requests ではリトライ・タイムアウトの設定が当然あります。通常のロジック開発においては、あまりそういうケースはないのでしょうが、たまにリトライやタイムアウトの設定をUnitTestでテストしたいと思うことがありました。
requests 自体を requests_mock などでMock化することはよくあるかもしれませんが、それではテストが行えません。こんなことはHTTPClientを実装するとき以外発生しないのかもしれませんが、メモとして残します。

 pytest-httpserver
https://pytest-ht...]]></summary>
        <author>
            <name>takashno</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[S3への通信を許可するネットワークACLを動的に更新する]]></title>
        <id>https://zenn.dev/jkoba/articles/c6b76098a7bd75</id>
        <link href="https://zenn.dev/jkoba/articles/c6b76098a7bd75"/>
        <updated>2022-09-15T09:08:34.000Z</updated>
        <summary type="html"><![CDATA[どうしてもミニマムな通信に絞りたい時の技

 背景
社内の古き良き審査ルールではネットワークACLに 0.0.0.0/0 のAllowがあると無条件に怒られる。
セキュリティグループやその他諸々の手段で制御していても……
クローズドなVPCのCodeBuildからS3にログを出力させる必要があるが、CodeBuildではS3のインターフェースVPCエンドポイントを指定する方法がない。
ゲートウェイVPCエンドポイント経由でS3に接続させたいが、S3のIPアドレスのCIDRが時々変わる……

 実現すること

社内ルールでギルティ扱いされるネットワークACLの 0.0.0.0/0 のA...]]></summary>
        <author>
            <name>jkoba</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[transformersのtutorialを読んでみた - part2]]></title>
        <id>https://zenn.dev/python3654/articles/2e87e9bdb92a9a</id>
        <link href="https://zenn.dev/python3654/articles/2e87e9bdb92a9a"/>
        <updated>2022-09-15T01:51:34.000Z</updated>
        <summary type="html"><![CDATA[はじめに
最近transformersというライブラリを勉強していて、今はtutorialsを読んでいます！せっかくなので、tutorialsの内容を訳して記事にしようと思っています！今回は第二弾ということで、以下の記事を参考に書きました～ ぜひ最後まで読んでください！(google colabで実装しながら読んで頂けると良いと思います！)
なお、以下の記事では言語、音声、画像の処理について説明していますが、本記事では言語の処理の説明のみとなります。(今後、音声、画像についても記事を書きたいと思っています。)
https://huggingface.co/docs/transform...]]></summary>
        <author>
            <name>とりごん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google ColabでGCSを利用する]]></title>
        <id>https://zenn.dev/dicechick373/articles/cc22c584721678</id>
        <link href="https://zenn.dev/dicechick373/articles/cc22c584721678"/>
        <updated>2022-09-15T00:48:19.000Z</updated>
        <summary type="html"><![CDATA[目標
Google ColabでGCSを利用する

 やり方

 GCP認証
下記コードを実行して、GCPに接続
from google.colab import auth
auth.authenticate_user()

 gcsfuseをインストール
認証に成功したらgcsfuseをインストール
!echo "deb http://packages.cloud.google.com/apt gcsfuse-`lsb_release -c -s` main" | sudo tee /etc/apt/sources.list.d/gcsfuse.list
!curl https:/...]]></summary>
        <author>
            <name>dicechick373</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[LighGBMでcustom objectを使う]]></title>
        <id>https://zenn.dev/ymd/articles/b446e4b04814d3</id>
        <link href="https://zenn.dev/ymd/articles/b446e4b04814d3"/>
        <updated>2022-09-14T23:03:56.000Z</updated>
        <summary type="html"><![CDATA[2022/9/15
目的：論文で提案されている様々なlossの改善の恩恵をlighGBMでも受けれるようにする

 手順

objective function (loss)を自作する
trainのfobjに自作objective functionを渡す


 objective functionを作る
predsとlabels (lgb.Datasetの中に情報がある)を入力にして、gradとhessianを返せばいい。

これはlightbmの最適化がニュートン法 (2次の勾配まで使う)を使っているため

回帰問題のgrad(1次微分)とhessian(2次微分)は

よって自作関数...]]></summary>
        <author>
            <name>ymd</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Gooble Colab】Stable Diffusionを動かしてみた]]></title>
        <id>https://zenn.dev/kwashizzz/articles/ml-stable-diffusion-colab</id>
        <link href="https://zenn.dev/kwashizzz/articles/ml-stable-diffusion-colab"/>
        <updated>2022-09-14T17:05:45.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは、わっしーです。最近、画像生成のアプリやデモが流行っており、生成モデルに入力するプロンプトテキストが呪文と言われるようにまでなっています。私もStable Diffusionを試し、以下のようなピンク色のアニメキャラクターを生成できました。

本記事では、Google Colab上でStable Diffusionを動かす方法を紹介します。
※Google ColabのPro+(GPU:A100)を使用し、動作確認をしています。

 環境設定
まずは、実行に必要なライブラリやStable Diffusionの重みをダウンロードします。
# stable diffu...]]></summary>
        <author>
            <name>わっしー</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Raspberry PiでLチカ（完成）]]></title>
        <id>https://zenn.dev/technicarium/articles/a8b5eb4b8c5b0e</id>
        <link href="https://zenn.dev/technicarium/articles/a8b5eb4b8c5b0e"/>
        <updated>2022-09-14T14:25:14.000Z</updated>
        <summary type="html"><![CDATA[Raspberry Pi OSのSDカードへの書き込みに始まり、PyenvによるPythonバージョン管理、Pipenvによる仮想環境、開発環境としてVSCodeのインストール、ブレッドボード上でのLEDと抵抗の配置、GPIOとブレッドボードの接続用コード（オス・メス ジャンパーワイヤー）と一式揃ったのでやっとLチカにチャレンジしました。

 前提条件

 OS
>cat /etc/os-release 
PRETTY_NAME="Debian GNU/Linux 11 (bullseye)"
NAME="Debian GNU/Linux"
VERSION_ID="11"
VERS...]]></summary>
        <author>
            <name>テク二カリウム</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Diffusers】MacでStableDiffusionのImg2Imgのpython環境を整える]]></title>
        <id>https://zenn.dev/michy/articles/064863f3703de6</id>
        <link href="https://zenn.dev/michy/articles/064863f3703de6"/>
        <updated>2022-09-14T13:00:14.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事ではDiffusersを使ったMacのStableDiffusionでimg2imgを実行するまでの手順を紹介します。

 対象読者
・M1/M2シリーズのMacユーザ
・stable-diffusionとその発展型のモデルを気軽に試せる環境がほしい人
・stable-diffusion環境メンテと最新化に稼働を割く暇がない人

 Diffusersとは？
推論・学習に必要なツールが機械学習周りの機能一式が揃ったツールボックスです。
モデルの切り替えや追加学習などのツールが1コマンドですべて入るので、AIイラストの環境がライトに構築可能です。

 Diffusers...]]></summary>
        <author>
            <name>zaiwa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[estat-APIのレスポンスをGoogleBigQueryに格納する]]></title>
        <id>https://zenn.dev/dicechick373/articles/58354a5f1f542f</id>
        <link href="https://zenn.dev/dicechick373/articles/58354a5f1f542f"/>
        <updated>2022-09-14T07:16:20.000Z</updated>
        <summary type="html"><![CDATA[目標

estat-APIから統計表のメタ情報を取得する
estat-APIから統計表データを取得する
estat-APIのレスポンスJSONを加工してpandas DataFrameに変換する
DataFrameをGoogleBigQueryに保存する


 前提条件

estat-APIの利用者登録済
ESTAT_APPIDは環境変数で管理

利用するライブラリは次のとおり
import urllib.parse
import urllib.request
import json
import pandas as pd

 統計表情報の取得
社会・人口統計体系の「Ａ人口・世帯」の...]]></summary>
        <author>
            <name>dicechick373</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python: int/str 型変換における破壊的変更のお知らせ]]></title>
        <id>https://zenn.dev/ykesamaru/articles/2175b317a5410e</id>
        <link href="https://zenn.dev/ykesamaru/articles/2175b317a5410e"/>
        <updated>2022-09-14T06:02:45.000Z</updated>
        <summary type="html"><![CDATA[!
一部加筆修正しました

2022年9月14日17時18分



 int/str型変換における破壊的変更のお知らせ
こんにちは。東海顔認証のyKesamaruです。
https://www.youtube.com/watch?app=desktop&v=eTucYT2LpNU
今さっき上記YouTubeで知ったのですが、なかなかのニュースが飛び込んできました。
2022年9月7日水曜日[1]、Pythonにおいて下位互換性を破壊するセキュリティーアップデートが緊急でリリースされました。 [2]
すくなからずプロジェクトに変更を強いられるケースが発生するかもしれません。といって...]]></summary>
        <author>
            <name>yKesamaru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[『最強の三目並べAIをゼロから作る』をやってみた]]></title>
        <id>https://zenn.dev/quiver/articles/93e91ba2f29fa9</id>
        <link href="https://zenn.dev/quiver/articles/93e91ba2f29fa9"/>
        <updated>2022-09-13T21:37:00.000Z</updated>
        <summary type="html"><![CDATA[『ゼロから作るDeep Learning』などの著者がある斎藤康毅さんが、ゼロシリーズの最新作として、『最強の三目並べAIをゼロから作る』というYouTube動画を公開されていたので、やってみました。
https://twitter.com/SaitohKoki/status/1564198954476089344
最終的に作成する最強の三目並べ(Tic-Tac-Toe)AIは、次のデモページで遊べます。
https://koki0702.github.io/tictactoe-pyscript/


 学習の流れ
動画は5本からなり、以下のトピックを学べます。

ガイダンス(7分02秒...]]></summary>
        <author>
            <name>quiver</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[transformersのtutorialを読んでみた - part1]]></title>
        <id>https://zenn.dev/python3654/articles/7afb7095d6f50f</id>
        <link href="https://zenn.dev/python3654/articles/7afb7095d6f50f"/>
        <updated>2022-09-13T14:41:55.000Z</updated>
        <summary type="html"><![CDATA[はじめに
最近transformersというライブラリを勉強していて、今はtutorialsを読んでいます！せっかくなので、tutorialsの内容を訳して記事にしようと思っています！今回は第一弾ということで、以下の記事を参考に書きました～ ぜひ最後まで読んでください！(google colabで実装しながら読んで頂けると良いと思います！)
https://huggingface.co/docs/transformers/v4.21.3/en/pipeline_tutorial

 推論用パイプライン
pipeline()を使えば、テキスト生成、画像のセグメンテーション、音声分類など...]]></summary>
        <author>
            <name>とりごん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[知らないプログラミング言語のcodeを読む裏技?]]></title>
        <id>https://zenn.dev/jim_soros/articles/79570a92519342</id>
        <link href="https://zenn.dev/jim_soros/articles/79570a92519342"/>
        <updated>2022-09-13T10:28:28.000Z</updated>
        <summary type="html"><![CDATA[上司や友達から知らないプログラミング言語のcodeを見せられた時には
無駄にcodeを読まずコメントアウトを見つけよう。
そして、コメントアウトの部分を飛ばし飛ばし読み上げよう。
すると、上司や友達はこいつ出来るやん！！ってなる。
その後、こっそりググって詳細を調べよう。
以上。こうして世界は回っている。
python))
#単数行コメントアウト
"""複数行コメントアウト""" 
sh))
#単数行コメントアウト 
<<"#__comment__複数行コメントアウト"#__comment__
powershell))
#単数行コメントアウト
<#複数行コメントアウト#...]]></summary>
        <author>
            <name>jim_soros</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GCPを利用した基盤構築及びデータ取得作業の定期実行について]]></title>
        <id>https://zenn.dev/kz2021/articles/a9380b23732f30</id>
        <link href="https://zenn.dev/kz2021/articles/a9380b23732f30"/>
        <updated>2022-09-13T06:33:53.000Z</updated>
        <summary type="html"><![CDATA[はじめに
これは、Web APIとGCPを利用し5日間の天気データ取得の作業を自動化した記事です。
これらの記事を参考にしています。
https://qiita.com/atsuken/items/23c0f0395514cafaf47d
https://qiita.com/matsu0130/items/4849ebb3681e827274d3

 必要なもの・作業の流れ
・OpenweathermapのAPIキー
・GCPのアカウント（要はgoogleアカウント）
Openweathermapは、世界の天気に関する情報を取得することが出来るサービスです。
https://open...]]></summary>
        <author>
            <name>kz2021</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[オブジェクト指向プログラミング四種盛り(py,java,c#,js)]]></title>
        <id>https://zenn.dev/jim_soros/articles/0a218bcdb42912</id>
        <link href="https://zenn.dev/jim_soros/articles/0a218bcdb42912"/>
        <updated>2022-09-13T03:59:14.000Z</updated>
        <summary type="html"><![CDATA[●オブジェクト指向プログラミング四種盛り。
　味比べ。
　言語間の違いを知ることでプログラミングを深く学ぶ。
　クラス変数とインスタンス変数について違いが大きい。。。などなど
1)) python,キーボード入力の文字列を繋げて出力する
class print_text:
    #text = "jim_soros" #class var

    def __init__(self) -> None:
        self.text = "" #instance var

    def input_print_text(self) -> str:
        n...]]></summary>
        <author>
            <name>jim_soros</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[KLab Server Side Camp 第 3 回 に参加してきました]]></title>
        <id>https://zenn.dev/hiroya_w/articles/c023c54c32f8a9</id>
        <link href="https://zenn.dev/hiroya_w/articles/c023c54c32f8a9"/>
        <updated>2022-09-13T01:06:49.000Z</updated>
        <summary type="html"><![CDATA[KLab Server Side Camp 第 3 回 に参加してきました
9/1 ~ 9/7 の 5 日間、KLab Server Side Camp 第 3 回に参加してきました。

KLab Server Side Camp（クラブサーバサイドキャンプ）は、サーバサイド特化型の技術系インターンです。
本イベントの為にオリジナルで自社開発したスマホ向けゲーム（音ゲー）を題材に、そのゲームアプリの中でサーバサイドの技術がどのように使われているかを、講義形式で進めつつ実際に課題にも取り組み手を動かしてもらいながら経験を積むことができるサーバサイド特化型のインターンです。

http:...]]></summary>
        <author>
            <name>Hiroya-W</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonで型ヒントがついた関数のモックを作る]]></title>
        <id>https://zenn.dev/ktnyt/articles/78cc20dc57a154</id>
        <link href="https://zenn.dev/ktnyt/articles/78cc20dc57a154"/>
        <updated>2022-09-12T22:40:03.000Z</updated>
        <summary type="html"><![CDATA[「テストのコードも例外なく型ヒントをつけたいなあ」
そんな気持ちでPythonを書いていたところ、型ヒントがついている関数のモックを作れないかなという興味からやってみたところなんとなくそれっぽいものができたのでご紹介します。
やりたいことのイメージとしては
function_mock = FunctionMock(引数).returns(返り値)
ret = function_mock(値) # ここでassertionが走る
use(ret) # 指定した返り値が帰っている

 モック本体のコード
from __future__ import annotations

from typ...]]></summary>
        <author>
            <name>Mirei (Kotone) Itaya</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[いびつな形の市区町村を探す [Python+GeoJSON+OpenCV]]]></title>
        <id>https://zenn.dev/shimat/articles/e2e8799f4db567</id>
        <link href="https://zenn.dev/shimat/articles/e2e8799f4db567"/>
        <updated>2022-09-12T12:25:41.000Z</updated>
        <summary type="html"><![CDATA[題材
時々見ているYouTubeチャンネル「おもしろ地理」さんで、変わった形の市区町村が話題になっていました。
https://twitter.com/omoshirochiri/status/1536972764535574528?s=20&t=qJKWBP9taN1m5BUAsAuFGA
こういうことを計算で探してみましょう。
そもそも昔から形には興味がありました。1日数時間Google Mapsを眺めても飽きない性分です。
細長いとかちぎれそうなど、尺度はいろいろあると思いますが、今回はでこぼこした、いびつな形を狙ってみました。なお地理は好きですが、GeoJSON等の技...]]></summary>
        <author>
            <name>shimat</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【AIイラスト】M1/M2 Macのローカルにメンテが楽なStableDiffusion環境を構築する(Diffusers)]]></title>
        <id>https://zenn.dev/michy/articles/102a0558096199</id>
        <link href="https://zenn.dev/michy/articles/102a0558096199"/>
        <updated>2022-09-12T11:12:20.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事ではstableDiffusionの環境をDiffusersを使ってMacのローカルに構築する方法と、waifu-diffusionなどの学習済みモデルを切り替えながら画像を出力する方法を解説します。

 対象読者
・M1/M2シリーズのMacユーザ
・stable-diffusionとその発展型のモデルを気軽に試せる環境がほしい人
・stable-diffusion環境メンテと最新化に稼働を割く暇がない人

 使用するツール

diffusers(0.3.0)
homebrew
pythonの仮想環境(miniforge or miniconda)
jupyter...]]></summary>
        <author>
            <name>zaiwa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dockerよりお手軽？　Singularityを導入してみた]]></title>
        <id>https://zenn.dev/sunaboy/articles/8159041b984210</id>
        <link href="https://zenn.dev/sunaboy/articles/8159041b984210"/>
        <updated>2022-09-12T10:14:55.000Z</updated>
        <summary type="html"><![CDATA[前置き
PyhonとTensoleflowで画像分類器を作っています。仕事と関連がなくはないですが、完全に趣味です。
ある日Tensoleflowが突然認識されなくなり(VScodeで「このライブラリは存在しません」といったメッセージが出る)、これを機にPythonの環境をPCからDocekrに移してみようと考えました。
しかし色々調べていくうちに、「Tensoleflowを使うならDocekrよりSingularityのほうが良い」というのを見かけ、「そこまで言うなら触ってみよう」と思って導入してみたので、その記録です。

 Singularityとは？
Dockerと同じ環境構...]]></summary>
        <author>
            <name>すな坊や</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DjangoのMVCとURLの関係]]></title>
        <id>https://zenn.dev/takaya9/articles/ecef7517c24c26</id>
        <link href="https://zenn.dev/takaya9/articles/ecef7517c24c26"/>
        <updated>2022-09-12T08:16:38.000Z</updated>
        <summary type="html"><![CDATA[Djangoに欠かせないMVCの考え方
（MTVと紹介する記事もあるけど正直どっちでもいい。大事なのは機能の理解）
頭が固い私はとにかくイメージを掴むことを大切にした
M:model。データベース周りの設定
V:ViewのVだがDjangoのtemplate部分のこと。ざっくり言うとhtmlの部分
C:Controller。こっちがDjangoのView
　テンプレートとモデル間でデータのやり取りをするところ。データの運び屋のような感じ
ここまではネットを見ればたくさん出てくる
じゃあ具体的にどんな感じよ？というのと、URLとの繋がりが直感的にわかりにくい
まずmvcイメージは
Mode...]]></summary>
        <author>
            <name>takaya8</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[超個人的!!Djangoベストプラクティス]]></title>
        <id>https://zenn.dev/ryoutoku/articles/915208a8ba7619</id>
        <link href="https://zenn.dev/ryoutoku/articles/915208a8ba7619"/>
        <updated>2022-09-12T06:31:37.000Z</updated>
        <summary type="html"><![CDATA[はじめに
プロジェクトに入るたび、「アイエエエ!? ジッソウ!? ジッソウナンデ!?」という Django 実装に出会う事が多いので、他山の石として。

 極論な結論
ココを見、ココに準ずる。
https://django-best-practice-ja.readthedocs.io/ja/latest/

 超個人的!!ベストプラクティス
以降は個人的に考えるベストプラクティス。
Django だけでなく、チーム開発や Django REST framework などの要素も含む。

 Django 一般

 Pipenv や poetry を入れ、本番環境と開発環境の modu...]]></summary>
        <author>
            <name>ryoutoku</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[超個人的!!Pythonにおけるバグになりやすい実装]]></title>
        <id>https://zenn.dev/ryoutoku/articles/e6e0b0ac8a9b7d</id>
        <link href="https://zenn.dev/ryoutoku/articles/e6e0b0ac8a9b7d"/>
        <updated>2022-09-12T05:45:26.000Z</updated>
        <summary type="html"><![CDATA[はじめに
プロジェクトに入るたび、「アイエエエ!? ジッソウ!? ジッソウナンデ!?」という実装に出会う事が多いので、他山の石として。
それっぽく動くが、実装者が想定していないであろう動作をしそうな、バグになりそうな実装をまとめる。
Python ベースのサンプルコードだが、他言語一般でも同様に考えることができる。

 メソッドのデフォルト引数にオブジェクト型を指定する
ここの「オブジェクト型」はint型などではない以下のようなオブジェクト型である。

list
dict
その他、クラスとか


 問題
初期化されていると思っていた変数が、初期化されずに使いまわされる。

 対策案
...]]></summary>
        <author>
            <name>ryoutoku</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google Cloud Storageのキャッシュを保持したくない]]></title>
        <id>https://zenn.dev/dicechick373/articles/47fe79558259df</id>
        <link href="https://zenn.dev/dicechick373/articles/47fe79558259df"/>
        <updated>2022-09-12T02:47:22.000Z</updated>
        <summary type="html"><![CDATA[目標

GCSのtxtファイルから数字を読み込む
GCFで数字を利用して何らかの処理を行う
＋1した数字をGCSのtxtファイルに保存

のようなことをしたい。

 コード

 main.py
def main(request):
    # バケット
    bucket_name = 'YOUR BUCKET NAME'
    bucket = storage_client.get_bucket(bucket_name)

    # countを記録するファイルを開く
    blob_count = bucket.blob('count.txt')
    count = ...]]></summary>
        <author>
            <name>dicechick373</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[trinart_stable_diffusion_v2 をローカル環境のUbuntu と RTX 3090で実行する]]></title>
        <id>https://zenn.dev/johnkf/articles/5b0fa5069ea752</id>
        <link href="https://zenn.dev/johnkf/articles/5b0fa5069ea752"/>
        <updated>2022-09-12T02:18:42.000Z</updated>
        <summary type="html"><![CDATA[前回に続いてローカルのコンシューマー用GPUで
どこまで画像生成AIが利用出来るか試してみようシリーズ
環境は引き続き下記のローカル環境を使用していきます。
OS:Ubuntu20.04
GPU:RTX 3090
VRAM:24GB
RAM:16GB
$ nvidia-smi
Mon Sep 12 10:03:47 2022       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 470.103.01   Driver Version: 470....]]></summary>
        <author>
            <name>John.K.Fuku</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【pytest】 フィクスチャーの定義へジャンプするスクリプト]]></title>
        <id>https://zenn.dev/takakiriy/articles/e359dda3d9959a</id>
        <link href="https://zenn.dev/takakiriy/articles/e359dda3d9959a"/>
        <updated>2022-09-11T16:33:21.000Z</updated>
        <summary type="html"><![CDATA[フィクスチャーはどこで定義しているのか
pytest のフィクスチャー(fixture)を使うと、テスト データ などがツリー状に整理されるようになりますが、それにも関わらずどこで定義されているかを見付けることは非常に難しいです。 Visual Studio Code などの IDE が定義へのジャンプに対応していれば難しくはないのですが、2022年現在は対応していません。 その機能を持った Visual Studio Code の拡張機能があるようですが、まともに動作しません。
そこで、フィクスチャーがどこにあるかを検索する簡単な Linux 用 bash スクリプトを作りました。...]]></summary>
        <author>
            <name>Takakiri</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[transformersに入門してみた！]]></title>
        <id>https://zenn.dev/python3654/articles/8d87bb501b5345</id>
        <link href="https://zenn.dev/python3654/articles/8d87bb501b5345"/>
        <updated>2022-09-11T14:41:27.000Z</updated>
        <summary type="html"><![CDATA[はじめに
最近transformersというとても便利なライブラリがあることを知りました！今回はtransformersの初心者向けのガイドを参考に記事を書きたいと思います！(具体的には、テキストの感情分析を扱います。)
https://huggingface.co/docs/transformers/quicktour

 Pipeline
pipeline()を使えば、代表的なタスクについて簡単に学習済みのモデルを使用できます。
テキスト：感情分析、テキスト生成、NER(固有表現抽出)、質問応答、空欄補充、要約、翻訳、特徴抽出
画像：画像分類、セグメンテーション、物体検出
音声：...]]></summary>
        <author>
            <name>とりごん</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonでHello world]]></title>
        <id>https://zenn.dev/muscle1994/articles/8f7a88f8a20627</id>
        <link href="https://zenn.dev/muscle1994/articles/8f7a88f8a20627"/>
        <updated>2022-09-11T13:56:11.000Z</updated>
        <summary type="html"><![CDATA[https://zenn.dev/muscle1994/articles/d0c8fbc44fe25d
上記の記事の続きです。
今回は作った環境において、pythonを使ってhello world!を出してみましょう。
まず、hello world!を出すための新規ファイルを作成しましょう。
名前はHelloWorld.pyで作成します。

作成が完了したら、pythonのコードを書いていきましょう。


 とりあえずHello world！を出すコードを作成
以下のようなコードを作成した。
これを実行して、Hello world!を出力してみよう。
内容としてはHello world!...]]></summary>
        <author>
            <name>muscleProgramer</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[自炊PDF本に短時間で詳細な目次を付与するツール]]></title>
        <id>https://zenn.dev/shena46/articles/bbfffc8a6a6233</id>
        <link href="https://zenn.dev/shena46/articles/bbfffc8a6a6233"/>
        <updated>2022-09-11T11:54:45.000Z</updated>
        <summary type="html"><![CDATA[概要
関連ツール(参考)

作ったもの

概要
データ構造と役割分担



ハンズオン

目次画像の OCR
tidy-toc: OCR で得たテキストファイルのクリーニング
re-numbering: ページ番号調整
2ymltoc: yaml 形式へ整形


まとめ
参考文献


 概要
一般に, 自炊(紙媒体の本から電子媒体の本を得る作業)して作ったPDF本には目次が付いていない. 目次が必要であれば, 何らかの手段で自分で付与する作業が発生する. 目次付与を行うツールはいくつか存在するが(関連ツールを参照), いずれも

入力

目次を付与したいPDF
目次内容を記述したテキス...]]></summary>
        <author>
            <name>Shena</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ABC268 C - Chinese Restaurant Python解答例]]></title>
        <id>https://zenn.dev/fjnkt98/articles/fae30cea7dc2f7</id>
        <link href="https://zenn.dev/fjnkt98/articles/fae30cea7dc2f7"/>
        <updated>2022-09-11T09:36:55.000Z</updated>
        <summary type="html"><![CDATA[AtCoder Beginner Contest 268 C - Chinese RestaurantをPythonで解きます。

 問題
問題文をAtCoderのページより引用します。


 問題文
回転テーブルの周りに人0、人1、\ldots、人N-1がこの順番で反時計回りに等間隔で並んでいます。また、人iの目の前には料理p_iが置かれています。
あなたは次の操作を0回以上何度でも行うことが出来ます。

回転テーブルを反時計回りに1周の\frac{1}{N}だけ回す。これによって、(この操作の直前に)人iの目の前にあった料理は人(i+1) \bmod Nの目の前に移動する。

操作を...]]></summary>
        <author>
            <name>藤那花多</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】水素原子の解の描画：ラゲール陪多項式計算モジュール]]></title>
        <id>https://zenn.dev/shittoku_xxx/articles/13afd6fdfac44e</id>
        <link href="https://zenn.dev/shittoku_xxx/articles/13afd6fdfac44e"/>
        <updated>2022-09-11T05:01:09.000Z</updated>
        <summary type="html"><![CDATA[概要
scipy(python)のラゲール陪多項式（Associated Laguerre polynomial）を使用する際の注意点についての記事です。
水素原子におけるシュレディンガー方程式の解を描画したいと思った時、その解の中にラゲール陪多項式という特殊函数が出てきます。有難いことにscipyライブラリには、ラゲール陪多項式を計算するモジュールがあり、これを利用できます。（scipy.special.assoc_laguerreなど）
問題なのが、ラゲール陪多項式の定義が資料によって揺れており、恐らく殆ど全ての量子力学の教科書に載っている定義とscipyで実装されているものが異...]]></summary>
        <author>
            <name>しっとく</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Intro2DL：活性化関数とその特徴 pytorchによる実装]]></title>
        <id>https://zenn.dev/yoshida0312/articles/77c6011beb94b5</id>
        <link href="https://zenn.dev/yoshida0312/articles/77c6011beb94b5"/>
        <updated>2022-09-10T15:06:54.000Z</updated>
        <summary type="html"><![CDATA[活性化関数
活性化関数はNNに非線形性を付加するため、DLにおいて非常に重要な役割を担っています。
ここでは、いくつかの活性化関数とその特徴を見ていきます。
import os
import json
import math
import japanize_matplotlib
import numpy as np 
import time

import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

from tqdm import tqdm

import torch
import torch.nn as nn...]]></summary>
        <author>
            <name>よしだ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[urllib を拡張する]]></title>
        <id>https://zenn.dev/kwi/articles/876a75c34984d4</id>
        <link href="https://zenn.dev/kwi/articles/876a75c34984d4"/>
        <updated>2022-09-10T12:43:45.000Z</updated>
        <summary type="html"><![CDATA[例えば rdflib で HTTP 越しに SPARQL クエリしたいとき。一般的には公開 SPARQL エンドポイントでクエリする例がよく出ている。このように平文通信でアクセスできるなら問題ないけれども、認証がかかっていると工夫がいる。ドキュメントによると urllib を使っているから、よろしくやるように書かれている。
あらかじめ用意されている auth パラメータで HTTP Basic 認証は対応できる。これ以上、たとえば、未認証の場合に別のサイトにリダイレクトで飛ばされて、そこで認証が終わってから戻されるといったフローの場合は下準備がいる。
どのようにするかあまり例がなかったの...]]></summary>
        <author>
            <name>kwi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【自然言語処理】【Python】共起ネットワークの作り方を理解する]]></title>
        <id>https://zenn.dev/robes/articles/a3e1a6e80efd99</id>
        <link href="https://zenn.dev/robes/articles/a3e1a6e80efd99"/>
        <updated>2022-09-10T11:57:49.000Z</updated>
        <summary type="html"><![CDATA[はじめに
自然言語処理をはじめたら、一度は作ってみたいのが共起ネットワークではないかと思います。
私自身、共起ネットワークについては、書籍やネット記事を参考にしながら、これまで何度も作ってきました。
しかしながら、文章→共起行列→共起ネットワークとなる一連の過程において、特に共起行列を作成するコードの理解が十分ではないと思い至り、今回、勉強もかねて、共起行列の作成過程を残すことにしました。
共起ネットワークに興味を持たれている方の参考になればと思います。

 共起ネットワーク
単語どおしのつながりを可視化してくれる手法で、文章の構造的な特徴を直感的に理解するのによく利用されます。
文...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Waifu Diffusionをローカル環境で動かした手順]]></title>
        <id>https://zenn.dev/johnkf/articles/bb89cdd60a175b</id>
        <link href="https://zenn.dev/johnkf/articles/bb89cdd60a175b"/>
        <updated>2022-09-10T09:36:53.000Z</updated>
        <summary type="html"><![CDATA[Google Colabで実行するだけのほうが楽ではありますが
ローカル環境のほうがvram多いGPU積んだのでせっかくなので使いたい人とか向けの記事。
※Colabを使用したい方はこちらから"Open in Colab"でノートブックが開けますので
ひたすらそれを実行すると良いです。
https://huggingface.co/hakurei/waifu-diffusion
ローカル環境
-Ubuntu 20.04
-RTX 3090
1.Waifu-diffusionからリポジトリをローカル環境にクローンする。
https://github.com/harubaru/waifu-d...]]></summary>
        <author>
            <name>John.K.Fuku</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python】Seleniumの環境構築までにやったこと]]></title>
        <id>https://zenn.dev/tomomaru87/articles/1ef214dee45991</id>
        <link href="https://zenn.dev/tomomaru87/articles/1ef214dee45991"/>
        <updated>2022-09-10T07:04:58.000Z</updated>
        <summary type="html"><![CDATA[brew install pyenvを叩く。
brew install python3を叩く
python3 -m pip install selenium
こっからは好きなライブラリをたくさんインストールできるお。
jupyter notebook
こいつを叩くと統合IDEが起動する。
あとは楽しくコードを書こう。]]></summary>
        <author>
            <name>tomomaru87</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[言語別のファイルダウンロード方法 - Node.js Python Rust Go]]></title>
        <id>https://zenn.dev/tfutada/articles/c3d172533c698c</id>
        <link href="https://zenn.dev/tfutada/articles/c3d172533c698c"/>
        <updated>2022-09-10T03:56:32.000Z</updated>
        <summary type="html"><![CDATA[Node.js、Python、Go、Rustそれぞれでのファイル・ダウンロードの方法になります。

 前提条件
お堅く書きますと、
膨大な数の巨大なzipファイルを効率よく(低予算で)ダウンロードするクライアント・プログラム
という要件になります。

 補足事項
サーバは無限にスケールすると想定
ペイロードの中身を開けて演算処理はしない。そのためI/Oバウンドになる。
ファイルディスクリプタ(ソケット)は無限にある
!
もちろん、負荷をかけるときはご自身のサーバを使用してください。GitHubなどを使用してはダメです。


 基本設計指針

ストリーミングを使用し、メモリの消費を少なくす...]]></summary>
        <author>
            <name>TF</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【画像生成】Python初心者でも話題のStableDiffusionを爆速で実装できた]]></title>
        <id>https://zenn.dev/robes/articles/8ea32494d40f06</id>
        <link href="https://zenn.dev/robes/articles/8ea32494d40f06"/>
        <updated>2022-09-10T02:45:49.000Z</updated>
        <summary type="html"><![CDATA[はじめに
話題の画像生成AIStableDiffusionを、GoogleColaboratoryを使って爆速で実装することができました。（正味30分程度で実装できました）
ここでは、実装方法などについて、余計な説明なしに爆速でご紹介したいと思います。
 

 StableDiffusionとは
テキストから画像を生成してくれるオープンソースのAIです。
いわゆるText to Imageというやつです。
2022年8月に英Stability AIが、HuggingFaceで無償公開しました。


 それでは実装方法を見ていきましょう

 HuggingFaceでのアクセストークンの...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kaggleで金融コンペを開催するための(僕が知っている)すべて]]></title>
        <id>https://zenn.dev/gamella/articles/eaf7fe5a96bdf0</id>
        <link href="https://zenn.dev/gamella/articles/eaf7fe5a96bdf0"/>
        <updated>2022-09-10T02:22:26.000Z</updated>
        <summary type="html"><![CDATA[はじめに
先週からマケデコというMarket APIのDeveloper Communityの運営をスタートしており、その中で我々が問題設計を担当した以下のKaggleコンペにおいて どのような問題設計と実際にどうやって解いてみたのか？ という質問を頂いた。この記事では、そのあたりについてKaggleで金融コンペを開催するための(僕が知っている)すべてを記載してみようと思います。
https://www.kaggle.com/competitions/jpx-tokyo-stock-exchange-prediction/
もし、このような話に興味があればマケデコDiscordのリン...]]></summary>
        <author>
            <name>tomo@Alpaca</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Djangoで複数フィールドに更新をかけたい時]]></title>
        <id>https://zenn.dev/saya9875/articles/ef129bf5314eec</id>
        <link href="https://zenn.dev/saya9875/articles/ef129bf5314eec"/>
        <updated>2022-09-10T01:38:02.000Z</updated>
        <summary type="html"><![CDATA[下記のようなモデルがあったとします。
import uuid
from django.db import models


class Author(models.Model):
    uuid = models.UUIDField(default=uuid.uuid4, primary_key=True, editable=False)
    name = models.CharField(max_length=200)
    email = models.EmailField()
１つのフィールドに更新をかけるだけだったら、
author = Author.objects.ge...]]></summary>
        <author>
            <name>Saya</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GoogleCloudFunctionsでsitemap.xmlを作成してCloudStorageに保存する]]></title>
        <id>https://zenn.dev/dicechick373/articles/6e0b6bdc3fbe7e</id>
        <link href="https://zenn.dev/dicechick373/articles/6e0b6bdc3fbe7e"/>
        <updated>2022-09-09T22:50:36.000Z</updated>
        <summary type="html"><![CDATA[目標

GCFでsitemap.xmlを作成する
GCSに保存する


 コード

 main.py
import json
import xml.etree.ElementTree as ET
import datetime
import urllib.request
import os
import tempfile
from google.cloud import storage
storage_client = storage.Client()

def main(request):

    urlset = ET.Element('urlset')
    urlset....]]></summary>
        <author>
            <name>dicechick373</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GoogleCloudFunctionsでRESAS-APIの都道府県一覧を取得する]]></title>
        <id>https://zenn.dev/dicechick373/articles/297454b3752abd</id>
        <link href="https://zenn.dev/dicechick373/articles/297454b3752abd"/>
        <updated>2022-09-09T22:24:34.000Z</updated>
        <summary type="html"><![CDATA[目標

GCFでRESAS-APIの都道府県一覧を取得
RESAS-API-KEYはsecret managerで管理


 コード

 main.py
import json
import urllib.request
import os

def main(request):
    return json.dumps(getPrefList(),ensure_ascii=False, indent=4)

# RESAS-APIから都道府県一覧を取得
def getPrefList():
    RESAS_API_KEY = os.getenv('RESAS_API_KEY'...]]></summary>
        <author>
            <name>dicechick373</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのwith構文とは?]]></title>
        <id>https://zenn.dev/gaipoi/articles/33774a5cb9feeb</id>
        <link href="https://zenn.dev/gaipoi/articles/33774a5cb9feeb"/>
        <updated>2022-09-09T13:54:03.000Z</updated>
        <summary type="html"><![CDATA[Pythonにおける基本構文 with
ファイルを新規で作成する場合はopen関数を使って開くと、開いたファイルに対して読み書きを実行することが可能となる。作業終了後は close() をコールして閉じる必要がある。
# MARK: - open関数

# w: 書き込み専用で記載、ファイル名が存在している場合は上書き
# r: 読み込み専用
# x: 新規ファイルの書き込み
file = open('sample-file.txt', 'w', encoding = 'utf-8') 

file.write('Hello World')
file.close()
このように、ファ...]]></summary>
        <author>
            <name>gaipoi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PyTorchの量子化を3種類動かしてみる]]></title>
        <id>https://zenn.dev/zuoli/articles/f363e9eb3ed43b</id>
        <link href="https://zenn.dev/zuoli/articles/f363e9eb3ed43b"/>
        <updated>2022-09-09T13:28:24.000Z</updated>
        <summary type="html"><![CDATA[はじめに
PyTorchでは、ディープラーニングのモデルを量子化する様々な方法が用意されています。今回はPyTorchでサポートされている量子化方法について、ドキュメントに記載されているコードをベースに確認していこうと思います。

 PyTorchでの量子化について
深層学習の分野では、重みやバイアスといったパラメータの量子化bit数を下げる変換のことを量子化と呼びます。 PyTorchではモデルは浮動小数点(FP32)でパラメータを保存しており、量子化することでこれらを固定小数点(INT8)へ変換することができます。量子化によりモデルサイズは1/4となり、計算も2~4倍ほど高速にな...]]></summary>
        <author>
            <name>zuoli</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Streamlit Community CloudでOpenCVアプリを公開する]]></title>
        <id>https://zenn.dev/shimat/articles/baee671a1a00d0</id>
        <link href="https://zenn.dev/shimat/articles/baee671a1a00d0"/>
        <updated>2022-09-09T12:43:41.000Z</updated>
        <summary type="html"><![CDATA[先に結論
opencv-python-headlessを使いましょう。
最小サンプルコード
https://github.com/shimat/streamlit_with_opencv_sample
公開したサンプル
https://shimat-streamlit-with-opencv-sample-main-t0iuwf.streamlitapp.com/

 Streamlit Community Cloudについて
Community Cloudは、Streamlitの公式ホスティングサービスです。[1]
https://streamlit.io/cloud
以下を用意す...]]></summary>
        <author>
            <name>shimat</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[PyTorch] ニューラルネットワークをゼロから実装だけど勾配計算はライブラリに頼って楽をする]]></title>
        <id>https://zenn.dev/mory22k/articles/1a4fc1209a7287</id>
        <link href="https://zenn.dev/mory22k/articles/1a4fc1209a7287"/>
        <updated>2022-09-09T12:23:18.000Z</updated>
        <summary type="html"><![CDATA[前回：https://zenn.dev/mory22k/articles/e3a51a259e590e
前回の記事では、NumPy を使用して基本的にゼロからニューラルネットワークを実装しました。
https://zenn.dev/mory22k/articles/e3a51a259e590e
最大の問題点は、レイヤーごとに誤差逆伝播の計算式を手計算で導出する必要があることです。例えば全結合層では、次のように backward() を実装していました (若干変更を加えています):
class Affine:
    def __init__(self, input_size, outpu...]]></summary>
        <author>
            <name>mory22k</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【入門】オブジェクト指向言語とクラス設計の超簡単まとめ]]></title>
        <id>https://zenn.dev/t_fukuyama/articles/33ab5b2f1c5747</id>
        <link href="https://zenn.dev/t_fukuyama/articles/33ab5b2f1c5747"/>
        <updated>2022-09-09T05:02:51.000Z</updated>
        <summary type="html"><![CDATA[はじめに
最近、自分が学び始めの時はクラス、コンストラクタ、オブジェクトなど横文字などが多くよくわからんかったなーと思い出し、変数やUI構築を学ぶ前に一番最初にオブジェクト指向の全体像をもっと把握しておくべきだったと思っているのでそんな方向けに書いた。友達もIT業界就職したい友達も多いし見て損はないと思われる。
オブジェクト指向言語の中でもJavaで以下解説している
参考記事

 対象読者
オブジェクト指向がよくわからない人向けです。また、値オブジェクトやクラス設計のルール、可読性の勉強をしたい人向けにも役に立つかもしれない。ちなみに僕は値オブジェクトの重要性を痛感し、この記事を書こ...]]></summary>
        <author>
            <name>t.fukuyama</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[VCC2020の2つのBaseline modelの調査]]></title>
        <id>https://zenn.dev/kitchy/articles/5312d3c418f99e</id>
        <link href="https://zenn.dev/kitchy/articles/5312d3c418f99e"/>
        <updated>2022-09-08T09:45:43.000Z</updated>
        <summary type="html"><![CDATA[はじめに
学部時代NLPをやっていて、某大学院M1の今は音声認識をしている自分ですが、ひょんなことからVoice Conversionについて勉強できる機会があったので、Voice Conversion Challenge2020 (VCC20)のベースラインとして提示されている2つの論文についてちょうさしたので、情報をまとめておきます。

 Voice　Conversionとは？
https://engineering.dena.com/blog/2022/06/voice-conversion-technology-2-livestreaming/
DeNAさんのテックブログが一...]]></summary>
        <author>
            <name>kitchy</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[関連ベクトルマシンをPythonコードを交えて紹介]]></title>
        <id>https://zenn.dev/thimblee/articles/ml_prml_relevance-vector-machine</id>
        <link href="https://zenn.dev/thimblee/articles/ml_prml_relevance-vector-machine"/>
        <updated>2022-09-08T05:09:23.000Z</updated>
        <summary type="html"><![CDATA[はじめに
PRML(Pattern Recognition and Machine Learning)で関連ベクトルマシンについて学んだ内容をまとめて、実際のデータを使って学習しました。主に7章2節の内容です。学習アルゴリズムの全体像を示すことを意識したので、導出は端折っている部分が多いです。詳しい解の導出は、PRMLの本文や演習問題にあります。そのほかに参考になるものは最後にまとめてあります。

 関連ベクトルマシンのアルゴリズム

 変数一覧

訓練データの数 N

基底関数の数 M

訓練データの説明変数 \mathbf{X} = \left\{\mathbf{x}_1, \m...]]></summary>
        <author>
            <name>Thimblee</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Intro2DL：Pytorchの基礎　XORの例題をもとに]]></title>
        <id>https://zenn.dev/yoshida0312/articles/bd83b15077825c</id>
        <link href="https://zenn.dev/yoshida0312/articles/bd83b15077825c"/>
        <updated>2022-09-07T13:05:38.000Z</updated>
        <summary type="html"><![CDATA[例題：XOR
PytorchにおけるNNの学習/推論を行うにあたり、XORの例題を使用します。
XORとは、x_1とx_2の片方が1で残りが0であればラベル１、それら以外のケースであればラベル0を入力するような問題で、単純な線形関数ではうまく推論できないです。
この例題を解くために、Pytorchのモジュールを使用していきます。
import os
import numpy as np 
import time

import matplotlib.pyplot as plt
import seaborn as sns

from tqdm import tqdm

 モデル構築の流...]]></summary>
        <author>
            <name>よしだ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【図解】keras でモデルに活性化関数を指定する方法は？]]></title>
        <id>https://zenn.dev/nekoallergy/articles/keras-act-func01</id>
        <link href="https://zenn.dev/nekoallergy/articles/keras-act-func01"/>
        <updated>2022-09-07T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
前回までの内容で、モデルの作成、層の追加、データの入力　という基本を実行できました。
↓ 前回の内容
https://zenn.dev/nekoallergy/articles/keras-create-model02
ただ、作成したモデルは不完全です。なぜなら、活性化関数を指定していないから です。実際に人工知能を作る際は、モデル内の活性化関数を決める必要があります。
今回は、モデルの各層に活性化関数を指定する方法を紹介します。そのうえで、そのモデルにデータを流して結果を確認してみます。正しく活性化関数が適用されているかをチェックしましょう。

 今回の目的

活性化関...]]></summary>
        <author>
            <name>NekoAllergy</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[macOS]公式からインストールしたPythonをアンインストールする]]></title>
        <id>https://zenn.dev/minamiso/articles/4b4d319600cdd7</id>
        <link href="https://zenn.dev/minamiso/articles/4b4d319600cdd7"/>
        <updated>2022-09-07T03:56:23.000Z</updated>
        <summary type="html"><![CDATA[Pythonをアンインストールする
公式からMacにインストールしたPythonをアンインストールしたとき、地味に面倒だったので備忘として書いておきます。

 python3の削除
$ sudo rm -rf /usr/local/bin/python3
/usr/bin/pythonではないので注意。

 Python.framework（ってなに？）を削除
$ sudo rm -rf /Library/Frameworks/Python.framework
/System/Library/Frameworks/Python.frameworkではないので注意。

 シンボリックリ...]]></summary>
        <author>
            <name>minami</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[いい感じに現在時刻を表示したい！]]></title>
        <id>https://zenn.dev/kinnkinn/articles/4b017400aecaf5</id>
        <link href="https://zenn.dev/kinnkinn/articles/4b017400aecaf5"/>
        <updated>2022-09-06T15:22:25.000Z</updated>
        <summary type="html"><![CDATA[はじめに
プログラムを書いているとバージョン管理のために現在時刻が欲しいときがありますよね？？
そんな時にいい感じで出力できる簡単なプログラムをPythonで書きました．
モジュールとして他のプログラムで使ってもいいかも．

 プログラム
import datetime

def printnow():
    #別のプログラムで呼び出す用
    now = datetime.datetime.now()
    today1 = now.strftime('%Y/%m/%d/%H:%M')
    print(today1)

def main():
    now = date...]]></summary>
        <author>
            <name>kinnkinn</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Scipy の Lomb-Scargle ピリオドグラムを使う]]></title>
        <id>https://zenn.dev/chimuichimu/articles/954fc680a6252f</id>
        <link href="https://zenn.dev/chimuichimu/articles/954fc680a6252f"/>
        <updated>2022-09-06T13:27:52.000Z</updated>
        <summary type="html"><![CDATA[概要
時系列データの周期性解析で Lomb-Scargle 法を使う場面が最近あった。
Lomb-Scargle 法はいくつかのライブラリで提供されているようだが、今回は Scipy で提供されるモジュールを使用した。備忘録として使用法をメモしておく。

 Lomb-Scargle ピリオドグラムとは
Lomb-Scargle ピリオドグラム（Lomb (1976)[1], Scargle (1982)[2]）とは、不規則にサンプリングされた時系列データから、周期性を見つけ出す統計的手法である。
周期性の解析に用いられる手法として、高速フーリエ変換（Fast Fourier Tran...]]></summary>
        <author>
            <name>chimuichimu</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[40代プログラミング初心者がPython＋FlaskでQiitaとZenとはてぶのトレンドまとめサイト作ってみた]]></title>
        <id>https://zenn.dev/usagipy/articles/f53eade58f1ac3</id>
        <link href="https://zenn.dev/usagipy/articles/f53eade58f1ac3"/>
        <updated>2022-09-06T13:08:00.000Z</updated>
        <summary type="html"><![CDATA[作ったサイト名：話題のテック　下がサイトです
話題のテック
https://wadainotech.com

 40代のプログラミング初心者が8ヶ月目webサービスを作りたい
Webサービスとかめんどくさいだろうなぁ。。。どうやってつくるのかなぁ
よし、本を買おう！買いました
Pythonではじめる Webサービス&スマホアプリの書きかた・作りかた
https://amzn.to/3TiTYuj
この本のコンセプト
リリースしろ
たくさん作れ
1/3を読んだ時点でとりあえず作ろうと思いました
この本はpythonのフレームワークのFlaskを使っています。
Flaskってなんて読...]]></summary>
        <author>
            <name>usagipy</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【図解】keras でモデルにデータを入れて結果をみてみる]]></title>
        <id>https://zenn.dev/nekoallergy/articles/keras-create-model02</id>
        <link href="https://zenn.dev/nekoallergy/articles/keras-create-model02"/>
        <updated>2022-09-06T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
前回は、Keras でモデルを作成し、層を追加することができました。
↓ 前回の内容
https://zenn.dev/nekoallergy/articles/keras-create-model01
作成したモデルはまだ不完全ですが、既に動かせる状態です。つまり、このモデルに何かのデータを入力すると、何かしらの出力を返してくれます。
まだ学習をしていないので出力される数値に意味はありませんが、モデルの動作やデータ形状を確認するために、順伝搬させてみましょう。

 今回の目的

モデルの動作や、データ形状を確認する
モデルにデータを入れて、出力される結果を見てみる


...]]></summary>
        <author>
            <name>NekoAllergy</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Macbook Air M2（mem16GB）のローカル環境でStable Diffusionを動かす（2022.9.6版）]]></title>
        <id>https://zenn.dev/hevo2/articles/b126d593d0f754</id>
        <link href="https://zenn.dev/hevo2/articles/b126d593d0f754"/>
        <updated>2022-09-06T06:52:47.000Z</updated>
        <summary type="html"><![CDATA[はじめに

Qiitaに書いた以下の記事と同様のもの

Macbook Air M2（mem16GB）のローカル環境でStable Diffusionを動かす（2022.9.6版）


python3必須。minicondaを利用。学習済みモデルファイル（約4GB）は事前にダウンロードしておくこと
1画像出力で3分30秒くらい。


 参考ページ

使うリポジトリ

https://github.com/lstein/stable-diffusion


参考としたドキュメント

https://github.com/lstein/stable-diffusion/blob/main...]]></summary>
        <author>
            <name>hevo2</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Intro2DL : Pytorchの基礎]]></title>
        <id>https://zenn.dev/yoshida0312/articles/1504c751190d09</id>
        <link href="https://zenn.dev/yoshida0312/articles/1504c751190d09"/>
        <updated>2022-09-06T06:45:33.000Z</updated>
        <summary type="html"><![CDATA[Pytorch
本リポジトリでは、研究用途を中心に多く使用されているPytorchの基礎をまとめようとしたのですが、UvA Deep Learning Tutorials https://github.com/phlippe/uvadlc_notebooks
をほとんど日本語化しただけのようになってしまいました。今後は、このチュートリアルをベースに追加の関数やモデルも実装しながら拡充していこうと思います。
import numpy as np
バージョンの確認
import torch

print(torch.__version__)
1.12.1

seedの設定
pytorch...]]></summary>
        <author>
            <name>よしだ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[discord.py v2.0でハイブリッドコマンド]]></title>
        <id>https://zenn.dev/yaakiyu_s/articles/43deb462a663c7</id>
        <link href="https://zenn.dev/yaakiyu_s/articles/43deb462a663c7"/>
        <updated>2022-09-06T05:05:28.000Z</updated>
        <summary type="html"><![CDATA[discord.py2.0でハイブリッドコマンドを使う。
discordにはスラッシュコマンドと呼ばれる機能があります。botとユーザーがメッセージを使わなくてもやりとりできる機能です。
また、discord.pyには古くから「コマンド」の概念がありました。!pingというメッセージを送信するとPong!って言われて、!helpだとI won't help you!って言われる、みたいな。
(helpしてくれないbotは意地悪なので使いたくないですが())
それを簡単に作るために作られたフレームワークがdiscord.ext.commandsです。
このcommandsの機能(メッセ...]]></summary>
        <author>
            <name>yaakiyu_school</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Stable Diffusionのインストール手順書(GCP版)]]></title>
        <id>https://zenn.dev/tfutada/articles/717b60a6e7961a</id>
        <link href="https://zenn.dev/tfutada/articles/717b60a6e7961a"/>
        <updated>2022-09-06T04:02:50.000Z</updated>
        <summary type="html"><![CDATA[Stable Diffusionの関連ブログがあちこちに量産されていますね。実際のサービスにどう落とし込みマネタイズするか、色々なアイデアが浮かびそうです。
この記事では機械学習をやったことのないエンジニアを想定した、GCPのGCE(ディープラーニングVM)を使用した手順書になります。

Stable Diffusionとは、プロンプトと称するテキストから画像を生成するAIです。CompVis, Stability AI, LAIONの研究者、エンジニアによって開発されました。　Stability AIのEmadがTwitterで活発に情報発信しています。

!
普段からクラウド環境で開...]]></summary>
        <author>
            <name>TF</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Elasticsearch をとりあえず手元で動かしたい]]></title>
        <id>https://zenn.dev/ktoyod/articles/803b9f1b2860b6</id>
        <link href="https://zenn.dev/ktoyod/articles/803b9f1b2860b6"/>
        <updated>2022-09-06T00:56:48.000Z</updated>
        <summary type="html"><![CDATA[Links

Install Elasticsearch with Docker | Elasticsearch Guide [8.3] | Elastic
Python Elasticsearch 基本的な使い方まとめ - Qiita


 概要
Elasticsearch を触ってみた。Elasticsearch が何か、という点については他の記事に譲るとしてこの記事では、とりあえず手元で動かすことをスコープにする。
具体的には、

Docker を使って Elasticsearch を起動する
Docker を使って Kibana を起動し、Elasticsearch の中身を...]]></summary>
        <author>
            <name>ktoyod</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【図解】kerasでモデルを作成する]]></title>
        <id>https://zenn.dev/nekoallergy/articles/keras-create-model01</id>
        <link href="https://zenn.dev/nekoallergy/articles/keras-create-model01"/>
        <updated>2022-09-05T14:00:00.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Keras を使って、ディープラーニングのモデルを作成してみましょう。

 ■ 対象者
機械学習に関する用語をある程度知っている方を対象としています。
具体的には、次のような基本用語がなんとなくイメージできるなら OK です。

ニューラルネットワーク
入力層、中間層、出力層
重み、バイアス
順伝搬

補足：DeepLearning の基礎を知りたい方はこちらからどうぞ ↓
https://zenn.dev/nekoallergy/books/904df952389317

 ■ この記事で分かること

Keras でモデルを作る方法
モデルに層を追加する方法
モデルや重...]]></summary>
        <author>
            <name>NekoAllergy</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[放送レコメンド機能をTensorFlow Recommendersで作り、ABテストしてみた]]></title>
        <id>https://zenn.dev/canonrock/articles/standfm_user_to_episode</id>
        <link href="https://zenn.dev/canonrock/articles/standfm_user_to_episode"/>
        <updated>2022-09-05T07:34:30.000Z</updated>
        <summary type="html"><![CDATA[はじめに
こんにちは、stand.fm でMLエンジニアをしているcanonrockです。
stand.fmでは各画面に表示するコンテンツのパーソナライズを進めており、先日その一環としてホーム画面に各ユーザーへおすすめの放送を表示する機能を追加しました。本記事ではおすすめ放送表示機能のシステム構成やABテスト結果をご紹介しようと思います。

 おすすめ放送表示機能の目的と概要

 概要
stand.fmではアプリを開いた時に最初に出る画面をホーム画面と呼んでいます。ホーム画面では画像のようにテーマ別にセクションが並び、セクション内に放送がいくつか表示されます。

ホーム画面に表示され...]]></summary>
        <author>
            <name>canonrock</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GoogleCloudFunctionsでseleniumを利用してscreenshotを保存する]]></title>
        <id>https://zenn.dev/dicechick373/articles/47e437246d79c1</id>
        <link href="https://zenn.dev/dicechick373/articles/47e437246d79c1"/>
        <updated>2022-09-05T05:02:34.000Z</updated>
        <summary type="html"><![CDATA[目標

GoogleCloudFunctions（GCF）でseleniumを利用する
ウェブサイトのscreenshotをGoogleCloudStorage（GCS）に保存する


 完成品
https://github.com/dicechick373/gcf-selenium-screenshot

 main.py
'YOUR BUCKET NAME'にバケット名を指定
import json
import os
import time
from selenium import webdriver
from google.cloud import storage

def ...]]></summary>
        <author>
            <name>dicechick373</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[C言語を理解した人へ超わかるPython講座（基礎編）]]></title>
        <id>https://zenn.dev/kinnkinn/articles/aeb0c68fcb81ba</id>
        <link href="https://zenn.dev/kinnkinn/articles/aeb0c68fcb81ba"/>
        <updated>2022-09-05T04:12:09.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この資料は私がC言語を学んでからPythonを勉強したという経験から書いているものです．
また分かりやすさや実際に自分が引っかかったところに重点を置いているので間違いや変な所を見つけたらコメント欄で教えてください．


 目次

環境構築
pythonの特徴
標準出力とコメントアウト
配列
制御文
関数
文字列
モジュール（外部ライブラリ）

numpy
matplotlib


コマンドライン引数
テキストファイル
便利な関数
便利な表現
問題
まとめ



 環境構築
pythonが実行できる環境を作るにはいくつか方法がある

ローカルで環境構築する

ローカルで環境構...]]></summary>
        <author>
            <name>kinnkinn</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SIMD下座！？HLACを楽々ベクトル化！]]></title>
        <id>https://zenn.dev/kotaro_inoue/articles/415e58dc474729</id>
        <link href="https://zenn.dev/kotaro_inoue/articles/415e58dc474729"/>
        <updated>2022-09-05T01:01:31.000Z</updated>
        <summary type="html"><![CDATA[これまでのお話
アダコテックではHLACという特徴量を用いた異常検知モデルを提供し、これまで3回に渡って要素技術を解説してきました。

世界一やさしいHLAC入門！(間違い探し編)
実は単純？良品学習入門！
ワンオペの限界っ！アンサンブルモデル入門！

今回はちょっと毛色を変えて、私自身の興味があったHLACそのものに関する実装の話です！
関連としてはCTO紹介の下記の濃淡HLACを対象として
https://zenn.dev/kei1978/articles/3191203ece3a74
t-ibe先生の処理高速化まわりの記事に関連します。
https://zenn.dev/t_i...]]></summary>
        <author>
            <name>Kotaro Inoue</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[poetryのインストーラを新しいものに移行しなければならない]]></title>
        <id>https://zenn.dev/hibiki_kato/articles/a663c89477085d</id>
        <link href="https://zenn.dev/hibiki_kato/articles/a663c89477085d"/>
        <updated>2022-09-04T15:55:08.000Z</updated>
        <summary type="html"><![CDATA[概要
2022/8/31にpoetry1.2.0が公開されました。同時に今まで使っていたインストーラが使えなくなったので移行方法をメモします。
https://python-poetry.org/blog/announcing-poetry-1.2.0/

 エラーが出た状況
docker環境でpoetryを使っていました。今まで使っていたのはこれ
RUN curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -

 エラー
#10 0.445 Re...]]></summary>
        <author>
            <name>hibiki_kato</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python文法の基礎]]></title>
        <id>https://zenn.dev/mimitako/books/python-standard-book</id>
        <link href="https://zenn.dev/mimitako/books/python-standard-book"/>
        <updated>2022-09-04T14:02:00.000Z</updated>
        <summary type="html"><![CDATA[Pythonについてまとまった技術書があっても検索性に劣ったり、実用的な書き方が見つからなかったりしていませんか？また、インターネットで検索しても網羅的に調べることができないため苦労することも多々あります。そこで、この本ではそれらの問題点を解決するべくPythonの公式サイトを実用ベースにしてみました。]]></summary>
        <author>
            <name>mimitako</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python上でPostGIS検索結果をGeoJSONにて出力]]></title>
        <id>https://zenn.dev/sindicum/articles/4662c8ffbe4156</id>
        <link href="https://zenn.dev/sindicum/articles/4662c8ffbe4156"/>
        <updated>2022-09-04T12:49:07.000Z</updated>
        <summary type="html"><![CDATA[PythonからPostgreSQLへのアクセスにはpsycopg2を用いる。
バージョン3であるpsycopg3も登場しているが、筆者の環境はApple M1(ARM)のため非対応とのこと（令和4年8月現在）。
https://www.psycopg.org/psycopg3/docs/basic/install.html

 実行環境

Apple M1(macOS Monterery)
Python 3.9.13
PostgreSQL 13.6
psycopg2 2.9.3

psycopg2をインポート、PostgreSQLの接続設定を記述。
import psycopg2
ds...]]></summary>
        <author>
            <name>sindicum</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sentence BERTでウミガメのスープ出題AIを作る]]></title>
        <id>https://zenn.dev/ninjin_umigame/articles/5e79219e994137</id>
        <link href="https://zenn.dev/ninjin_umigame/articles/5e79219e994137"/>
        <updated>2022-09-04T11:30:56.000Z</updated>
        <summary type="html"><![CDATA[背景
ウミガメのスープは、シチュエーションパズルの別名です。同名のタイトルのクイズが有名であることから、シチュエーションパズル全体を指して「ウミガメのスープ」と呼ばれることが一般的です。シチュエーションパズルの定義を以下に示します。

シチュエーションパズルは通常何人かのグループで遊ぶ。一人が問題を出し、他の人はイエス（はい、肯定）・ノー（いいえ、否定）で答えられる質問を出す(場合によっては「関係ありません」などのイエス・ノー以外の答もあり得る)。質問者は、出題者が考えているストーリー、あるいは物を推測して語る。それがすべての謎を説明できたとき、このパズルは解けたことになる。　― W...]]></summary>
        <author>
            <name>人３</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[機械学習に役立つ画像収集ライブラリの紹介]]></title>
        <id>https://zenn.dev/momiji777/articles/52670c84bddf5b</id>
        <link href="https://zenn.dev/momiji777/articles/52670c84bddf5b"/>
        <updated>2022-09-04T10:43:57.000Z</updated>
        <summary type="html"><![CDATA[皆さん、機械学習をするにあたり学習データの収集に苦労したことはないでしょうか。
今回は、学習するにあたり役に立つライブラリ「icrawler」を紹介します。
ライブラリの詳細については、github(@gist
)を確認して頂ければ良いですが、簡単に言えばWebクローラーです。
画像サイトのFlickrだけでなく、Google、Bing、Baiduの検索エンジンも利用することができます。
では、実際にサンプルコードを書いていきます。
まずは、インストールをしましょう。
pip install icrawler
インストールができましたら、コードを書いていきます。
from icrawle...]]></summary>
        <author>
            <name>momiji777</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[最適化について考える (2) — SVM]]></title>
        <id>https://zenn.dev/derwind/articles/dwd-optimization02</id>
        <link href="https://zenn.dev/derwind/articles/dwd-optimization02"/>
        <updated>2022-09-04T10:21:58.000Z</updated>
        <summary type="html"><![CDATA[目的
前回に引き続きという形で今回は SVM（サポートベクターマシン）を扱う。
SVM は何となく本で読んで何となくサポートベクトルと決定境界とのマージンを最大化するように最適化されるといったことを読んでそれなりに納得し、API を叩くことになると思う。結局何が行われているのかさっぱり分からないままになるので、実際に手を動かして計算をしてみたいと思う。

 今回の範囲
3 点からなるデータセットにおいて、決定境界を求める。主問題を設定し、そこから双対問題を求める。これを具体的に眺めることでどういったものであるかを少しでも掴んでいく。

 データセット
3 パターン考えたが以下のものが...]]></summary>
        <author>
            <name>derwind</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[コマンドライン引数の雛形を作ってみた！]]></title>
        <id>https://zenn.dev/kinnkinn/articles/1e2235d485cde8</id>
        <link href="https://zenn.dev/kinnkinn/articles/1e2235d485cde8"/>
        <updated>2022-09-04T08:54:30.000Z</updated>
        <summary type="html"><![CDATA[コマンドライン引数の雛形を作ってみた！

 はじめに
自分がよく使うコマンドの多くはオプションをつけて実行することができ，そのオプションは基本的にどこにつけても認識してくれます．
実はこのようなオプションの判定はコマンドライン引数によって文字列として受け取り，それを処理することによって実現されています．
こんな便利なコマンドライン引数ですが，実装すると結構めんどくさいのでそれを解決するコマンドライン引数の雛形をPythonで作ってみました．

 コマンドライン引数雛形.py
import sys


def printhelp(str):
    print('Erorr:',str...]]></summary>
        <author>
            <name>kinnkinn</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[サーバ側の重い処理の進捗をクライアント側で表示する]]></title>
        <id>https://zenn.dev/e4exp/articles/f1c75f0acf9e59</id>
        <link href="https://zenn.dev/e4exp/articles/f1c75f0acf9e59"/>
        <updated>2022-09-04T05:11:17.000Z</updated>
        <summary type="html"><![CDATA[前提
やりたいこと

クライアント(ブラウザ)からサーバにファイルをアップロードする
サーバ側で何かファイルに処理を行い、進捗をクライアント側で表示する

使用する言語など

クライアント側: TypeScript (React)
サーバ側: Python (Flask), Gunicorn, Redis, Docker


 方針

クライアントはファイルを1回だけPOSTし、進捗を聞くリクエストを定期的にPOSTする
サーバは最初のリクエストを受け取ったワーカーと別のワーカーがリクエストを受け取るので、redis(データベース)に進捗状況を格納しながら変換を進め、進捗リクエストが...]]></summary>
        <author>
            <name>e4exp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【自然言語処理】【Python】有価証券報告書のテキストデータをt-SNEとPlotlyを使って可視化した]]></title>
        <id>https://zenn.dev/robes/articles/c70badd4a1e593</id>
        <link href="https://zenn.dev/robes/articles/c70badd4a1e593"/>
        <updated>2022-09-04T04:54:18.000Z</updated>
        <summary type="html"><![CDATA[はじめに
t-SNEという手法を用いて、高次元の文章ベクトルを低次元に圧縮したうえで、 PythonライブラリーのPlotlyを用いてインタラクティブに可視化してみました。

 t-SNEについて
ディープラーニングの父と呼ばれるジェフリー・ヒントンによって開発されたアルゴリズムです。（2008年発表）
高次元の世界におけるデータ間の距離を条件付き確率で求め、低次元の世界でも同様の確率分布を想定したうえでデータ間の距離を求めにいくものです。
具体的には、高次元・低次元の2つの分布間の距離の指標であるカルバック・ダイムラー情報量をコスト関数として、それを最小化するように低次元データを求...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ABC267 E - Erasing Vertices 2 Python解答例]]></title>
        <id>https://zenn.dev/fjnkt98/articles/2845fd946597c9</id>
        <link href="https://zenn.dev/fjnkt98/articles/2845fd946597c9"/>
        <updated>2022-09-04T04:00:13.000Z</updated>
        <summary type="html"><![CDATA[AtCoder Beginner Contest E - Erasing Vertices 2をPythonで解きます。

 問題
問題文をAtCoderのページより引用します。


 問題文
N頂点M辺の単純無向グラフ（すなわち、自己辺も多重辺もない無向グラフ）が与えられます。i本目の辺は頂点U_iと頂点V_iを結んでいます。頂点iには正整数A_iが書かれています。
あなたは、以下の操作をN回繰り返します。

まだ削除されていない頂点xを選び、「頂点x」と「頂点xを端点に持つ辺全て」を削除する。この操作のコストは、頂点xと辺で直接結ばれていて、かつまだ削除されていない頂点に書かれている...]]></summary>
        <author>
            <name>藤那花多</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ABC267 D - Index × A(Not Continuous ver.) Python解答例]]></title>
        <id>https://zenn.dev/fjnkt98/articles/66dc44813fc64e</id>
        <link href="https://zenn.dev/fjnkt98/articles/66dc44813fc64e"/>
        <updated>2022-09-04T03:35:17.000Z</updated>
        <summary type="html"><![CDATA[AtCoder Beginner Contest 267 D - Index × A(Not Continuous ver.)をPythonで解きます。

 問題
問題文をAtCoderのページより引用します。


 問題文
長さNの整数列A=(A_1,A_2,\dots,A_N)が与えられます。
長さMのAの部分列(連続でなくてもよい)B=(B_1,B_2,\dots,B_M)に対する、\displaystyle \sum_{i=1}^{M} i \times B_iの最大値を求めてください。

 注記
数列の部分列とは、数列から0個以上の要素を取り除いた後、残りの要素を元の順序で連結...]]></summary>
        <author>
            <name>藤那花多</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ABC267 B - Split? Python解答例]]></title>
        <id>https://zenn.dev/fjnkt98/articles/ce7b3cd8b3f8b1</id>
        <link href="https://zenn.dev/fjnkt98/articles/ce7b3cd8b3f8b1"/>
        <updated>2022-09-04T03:12:24.000Z</updated>
        <summary type="html"><![CDATA[AtCoder Beginner Contest 267 B - Split?をPythonで解きます。

 問題
問題文をAtCoderのページより引用します。


 問題文
ボウリングのピンは1から10の番号が付けられており、上から見ると下図のように配置されます。
この図の二つの点線に挟まれた部分を列と呼ぶことにします。
例えば、ピン1, 5とピン3, 9はそれぞれ同じ列に存在します。
いくつかのピンが倒れた状態のうち、特殊なものはスプリットと呼ばれます。
ピンの配置がスプリットであるとは、以下の条件が全て成り立つことを言います。

ピン1が倒れている。
ある二つの異なる列であって、...]]></summary>
        <author>
            <name>藤那花多</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ABC267 C - Index × A(Continuous ver.) Python解答例]]></title>
        <id>https://zenn.dev/fjnkt98/articles/8477e17dd507df</id>
        <link href="https://zenn.dev/fjnkt98/articles/8477e17dd507df"/>
        <updated>2022-09-04T03:12:23.000Z</updated>
        <summary type="html"><![CDATA[AtCoder Beginner Contest 267 C - Index × A(Continuous ver.)をPythonで解きます。

 問題
問題文をAtCoderのページより引用します。


 問題文
長さNの整数列A=(A_1,A_2,\dots,A_N)が与えられます。
長さMのAの連続部分列B=(B_1,B_2,\dots,B_M)に対する、\displaystyle \sum_{i=1}^{M} i \times B_iの最大値を求めてください。

 制約

1 \le M \le N \le 2 \times 10^5
- 2 \times 10^5 \le A...]]></summary>
        <author>
            <name>藤那花多</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonでAWS Lambdaを利用して特定の競走馬がいると自動ツイートする]]></title>
        <id>https://zenn.dev/motokoike/books/ef28866a3835cf</id>
        <link href="https://zenn.dev/motokoike/books/ef28866a3835cf"/>
        <updated>2022-09-03T21:49:08.000Z</updated>
        <summary type="html"><![CDATA[特定の競走馬がいると自動ツイートするTwitter（ツイッター）bot（ボット）をPythonとAWS Lambdaを利用し作成しました。
こちらがそのTwitterアカウントです。

https://twitter.com/MeishoBot

こちらのTwitterBOTの作成方法・実際に稼働しているソースコード、AWS Lambdaの設定を解説します。]]></summary>
        <author>
            <name>元小池</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Perlの条件分岐 - ワンポイント解説【Python,Ruby,PHP,Java,JavaScriptとの違いは?】]]></title>
        <id>https://zenn.dev/yuki_kimoto/articles/2a1b4e4d276b9a</id>
        <link href="https://zenn.dev/yuki_kimoto/articles/2a1b4e4d276b9a"/>
        <updated>2022-09-03T21:46:50.000Z</updated>
        <summary type="html"><![CDATA[Perlの条件分岐 - ワンポイント解説【Python,Ruby,PHP,Java,JavaScriptとの違いは?】
https://www.youtube.com/watch?v=5L-ibfbnQSg]]></summary>
        <author>
            <name>yuki_kimoto</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Elastic Beanstalk 環境にDjangoアプリの管理者ユーザーを作成する]]></title>
        <id>https://zenn.dev/seito/articles/d11c0c9c85265a</id>
        <link href="https://zenn.dev/seito/articles/d11c0c9c85265a"/>
        <updated>2022-09-03T19:53:31.000Z</updated>
        <summary type="html"><![CDATA[概要
Django(REST framework) + PostgreSQLのアプリケーションをElastic Beanstalk環境にデプロイしたものの、管理画面にアクセスできない...というか管理者アカウント生成で詰まったのでその備忘録に。
ローカル環境では python manage.py createsuperuser で管理者ユーザーを生成できる。
が、そのあとでデプロイするだけだと管理画面にアクセスはできても、ログインができない。
結論、重要な点だけ抜き出すと下記のファイルをイジる必要がある

./.ebextensions/django.config
./{myapp}...]]></summary>
        <author>
            <name>堀口セイト</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【自然言語処理】Doc2Vecで文章ベクトルを算出し、類似文書検索をやってみた]]></title>
        <id>https://zenn.dev/robes/articles/0b9034cfa3b66d</id>
        <link href="https://zenn.dev/robes/articles/0b9034cfa3b66d"/>
        <updated>2022-09-03T09:33:02.000Z</updated>
        <summary type="html"><![CDATA[はじめに
以前、BERTを使って歌詞の文章ベクトルを算出し可視化する試みを行いました。BERTは優秀なんですが、入力できるトークン数が512に限られるため、長い文章のベクトル算出には向いていないんですよね。
 
今回は、上場企業約2,500社が有価証券報告書で書いている割と長文の文章について、Doc2Vecを使って文章ベクトルを算出し、あわせて、文章ベクトルから類似文書を検索してみました。
個人的には、BERTよりもDoc2Vecの方が納得感のいく結果を出している気がしています。
ここでは、文章ベクトルの算出方法・類似文書検索方法について、お伝えしていきたいと思います。
 
http...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[ABC266] AtCoder Beginner Contest 266（A-F 問題 Python）]]></title>
        <id>https://zenn.dev/kiwamachan/articles/e6e339a7532724</id>
        <link href="https://zenn.dev/kiwamachan/articles/e6e339a7532724"/>
        <updated>2022-09-03T09:25:23.000Z</updated>
        <summary type="html"><![CDATA[AtCoder Beginner Contest 266 の復習記録です。難易度が青色レベル以下の、A問題からF問題までをやります。使用言語はPythonです。

 A問題
https://atcoder.jp/contests/abc266/tasks/abc266_a

 考え方
文字列の長さと、中央の文字のインデックスを比較してみます。



文字列の長さ
中央の文字




3
1


7
3


15
7


N
N//2




 提出コード
S = input()
n = len(S)//2
print(S[n])

 B問題
https://atcoder.jp/cont...]]></summary>
        <author>
            <name>kiwamachan</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pythonコンソールで矢印（←↑など）が効かない場合の対処法]]></title>
        <id>https://zenn.dev/takamin55/articles/8b119e13bf9f09</id>
        <link href="https://zenn.dev/takamin55/articles/8b119e13bf9f09"/>
        <updated>2022-09-03T09:18:59.000Z</updated>
        <summary type="html"><![CDATA[pythonをコンソール上で実行しているときに、カーソル移動やコマンド履歴をたどるために矢印を入力したところ、
[[D^
みたいな感じで（うろ覚え）カーソルが移動してくれない場合の対処法。
以下をインストール。※なおUbuntu 20.04です。
$ pip install gnureadline
以下はだめでした！！
こちらの方法だとpythonコマンド自体が動かなくなった。（Cか何かの方でエラーになる）
$ sudo apt install libreadline-dev
$ pip install readline
公式の方にも非推奨だと書いてある。
この方法を推奨する記事が多数出...]]></summary>
        <author>
            <name>takamin55</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[オフラインでPythonライブラリをインストールする方法]]></title>
        <id>https://zenn.dev/momiji777/articles/df333c6f0f6c2d</id>
        <link href="https://zenn.dev/momiji777/articles/df333c6f0f6c2d"/>
        <updated>2022-09-03T04:03:47.000Z</updated>
        <summary type="html"><![CDATA[会社や学校でPythonを利用する際、オフライン環境やプロキシの問題でライブラリをインストールできない状況に遭遇した方もいると思います。
本動画では、そのような状況を回避しながらインストールする方法をご紹介します。
https://youtu.be/w2U6B5AXI7A]]></summary>
        <author>
            <name>momiji777</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[BiopythonによるPDBファイル解析]]></title>
        <id>https://zenn.dev/pluie/articles/20220902-pdb-analysis-by-biopython</id>
        <link href="https://zenn.dev/pluie/articles/20220902-pdb-analysis-by-biopython"/>
        <updated>2022-09-02T16:18:32.000Z</updated>
        <summary type="html"><![CDATA[はじめに
本記事では、Bioinformaticsに用いられるPythonライブラリであるBiopythonを用いて、PDBファイルを解析する基本的な方法について記す。

 対象とするPDBファイル
PDB ID=2A0Lを対象として解析を試みる。ちなみに、このPDBを選択した理由は特にない。

 BiopythonによるPDBファイル解析

 Structure
PDBファイルはgzip圧縮されているため、以下のように
import gzip
from Bio.PDB import PDBParser
    parser = PDBParser()
    with gzip.o...]]></summary>
        <author>
            <name>pluie</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Algebraic Effectsで実現するシンプルなDI]]></title>
        <id>https://zenn.dev/catminusminus/articles/d2a72b522c9554</id>
        <link href="https://zenn.dev/catminusminus/articles/d2a72b522c9554"/>
        <updated>2022-09-02T15:43:22.000Z</updated>
        <summary type="html"><![CDATA[成果物
まずは成果物から紹介します。これが動きます。
from typing import Protocol

class Animal:
    def __init__(self):
        self._sound = use(AnimalSound)

    def make_sound(self):
        self._sound.make_sound()


class AnimalSound(Protocol):
    def make_sound(self):
        ...


class CatSound:
    def make_so...]]></summary>
        <author>
            <name>Catminusminus</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[モールス信号メッセンジャーデバイス : mobus]]></title>
        <id>https://zenn.dev/mimoc/articles/a7ad0b020c55b3</id>
        <link href="https://zenn.dev/mimoc/articles/a7ad0b020c55b3"/>
        <updated>2022-09-02T15:40:22.000Z</updated>
        <summary type="html"><![CDATA[モールス信号メッセンジャーデバイス : mobus


 モールス信号を入力してメッセージを送り合う、'mobus'というデバイスを作成しました。

 'mobus'で何ができるの？


mobus同士で、インターネットを通じてメッセージのやりとりを行う事ができます。


mobusからLINEへメッセージを送る事ができます。


LINEにメッセージを送信する様子




mobus同士でのメッセージのやり取りの様子




Instagramでも動作する様子をUPしています！


mobusの操作方法




 作ろうと思ったきっかけ
現代ではアマチュア無線を行なっている方以外だ...]]></summary>
        <author>
            <name>mimoc</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pythonのasyncio.Queueを使ってみる（非同期処理）]]></title>
        <id>https://zenn.dev/uekou/articles/dbd52f80aec49a</id>
        <link href="https://zenn.dev/uekou/articles/dbd52f80aec49a"/>
        <updated>2022-09-02T15:14:58.000Z</updated>
        <summary type="html"><![CDATA[やること
Pythonで非同期処理を行うためのモジュールであるasyncioに含まれるasyncio.Queueを利用して、簡単なキューのput/getプログラムを作成します。
今回は非同期関数としてキューにデータを投入する役割をする関数をproducer、キューからデータを取得して処理する役割をする関数をconsumerとします。
「とりあえずasyncio.Queueを使う」ことを目的として、producer/consumerの仕様はそれぞれ下記のようにします。
producer
計15個のタスクを順番に投入する。
consumer
その時点でキューに存在するタスクを取得し、fo...]]></summary>
        <author>
            <name>uekou</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【自然言語処理】形態素解析のためのトークナイザー（関数）を作る]]></title>
        <id>https://zenn.dev/robes/articles/95a284323eba9b</id>
        <link href="https://zenn.dev/robes/articles/95a284323eba9b"/>
        <updated>2022-09-02T12:48:57.000Z</updated>
        <summary type="html"><![CDATA[はじめに
Python初心者のわたくしが偉そうなことは言えませんが、自然言語処理においては、形態素解析が命と思っています。
 
mecab用の 優秀な辞書NEologd を使って、形態素解析のためのトークナイザー(関数) を作ったので、今後、自分が形態素解析をする際に使うためにも、記事として残しておきたいと思います。
 
具体的には、テキストを与えたら、

記号類を削除
数字を0にする
ストップワードを除外する
そのうえで、名詞・動詞・形容詞だけを抽出する

というトークナイザー（関数） になります。
NEologdは週に2回以上更新されるなど、新語・固有表現に強い辞書として定評があ...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【自然言語処理】【Python】有価証券報告書の非財務情報（テキストデータ）を取得する]]></title>
        <id>https://zenn.dev/robes/articles/4ab5a7f992000d</id>
        <link href="https://zenn.dev/robes/articles/4ab5a7f992000d"/>
        <updated>2022-09-02T10:15:52.000Z</updated>
        <summary type="html"><![CDATA[0. はじめに
上場企業が作成する有価証券報告書には、企業の経営成績がどうなっているのか？といった財務情報に加え、企業として何を課題と捉えどう取り組んでいくのか？といった非財務情報の記載があります。
最近は、気候変動リスクや人権問題への対応など企業の社会的責任の遂行に注目が集まる中、機関投資家が企業を評価する目線も、短期的な視点である財務情報から、中長期的な視点である非財務情報にうつりつつあります。
 
これからの時代、財務情報（数値データ）ではなく、非財務情報（テキストデータ）の分析ニーズが高まることが予想されます。こうした点も踏まえ、まことに僭越ながら、Pythonを使って有価...]]></summary>
        <author>
            <name>osn_Lofi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pyenvを導入してPython開発環境を整える]]></title>
        <id>https://zenn.dev/takaha4k/articles/5114cd4bd4d208</id>
        <link href="https://zenn.dev/takaha4k/articles/5114cd4bd4d208"/>
        <updated>2022-09-02T08:33:30.000Z</updated>
        <summary type="html"><![CDATA[pyenvとは
PCに異なるバージョンのPythonを容易にインストールできる。

 やること
pyenvをWSL2(Ubuntu22.4)に整える。

 pyenvをインストール
WSLの場合
curl https://pyenv.run | bash
Macの場合
brew update
brew upgrade
brew install pyenv
環境変数を追記
※Macの場合、標準がbashでなくてzshなので、vim ~/.zshrc
vim ~/.bashrc
export PATH="$HOME/.pyenv/bin:$PATH"
eval "$(pyenv init...]]></summary>
        <author>
            <name>takaha4k</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[NumPy] ガウス過程回帰モデルのカーネルで遊ぶ]]></title>
        <id>https://zenn.dev/mory22k/articles/e3222d02724251</id>
        <link href="https://zenn.dev/mory22k/articles/e3222d02724251"/>
        <updated>2022-09-02T07:06:58.000Z</updated>
        <summary type="html"><![CDATA[ガウス過程回帰モデルにおけるカーネルは、回帰関数の形状を決定する非常に重要な要素です。この記事では、Primitive Kernels と呼ばれるカーネルのファミリーを使って、それらを比較していきます。
import numpy as np
from matplotlib import pyplot as plt

 ガウス過程回帰モデル
次の記事で実装したモデルを改良して使用します。
https://zenn.dev/mory22k/articles/1186466adfbe6f
class GaussianProcessRegressor:
    def __init__(self...]]></summary>
        <author>
            <name>mory22k</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[#30DaysOfStreamlit をやってみた]]></title>
        <id>https://zenn.dev/tmasuo/articles/8ea1a74cc3294d</id>
        <link href="https://zenn.dev/tmasuo/articles/8ea1a74cc3294d"/>
        <updated>2022-09-02T02:40:48.000Z</updated>
        <summary type="html"><![CDATA[🎈 Streamlit とは？
Python だけ でアプリケーションを作成するためのフレームワークです。
https://streamlit.io/
従来データを扱う Web アプリを作成しようとすると、

フロントの言語（HTML, JS およびライブラリ群）
バックエンドの言語（例えば Java, データアクセスに SQL）

のように様々な言語使う必要がありましたが、Python のみで実現できます。なのでアプリ作成の敷居がだいぶ低くなるのではないかと思います。
また Python だと Pandas をはじめとするデータをハンドリングするライブラリはもちろん、データサイエン...]]></summary>
        <author>
            <name>tmasuo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[仮想通貨のOHLC時系列データ取得方法]]></title>
        <id>https://zenn.dev/dmn/articles/d5351f987eed9c</id>
        <link href="https://zenn.dev/dmn/articles/d5351f987eed9c"/>
        <updated>2022-09-01T14:37:41.000Z</updated>
        <summary type="html"><![CDATA[色々とローカルで作業していたものを備忘のために書き連ねていこうというモチベーションで投稿します
半年後くらいに「あれどうやるんだっけ？」みたいになった際に振り返るための記事であり、読みにくいところあるかと思いますがご容赦ください

 利用サービス

https://docs.cryptowat.ch/rest-api
注意点

rate limitがあるのでやたらめったらリクエスト飛ばすと怒られる

https://docs.cryptowat.ch/rest-api/rate-limit






 サンプルコード
from datetime import datetime
from...]]></summary>
        <author>
            <name>dmn</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[boto3をlocalstack環境でpytestする]]></title>
        <id>https://zenn.dev/koya6565/articles/e72ce1b418308b</id>
        <link href="https://zenn.dev/koya6565/articles/e72ce1b418308b"/>
        <updated>2022-09-01T13:22:55.000Z</updated>
        <summary type="html"><![CDATA[先月localstackがついにv1.0になりました。
Announcing LocalStack 1.0 General Availability!
上記ブログを読むとGAに伴う機能強化も色々あり、


LocalStack Extensionsを使うとLocalStackの応答をフックして任意のコードを実行できる
データの永続性を定義しやすくなった
ロギング強化

など、他にもLocalStack自体の開発サイクルを改善したことにも触れています。
これから自分もLocalStackを使う機会は増えそうだな、と再認識したので今回はboto3をpytestする単純なものから。

 前提
...]]></summary>
        <author>
            <name>T.S</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PythonでAWS開発環境を整える]]></title>
        <id>https://zenn.dev/takaha4k/articles/c522c98df1c65b</id>
        <link href="https://zenn.dev/takaha4k/articles/c522c98df1c65b"/>
        <updated>2022-09-01T08:58:28.000Z</updated>
        <summary type="html"><![CDATA[VSCodeの設定




 pre-commitを導入する
pre-commit公式
インストール
pip install pre-commit
設定ファイル作成
pre-commit sample-config > .pre-commit-config.yaml
git反映
pre-commit install
設定を記述
repos:
- repo: https://github.com/pre-commit/pre-commit-hooks
  rev: v3.3.0
  hooks:
  - id: check-added-large-files
  - id: ch...]]></summary>
        <author>
            <name>takaha4k</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[gspread で Python から Google スプレッドシートを扱えるようにするまで]]></title>
        <id>https://zenn.dev/yamagishihrd/articles/2022-09_01-google-spreadsheet-with-python</id>
        <link href="https://zenn.dev/yamagishihrd/articles/2022-09_01-google-spreadsheet-with-python"/>
        <updated>2022-09-01T00:32:05.000Z</updated>
        <summary type="html"><![CDATA[記事概要
Python から Google スプレッドシートを操作するアプリケーションを作成する機会があったので、必要な設定などを備忘のため記事化したものです。
本記事では、以下のようなスプレッドシートを用意して、対象シートのすべての値を取得する所まで実施します。

print(spreadsheet.sheet1.get_all_values())

# [['Hello, gspread!']]

 Google Cloud Platform 側の設定

 プロジェクトの作成
任意の名称でプロジェクトを作成します。（本記事では DEMO-gspread としています）


 AP...]]></summary>
        <author>
            <name>Hiroki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Stable DiffusionをVSCode + Jupyter Notebookで動かす]]></title>
        <id>https://zenn.dev/thetalemon/articles/ecd01b2f9552e6</id>
        <link href="https://zenn.dev/thetalemon/articles/ecd01b2f9552e6"/>
        <updated>2022-09-01T00:29:45.000Z</updated>
        <summary type="html"><![CDATA[これは何

Jupyterをいれたまえという天の声を受けて入れたらStable Diffusionの実行とかみ合わせがとても良いので布教するための記事


 この記事で説明すること

StableDiffusionをAnaconda + VSCode + Jupyter Notebook構成で動かす方法
前段の環境構築は引用記事だけご紹介
後半のVSCode登場してからがこの記事における説明内容


 この構成を推す理由

Stable Diffusionではpromptを書き換えて何度も実行することになる

jupyterを導入すると、それがとてもやりやすい


Anacondaは...]]></summary>
        <author>
            <name>まなさす</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[aiohttpを使って範囲（Range）リクエストを送信する]]></title>
        <id>https://zenn.dev/kleamp1e/articles/202208-aiohttp-get-range</id>
        <link href="https://zenn.dev/kleamp1e/articles/202208-aiohttp-get-range"/>
        <updated>2022-08-31T15:09:37.000Z</updated>
        <summary type="html"><![CDATA[はじめに
HTTP経由で大きなファイルの一部を取得したい場合、HTTP範囲（Range）リクエストを使うことで実現できます。
HTTP範囲リクエストについては、MDNが詳しいです。
https://developer.mozilla.org/ja/docs/Web/HTTP/Range_requests
今回は、Pythonの非同期HTTPライブラリaiohttpを使って、HTTP範囲リクエストを送信してみました。

 インストール
aiohttpはpipコマンドでインストールできます。
pip install aiohttp
https://pypi.org/project/aio...]]></summary>
        <author>
            <name>kleamp1e</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Raspberry Pi + VSC(Visual Studio Code)]]></title>
        <id>https://zenn.dev/technicarium/articles/42f3970be5d716</id>
        <link href="https://zenn.dev/technicarium/articles/42f3970be5d716"/>
        <updated>2022-08-31T12:54:20.000Z</updated>
        <summary type="html"><![CDATA[Pythonの仮想環境も無事作成できたのでVSC(Visual Studio Code)をインストールしました。

 VSCインストール
sudo apt install code

 VSC起動
ターミナルからコマンド起動だけではなく「ラズベリーパイアイコン→プログラミング→Visual Studio Code」で起動可能でした

 日本語の言語パックのインストール
初回起動時に日本語の言語パックのインストール案内が右下に表示されるので指示に従うだけでインストールされました。

 python用拡張機能インストール
左側の「拡張機能」アイコンをクリックし”python”でキーワード検索...]]></summary>
        <author>
            <name>テク二カリウム</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[40代プログラミング初心者がpython始めて半年！独学で勉強が続いている理由と読んだ本]]></title>
        <id>https://zenn.dev/usagipy/articles/01088d357e96a8</id>
        <link href="https://zenn.dev/usagipy/articles/01088d357e96a8"/>
        <updated>2022-08-31T12:11:21.000Z</updated>
        <summary type="html"><![CDATA[友達がpythonでPCゲームのレベル上げツールを作っていた
それを聞いて、pythonって便利なのね。と思いその後色々あってプログラミングを勉強することにした
プログラマー35歳までみたいな世の中で40代おそすぎ！ってあるかもしれない
PCがあって、無料の教材はネットに転がってるし、本もたくさんあるし、挑戦するのは無料だし2022年の1月ぐらいから勉強を始めた
入門書って成果物がないからつまらないなと思ってそれ以外になんかないかなって本屋さんをふらふらしてたら

 python自動化 みたいな書籍がいっぱいあることに気がついた
なるほど、もしかしたら仕事楽になるんじゃないかそんな思いか...]]></summary>
        <author>
            <name>usagipy</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Python] 条件付きwith・複数リソースの一括解放]]></title>
        <id>https://zenn.dev/shimat/articles/7bd35eeab37210</id>
        <link href="https://zenn.dev/shimat/articles/7bd35eeab37210"/>
        <updated>2022-08-31T10:55:50.000Z</updated>
        <summary type="html"><![CDATA[筆者の環境・参考文献

Python 3.10

本記事の内容は3.7以降なら使えるはず (nullcontext)



一言でいえば、contextlibを勉強しなければと思いました。
内容は以下をただ書き直しているだけになりますが:

https://stackoverflow.com/questions/27803059/conditional-with-statement-in-python
https://docs.python.org/3/library/contextlib.html#replacing-any-use-of-try-finally-and-flag-...]]></summary>
        <author>
            <name>shimat</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[FastAPI][循環インポート回避]エラーハンドラーを別ファイルに分ける]]></title>
        <id>https://zenn.dev/optfit/articles/20bc2852459bdf</id>
        <link href="https://zenn.dev/optfit/articles/20bc2852459bdf"/>
        <updated>2022-08-31T08:30:41.000Z</updated>
        <summary type="html"><![CDATA[こんにちは。Opt Fit見習いエンジニアのりょりょりょです。
弊社では，FastAPIを使用しています。
例外処理のコードを別ファイルに分けるのに少し躓いたのでまとめます。

 やりたいこと

FastAPIにおいて，ハンドラーを使ってエラー処理
メイン処理，ハンドラー処理，エラー処理をそれぞれ別のファイルに分ける

その際に循環インポートを避ける


 なぜやりたいか

１つのファイルに全てまとめると，ファイルが肥大化していき，わかりづらくメンテナンス性も低いため

例えば，APIのエンドポイントでもAPIRouterを使用することで複数ファイルに分割することができます。




 ...]]></summary>
        <author>
            <name>OptFit</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[配信画面に音声認識の字幕と翻訳字幕を出した話]]></title>
        <id>https://zenn.dev/nukokoi/articles/98817502dbf05a</id>
        <link href="https://zenn.dev/nukokoi/articles/98817502dbf05a"/>
        <updated>2022-08-31T06:37:15.000Z</updated>
        <summary type="html"><![CDATA[環境

Windows 10 Pro
Visual studio code
python 3.9.13


 音声認識

vosk
alphacep/vosk-api: Offline speech recognition API for Android, iOS, Raspberry Pi and servers with Python, Java, C# and Node


 翻訳

deepl free API
DeepLcom/deepl-python: Official Python library for the DeepL language translation A...]]></summary>
        <author>
            <name>nukokoi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[インデックスファンドの買い方とパフォーマンスの関係を検証してみた]]></title>
        <id>https://zenn.dev/kazuma_soon/articles/d66b3b86b668b2</id>
        <link href="https://zenn.dev/kazuma_soon/articles/d66b3b86b668b2"/>
        <updated>2022-08-31T03:01:36.000Z</updated>
        <summary type="html"><![CDATA[背景

「インデックスファンドに投資する」というのが、投資の王道となってきました。
基本的には「毎月定額を積み立てる」という買い方が主流になっています。
ただ、「株価が下がれば買い増しする」だったり、「先月の結果で柔軟に購入額を変える」など様々な戦略があるかと思います。
私自身、誰かの「株安はバーゲンだ！！！」という言葉を思い出し、今回の検証を行いました。
※結果に関しては、へっぽこエンジニアである私の実装です。
※「結果は間違いだ！！！怪しい！！！信じられない！！！」という前提でお願いします。。。
作成コード

 結果

- 前提
　　　　- emaxis slim全世界株式の標準...]]></summary>
        <author>
            <name>kazuma-soon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[G5インスタンスをTerraformでつくって、10分でStableDiffusionを動かす]]></title>
        <id>https://zenn.dev/tomoyamachi/articles/bc9c7ff7e0e126</id>
        <link href="https://zenn.dev/tomoyamachi/articles/bc9c7ff7e0e126"/>
        <updated>2022-08-31T02:31:45.000Z</updated>
        <summary type="html"><![CDATA[想定している人

ローカルマシンで実行したくない/できない
Pythonを動かすための環境構築は最低限の手間で済ませたい


 最初に
StableDiffusionという、文字から画像を自動生成してくれるやつが何やらすごいという話を聞いたので週末で動かしてみた。
ローカル環境に機械学習をする環境は作ってないし、確実に大量のディスク容量が必要になる。CUDAとかのインストールも大変そうだったので、EC2インスタンスで最初から設定してあるAMIを使うことに決めた。

 事前準備: GPUが利用できるインスタンスのQuotaを引き上げ
今回、GPUを利用するということでG5インスタンスを...]]></summary>
        <author>
            <name>Tomoya Amachi</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Raspberry Pi OS + Pyenv + Pipenvで仮想環境作成]]></title>
        <id>https://zenn.dev/technicarium/articles/ae2df596870246</id>
        <link href="https://zenn.dev/technicarium/articles/ae2df596870246"/>
        <updated>2022-08-30T14:24:39.000Z</updated>
        <summary type="html"><![CDATA[Pyenvを使用してPythonの複数バージョンを切り替えが可能になったので次は開発毎それぞれの開発環境を作成・管理するためにPipenvで開発環境を作成することにしました。

 Pyenvのインストール
https://zenn.dev/technicarium/articles/00b32d390e82ec

 環境

 OS
>cat /etc/os-release 
PRETTY_NAME="Debian GNU/Linux 11 (bullseye)"
NAME="Debian GNU/Linux"
VERSION_ID="11"
VERSION="11 (bullsey...]]></summary>
        <author>
            <name>テク二カリウム</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【Python3】コーディングテスト用チートシート（練習問題付き）]]></title>
        <id>https://zenn.dev/yutohub/articles/1dea6baae5a2d4</id>
        <link href="https://zenn.dev/yutohub/articles/1dea6baae5a2d4"/>
        <updated>2022-08-30T13:48:33.000Z</updated>
        <summary type="html"><![CDATA[導入
コーディングテストに必要なアルゴリズムを図でやさしく説明してみた！ ではアルゴリズムの紹介をしたのですが、実際にアルゴリズムを使って問題を解くところまではできませんでした。
そこで、この記事ではPython3でコーディングテストや競技プログラミングに取り組むときに、よく使うアルゴリズムの実装や標準ライブラリーの使い方をまとめました。
さらに、練習問題を通してアルゴリズムを使って問題を解く経験を積めるようになっています。

おまけ程度ですが自分の解答をつけておいたので、よかったら参考にしてください。

この記事では、以下のような人を対象にしています。
基本的なアルゴリズムについて...]]></summary>
        <author>
            <name>yutohub</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[[Stable-Diffusion] 2022 M2 Macbook Air (mem24GB) で試す（2022/8/30版）]]></title>
        <id>https://zenn.dev/sora0513/articles/c2ca31642ab115</id>
        <link href="https://zenn.dev/sora0513/articles/c2ca31642ab115"/>
        <updated>2022-08-30T11:44:50.000Z</updated>
        <summary type="html"><![CDATA[（恐らく初 zenn にチャレンジ）
今流行の Stable-Diffusion を手元の 2022 M2 Macbook Air (mem24GB) で試してみたのでメモ。
学習モデルはsd-v1-4.ckptを使用して、下記のコマンドで1枚できるのに約２分程度かかってました。
$ python scripts/txt2img.py --prompt "a photograph of an cat into a bottle" --plms


 参考リンク

主に下記の記事を参考に環境構築。

https://qiita.com/reopa_sharkun/items/0f7a03b...]]></summary>
        <author>
            <name>Takafumi Kawano</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[制限ボルツマンマシンの基礎 ～推定編～]]></title>
        <id>https://zenn.dev/kaityo256/articles/boltzmann_machine2</id>
        <link href="https://zenn.dev/kaityo256/articles/boltzmann_machine2"/>
        <updated>2022-08-30T10:02:18.000Z</updated>
        <summary type="html"><![CDATA[はじめに
機械学習で用いられるボルツマンマシン、特に制限ボルツマンマシン(Restricted Boltzmann Machine, RBM)の解説その2です。その1の続きなので、そちらを見てから読んでください。

 前回までのあらすじ
ぼっち飯のDaveは、いつも学食前のテラスでお弁当を食べていますが、同じクラスのAliceとBobが学食をよく利用していることに気づきます。しかし、AliceとBobは同時に現れることは少ないようです。AliceとBobは仲が悪いのでしょうか？

そこでDaveは239日にわたって二人を観察し、AliceとBobが学食に来た日、来ていない日の統計を取...]]></summary>
        <author>
            <name>ロボ太</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS Sagemaker Studioで独自Containerを使う-後編-]]></title>
        <id>https://zenn.dev/ykiki/articles/a2f3cffa8116d1</id>
        <link href="https://zenn.dev/ykiki/articles/a2f3cffa8116d1"/>
        <updated>2022-08-30T07:02:49.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事はAWS Sagemaker Studioで独自Containerを使う-前編-とAWS Sagemaker Studioで独自Containerを使う-中編-の続きです。こちらを読んでいない方はそちらからどうぞ。

 学習スクリプト
さて、前の記事でDockerfileのビルドを行いました。ここからそのコンテナを使用して学習を行います。
初めに入力データや出力先、containerイメージを指定します。

train.ipynd
import boto3
import sagemaker
from sagemaker import get_execution_ro...]]></summary>
        <author>
            <name>Ykiki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[python parser リファレンス]]></title>
        <id>https://zenn.dev/hipapa/articles/89650a160a3a6e</id>
        <link href="https://zenn.dev/hipapa/articles/89650a160a3a6e"/>
        <updated>2022-08-30T02:18:58.000Z</updated>
        <summary type="html"><![CDATA[TL;DR

parserメモ


 通常のparser

 parser.py
from argparse import ArgumentParser


def parse_args():
    parser = ArgumentParser(description='')
    parser.add_argument('env', # 引数名、--なしの場合は必須、ありの場合は任意
                        choices=['prd', 'stg', 'dev'], # 引数の選択肢
                        type=str,...]]></summary>
        <author>
            <name>hipapa</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[# Python：メモリーリークの探し方3選]]></title>
        <id>https://zenn.dev/ykesamaru/articles/bd403aa6d03100</id>
        <link href="https://zenn.dev/ykesamaru/articles/bd403aa6d03100"/>
        <updated>2022-08-30T01:53:03.000Z</updated>
        <summary type="html"><![CDATA[Python：メモリーリークの探し方3選
探すのが難しいと言われるメモリーリーク。先日あるプロジェクトのメモリーリークをFixしましたのでその時に使用した3つの方法をご紹介します。

 1. Memory_leak
まず拙作のMemory_leakからご紹介します。
https://github.com/yKesamaru/Memory_leak

Output the result of the tracemalloc module with formatted.


 使用例

 書き方
from memory_leak import Memory_leak
m = Memory...]]></summary>
        <author>
            <name>yKesamaru</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[BeautifulSoupでxml:id属性を与える方法]]></title>
        <id>https://zenn.dev/nakamura196/articles/ed3c614b08b0c4</id>
        <link href="https://zenn.dev/nakamura196/articles/ed3c614b08b0c4"/>
        <updated>2022-08-29T23:43:58.000Z</updated>
        <summary type="html"><![CDATA[BeautifulSoupでxml:id属性を与える方法の備忘録です。
以下の方法ではエラーが発生してしまいます。
from bs4 import BeautifulSoup
soup = BeautifulSoup(features="xml")
soup.append(soup.new_tag("p", abc="xyz", xml:id="abc"))
print(soup)
以下のように記述すると正しく実行できました。
from bs4 import BeautifulSoup
soup = BeautifulSoup(features="xml")
soup.append(so...]]></summary>
        <author>
            <name>nakamura196</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【公開】Stable Diffusionで美しい女性のポートレートを描くprompt(呪文)を公開するチュートリアル🚀【入門編】]]></title>
        <id>https://zenn.dev/hagakun_dev/articles/b178e669b2dbe0</id>
        <link href="https://zenn.dev/hagakun_dev/articles/b178e669b2dbe0"/>
        <updated>2022-08-29T22:03:00.000Z</updated>
        <summary type="html"><![CDATA[せっかく描くなら美しい女性を描きたい！

https://twitter.com/hagakun_yakuzai/status/1564240690451603456?s=20&t=8049moKKtlOa6F1pUxXzDA
Stable Diffusionは歴史上最も重要なAIアートモデルだと言われています。
👆の画像は全てStable Diffusionを使って描いた女性たちです。No Named Womensですが、彼女たちは本当に美しい。
Stable Diffusionにはたくさんの導入記事があり、準備万端！って方が非常に多いと思いますが、いざ描こう！と思ったとき...]]></summary>
        <author>
            <name>はがくん@薬剤師のなかではコード書くの好き</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[【図解】kerasのサンプルデータセット7選まとめ]]></title>
        <id>https://zenn.dev/nekoallergy/articles/keras-datasets</id>
        <link href="https://zenn.dev/nekoallergy/articles/keras-datasets"/>
        <updated>2022-08-29T09:00:01.000Z</updated>
        <summary type="html"><![CDATA[はじめに
keras に含まれている 7 つのデータセットについて紹介します。
それぞれのデータセットについて、データ数や種類についてまとめました。
機械学習をする際の参考にしてください。

 keras とは？

keras とは、深層学習フレームワークの 1 つです。
keras を使用することで、数学的な難しい部分をゼロから開発することなく、比較的短いソースコードで人工知能を作ることができます。
keras は、Google の深層学習フレームワーク「tensorflow」をインストールすることで使えるようになります。tensorflow の中に keras が同梱されていま...]]></summary>
        <author>
            <name>NekoAllergy</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS Sagemaker Studioで独自Containerを使う-中編-]]></title>
        <id>https://zenn.dev/ykiki/articles/a4cf45684e3382</id>
        <link href="https://zenn.dev/ykiki/articles/a4cf45684e3382"/>
        <updated>2022-08-29T07:51:05.000Z</updated>
        <summary type="html"><![CDATA[はじめに
この記事はAWS Sagemaker Studioで独自Containerを使う-前編-の続きです。
この記事を見ていない方はそちらからどうぞ。

 IAMロールの設定
新しくsagemaker用のIAMロールを作成します。ここではSagemakerExcutionRoleという名前で作成します。（名前は適宜変更してください）
まず初めに、「許可を追加」からポリシーをアタッチを選択して、[AmazonSageMakerFullAccess]を追加します。

その後、codebuildのアクセス許可を含める必要があります。
ここでは[build-and-push-contai...]]></summary>
        <author>
            <name>Ykiki</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python簡易リファレンス(メモ)]]></title>
        <id>https://zenn.dev/scirexs/articles/037bab6bf6f892</id>
        <link href="https://zenn.dev/scirexs/articles/037bab6bf6f892"/>
        <updated>2022-08-29T06:26:42.000Z</updated>
        <summary type="html"><![CDATA[自分用メモですが誰かの役に立てば。

 公式リファレンス


Python latest stable release document

組み込み関数
組み込み定数
組み込み型
組み込み例外




 演算

 演算子
演算子の優先順位
x割るyの商と剰余を考えた時、x = (x // y) * y + x % y となる値が返却される。(マイナス値の演算結果は直感的でない)



演算種類
記法




代入, 四則, べき乗
=, +, -, *, /, **


商と剰余
//, %


要素結合
+


比較
==, !=, <, >, <=, >=, ...]]></summary>
        <author>
            <name>scirexs</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dockerを用いたDiscordBOTの環境構築をGCE上でやってみた]]></title>
        <id>https://zenn.dev/manntera/articles/97a39d8d6d9890</id>
        <link href="https://zenn.dev/manntera/articles/97a39d8d6d9890"/>
        <updated>2022-08-28T17:30:50.000Z</updated>
        <summary type="html"><![CDATA[注意点
まんてらはバックエンド系の経験が非常に薄いです！(なんならGCPは初経験)
参考にする時は気を付けて下さい！

 何するの？
Google Compute Engine上で、DiscordのBOTをDockerを使って動作させてみたい！
とりあえず、Discordサーバーのテキストチャンネルで何か発言したらその内容をオウム返しするBOTを作って見る！

 ざっくり何したの？

 Discordでの操作

アプリケーションを作成する
BOTの設定をする
OAuth2の設定をして任意のサーバーにBOTを突っ込む
アクセストークンを得る


 GCPでの操作

Google Clo...]]></summary>
        <author>
            <name>まんてらスタジオ</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[理解して覚えるpython ～import編～]]></title>
        <id>https://zenn.dev/ama_c/articles/43bd4171a9855d</id>
        <link href="https://zenn.dev/ama_c/articles/43bd4171a9855d"/>
        <updated>2022-08-28T15:28:38.000Z</updated>
        <summary type="html"><![CDATA[はじめに
僕はこれまで python をなあなあで触ってきたので，「あれ，このimportの仕方っていけるんだっけ」と毎回調べています．そんな自分とおさらばするための記事です．
嘘がありましたらご教授いただければ幸いです．
!
python2系と3系とでルールが大きく異なり，3系であっても3.3以降とそれ以前とではルールが異なります．本記事では，2系と3.3以前の違いにも触れつつ，3.3以降で適用されるルールを確認していきます．

本記事では，pythonのインポート方法である，「絶対インポート」と「相対インポート」のルールを確認し，そのルールが決められた理由を理解して覚えることを目...]]></summary>
        <author>
            <name>ama-c</name>
        </author>
    </entry>
</feed>